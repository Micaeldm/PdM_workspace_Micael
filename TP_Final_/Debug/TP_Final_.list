
TP_Final_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08009db8  08009db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a558  0800a558  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a560  0800a560  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a564  0800a564  0001a564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000380  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000056c  2000056c  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef9b  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cd6  00000000  00000000  0002f1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d68  00000000  00000000  00031ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a33  00000000  00000000  00032c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028b80  00000000  00000000  0003366b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000185d8  00000000  00000000  0005c1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6e5d  00000000  00000000  000747c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000497c  00000000  00000000  0015b620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0015ff9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009da0 	.word	0x08009da0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08009da0 	.word	0x08009da0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <Error_Handler>:
HAL_StatusTypeDef returnValue1;

static void Error_Handler(void);

static void Error_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

	BSP_LED_On(LED1);
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fa57 	bl	80024c8 <BSP_LED_On>
	BSP_LED_On(LED2);
 800101a:	2001      	movs	r0, #1
 800101c:	f001 fa54 	bl	80024c8 <BSP_LED_On>
	BSP_LED_On(LED3);
 8001020:	2002      	movs	r0, #2
 8001022:	f001 fa51 	bl	80024c8 <BSP_LED_On>
	while (1)
 8001026:	e7fe      	b.n	8001026 <Error_Handler+0x16>

08001028 <DelayAHt10>:
}

static void DelayAHt10(uint32_t Delay_ms);

static void DelayAHt10(uint32_t Delay_ms)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay_ms);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f001 fc83 	bl	800293c <HAL_Delay>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <AHT10_Temp>:

float AHT10_Temp()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af02      	add	r7, sp, #8

	/* Convert to Temperature in °C */
	returnValue1 = HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADRESS,
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2303      	movs	r3, #3
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <AHT10_Temp+0xa4>)
 800104e:	2170      	movs	r1, #112	; 0x70
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <AHT10_Temp+0xa8>)
 8001052:	f002 f8ef 	bl	8003234 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <AHT10_Temp+0xac>)
 800105c:	701a      	strb	r2, [r3, #0]
			(uint8_t*) AHT10_Config, sizeof(AHT10_Config), time);
	if (returnValue1 != HAL_OK)
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <AHT10_Temp+0xac>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <AHT10_Temp+0x2a>
	{
		Error_Handler();
 8001066:	f7ff ffd3 	bl	8001010 <Error_Handler>
	}

	DelayAHt10(Delay_100ms);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f7ff ffdc 	bl	8001028 <DelayAHt10>
	HAL_I2C_Master_Receive(&hi2c2, AHT10_ADRESS, (uint8_t*) DATA_RX,
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2306      	movs	r3, #6
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <AHT10_Temp+0xb0>)
 8001078:	2170      	movs	r1, #112	; 0x70
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <AHT10_Temp+0xa8>)
 800107c:	f002 f9d8 	bl	8003430 <HAL_I2C_Master_Receive>
			sizeof(DATA_RX), time);

	AHT10_ADC = (((uint32_t) DATA_RX[3] & dec_15) << shift_16) | ((uint32_t) DATA_RX[4] << shift_8) | DATA_RX[5];
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <AHT10_Temp+0xb0>)
 8001082:	78db      	ldrb	r3, [r3, #3]
 8001084:	461a      	mov	r2, r3
 8001086:	230f      	movs	r3, #15
 8001088:	4013      	ands	r3, r2
 800108a:	2210      	movs	r2, #16
 800108c:	fa03 f202 	lsl.w	r2, r3, r2
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <AHT10_Temp+0xb0>)
 8001092:	791b      	ldrb	r3, [r3, #4]
 8001094:	4619      	mov	r1, r3
 8001096:	2308      	movs	r3, #8
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <AHT10_Temp+0xb0>)
 80010a0:	7952      	ldrb	r2, [r2, #5]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <AHT10_Temp+0xb4>)
 80010a6:	6013      	str	r3, [r2, #0]
	Temperature = (float) (AHT10_ADC * valor200 / valor2exp20) - valor50;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <AHT10_Temp+0xb4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010f8 <AHT10_Temp+0xb8>
 80010b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010bc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80010fc <AHT10_Temp+0xbc>
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001100 <AHT10_Temp+0xc0>
 80010c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <AHT10_Temp+0xc4>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]


	return Temperature;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <AHT10_Temp+0xc4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
}
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000380 	.word	0x20000380
 80010ec:	20000218 	.word	0x20000218
 80010f0:	20000208 	.word	0x20000208
 80010f4:	20000210 	.word	0x20000210
 80010f8:	43480000 	.word	0x43480000
 80010fc:	49800000 	.word	0x49800000
 8001100:	42480000 	.word	0x42480000
 8001104:	20000214 	.word	0x20000214

08001108 <Error_Handler>:
	TEMP_INICIAL, TEMP_BAJA, TEMP_NORMAL, TEMP_ALTA, DEFAULT,
} TEMPState_t;

static void Error_Handler(void);

static void Error_Handler(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
       BSP_LED_On(LED1);
 800110c:	2000      	movs	r0, #0
 800110e:	f001 f9db 	bl	80024c8 <BSP_LED_On>
       BSP_LED_On(LED2);
 8001112:	2001      	movs	r0, #1
 8001114:	f001 f9d8 	bl	80024c8 <BSP_LED_On>
       BSP_LED_On(LED3);
 8001118:	2002      	movs	r0, #2
 800111a:	f001 f9d5 	bl	80024c8 <BSP_LED_On>
	while (1) {
 800111e:	e7fe      	b.n	800111e <Error_Handler+0x16>

08001120 <TEMPFSM_init>:

static TEMPState_t EstadoActual;


void TEMPFSM_init(conf_temp *conf_T)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	if (conf_T == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <TEMPFSM_init+0x12>
		Error_Handler();
 800112e:	f7ff ffeb 	bl	8001108 <Error_Handler>

	EstadoActual = TEMP_INICIAL;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <TEMPFSM_init+0x54>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
	temp_N_min = (conf_T->temp_normal - conf_T->temp_min); //resto la temp normal con la temp min obtengo tolerancia min
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	ed93 7a01 	vldr	s14, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <TEMPFSM_init+0x58>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
	temp_N_max = (conf_T->temp_max - conf_T->temp_normal); //resto la temp maxima con la temp normal obtengo tolerancia max
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a02 	vldr	s14, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a01 	vldr	s15, [r3, #4]
 800115a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <TEMPFSM_init+0x5c>)
 8001160:	edc3 7a00 	vstr	s15, [r3]
	delayInit(&t5, Time_SENSOR);
 8001164:	2164      	movs	r1, #100	; 0x64
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <TEMPFSM_init+0x60>)
 8001168:	f000 fff4 	bl	8002154 <delayInit>

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002ac 	.word	0x200002ac
 8001178:	20000220 	.word	0x20000220
 800117c:	2000021c 	.word	0x2000021c
 8001180:	20000228 	.word	0x20000228

08001184 <TEMPFSM_update>:

void TEMPFSM_update(conf_temp *conf_T)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

	switch (EstadoActual)
 800118c:	4b96      	ldr	r3, [pc, #600]	; (80013e8 <TEMPFSM_update+0x264>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b03      	cmp	r3, #3
 8001192:	f200 81af 	bhi.w	80014f4 <TEMPFSM_update+0x370>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <TEMPFSM_update+0x18>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	08001255 	.word	0x08001255
 80011a4:	0800132b 	.word	0x0800132b
 80011a8:	08001421 	.word	0x08001421
	{

		case TEMP_INICIAL:

			delayRead(&t5);
 80011ac:	488f      	ldr	r0, [pc, #572]	; (80013ec <TEMPFSM_update+0x268>)
 80011ae:	f000 ffe8 	bl	8002182 <delayRead>
			if (AHT10_Temp() < conf_T->temp_min)
 80011b2:	f7ff ff45 	bl	8001040 <AHT10_Temp>
 80011b6:	eeb0 7a40 	vmov.f32	s14, s0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	d505      	bpl.n	80011d6 <TEMPFSM_update+0x52>
				{
					EstadoActual = TEMP_BAJA;
 80011ca:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <TEMPFSM_update+0x264>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
					temp_low_flag = true;
 80011d0:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <TEMPFSM_update+0x26c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
				}

			if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max) && AHT10_Temp() >= (conf_T->temp_normal - temp_N_min))
 80011d6:	f7ff ff33 	bl	8001040 <AHT10_Temp>
 80011da:	eef0 6a40 	vmov.f32	s13, s0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011e4:	4b83      	ldr	r3, [pc, #524]	; (80013f4 <TEMPFSM_update+0x270>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	d819      	bhi.n	800122c <TEMPFSM_update+0xa8>
 80011f8:	f7ff ff22 	bl	8001040 <AHT10_Temp>
 80011fc:	eef0 6a40 	vmov.f32	s13, s0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	ed93 7a01 	vldr	s14, [r3, #4]
 8001206:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <TEMPFSM_update+0x274>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001210:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	db08      	blt.n	800122c <TEMPFSM_update+0xa8>
				{
					EstadoActual = TEMP_NORMAL;
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <TEMPFSM_update+0x264>)
 800121c:	2202      	movs	r2, #2
 800121e:	701a      	strb	r2, [r3, #0]
					temp_high_flag = false;
 8001220:	4b76      	ldr	r3, [pc, #472]	; (80013fc <TEMPFSM_update+0x278>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
					temp_low_flag = false;
 8001226:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <TEMPFSM_update+0x26c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
				}

			if (AHT10_Temp() > conf_T->temp_max)
 800122c:	f7ff ff08 	bl	8001040 <AHT10_Temp>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a02 	vldr	s15, [r3, #8]
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	dc00      	bgt.n	8001246 <TEMPFSM_update+0xc2>
				{
					EstadoActual = TEMP_ALTA;
					temp_high_flag = true;
				}

			break;
 8001244:	e15f      	b.n	8001506 <TEMPFSM_update+0x382>
					EstadoActual = TEMP_ALTA;
 8001246:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <TEMPFSM_update+0x264>)
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
					temp_high_flag = true;
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <TEMPFSM_update+0x278>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
			break;
 8001252:	e158      	b.n	8001506 <TEMPFSM_update+0x382>

		case TEMP_BAJA:

			if (delayRead(&t5))
 8001254:	4865      	ldr	r0, [pc, #404]	; (80013ec <TEMPFSM_update+0x268>)
 8001256:	f000 ff94 	bl	8002182 <delayRead>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 814d 	beq.w	80014fc <TEMPFSM_update+0x378>
				{ // se cumplio los 200 ms

					printf("\033[2JTemp Baja\n"
							"Temp:%0.1f\n", AHT10_Temp());
 8001262:	f7ff feed 	bl	8001040 <AHT10_Temp>
 8001266:	ee10 3a10 	vmov	r3, s0
					printf("\033[2JTemp Baja\n"
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f97c 	bl	8000568 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4862      	ldr	r0, [pc, #392]	; (8001400 <TEMPFSM_update+0x27c>)
 8001276:	f004 ffd7 	bl	8006228 <iprintf>
					sprintf(cadena4, "T:%0.2f", AHT10_Temp());
 800127a:	f7ff fee1 	bl	8001040 <AHT10_Temp>
 800127e:	ee10 3a10 	vmov	r3, s0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f970 	bl	8000568 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	495d      	ldr	r1, [pc, #372]	; (8001404 <TEMPFSM_update+0x280>)
 800128e:	485e      	ldr	r0, [pc, #376]	; (8001408 <TEMPFSM_update+0x284>)
 8001290:	f005 f8e6 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena4, 2, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2102      	movs	r1, #2
 8001298:	485b      	ldr	r0, [pc, #364]	; (8001408 <TEMPFSM_update+0x284>)
 800129a:	f000 faad 	bl	80017f8 <Lcd_Write_String>
					Lcd_Write_String("Temp Baja  ", 3, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2103      	movs	r1, #3
 80012a2:	485a      	ldr	r0, [pc, #360]	; (800140c <TEMPFSM_update+0x288>)
 80012a4:	f000 faa8 	bl	80017f8 <Lcd_Write_String>

					if (AHT10_Temp() < conf_T->temp_min)
 80012a8:	f7ff feca 	bl	8001040 <AHT10_Temp>
 80012ac:	eeb0 7a40 	vmov.f32	s14, s0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d50c      	bpl.n	80012da <TEMPFSM_update+0x156>
						{
							EstadoActual = TEMP_BAJA;
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <TEMPFSM_update+0x264>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
							if (temp_low_flag)
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <TEMPFSM_update+0x26c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <TEMPFSM_update+0x156>
							{
								temp_low_flag = false;
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <TEMPFSM_update+0x26c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
								temp_low = true;
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <TEMPFSM_update+0x28c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
							}
						}
					if (AHT10_Temp() >= (conf_T->temp_normal - temp_N_min))
 80012da:	f7ff feb1 	bl	8001040 <AHT10_Temp>
 80012de:	eef0 6a40 	vmov.f32	s13, s0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012e8:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <TEMPFSM_update+0x274>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	db0f      	blt.n	800131c <TEMPFSM_update+0x198>
						{
							EstadoActual = TEMP_NORMAL;
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <TEMPFSM_update+0x264>)
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
							if (!temp_low_flag)
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <TEMPFSM_update+0x26c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <TEMPFSM_update+0x198>
							{
								temp_low_flag = true;
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <TEMPFSM_update+0x26c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
								temp_low = true;
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <TEMPFSM_update+0x28c>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
							}

						}
					BSP_LED_Off(LED1);
 800131c:	2000      	movs	r0, #0
 800131e:	f001 f8ed 	bl	80024fc <BSP_LED_Off>
					delayRead(&t5);
 8001322:	4832      	ldr	r0, [pc, #200]	; (80013ec <TEMPFSM_update+0x268>)
 8001324:	f000 ff2d 	bl	8002182 <delayRead>
				}
			break;
 8001328:	e0e8      	b.n	80014fc <TEMPFSM_update+0x378>

		case TEMP_NORMAL:

			if (delayRead(&t5))
 800132a:	4830      	ldr	r0, [pc, #192]	; (80013ec <TEMPFSM_update+0x268>)
 800132c:	f000 ff29 	bl	8002182 <delayRead>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80e4 	beq.w	8001500 <TEMPFSM_update+0x37c>
				{ // se cumplio los 40 ms
					printf("\033[2J  Temp Normal\n Temp:%0.1f\n", AHT10_Temp());
 8001338:	f7ff fe82 	bl	8001040 <AHT10_Temp>
 800133c:	ee10 3a10 	vmov	r3, s0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f911 	bl	8000568 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4832      	ldr	r0, [pc, #200]	; (8001414 <TEMPFSM_update+0x290>)
 800134c:	f004 ff6c 	bl	8006228 <iprintf>
					sprintf(cadena7, "T:%0.2f", AHT10_Temp());
 8001350:	f7ff fe76 	bl	8001040 <AHT10_Temp>
 8001354:	ee10 3a10 	vmov	r3, s0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f905 	bl	8000568 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <TEMPFSM_update+0x280>)
 8001364:	482c      	ldr	r0, [pc, #176]	; (8001418 <TEMPFSM_update+0x294>)
 8001366:	f005 f87b 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena7, 2, 1);
 800136a:	2201      	movs	r2, #1
 800136c:	2102      	movs	r1, #2
 800136e:	482a      	ldr	r0, [pc, #168]	; (8001418 <TEMPFSM_update+0x294>)
 8001370:	f000 fa42 	bl	80017f8 <Lcd_Write_String>
					Lcd_Write_String("Temp Normal", 3, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2103      	movs	r1, #3
 8001378:	4828      	ldr	r0, [pc, #160]	; (800141c <TEMPFSM_update+0x298>)
 800137a:	f000 fa3d 	bl	80017f8 <Lcd_Write_String>

					if (AHT10_Temp() > (conf_T->temp_normal + temp_N_max))
 800137e:	f7ff fe5f 	bl	8001040 <AHT10_Temp>
 8001382:	eef0 6a40 	vmov.f32	s13, s0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a01 	vldr	s14, [r3, #4]
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <TEMPFSM_update+0x270>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	eef4 6ae7 	vcmpe.f32	s13, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd05      	ble.n	80013ac <TEMPFSM_update+0x228>
						{
							EstadoActual = TEMP_ALTA;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <TEMPFSM_update+0x264>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	701a      	strb	r2, [r3, #0]
							temp_high_flag = true;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <TEMPFSM_update+0x278>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
						}

					if (AHT10_Temp() < (conf_T->temp_normal - temp_N_min))
 80013ac:	f7ff fe48 	bl	8001040 <AHT10_Temp>
 80013b0:	eef0 6a40 	vmov.f32	s13, s0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <TEMPFSM_update+0x274>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	d505      	bpl.n	80013da <TEMPFSM_update+0x256>
						{
							EstadoActual = TEMP_BAJA;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <TEMPFSM_update+0x264>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
							temp_low_flag = true;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <TEMPFSM_update+0x26c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
						}


					BSP_LED_On(LED1);
 80013da:	2000      	movs	r0, #0
 80013dc:	f001 f874 	bl	80024c8 <BSP_LED_On>

					delayRead(&t5);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TEMPFSM_update+0x268>)
 80013e2:	f000 fece 	bl	8002182 <delayRead>

				}
			break;
 80013e6:	e08b      	b.n	8001500 <TEMPFSM_update+0x37c>
 80013e8:	200002ac 	.word	0x200002ac
 80013ec:	20000228 	.word	0x20000228
 80013f0:	20000227 	.word	0x20000227
 80013f4:	2000021c 	.word	0x2000021c
 80013f8:	20000220 	.word	0x20000220
 80013fc:	20000226 	.word	0x20000226
 8001400:	08009db8 	.word	0x08009db8
 8001404:	08009dd4 	.word	0x08009dd4
 8001408:	20000234 	.word	0x20000234
 800140c:	08009ddc 	.word	0x08009ddc
 8001410:	20000225 	.word	0x20000225
 8001414:	08009de8 	.word	0x08009de8
 8001418:	2000025c 	.word	0x2000025c
 800141c:	08009e08 	.word	0x08009e08

		case TEMP_ALTA:

			if (delayRead(&t5))
 8001420:	483b      	ldr	r0, [pc, #236]	; (8001510 <TEMPFSM_update+0x38c>)
 8001422:	f000 feae 	bl	8002182 <delayRead>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d06b      	beq.n	8001504 <TEMPFSM_update+0x380>
				{
					printf("\033[2JTemp Alta\n"
							"Temp:%0.1f\n", AHT10_Temp());
 800142c:	f7ff fe08 	bl	8001040 <AHT10_Temp>
 8001430:	ee10 3a10 	vmov	r3, s0
					printf("\033[2JTemp Alta\n"
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f897 	bl	8000568 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <TEMPFSM_update+0x390>)
 8001440:	f004 fef2 	bl	8006228 <iprintf>
					sprintf(cadena8, "T:%0.2f", AHT10_Temp());
 8001444:	f7ff fdfc 	bl	8001040 <AHT10_Temp>
 8001448:	ee10 3a10 	vmov	r3, s0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f88b 	bl	8000568 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4930      	ldr	r1, [pc, #192]	; (8001518 <TEMPFSM_update+0x394>)
 8001458:	4830      	ldr	r0, [pc, #192]	; (800151c <TEMPFSM_update+0x398>)
 800145a:	f005 f801 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena8, 2, 1);
 800145e:	2201      	movs	r2, #1
 8001460:	2102      	movs	r1, #2
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <TEMPFSM_update+0x398>)
 8001464:	f000 f9c8 	bl	80017f8 <Lcd_Write_String>
					Lcd_Write_String("Temp Alta  ", 3, 1);
 8001468:	2201      	movs	r2, #1
 800146a:	2103      	movs	r1, #3
 800146c:	482c      	ldr	r0, [pc, #176]	; (8001520 <TEMPFSM_update+0x39c>)
 800146e:	f000 f9c3 	bl	80017f8 <Lcd_Write_String>

					if (AHT10_Temp() > conf_T->temp_max)
 8001472:	f7ff fde5 	bl	8001040 <AHT10_Temp>
 8001476:	eeb0 7a40 	vmov.f32	s14, s0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	dd0c      	ble.n	80014a4 <TEMPFSM_update+0x320>
						{
							EstadoActual = TEMP_ALTA;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <TEMPFSM_update+0x3a0>)
 800148c:	2203      	movs	r2, #3
 800148e:	701a      	strb	r2, [r3, #0]
							if (temp_high_flag)
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <TEMPFSM_update+0x3a4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <TEMPFSM_update+0x320>
							{
								temp_high_flag = false; //porngo en falso y lo vuevolvo a leer en el proximo if para el toggle en la salida
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <TEMPFSM_update+0x3a4>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
								temp_high = true;
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <TEMPFSM_update+0x3a8>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
							}
						}

					if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max))
 80014a4:	f7ff fdcc 	bl	8001040 <AHT10_Temp>
 80014a8:	eef0 6a40 	vmov.f32	s13, s0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <TEMPFSM_update+0x3ac>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	d80f      	bhi.n	80014e6 <TEMPFSM_update+0x362>
						{
							EstadoActual = TEMP_NORMAL;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <TEMPFSM_update+0x3a0>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
							if (!temp_high_flag)
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <TEMPFSM_update+0x3a4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <TEMPFSM_update+0x362>
							{
								temp_high_flag = true;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <TEMPFSM_update+0x3a4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
								temp_high = true;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <TEMPFSM_update+0x3a8>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
							}
						}
					BSP_LED_Off(LED1); //
 80014e6:	2000      	movs	r0, #0
 80014e8:	f001 f808 	bl	80024fc <BSP_LED_Off>
					delayRead(&t5); //tiempo de muestro para obtener datos del AHT10
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <TEMPFSM_update+0x38c>)
 80014ee:	f000 fe48 	bl	8002182 <delayRead>
				}

			break;
 80014f2:	e007      	b.n	8001504 <TEMPFSM_update+0x380>
		default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			TEMPFSM_init(conf_T);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fe13 	bl	8001120 <TEMPFSM_init>

			break;
 80014fa:	e004      	b.n	8001506 <TEMPFSM_update+0x382>
			break;
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <TEMPFSM_update+0x382>
			break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <TEMPFSM_update+0x382>
			break;
 8001504:	bf00      	nop

	}
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000228 	.word	0x20000228
 8001514:	08009e14 	.word	0x08009e14
 8001518:	08009dd4 	.word	0x08009dd4
 800151c:	20000284 	.word	0x20000284
 8001520:	08009e30 	.word	0x08009e30
 8001524:	200002ac 	.word	0x200002ac
 8001528:	20000226 	.word	0x20000226
 800152c:	20000224 	.word	0x20000224
 8001530:	2000021c 	.word	0x2000021c

08001534 <Detecto_TempHigh>:
{
	BSP_LED_Off(LED2);
}

bool_t Detecto_TempHigh()
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

	if (temp_high)
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Detecto_TempHigh+0x24>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <Detecto_TempHigh+0x16>
	{
		temp_high = false;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Detecto_TempHigh+0x24>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
		return true;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <Detecto_TempHigh+0x18>
	}
	else
		return false;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000224 	.word	0x20000224

0800155c <Detecto_TempLow>:

bool_t Detecto_TempLow()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

	if (temp_low)
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <Detecto_TempLow+0x24>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <Detecto_TempLow+0x16>
	{
		temp_low = false;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <Detecto_TempLow+0x24>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		return true;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <Detecto_TempLow+0x18>
	}
	else
		return false;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000225 	.word	0x20000225

08001584 <GPIO_Init>:
#define GPIOB_CLK_EN   		__HAL_RCC_GPIOB_CLK_ENABLE()
#define GPIOE_CLK_EN    	__HAL_RCC_GPIOE_CLK_ENABLE()


void GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStructE = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_E = {0};
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	// __HAL_RCC_GPIOD_CLK_ENABLE();
	// __HAL_RCC_GPIOB_CLK_ENABLE();
	// __HAL_RCC_GPIOE_CLK_ENABLE();
	GPIOD_CLK_EN;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <GPIO_Init+0xc0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a24      	ldr	r2, [pc, #144]	; (8001644 <GPIO_Init+0xc0>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <GPIO_Init+0xc0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
	GPIOB_CLK_EN;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <GPIO_Init+0xc0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <GPIO_Init+0xc0>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <GPIO_Init+0xc0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
	GPIOE_CLK_EN;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <GPIO_Init+0xc0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <GPIO_Init+0xc0>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <GPIO_Init+0xc0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PA1 PA2 */
	GPIO_InitStructE.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;;
 80015fe:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructE.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructE.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
 800160c:	2302      	movs	r3, #2
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(PORT_E , &GPIO_InitStructE);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <GPIO_Init+0xc4>)
 8001618:	f001 fac6 	bl	8002ba8 <HAL_GPIO_Init>

	  GPIO_InitStruct_E.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800161c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001620:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct_E.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct_E.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct_E.Speed = GPIO_SPEED_FAST;
 800162a:	2302      	movs	r3, #2
 800162c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PORT_E , &GPIO_InitStruct_E);
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <GPIO_Init+0xc4>)
 8001636:	f001 fab7 	bl	8002ba8 <HAL_GPIO_Init>
}
 800163a:	bf00      	nop
 800163c:	3738      	adds	r7, #56	; 0x38
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40021000 	.word	0x40021000

0800164c <ButtonGet_1>:

bool_t ButtonGet_1(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)){
	if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_10 ))
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <ButtonGet_1+0x20>)
 8001656:	f001 fc53 	bl	8002f00 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <ButtonGet_1+0x18>
	{
		return true;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <ButtonGet_1+0x1a>
	}


	return false;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <ButtonGet_2>:

bool_t ButtonGet_2(){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))
	if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_12 ))
 8001674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <ButtonGet_2+0x20>)
 800167a:	f001 fc41 	bl	8002f00 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <ButtonGet_2+0x18>
	{
		return true;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <ButtonGet_2+0x1a>
	}


	return false;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <ButtonGet_3>:

bool_t ButtonGet_3(){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14))
	if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_14 ))
 8001698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <ButtonGet_3+0x20>)
 800169e:	f001 fc2f 	bl	8002f00 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <ButtonGet_3+0x18>
	{
		return true;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <ButtonGet_3+0x1a>
	}


	return false;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <ButtonGet_4>:

bool_t ButtonGet_4(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_15))
	if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_15 ))
 80016bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <ButtonGet_4+0x20>)
 80016c2:	f001 fc1d 	bl	8002f00 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <ButtonGet_4+0x18>
	{
		return true;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <ButtonGet_4+0x1a>
	}


	return false;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <Device_Cool>:

void Device_Cool()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORT_E ,PIN_E_11 );
 80016e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <Device_Cool+0x14>)
 80016e6:	f001 fc3c 	bl	8002f62 <HAL_GPIO_TogglePin>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <Device_Heat>:

void Device_Heat()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORT_E ,PIN_E_13 );
 80016f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <Device_Heat+0x14>)
 80016fe:	f001 fc30 	bl	8002f62 <HAL_GPIO_TogglePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <DelayLcd>:


static void DelayLcd(uint32_t Delay_m);

static void DelayLcd(uint32_t Delay_m)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay_m);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 f911 	bl	800293c <HAL_Delay>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <Lcd_Cmd>:



static void Lcd_Cmd(char cmd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	comando = true;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <Lcd_Cmd+0x28>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
	Enviar4bitWrite(cmd, comando);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <Lcd_Cmd+0x28>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f8a1 	bl	8001884 <Enviar4bitWrite>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000003 	.word	0x20000003

08001750 <Lcd_Char>:

static void Lcd_Char(char data)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]

	comando = false;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <Lcd_Char+0x28>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	Enviar4bitWrite(data, comando);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <Lcd_Char+0x28>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f88b 	bl	8001884 <Enviar4bitWrite>

}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000003 	.word	0x20000003

0800177c <Lcd_Init>:

void Lcd_Init(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0


	for (unsigned char i = 0; i < 3; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e008      	b.n	800179a <Lcd_Init+0x1e>
	{
		Lcd_Cmd(inicializa);         //Inicializa
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff ffcb 	bl	8001724 <Lcd_Cmd>
		DelayLcd(Delay_5);
 800178e:	2005      	movs	r0, #5
 8001790:	f7ff ffbc 	bl	800170c <DelayLcd>
	for (unsigned char i = 0; i < 3; i++)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d9f3      	bls.n	8001788 <Lcd_Init+0xc>
	}

	DelayLcd(Delay_60);
 80017a0:	203c      	movs	r0, #60	; 0x3c
 80017a2:	f7ff ffb3 	bl	800170c <DelayLcd>
	Lcd_Cmd(Return_Home); //return home
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7ff ffbc 	bl	8001724 <Lcd_Cmd>
	DelayLcd(Delay_5);
 80017ac:	2005      	movs	r0, #5
 80017ae:	f7ff ffad 	bl	800170c <DelayLcd>
	Lcd_Cmd(Conf_lcd_4bits);  //Configura el LCD a 4 Bits, 2 Lineas Y Fuente de 5*7
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f7ff ffb6 	bl	8001724 <Lcd_Cmd>
	DelayLcd(Delay_1);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffa7 	bl	800170c <DelayLcd>
	Lcd_Cmd(Lcd_On_Cur_OFF); //display ON cursor OFF
 80017be:	200c      	movs	r0, #12
 80017c0:	f7ff ffb0 	bl	8001724 <Lcd_Cmd>
	DelayLcd(Delay_1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff ffa1 	bl	800170c <DelayLcd>
	Lcd_Cmd(Return_1_line); //cursor a primera linea
 80017ca:	2080      	movs	r0, #128	; 0x80
 80017cc:	f7ff ffaa 	bl	8001724 <Lcd_Cmd>
	DelayLcd(Delay_1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff ff9b 	bl	800170c <DelayLcd>
	Lcd_Cmd(Clear_disp); //clear display
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff ffa4 	bl	8001724 <Lcd_Cmd>

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <Lcd_Clear>:

void Lcd_Clear(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	Lcd_Cmd(Clear_disp);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff ff9b 	bl	8001724 <Lcd_Cmd>
	DelayLcd(Delay_2);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7ff ff8c 	bl	800170c <DelayLcd>

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <Lcd_Write_String>:



void Lcd_Write_String(char *str, int fila, int col)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]

	uint8_t address;
	uint8_t vectorf[ Size0 ] = { 0x00, 0x40, 0x14, 0x54 }; //posiciones memoria para cada fila
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <Lcd_Write_String+0x70>)
 8001806:	613b      	str	r3, [r7, #16]

	for (uint8_t i = 0; i < fila; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	75bb      	strb	r3, [r7, #22]
 800180c:	e008      	b.n	8001820 <Lcd_Write_String+0x28>
	{
		address = vectorf[i];
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	3318      	adds	r3, #24
 8001812:	443b      	add	r3, r7
 8001814:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001818:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < fila; i++)
 800181a:	7dbb      	ldrb	r3, [r7, #22]
 800181c:	3301      	adds	r3, #1
 800181e:	75bb      	strb	r3, [r7, #22]
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	dcf2      	bgt.n	800180e <Lcd_Write_String+0x16>
	}

	address = address + (col - 1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	4413      	add	r3, r2
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
	Lcd_Cmd(Set_DDRam | address); //0x80  es del comando set DDRAM bit7=1
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff70 	bl	8001724 <Lcd_Cmd>

	while (*str)
 8001844:	e006      	b.n	8001854 <Lcd_Write_String+0x5c>
		Lcd_Char(*str++);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff7e 	bl	8001750 <Lcd_Char>
	while (*str)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f4      	bne.n	8001846 <Lcd_Write_String+0x4e>
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	54144000 	.word	0x54144000

0800186c <Error_Handler>:


static void Error_Handler(void);

static void Error_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 8001870:	2000      	movs	r0, #0
 8001872:	f000 fe29 	bl	80024c8 <BSP_LED_On>
	BSP_LED_On(LED2);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 fe26 	bl	80024c8 <BSP_LED_On>
	BSP_LED_On(LED3);
 800187c:	2002      	movs	r0, #2
 800187e:	f000 fe23 	bl	80024c8 <BSP_LED_On>
	while (1)
 8001882:	e7fe      	b.n	8001882 <Error_Handler+0x16>

08001884 <Enviar4bitWrite>:
	{
	}
}

void Enviar4bitWrite(char data1, bool comando)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
	uint8_t data_t[Size1];
	char cmd = data1;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	73fb      	strb	r3, [r7, #15]
	char data = data1;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	73bb      	strb	r3, [r7, #14]
	if (comando) //envio comando
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d019      	beq.n	80018d6 <Enviar4bitWrite+0x52>
	{
		data_t[0] = (cmd & _F0) + EN + BL; //EN=1 Bl=1    |0x0C 1
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	f023 030f 	bic.w	r3, r3, #15
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	330c      	adds	r3, #12
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	723b      	strb	r3, [r7, #8]
		data_t[1] = (cmd & _F0) + BL;  //EN=0 Bl=1
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	f023 030f 	bic.w	r3, r3, #15
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3308      	adds	r3, #8
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	727b      	strb	r3, [r7, #9]
		data_t[2] = ((cmd << _4) & _F0) + EN + BL; //EN=1 Bl=1 control=0    |0x0C 1
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	330c      	adds	r3, #12
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	72bb      	strb	r3, [r7, #10]
		data_t[3] = ((cmd << _4) & _F0) + BL; //EN=1 Bl=1 control=0    |0x0C 1
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3308      	adds	r3, #8
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	72fb      	strb	r3, [r7, #11]
	}

	if (!comando) //envio datos
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	f083 0301 	eor.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d019      	beq.n	8001916 <Enviar4bitWrite+0x92>
	{
		data_t[0] = (data & _F0) + EN + BL + W; //EN=1 Bl=1
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	f023 030f 	bic.w	r3, r3, #15
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	330d      	adds	r3, #13
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	723b      	strb	r3, [r7, #8]
		data_t[1] = (data & _F0) + BL + W;  //EN=0 Bl=1
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	f023 030f 	bic.w	r3, r3, #15
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3309      	adds	r3, #9
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	727b      	strb	r3, [r7, #9]
		data_t[2] = ((data << _4) & _F0) + EN + BL + W; //EN=1 Bl=1 W=1 datos
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	b2db      	uxtb	r3, r3
 8001904:	330d      	adds	r3, #13
 8001906:	b2db      	uxtb	r3, r3
 8001908:	72bb      	strb	r3, [r7, #10]
		data_t[3] = ((data << _4) & _F0) + BL + W; //EN=1 Bl=1
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3309      	adds	r3, #9
 8001912:	b2db      	uxtb	r3, r3
 8001914:	72fb      	strb	r3, [r7, #11]
	}

	returnValue = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS,
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2304      	movs	r3, #4
 8001920:	214e      	movs	r1, #78	; 0x4e
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <Enviar4bitWrite+0xc0>)
 8001924:	f001 fc86 	bl	8003234 <HAL_I2C_Master_Transmit>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <Enviar4bitWrite+0xc4>)
 800192e:	701a      	strb	r2, [r3, #0]
			(uint8_t*) data_t, sizeof(Size1), time);
	if (returnValue != HAL_OK)
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <Enviar4bitWrite+0xc4>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <Enviar4bitWrite+0xb8>
	{
		Error_Handler();
 8001938:	f7ff ff98 	bl	800186c <Error_Handler>

	}
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000032c 	.word	0x2000032c
 8001948:	200002ad 	.word	0x200002ad

0800194c <Conf_update>:
	}

}

void Conf_update()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

    uint8_t flag_next = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
    printf("\033[2J");
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <Conf_update+0x108>)
 8001958:	f004 fc66 	bl	8006228 <iprintf>
    printf("\033[2J Temp Min:\n"
 800195c:	483e      	ldr	r0, [pc, #248]	; (8001a58 <Conf_update+0x10c>)
 800195e:	f004 fcc9 	bl	80062f4 <puts>
			"Temp Normal:\n"
			"Temp Max:\n");
    Lcd_Clear();
 8001962:	f7ff ff3f 	bl	80017e4 <Lcd_Clear>
    Lcd_Write_String("Sensor AHT10", 1, 3);
 8001966:	2203      	movs	r2, #3
 8001968:	2101      	movs	r1, #1
 800196a:	483c      	ldr	r0, [pc, #240]	; (8001a5c <Conf_update+0x110>)
 800196c:	f7ff ff44 	bl	80017f8 <Lcd_Write_String>
    Lcd_Write_String("Temp Min:", 2, 1);
 8001970:	2201      	movs	r2, #1
 8001972:	2102      	movs	r1, #2
 8001974:	483a      	ldr	r0, [pc, #232]	; (8001a60 <Conf_update+0x114>)
 8001976:	f7ff ff3f 	bl	80017f8 <Lcd_Write_String>
    Lcd_Write_String("Temp Normal:", 3, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	2103      	movs	r1, #3
 800197e:	4839      	ldr	r0, [pc, #228]	; (8001a64 <Conf_update+0x118>)
 8001980:	f7ff ff3a 	bl	80017f8 <Lcd_Write_String>
    Lcd_Write_String("Temp Max:", 4, 1);
 8001984:	2201      	movs	r2, #1
 8001986:	2104      	movs	r1, #4
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <Conf_update+0x11c>)
 800198a:	f7ff ff35 	bl	80017f8 <Lcd_Write_String>

    do {

	switch (ESTADO) {
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <Conf_update+0x120>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d850      	bhi.n	8001a38 <Conf_update+0xec>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <Conf_update+0x50>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019c5 	.word	0x080019c5
 80019a4:	080019d9 	.word	0x080019d9
 80019a8:	080019e9 	.word	0x080019e9

	case CONF_TEMPMIN:
	    flag_next = flag1; //para configurar temperatura minima
 80019ac:	2301      	movs	r3, #1
 80019ae:	71fb      	strb	r3, [r7, #7]

	    conf_temperatura(flag_next);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f862 	bl	8001a7c <conf_temperatura>

	    flag_next = flag2; //para configurar temperatura normal
 80019b8:	2302      	movs	r3, #2
 80019ba:	71fb      	strb	r3, [r7, #7]

	    ESTADO = CONF_TEMPNORMAL;
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <Conf_update+0x120>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]

	    break;
 80019c2:	e03d      	b.n	8001a40 <Conf_update+0xf4>

	case CONF_TEMPNORMAL:

	    conf_temperatura(flag_next);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f858 	bl	8001a7c <conf_temperatura>

	    flag_next = flag3; //para configurar temperatura maxima
 80019cc:	2303      	movs	r3, #3
 80019ce:	71fb      	strb	r3, [r7, #7]

	    ESTADO = CONF_TEMPMAX;
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <Conf_update+0x120>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]

	    break;
 80019d6:	e033      	b.n	8001a40 <Conf_update+0xf4>

	case CONF_TEMPMAX:
	    conf_temperatura(flag_next);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f84e 	bl	8001a7c <conf_temperatura>

	    ESTADO = SALIDA;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <Conf_update+0x120>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	701a      	strb	r2, [r3, #0]

	    break;
 80019e6:	e02b      	b.n	8001a40 <Conf_update+0xf4>

	case SALIDA:
	    if (conf_T.temp_normal > conf_T.temp_min && conf_T.temp_normal < conf_T.temp_max)
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <Conf_update+0x124>)
 80019ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <Conf_update+0x124>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	dd15      	ble.n	8001a2a <Conf_update+0xde>
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <Conf_update+0x124>)
 8001a00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <Conf_update+0x124>)
 8001a06:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d50a      	bpl.n	8001a2a <Conf_update+0xde>
			{
				flag = false;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <Conf_update+0x128>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
				Lcd_Clear();
 8001a1a:	f7ff fee3 	bl	80017e4 <Lcd_Clear>
				Lcd_Write_String("Sensor AHT10", 1, 3);
 8001a1e:	2203      	movs	r2, #3
 8001a20:	2101      	movs	r1, #1
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <Conf_update+0x110>)
 8001a24:	f7ff fee8 	bl	80017f8 <Lcd_Write_String>
	    else
			{
			printf("\033[2J Error!! vuelva a ingresar los datos nuevamente Temp Min < Temp Normal < Temp Max\n");
			ESTADO = CONF_TEMPMIN;
			}
	    break;
 8001a28:	e00a      	b.n	8001a40 <Conf_update+0xf4>
			printf("\033[2J Error!! vuelva a ingresar los datos nuevamente Temp Min < Temp Normal < Temp Max\n");
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <Conf_update+0x12c>)
 8001a2c:	f004 fc62 	bl	80062f4 <puts>
			ESTADO = CONF_TEMPMIN;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <Conf_update+0x120>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	    break;
 8001a36:	e003      	b.n	8001a40 <Conf_update+0xf4>
	default:
	    //Si algo modificó la variable estadoActual
	    // a un estado no válido llevo la MEF a un
	    // lugar seguro, por ejemplo, la reinicio:
	    //controlDeErrores();
	    ESTADO = CONF_TEMPMIN;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <Conf_update+0x120>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

	    break;
 8001a3e:	bf00      	nop

	}

    }

    while (flag == true);
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <Conf_update+0x128>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1a2      	bne.n	800198e <Conf_update+0x42>
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08009f38 	.word	0x08009f38
 8001a58:	08009f40 	.word	0x08009f40
 8001a5c:	08009f28 	.word	0x08009f28
 8001a60:	08009f68 	.word	0x08009f68
 8001a64:	08009f74 	.word	0x08009f74
 8001a68:	08009f84 	.word	0x08009f84
 8001a6c:	200002ae 	.word	0x200002ae
 8001a70:	200002b0 	.word	0x200002b0
 8001a74:	20000004 	.word	0x20000004
 8001a78:	08009f90 	.word	0x08009f90

08001a7c <conf_temperatura>:

static void conf_temperatura(uint8_t flag) {
 8001a7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af04      	add	r7, sp, #16
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]

    do {
	debounceFSM_update();
 8001a88:	f000 fa3e 	bl	8001f08 <debounceFSM_update>

	if (readKey_Up())
 8001a8c:	f000 fb20 	bl	80020d0 <readKey_Up>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80f3 	beq.w	8001c7e <conf_temperatura+0x202>
	    {

			if (flag == flag1)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d14c      	bne.n	8001b3a <conf_temperatura+0xbe>
			{

				if (conf_T.temp_min >= tempmin && conf_T.temp_min < tempmax)
 8001aa0:	4bb7      	ldr	r3, [pc, #732]	; (8001d80 <conf_temperatura+0x304>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	db44      	blt.n	8001b3a <conf_temperatura+0xbe>
 8001ab0:	4bb3      	ldr	r3, [pc, #716]	; (8001d80 <conf_temperatura+0x304>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001d84 <conf_temperatura+0x308>
 8001aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	d53a      	bpl.n	8001b3a <conf_temperatura+0xbe>
					{
						conf_T.temp_min = conf_T.temp_min + res_temp; //numero entero + resolucion
 8001ac4:	4bae      	ldr	r3, [pc, #696]	; (8001d80 <conf_temperatura+0x304>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad2:	4bab      	ldr	r3, [pc, #684]	; (8001d80 <conf_temperatura+0x304>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
						printf("\033[2J");
 8001ad8:	48ab      	ldr	r0, [pc, #684]	; (8001d88 <conf_temperatura+0x30c>)
 8001ada:	f004 fba5 	bl	8006228 <iprintf>
						printf("\033[2JTemp Min:%0.1f <--\n"
								"Temp Normal:%0.1f\n"
								"Temp Max:%0.1f\n", conf_T.temp_min,
 8001ade:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <conf_temperatura+0x304>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
						printf("\033[2JTemp Min:%0.1f <--\n"
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd40 	bl	8000568 <__aeabi_f2d>
 8001ae8:	4680      	mov	r8, r0
 8001aea:	4689      	mov	r9, r1
								conf_T.temp_normal, conf_T.temp_max);
 8001aec:	4ba4      	ldr	r3, [pc, #656]	; (8001d80 <conf_temperatura+0x304>)
 8001aee:	685b      	ldr	r3, [r3, #4]
						printf("\033[2JTemp Min:%0.1f <--\n"
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd39 	bl	8000568 <__aeabi_f2d>
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
								conf_T.temp_normal, conf_T.temp_max);
 8001afa:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <conf_temperatura+0x304>)
 8001afc:	689b      	ldr	r3, [r3, #8]
						printf("\033[2JTemp Min:%0.1f <--\n"
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd32 	bl	8000568 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b0c:	e9cd 4500 	strd	r4, r5, [sp]
 8001b10:	4642      	mov	r2, r8
 8001b12:	464b      	mov	r3, r9
 8001b14:	489d      	ldr	r0, [pc, #628]	; (8001d8c <conf_temperatura+0x310>)
 8001b16:	f004 fb87 	bl	8006228 <iprintf>
						sprintf(cadena1, "Temp Min:%0.1f", conf_T.temp_min);
 8001b1a:	4b99      	ldr	r3, [pc, #612]	; (8001d80 <conf_temperatura+0x304>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd22 	bl	8000568 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4999      	ldr	r1, [pc, #612]	; (8001d90 <conf_temperatura+0x314>)
 8001b2a:	489a      	ldr	r0, [pc, #616]	; (8001d94 <conf_temperatura+0x318>)
 8001b2c:	f004 fc98 	bl	8006460 <siprintf>
						Lcd_Write_String(cadena1, 2, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4897      	ldr	r0, [pc, #604]	; (8001d94 <conf_temperatura+0x318>)
 8001b36:	f7ff fe5f 	bl	80017f8 <Lcd_Write_String>

					}

			}

			if (flag == flag2)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d14c      	bne.n	8001bdc <conf_temperatura+0x160>
			{
				if (conf_T.temp_normal >= tempmin && conf_T.temp_normal < tempmax)
 8001b42:	4b8f      	ldr	r3, [pc, #572]	; (8001d80 <conf_temperatura+0x304>)
 8001b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	db44      	blt.n	8001bdc <conf_temperatura+0x160>
 8001b52:	4b8b      	ldr	r3, [pc, #556]	; (8001d80 <conf_temperatura+0x304>)
 8001b54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b58:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001d84 <conf_temperatura+0x308>
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	d53a      	bpl.n	8001bdc <conf_temperatura+0x160>
					{
					conf_T.temp_normal = conf_T.temp_normal + res_temp;
 8001b66:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <conf_temperatura+0x304>)
 8001b68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <conf_temperatura+0x304>)
 8001b76:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 8001b7a:	4883      	ldr	r0, [pc, #524]	; (8001d88 <conf_temperatura+0x30c>)
 8001b7c:	f004 fb54 	bl	8006228 <iprintf>
					printf("\033[2JTemp Min:%0.1f \n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001b80:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <conf_temperatura+0x304>)
 8001b82:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f \n"
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcef 	bl	8000568 <__aeabi_f2d>
 8001b8a:	4680      	mov	r8, r0
 8001b8c:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <conf_temperatura+0x304>)
 8001b90:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f \n"
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fce8 	bl	8000568 <__aeabi_f2d>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <conf_temperatura+0x304>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f \n"
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fce1 	bl	8000568 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bae:	e9cd 4500 	strd	r4, r5, [sp]
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4878      	ldr	r0, [pc, #480]	; (8001d98 <conf_temperatura+0x31c>)
 8001bb8:	f004 fb36 	bl	8006228 <iprintf>
					sprintf(cadena2, "Temp Normal:%0.1f", conf_T.temp_normal);
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <conf_temperatura+0x304>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcd1 	bl	8000568 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4974      	ldr	r1, [pc, #464]	; (8001d9c <conf_temperatura+0x320>)
 8001bcc:	4874      	ldr	r0, [pc, #464]	; (8001da0 <conf_temperatura+0x324>)
 8001bce:	f004 fc47 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena2, 3, 1);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	4872      	ldr	r0, [pc, #456]	; (8001da0 <conf_temperatura+0x324>)
 8001bd8:	f7ff fe0e 	bl	80017f8 <Lcd_Write_String>

					}
			}

			if (flag == flag3)
 8001bdc:	2203      	movs	r2, #3
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d14c      	bne.n	8001c7e <conf_temperatura+0x202>
				{
				if (conf_T.temp_max >= tempmin && conf_T.temp_max < tempmax)
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <conf_temperatura+0x304>)
 8001be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	db44      	blt.n	8001c7e <conf_temperatura+0x202>
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <conf_temperatura+0x304>)
 8001bf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfa:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001d84 <conf_temperatura+0x308>
 8001bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	d53a      	bpl.n	8001c7e <conf_temperatura+0x202>
					{
					conf_T.temp_max = conf_T.temp_max + res_temp;
 8001c08:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <conf_temperatura+0x304>)
 8001c0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <conf_temperatura+0x304>)
 8001c18:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 8001c1c:	485a      	ldr	r0, [pc, #360]	; (8001d88 <conf_temperatura+0x30c>)
 8001c1e:	f004 fb03 	bl	8006228 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <conf_temperatura+0x304>)
 8001c24:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc9e 	bl	8000568 <__aeabi_f2d>
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <conf_temperatura+0x304>)
 8001c32:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc97 	bl	8000568 <__aeabi_f2d>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <conf_temperatura+0x304>)
 8001c40:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc90 	bl	8000568 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c50:	e9cd 4500 	strd	r4, r5, [sp]
 8001c54:	4642      	mov	r2, r8
 8001c56:	464b      	mov	r3, r9
 8001c58:	4852      	ldr	r0, [pc, #328]	; (8001da4 <conf_temperatura+0x328>)
 8001c5a:	f004 fae5 	bl	8006228 <iprintf>
					sprintf(cadena3, "Temp Max:%0.1f", conf_T.temp_max);
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <conf_temperatura+0x304>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc80 	bl	8000568 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	494e      	ldr	r1, [pc, #312]	; (8001da8 <conf_temperatura+0x32c>)
 8001c6e:	484f      	ldr	r0, [pc, #316]	; (8001dac <conf_temperatura+0x330>)
 8001c70:	f004 fbf6 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena3, 4, 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2104      	movs	r1, #4
 8001c78:	484c      	ldr	r0, [pc, #304]	; (8001dac <conf_temperatura+0x330>)
 8001c7a:	f7ff fdbd 	bl	80017f8 <Lcd_Write_String>
					}
				}

	    }

	if (readKey_Down())
 8001c7e:	f000 fa3b 	bl	80020f8 <readKey_Down>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 810e 	beq.w	8001ea6 <conf_temperatura+0x42a>
	    {

	    	if (flag == flag1)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d14c      	bne.n	8001d2c <conf_temperatura+0x2b0>
	    	{
	    		if (conf_T.temp_min > tempmin && conf_T.temp_min <= tempmax)
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <conf_temperatura+0x304>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	dd44      	ble.n	8001d2c <conf_temperatura+0x2b0>
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <conf_temperatura+0x304>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d84 <conf_temperatura+0x308>
 8001cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	d83a      	bhi.n	8001d2c <conf_temperatura+0x2b0>
	    		{
					conf_T.temp_min = conf_T.temp_min - res_temp;
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <conf_temperatura+0x304>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <conf_temperatura+0x304>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
					printf("\033[2J");
 8001cca:	482f      	ldr	r0, [pc, #188]	; (8001d88 <conf_temperatura+0x30c>)
 8001ccc:	f004 faac 	bl	8006228 <iprintf>
					printf("\033[2JTemp Min:%0.1f <--\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <conf_temperatura+0x304>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc47 	bl	8000568 <__aeabi_f2d>
 8001cda:	4680      	mov	r8, r0
 8001cdc:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <conf_temperatura+0x304>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc40 	bl	8000568 <__aeabi_f2d>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <conf_temperatura+0x304>)
 8001cee:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc39 	bl	8000568 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cfe:	e9cd 4500 	strd	r4, r5, [sp]
 8001d02:	4642      	mov	r2, r8
 8001d04:	464b      	mov	r3, r9
 8001d06:	482a      	ldr	r0, [pc, #168]	; (8001db0 <conf_temperatura+0x334>)
 8001d08:	f004 fa8e 	bl	8006228 <iprintf>
					sprintf(cadena1, "Temp Min:%0.1f", conf_T.temp_min);
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <conf_temperatura+0x304>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc29 	bl	8000568 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	491d      	ldr	r1, [pc, #116]	; (8001d90 <conf_temperatura+0x314>)
 8001d1c:	481d      	ldr	r0, [pc, #116]	; (8001d94 <conf_temperatura+0x318>)
 8001d1e:	f004 fb9f 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena1, 2, 1);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2102      	movs	r1, #2
 8001d26:	481b      	ldr	r0, [pc, #108]	; (8001d94 <conf_temperatura+0x318>)
 8001d28:	f7ff fd66 	bl	80017f8 <Lcd_Write_String>

	    		}
	    	}

	    	if (flag == flag2)
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d167      	bne.n	8001e04 <conf_temperatura+0x388>
	    	{
	    		if (conf_T.temp_normal > tempmin && conf_T.temp_normal <= tempmax)
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <conf_temperatura+0x304>)
 8001d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	dd5f      	ble.n	8001e04 <conf_temperatura+0x388>
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <conf_temperatura+0x304>)
 8001d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d4a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d84 <conf_temperatura+0x308>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d855      	bhi.n	8001e04 <conf_temperatura+0x388>
	    		{
					conf_T.temp_normal = conf_T.temp_normal - res_temp;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <conf_temperatura+0x304>)
 8001d5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <conf_temperatura+0x304>)
 8001d68:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 8001d6c:	4806      	ldr	r0, [pc, #24]	; (8001d88 <conf_temperatura+0x30c>)
 8001d6e:	f004 fa5b 	bl	8006228 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001d72:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <conf_temperatura+0x304>)
 8001d74:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbf6 	bl	8000568 <__aeabi_f2d>
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	e019      	b.n	8001db4 <conf_temperatura+0x338>
 8001d80:	200002b0 	.word	0x200002b0
 8001d84:	42200000 	.word	0x42200000
 8001d88:	08009f38 	.word	0x08009f38
 8001d8c:	08009fe8 	.word	0x08009fe8
 8001d90:	08009ef4 	.word	0x08009ef4
 8001d94:	200002bc 	.word	0x200002bc
 8001d98:	0800a024 	.word	0x0800a024
 8001d9c:	08009f04 	.word	0x08009f04
 8001da0:	200002dc 	.word	0x200002dc
 8001da4:	0800a060 	.word	0x0800a060
 8001da8:	08009f18 	.word	0x08009f18
 8001dac:	200002fc 	.word	0x200002fc
 8001db0:	0800a098 	.word	0x0800a098
 8001db4:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <conf_temperatura+0x448>)
 8001db8:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbd4 	bl	8000568 <__aeabi_f2d>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <conf_temperatura+0x448>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbcd 	bl	8000568 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dd6:	e9cd 4500 	strd	r4, r5, [sp]
 8001dda:	4642      	mov	r2, r8
 8001ddc:	464b      	mov	r3, r9
 8001dde:	483a      	ldr	r0, [pc, #232]	; (8001ec8 <conf_temperatura+0x44c>)
 8001de0:	f004 fa22 	bl	8006228 <iprintf>
					sprintf(cadena2, "Temp Normal:%0.1f", conf_T.temp_normal);
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <conf_temperatura+0x448>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbbd 	bl	8000568 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <conf_temperatura+0x450>)
 8001df4:	4836      	ldr	r0, [pc, #216]	; (8001ed0 <conf_temperatura+0x454>)
 8001df6:	f004 fb33 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena2, 3, 1);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	4834      	ldr	r0, [pc, #208]	; (8001ed0 <conf_temperatura+0x454>)
 8001e00:	f7ff fcfa 	bl	80017f8 <Lcd_Write_String>
	    		}
	    	}

	    	if (flag == flag3)
 8001e04:	2203      	movs	r2, #3
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d14c      	bne.n	8001ea6 <conf_temperatura+0x42a>
	    	{
	    		if (conf_T.temp_max > tempmin && conf_T.temp_max <= tempmax)
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <conf_temperatura+0x448>)
 8001e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	dd44      	ble.n	8001ea6 <conf_temperatura+0x42a>
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <conf_temperatura+0x448>)
 8001e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e22:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ed4 <conf_temperatura+0x458>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	d83a      	bhi.n	8001ea6 <conf_temperatura+0x42a>
	    		{
					conf_T.temp_max = conf_T.temp_max - res_temp;
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <conf_temperatura+0x448>)
 8001e32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <conf_temperatura+0x448>)
 8001e40:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 8001e44:	4824      	ldr	r0, [pc, #144]	; (8001ed8 <conf_temperatura+0x45c>)
 8001e46:	f004 f9ef 	bl	8006228 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <conf_temperatura+0x448>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb8a 	bl	8000568 <__aeabi_f2d>
 8001e54:	4680      	mov	r8, r0
 8001e56:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <conf_temperatura+0x448>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb83 	bl	8000568 <__aeabi_f2d>
 8001e62:	4604      	mov	r4, r0
 8001e64:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <conf_temperatura+0x448>)
 8001e68:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb7c 	bl	8000568 <__aeabi_f2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e78:	e9cd 4500 	strd	r4, r5, [sp]
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	464b      	mov	r3, r9
 8001e80:	4816      	ldr	r0, [pc, #88]	; (8001edc <conf_temperatura+0x460>)
 8001e82:	f004 f9d1 	bl	8006228 <iprintf>
					sprintf(cadena3, "Temp Max:%0.1f", conf_T.temp_max);
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <conf_temperatura+0x448>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb6c 	bl	8000568 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4912      	ldr	r1, [pc, #72]	; (8001ee0 <conf_temperatura+0x464>)
 8001e96:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <conf_temperatura+0x468>)
 8001e98:	f004 fae2 	bl	8006460 <siprintf>
					Lcd_Write_String(cadena3, 4, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <conf_temperatura+0x468>)
 8001ea2:	f7ff fca9 	bl	80017f8 <Lcd_Write_String>
	    		}
	    	}

	    }

    } while (!readKey_enter());
 8001ea6:	f000 f93b 	bl	8002120 <readKey_enter>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ade8 	bne.w	8001a88 <conf_temperatura+0xc>

}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ec4:	200002b0 	.word	0x200002b0
 8001ec8:	0800a0d4 	.word	0x0800a0d4
 8001ecc:	08009f04 	.word	0x08009f04
 8001ed0:	200002dc 	.word	0x200002dc
 8001ed4:	42200000 	.word	0x42200000
 8001ed8:	08009f38 	.word	0x08009f38
 8001edc:	0800a060 	.word	0x0800a060
 8001ee0:	08009f18 	.word	0x08009f18
 8001ee4:	200002fc 	.word	0x200002fc

08001ee8 <debounceFSM_init>:
static debounceState_t EstadoActual;
static bool_t btnPress; //boton presionado
static bool_t btnPress1; //boton presionado
static bool_t btnPress2; //boton presionado

void debounceFSM_init() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	EstadoActual = BUTTON_UP;
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <debounceFSM_init+0x18>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
	delayInit(&t1, Time_AntiRebote);
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	4803      	ldr	r0, [pc, #12]	; (8001f04 <debounceFSM_init+0x1c>)
 8001ef6:	f000 f92d 	bl	8002154 <delayInit>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000328 	.word	0x20000328
 8001f04:	2000031c 	.word	0x2000031c

08001f08 <debounceFSM_update>:

void debounceFSM_update() {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

	switch (EstadoActual) {
 8001f0c:	4b64      	ldr	r3, [pc, #400]	; (80020a0 <debounceFSM_update+0x198>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	f200 80bb 	bhi.w	800208c <debounceFSM_update+0x184>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <debounceFSM_update+0x14>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f65 	.word	0x08001f65
 8001f24:	08001fdf 	.word	0x08001fdf
 8001f28:	0800202d 	.word	0x0800202d

	case BUTTON_UP:

		if ((ButtonGet_1() || ButtonGet_2() || ButtonGet_3() || ButtonGet_4())) //presiono el boton
 8001f2c:	f7ff fb8e 	bl	800164c <ButtonGet_1>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <debounceFSM_update+0x4e>
 8001f36:	f7ff fb9b 	bl	8001670 <ButtonGet_2>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <debounceFSM_update+0x4e>
 8001f40:	f7ff fba8 	bl	8001694 <ButtonGet_3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <debounceFSM_update+0x4e>
 8001f4a:	f7ff fbb5 	bl	80016b8 <ButtonGet_4>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 809e 	beq.w	8002092 <debounceFSM_update+0x18a>
		{
			delayRead(&t1);
 8001f56:	4853      	ldr	r0, [pc, #332]	; (80020a4 <debounceFSM_update+0x19c>)
 8001f58:	f000 f913 	bl	8002182 <delayRead>
			EstadoActual = BUTTON_FALLING;
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <debounceFSM_update+0x198>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f62:	e096      	b.n	8002092 <debounceFSM_update+0x18a>

	case BUTTON_FALLING:

		if (delayRead(&t1)) { // se cumplio los 40 ms
 8001f64:	484f      	ldr	r0, [pc, #316]	; (80020a4 <debounceFSM_update+0x19c>)
 8001f66:	f000 f90c 	bl	8002182 <delayRead>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8092 	beq.w	8002096 <debounceFSM_update+0x18e>
			if ((ButtonGet_1() || ButtonGet_2() || ButtonGet_3() || ButtonGet_4()))
 8001f72:	f7ff fb6b 	bl	800164c <ButtonGet_1>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <debounceFSM_update+0x92>
 8001f7c:	f7ff fb78 	bl	8001670 <ButtonGet_2>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <debounceFSM_update+0x92>
 8001f86:	f7ff fb85 	bl	8001694 <ButtonGet_3>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <debounceFSM_update+0x92>
 8001f90:	f7ff fb92 	bl	80016b8 <ButtonGet_4>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01d      	beq.n	8001fd6 <debounceFSM_update+0xce>
			{
				buttonPressed();
 8001f9a:	f000 f88b 	bl	80020b4 <buttonPressed>
				if (ButtonGet_1())
 8001f9e:	f7ff fb55 	bl	800164c <ButtonGet_1>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <debounceFSM_update+0xa6>
				{
					btnPress = true;
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <debounceFSM_update+0x1a0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_2())
 8001fae:	f7ff fb5f 	bl	8001670 <ButtonGet_2>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <debounceFSM_update+0xb6>
				{
					btnPress1 = true;
 8001fb8:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <debounceFSM_update+0x1a4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_3())
 8001fbe:	f7ff fb69 	bl	8001694 <ButtonGet_3>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <debounceFSM_update+0xc6>
				{
					btnPress2 = true;
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <debounceFSM_update+0x1a8>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
				}

				EstadoActual = BUTTON_DOWN;
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <debounceFSM_update+0x198>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	701a      	strb	r2, [r3, #0]
			}
			else {
				EstadoActual = BUTTON_UP;
			}
		}
		break;
 8001fd4:	e05f      	b.n	8002096 <debounceFSM_update+0x18e>
				EstadoActual = BUTTON_UP;
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <debounceFSM_update+0x198>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
		break;
 8001fdc:	e05b      	b.n	8002096 <debounceFSM_update+0x18e>

	case BUTTON_DOWN:
		if (!(  ButtonGet_1() || ButtonGet_2()|| ButtonGet_3() || ButtonGet_4()))
 8001fde:	f7ff fb35 	bl	800164c <ButtonGet_1>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d055      	beq.n	800209a <debounceFSM_update+0x192>
 8001fee:	f7ff fb3f 	bl	8001670 <ButtonGet_2>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04d      	beq.n	800209a <debounceFSM_update+0x192>
 8001ffe:	f7ff fb49 	bl	8001694 <ButtonGet_3>
 8002002:	4603      	mov	r3, r0
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d045      	beq.n	800209a <debounceFSM_update+0x192>
 800200e:	f7ff fb53 	bl	80016b8 <ButtonGet_4>
 8002012:	4603      	mov	r3, r0
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03d      	beq.n	800209a <debounceFSM_update+0x192>
		{ // el pulsador esta en estado bajo

			delayRead(&t1); //comienza el timer
 800201e:	4821      	ldr	r0, [pc, #132]	; (80020a4 <debounceFSM_update+0x19c>)
 8002020:	f000 f8af 	bl	8002182 <delayRead>

			EstadoActual = BUTTON_RAISING;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <debounceFSM_update+0x198>)
 8002026:	2203      	movs	r2, #3
 8002028:	701a      	strb	r2, [r3, #0]
		}

		//delayWrite(&t1, Time_AntiRebote);
		break;
 800202a:	e036      	b.n	800209a <debounceFSM_update+0x192>
	case BUTTON_RAISING:

		if (delayRead(&t1))
 800202c:	481d      	ldr	r0, [pc, #116]	; (80020a4 <debounceFSM_update+0x19c>)
 800202e:	f000 f8a8 	bl	8002182 <delayRead>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <debounceFSM_update+0x194>
		{
			if (!(ButtonGet_1() || ButtonGet_2()|| ButtonGet_3() || ButtonGet_4()))
 8002038:	f7ff fb08 	bl	800164c <ButtonGet_1>
 800203c:	4603      	mov	r3, r0
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01d      	beq.n	8002084 <debounceFSM_update+0x17c>
 8002048:	f7ff fb12 	bl	8001670 <ButtonGet_2>
 800204c:	4603      	mov	r3, r0
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <debounceFSM_update+0x17c>
 8002058:	f7ff fb1c 	bl	8001694 <ButtonGet_3>
 800205c:	4603      	mov	r3, r0
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <debounceFSM_update+0x17c>
 8002068:	f7ff fb26 	bl	80016b8 <ButtonGet_4>
 800206c:	4603      	mov	r3, r0
 800206e:	f083 0301 	eor.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <debounceFSM_update+0x17c>
			{

				buttonReleased();
 8002078:	f000 f823 	bl	80020c2 <buttonReleased>

				EstadoActual = BUTTON_UP;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <debounceFSM_update+0x198>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
			}
			else
				EstadoActual = BUTTON_DOWN;

			break;
 8002082:	e00b      	b.n	800209c <debounceFSM_update+0x194>
				EstadoActual = BUTTON_DOWN;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <debounceFSM_update+0x198>)
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
			break;
 800208a:	e007      	b.n	800209c <debounceFSM_update+0x194>
	default:
		//Si algo modificó la variable estadoActual
		// a un estado no válido llevo la MEF a un
		// lugar seguro, por ejemplo, la reinicio:
		//controlDeErrores();
		debounceFSM_init();
 800208c:	f7ff ff2c 	bl	8001ee8 <debounceFSM_init>

		break;
 8002090:	e004      	b.n	800209c <debounceFSM_update+0x194>
		break;
 8002092:	bf00      	nop
 8002094:	e002      	b.n	800209c <debounceFSM_update+0x194>
		break;
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <debounceFSM_update+0x194>
		break;
 800209a:	bf00      	nop

		}
	}

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000328 	.word	0x20000328
 80020a4:	2000031c 	.word	0x2000031c
 80020a8:	20000329 	.word	0x20000329
 80020ac:	2000032a 	.word	0x2000032a
 80020b0:	2000032b 	.word	0x2000032b

080020b4 <buttonPressed>:

void buttonPressed()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

	BSP_LED_On(LED1);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 fa05 	bl	80024c8 <BSP_LED_On>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <buttonReleased>:

void buttonReleased()
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fa18 	bl	80024fc <BSP_LED_Off>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <readKey_Up>:

bool_t readKey_Up()
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

	if (btnPress) {
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <readKey_Up+0x24>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <readKey_Up+0x16>
		btnPress = false;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <readKey_Up+0x24>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
		return true;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <readKey_Up+0x18>
	} else
		return false;
 80020e6:	2300      	movs	r3, #0

}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000329 	.word	0x20000329

080020f8 <readKey_Down>:

bool_t readKey_Down()
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

	if (btnPress1) {
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <readKey_Down+0x24>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <readKey_Down+0x16>
		btnPress1 = false;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <readKey_Down+0x24>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
		return true;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <readKey_Down+0x18>
	} else
		return false;
 800210e:	2300      	movs	r3, #0

}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000032a 	.word	0x2000032a

08002120 <readKey_enter>:

bool_t readKey_enter()
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

	if (btnPress2) {
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <readKey_enter+0x24>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <readKey_enter+0x16>
		btnPress2 = false;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <readKey_enter+0x24>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
		return true;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <readKey_enter+0x18>
	} else
		return false;
 8002136:	2300      	movs	r3, #0

}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000032b 	.word	0x2000032b

08002148 <Error_Handler>:
#include <API_delay.h>

static void Error_Handler(void);

static void Error_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 800214c:	2000      	movs	r0, #0
 800214e:	f000 f9bb 	bl	80024c8 <BSP_LED_On>
	while (1)
 8002152:	e7fe      	b.n	8002152 <Error_Handler+0xa>

08002154 <delayInit>:
	}
}



void delayInit(delay_t *delay, tick_t duration) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

	/* Initializatio ERROR*/
	if(delay==NULL || duration==0)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <delayInit+0x16>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <delayInit+0x1a>
		Error_Handler();
 800216a:	f7ff ffed 	bl	8002148 <Error_Handler>

	delay->duration = duration;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	721a      	strb	r2, [r3, #8]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]

	tick_t diff=0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]

	/* Initializatio ERROR*/
	if(delay==NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <delayRead+0x16>
		Error_Handler();
 8002194:	f7ff ffd8 	bl	8002148 <Error_Handler>


	if(!delay->running)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7a1b      	ldrb	r3, [r3, #8]
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <delayRead+0x34>
	{

		delay->startTime=HAL_GetTick(); //se asigna el valor cada 1mms
 80021a6:	f000 fbbd 	bl	8002924 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	721a      	strb	r2, [r3, #8]

		// return false;
	}

	diff=(HAL_GetTick() - delay->startTime);
 80021b6:	f000 fbb5 	bl	8002924 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	60fb      	str	r3, [r7, #12]

	if (diff>= delay->duration)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d304      	bcc.n	80021d8 <delayRead+0x56>
	{

		delay->running = false;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	721a      	strb	r2, [r3, #8]

		return true;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <delayRead+0x58>
	}
	else
		return false;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <Error_Handler>:
I2C_HandleTypeDef hi2c2;
#define Clock_100khz   100000
static void Error_Handler(void);

static void Error_Handler(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 f96e 	bl	80024c8 <BSP_LED_On>
  while (1)
 80021ec:	e7fe      	b.n	80021ec <Error_Handler+0xa>
	...

080021f0 <I2C_Init>:
}


/* I2C1 init function */
void I2C_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
	/* I2C1 clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE(); //IMPORTANTE
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <I2C_Init+0x164>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <I2C_Init+0x164>)
 8002220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <I2C_Init+0x164>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_I2C2_CLK_ENABLE(); //IMPORTANTE
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <I2C_Init+0x164>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a46      	ldr	r2, [pc, #280]	; (8002354 <I2C_Init+0x164>)
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <I2C_Init+0x164>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();//IMPORTANTE
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <I2C_Init+0x164>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a3f      	ldr	r2, [pc, #252]	; (8002354 <I2C_Init+0x164>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <I2C_Init+0x164>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <I2C_Init+0x168>)
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <I2C_Init+0x16c>)
 800226e:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = Clock_100khz;
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <I2C_Init+0x168>)
 8002272:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <I2C_Init+0x170>)
 8002274:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <I2C_Init+0x168>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <I2C_Init+0x168>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <I2C_Init+0x168>)
 8002284:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002288:	611a      	str	r2, [r3, #16]

	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <I2C_Init+0x168>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <I2C_Init+0x168>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <I2C_Init+0x168>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <I2C_Init+0x168>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c1);
 80022a2:	482d      	ldr	r0, [pc, #180]	; (8002358 <I2C_Init+0x168>)
 80022a4:	f000 fe78 	bl	8002f98 <HAL_I2C_Init>
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022a8:	482b      	ldr	r0, [pc, #172]	; (8002358 <I2C_Init+0x168>)
 80022aa:	f000 fe75 	bl	8002f98 <HAL_I2C_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <I2C_Init+0xc8>
	{
		Error_Handler();
 80022b4:	f7ff ff95 	bl	80021e2 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9; //lcd
 80022b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ca:	2304      	movs	r3, #4
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4823      	ldr	r0, [pc, #140]	; (8002364 <I2C_Init+0x174>)
 80022d6:	f000 fc67 	bl	8002ba8 <HAL_GPIO_Init>




	/* USER CODE END I2C1_Init 1 */
	hi2c2.Instance = I2C2;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <I2C_Init+0x178>)
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <I2C_Init+0x17c>)
 80022de:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = Clock_100khz ;
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <I2C_Init+0x178>)
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <I2C_Init+0x170>)
 80022e4:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <I2C_Init+0x178>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <I2C_Init+0x178>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <I2C_Init+0x178>)
 80022f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <I2C_Init+0x178>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <I2C_Init+0x178>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <I2C_Init+0x178>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <I2C_Init+0x178>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c2);
 8002312:	4815      	ldr	r0, [pc, #84]	; (8002368 <I2C_Init+0x178>)
 8002314:	f000 fe40 	bl	8002f98 <HAL_I2C_Init>
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002318:	4813      	ldr	r0, [pc, #76]	; (8002368 <I2C_Init+0x178>)
 800231a:	f000 fe3d 	bl	8002f98 <HAL_I2C_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_Init+0x138>
	{
		Error_Handler();
 8002324:	f7ff ff5d 	bl	80021e2 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

	GPIO_InitStruct2.Pin = GPIO_PIN_10|GPIO_PIN_11; //aht10
 8002328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct2.Mode = GPIO_MODE_AF_OD;
 800232e:	2312      	movs	r3, #18
 8002330:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct2.Alternate = GPIO_AF4_I2C2;
 800233a:	2304      	movs	r3, #4
 800233c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <I2C_Init+0x174>)
 8002346:	f000 fc2f 	bl	8002ba8 <HAL_GPIO_Init>

}
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	2000032c 	.word	0x2000032c
 800235c:	40005400 	.word	0x40005400
 8002360:	000186a0 	.word	0x000186a0
 8002364:	40020400 	.word	0x40020400
 8002368:	20000380 	.word	0x20000380
 800236c:	40005800 	.word	0x40005800

08002370 <uartInit>:
 {
 }
 }*/

/* Inicializa la uart, devuelve un true si fue exitoso o un false si hubo un error */
bool_t uartInit() {
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance = USARTx;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <uartInit+0x50>)
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <uartInit+0x54>)
 8002378:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = BAUDRATE
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <uartInit+0x50>)
 800237c:	f242 3228 	movw	r2, #9000	; 0x2328
 8002380:	605a      	str	r2, [r3, #4]
	;
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <uartInit+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <uartInit+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <uartInit+0x50>)
 8002390:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002394:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <uartInit+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <uartInit+0x50>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <uartInit+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <uartInit+0x50>)
 80023aa:	f002 fad7 	bl	800495c <HAL_UART_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <uartInit+0x48>
		/* Initialization Error */
		return false;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <uartInit+0x4a>
	}

	return true;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003d4 	.word	0x200003d4
 80023c4:	40004800 	.word	0x40004800

080023c8 <__io_putchar>:

void uartReceiveStringSize(uint8_t *pstring, uint16_t size) {
	HAL_UART_Receive(&UartHandle, pstring, size, 0xFFFF);
}

PUTCHAR_PROTOTYPE {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) &ch, 1, 0xFFFF);
 80023d0:	1d39      	adds	r1, r7, #4
 80023d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d6:	2201      	movs	r2, #1
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <__io_putchar+0x20>)
 80023da:	f002 fb0c 	bl	80049f6 <HAL_UART_Transmit>

	return ch;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200003d4 	.word	0x200003d4

080023ec <__io_getchar>:

GETCHAR_PROTOTYPE {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&UartHandle);
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <__io_getchar+0x38>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <__io_getchar+0x38>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&UartHandle, (uint8_t*) &ch, 1, 0xFFFF);
 800240c:	1df9      	adds	r1, r7, #7
 800240e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002412:	2201      	movs	r2, #1
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <__io_getchar+0x38>)
 8002416:	f002 fb80 	bl	8004b1a <HAL_UART_Receive>
	return ch;
 800241a:	79fb      	ldrb	r3, [r7, #7]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200003d4 	.word	0x200003d4

08002428 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10e      	bne.n	8002456 <BSP_LED_Init+0x2e>
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <BSP_LED_Init+0x94>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <BSP_LED_Init+0x94>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <BSP_LED_Init+0x94>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	e00d      	b.n	8002472 <BSP_LED_Init+0x4a>
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <BSP_LED_Init+0x94>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <BSP_LED_Init+0x94>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <BSP_LED_Init+0x94>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <BSP_LED_Init+0x98>)
 8002476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <BSP_LED_Init+0x9c>)
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	f107 0214 	add.w	r2, r7, #20
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fb86 	bl	8002ba8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <BSP_LED_Init+0x9c>)
 80024a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <BSP_LED_Init+0x98>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	2200      	movs	r2, #0
 80024ae:	4619      	mov	r1, r3
 80024b0:	f000 fd3e 	bl	8002f30 <HAL_GPIO_WritePin>
}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	0800a110 	.word	0x0800a110
 80024c4:	20000008 	.word	0x20000008

080024c8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <BSP_LED_On+0x2c>)
 80024d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <BSP_LED_On+0x30>)
 80024de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4619      	mov	r1, r3
 80024e6:	f000 fd23 	bl	8002f30 <HAL_GPIO_WritePin>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	0800a110 	.word	0x0800a110

080024fc <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <BSP_LED_Off+0x2c>)
 800250a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <BSP_LED_Off+0x30>)
 8002512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002516:	2200      	movs	r2, #0
 8002518:	4619      	mov	r1, r3
 800251a:	f000 fd09 	bl	8002f30 <HAL_GPIO_WritePin>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008
 800252c:	0800a110 	.word	0x0800a110

08002530 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <BSP_LED_Toggle+0x2c>)
 800253e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4906      	ldr	r1, [pc, #24]	; (8002560 <BSP_LED_Toggle+0x30>)
 8002546:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 fd08 	bl	8002f62 <HAL_GPIO_TogglePin>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008
 8002560:	0800a110 	.word	0x0800a110

08002564 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	460a      	mov	r2, r1
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <BSP_PB_Init+0xa4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a22      	ldr	r2, [pc, #136]	; (8002608 <BSP_PB_Init+0xa4>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <BSP_PB_Init+0xa4>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d112      	bne.n	80025bc <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025a0:	2302      	movs	r3, #2
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <BSP_PB_Init+0xa8>)
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 faf6 	bl	8002ba8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11d      	bne.n	80025fe <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80025c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80025cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <BSP_PB_Init+0xa8>)
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fae1 	bl	8002ba8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80025e6:	2328      	movs	r3, #40	; 0x28
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	2200      	movs	r2, #0
 80025ec:	210f      	movs	r1, #15
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 faa3 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80025f4:	2328      	movs	r3, #40	; 0x28
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 faba 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  }
}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	20000014 	.word	0x20000014

08002610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <SystemInit+0x60>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <SystemInit+0x60>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <SystemInit+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <SystemInit+0x64>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <SystemInit+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <SystemInit+0x64>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <SystemInit+0x64>)
 800263c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <SystemInit+0x64>)
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <SystemInit+0x68>)
 800264a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <SystemInit+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <SystemInit+0x64>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SystemInit+0x60>)
 8002660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002664:	609a      	str	r2, [r3, #8]
#endif
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	40023800 	.word	0x40023800
 8002678:	24003010 	.word	0x24003010

0800267c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002694:	e7fe      	b.n	8002694 <MemManage_Handler+0x4>

08002696 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800269a:	e7fe      	b.n	800269a <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80026d0:	f000 f914 	bl	80028fc <HAL_IncTick>
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	return 1;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_kill>:

int _kill(int pid, int sig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026f2:	f003 ffff 	bl	80066f4 <__errno>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2216      	movs	r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
	return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_exit>:

void _exit (int status)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ffe7 	bl	80026e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800271a:	e7fe      	b.n	800271a <_exit+0x12>

0800271c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e00a      	b.n	8002744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800272e:	f7ff fe5d 	bl	80023ec <__io_getchar>
 8002732:	4601      	mov	r1, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	60ba      	str	r2, [r7, #8]
 800273a:	b2ca      	uxtb	r2, r1
 800273c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf0      	blt.n	800272e <_read+0x12>
	}

return len;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e009      	b.n	800277c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	60ba      	str	r2, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe29 	bl	80023c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf1      	blt.n	8002768 <_write+0x12>
	}
	return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_close>:

int _close(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	return -1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	605a      	str	r2, [r3, #4]
	return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_isatty>:

int _isatty(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return 1;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	return 0;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002828:	f003 ff64 	bl	80066f4 <__errno>
 800282c:	4603      	mov	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <_sbrk+0x64>)
 8002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20030000 	.word	0x20030000
 8002858:	00000400 	.word	0x00000400
 800285c:	20000418 	.word	0x20000418
 8002860:	20000570 	.word	0x20000570

08002864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_Init+0x34>)
 800286e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002872:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x34>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x34>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f94f 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	200f      	movs	r0, #15
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f001 fb76 	bl	8003f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f967 	bl	8002b8e <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	f000 f92f 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000018 	.word	0x20000018
 80028f4:	20000020 	.word	0x20000020
 80028f8:	2000001c 	.word	0x2000001c

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000020 	.word	0x20000020
 8002920:	2000041c 	.word	0x2000041c

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	2000041c 	.word	0x2000041c

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000020 	.word	0x20000020

08002984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <__NVIC_EnableIRQ+0x38>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	; (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	; 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff29 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff3e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff31 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e177      	b.n	8002eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8166 	bne.w	8002eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80c0 	beq.w	8002eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_GPIO_Init+0x32c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d037      	beq.n	8002de6 <HAL_GPIO_Init+0x23e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a57      	ldr	r2, [pc, #348]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d031      	beq.n	8002de2 <HAL_GPIO_Init+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a56      	ldr	r2, [pc, #344]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02b      	beq.n	8002dde <HAL_GPIO_Init+0x236>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a55      	ldr	r2, [pc, #340]	; (8002ee0 <HAL_GPIO_Init+0x338>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d025      	beq.n	8002dda <HAL_GPIO_Init+0x232>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_GPIO_Init+0x33c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <HAL_GPIO_Init+0x22e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a53      	ldr	r2, [pc, #332]	; (8002ee8 <HAL_GPIO_Init+0x340>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d019      	beq.n	8002dd2 <HAL_GPIO_Init+0x22a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x344>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_GPIO_Init+0x348>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_GPIO_Init+0x34c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	e012      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	e010      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	e00e      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dca:	2307      	movs	r3, #7
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2a:	4a34      	ldr	r2, [pc, #208]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e54:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae84 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40022400 	.word	0x40022400
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e001      	b.n	8002f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f40:	787b      	ldrb	r3, [r7, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f4c:	e003      	b.n	8002f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	619a      	str	r2, [r3, #24]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f74:	887a      	ldrh	r2, [r7, #2]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	041a      	lsls	r2, r3, #16
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	400b      	ands	r3, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f92e 	bl	8003220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 fc86 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	; (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	; (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	; (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	; (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	; (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	817b      	strh	r3, [r7, #10]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff fb6c 	bl	8002924 <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 80e0 	bne.w	800341c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2319      	movs	r3, #25
 8003262:	2201      	movs	r2, #1
 8003264:	4970      	ldr	r1, [pc, #448]	; (8003428 <HAL_I2C_Master_Transmit+0x1f4>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fc58 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	e0d3      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_I2C_Master_Transmit+0x50>
 8003280:	2302      	movs	r3, #2
 8003282:	e0cc      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d007      	beq.n	80032aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2210      	movs	r2, #16
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	893a      	ldrh	r2, [r7, #8]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_I2C_Master_Transmit+0x1f8>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fac2 	bl	800387c <I2C_MasterRequestWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e08d      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003318:	e066      	b.n	80033e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fcd2 	bl	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b04      	cmp	r3, #4
 8003330:	d107      	bne.n	8003342 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_I2C_Master_Transmit+0x188>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	6a39      	ldr	r1, [r7, #32]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fcc2 	bl	8003d4a <I2C_WaitOnBTFFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01a      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d194      	bne.n	800331a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000

08003430 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
 8003440:	4613      	mov	r3, r2
 8003442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff fa6e 	bl	8002924 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 820b 	bne.w	800386e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	497c      	ldr	r1, [pc, #496]	; (8003654 <HAL_I2C_Master_Receive+0x224>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb5a 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e1fe      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_Master_Receive+0x50>
 800347c:	2302      	movs	r3, #2
 800347e:	e1f7      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d007      	beq.n	80034a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2222      	movs	r2, #34	; 0x22
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2210      	movs	r2, #16
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a5c      	ldr	r2, [pc, #368]	; (8003658 <HAL_I2C_Master_Receive+0x228>)
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fa46 	bl	8003980 <I2C_MasterRequestRead>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1b8      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e18c      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11b      	bne.n	800356e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e16c      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11b      	bne.n	80035ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	e14c      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035d4:	e138      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	2b03      	cmp	r3, #3
 80035dc:	f200 80f1 	bhi.w	80037c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d123      	bne.n	8003630 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fbed 	bl	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e139      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800362e:	e10b      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	d14e      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	2200      	movs	r2, #0
 8003640:	4906      	ldr	r1, [pc, #24]	; (800365c <HAL_I2C_Master_Receive+0x22c>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa6a 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e10e      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
 8003652:	bf00      	nop
 8003654:	00100002 	.word	0x00100002
 8003658:	ffff0000 	.word	0xffff0000
 800365c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036d4:	e0b8      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2200      	movs	r2, #0
 80036de:	4966      	ldr	r1, [pc, #408]	; (8003878 <HAL_I2C_Master_Receive+0x448>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa1b 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0bf      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	2200      	movs	r2, #0
 800373a:	494f      	ldr	r1, [pc, #316]	; (8003878 <HAL_I2C_Master_Receive+0x448>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f9ed 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e091      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c0:	e042      	b.n	8003848 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fb00 	bl	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e04c      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d118      	bne.n	8003848 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f aec2 	bne.w	80035d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	00010004 	.word	0x00010004

0800387c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	460b      	mov	r3, r1
 800388a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d006      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d003      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e00b      	b.n	80038d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d107      	bne.n	80038d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f91d 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d103      	bne.n	8003900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e035      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390c:	d108      	bne.n	8003920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e01b      	b.n	8003958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	11db      	asrs	r3, r3, #7
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f063 030f 	orn	r3, r3, #15
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <I2C_MasterRequestWrite+0xfc>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f943 	bl	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e010      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <I2C_MasterRequestWrite+0x100>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f933 	bl	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010008 	.word	0x00010008
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	460b      	mov	r3, r1
 800398e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d006      	beq.n	80039ba <I2C_MasterRequestRead+0x3a>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d003      	beq.n	80039ba <I2C_MasterRequestRead+0x3a>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b8:	d108      	bne.n	80039cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e00b      	b.n	80039e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	2b11      	cmp	r3, #17
 80039d2:	d107      	bne.n	80039e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f893 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0a:	d103      	bne.n	8003a14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e079      	b.n	8003b0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a20:	d108      	bne.n	8003a34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	e05f      	b.n	8003af4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	11db      	asrs	r3, r3, #7
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 0306 	and.w	r3, r3, #6
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f063 030f 	orn	r3, r3, #15
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4930      	ldr	r1, [pc, #192]	; (8003b14 <I2C_MasterRequestRead+0x194>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f8b9 	bl	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e054      	b.n	8003b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4929      	ldr	r1, [pc, #164]	; (8003b18 <I2C_MasterRequestRead+0x198>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f8a9 	bl	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e044      	b.n	8003b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f831 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d103      	bne.n	8003ad8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e017      	b.n	8003b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	11db      	asrs	r3, r3, #7
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0306 	and.w	r3, r3, #6
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f063 030e 	orn	r3, r3, #14
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4907      	ldr	r1, [pc, #28]	; (8003b18 <I2C_MasterRequestRead+0x198>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f865 	bl	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	00010008 	.word	0x00010008
 8003b18:	00010002 	.word	0x00010002

08003b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b2c:	e025      	b.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d021      	beq.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fe fef5 	bl	8002924 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e023      	b.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10d      	bne.n	8003ba0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	e00c      	b.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d0b6      	beq.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd8:	e051      	b.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	d123      	bne.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e046      	b.n	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c38:	d021      	beq.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fe fe73 	bl	8002924 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e020      	b.n	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10c      	bne.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e00b      	b.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d18d      	bne.n	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd4:	e02d      	b.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f8ce 	bl	8003e78 <I2C_IsAcknowledgeFailed>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e02d      	b.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cec:	d021      	beq.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fe fe19 	bl	8002924 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e007      	b.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d1ca      	bne.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d56:	e02d      	b.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f88d 	bl	8003e78 <I2C_IsAcknowledgeFailed>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e02d      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6e:	d021      	beq.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d70:	f7fe fdd8 	bl	8002924 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d302      	bcc.n	8003d86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e007      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d1ca      	bne.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd8:	e042      	b.n	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d119      	bne.n	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0210 	mvn.w	r2, #16
 8003df0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e029      	b.n	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1c:	f7fe fd82 	bl	8002924 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d116      	bne.n	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e007      	b.n	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d1b5      	bne.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d11b      	bne.n	8003ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_UART_MspInit+0x9c>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8003f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f42:	2303      	movs	r3, #3
 8003f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003f46:	2307      	movs	r3, #7
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4809      	ldr	r0, [pc, #36]	; (8003f78 <HAL_UART_MspInit+0xa0>)
 8003f52:	f7fe fe29 	bl	8002ba8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8003f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	4804      	ldr	r0, [pc, #16]	; (8003f78 <HAL_UART_MspInit+0xa0>)
 8003f68:	f7fe fe1e 	bl	8002ba8 <HAL_GPIO_Init>
}
 8003f6c:	bf00      	nop
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020c00 	.word	0x40020c00

08003f7c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0

}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_PWREx_EnableOverDrive+0x90>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a1f      	ldr	r2, [pc, #124]	; (800401c <HAL_PWREx_EnableOverDrive+0x90>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_PWREx_EnableOverDrive+0x90>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_PWREx_EnableOverDrive+0x94>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7fe fcb4 	bl	8002924 <HAL_GetTick>
 8003fbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fbe:	e009      	b.n	8003fd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fc0:	f7fe fcb0 	bl	8002924 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fce:	d901      	bls.n	8003fd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e01f      	b.n	8004014 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d1ee      	bne.n	8003fc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe8:	f7fe fc9c 	bl	8002924 <HAL_GetTick>
 8003fec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fee:	e009      	b.n	8004004 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ff0:	f7fe fc98 	bl	8002924 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ffe:	d901      	bls.n	8004004 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e007      	b.n	8004014 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <HAL_PWREx_EnableOverDrive+0x98>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004010:	d1ee      	bne.n	8003ff0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	420e0040 	.word	0x420e0040
 8004024:	40007000 	.word	0x40007000
 8004028:	420e0044 	.word	0x420e0044

0800402c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e267      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404a:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b85      	ldr	r3, [pc, #532]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b82      	ldr	r3, [pc, #520]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b7e      	ldr	r3, [pc, #504]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e242      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b76      	ldr	r3, [pc, #472]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a75      	ldr	r2, [pc, #468]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b70      	ldr	r3, [pc, #448]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6f      	ldr	r2, [pc, #444]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6c      	ldr	r2, [pc, #432]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b69      	ldr	r3, [pc, #420]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a65      	ldr	r2, [pc, #404]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fe fc1e 	bl	8002924 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fe fc1a 	bl	8002924 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e207      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fe fc0a 	bl	8002924 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fe fc06 	bl	8002924 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1f3      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1c7      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4937      	ldr	r1, [pc, #220]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e03a      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCC_OscConfig+0x244>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fe fbbf 	bl	8002924 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fe fbbb 	bl	8002924 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1a8      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4925      	ldr	r1, [pc, #148]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_OscConfig+0x244>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fb9e 	bl	8002924 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fe fb9a 	bl	8002924 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e187      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b1b      	ldr	r3, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d036      	beq.n	8004284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_RCC_OscConfig+0x248>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fe fb7e 	bl	8002924 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422c:	f7fe fb7a 	bl	8002924 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e167      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
 800424a:	e01b      	b.n	8004284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_OscConfig+0x248>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fe fb67 	bl	8002924 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	e00e      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425a:	f7fe fb63 	bl	8002924 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d907      	bls.n	8004278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e150      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800426c:	40023800 	.word	0x40023800
 8004270:	42470000 	.word	0x42470000
 8004274:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800427a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ea      	bne.n	800425a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8097 	beq.w	80043c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b7d      	ldr	r3, [pc, #500]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a7c      	ldr	r2, [pc, #496]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	4b77      	ldr	r3, [pc, #476]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d118      	bne.n	8004300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ce:	4b74      	ldr	r3, [pc, #464]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a73      	ldr	r2, [pc, #460]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042da:	f7fe fb23 	bl	8002924 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fe fb1f 	bl	8002924 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e10c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x2ea>
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a63      	ldr	r2, [pc, #396]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	e01c      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x30c>
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a5e      	ldr	r2, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a57      	ldr	r2, [pc, #348]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	4b55      	ldr	r3, [pc, #340]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a54      	ldr	r2, [pc, #336]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0304 	bic.w	r3, r3, #4
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fe fae4 	bl	8002924 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fe fae0 	bl	8002924 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0cb      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ee      	beq.n	8004360 <HAL_RCC_OscConfig+0x334>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004384:	f7fe face 	bl	8002924 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fe faca 	bl	8002924 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0b5      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1ee      	bne.n	800438c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	4a38      	ldr	r2, [pc, #224]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a1 	beq.w	800450c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d05c      	beq.n	8004490 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d141      	bne.n	8004462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe fa9e 	bl	8002924 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fe fa9a 	bl	8002924 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e087      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	491b      	ldr	r1, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fa73 	bl	8002924 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fa6f 	bl	8002924 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e05c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x416>
 8004460:	e054      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fa5c 	bl	8002924 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe fa58 	bl	8002924 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e045      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x444>
 800448e:	e03d      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e038      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x4ec>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d028      	beq.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d121      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cc      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d90c      	bls.n	8004558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0b8      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004570:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800457a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004588:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a52      	ldr	r2, [pc, #328]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	494d      	ldr	r1, [pc, #308]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d044      	beq.n	800463c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d003      	beq.n	80045da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e067      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4934      	ldr	r1, [pc, #208]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460c:	f7fe f98a 	bl	8002924 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fe f986 	bl	8002924 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d20c      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e032      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4916      	ldr	r1, [pc, #88]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	490e      	ldr	r1, [pc, #56]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a2:	f000 f821 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490a      	ldr	r1, [pc, #40]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe f8ea 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	0800a118 	.word	0x0800a118
 80046e0:	20000018 	.word	0x20000018
 80046e4:	2000001c 	.word	0x2000001c

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b094      	sub	sp, #80	; 0x50
 80046ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	647b      	str	r3, [r7, #68]	; 0x44
 80046f4:	2300      	movs	r3, #0
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	2300      	movs	r3, #0
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004700:	4b79      	ldr	r3, [pc, #484]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d00d      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x40>
 800470c:	2b08      	cmp	r3, #8
 800470e:	f200 80e1 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x34>
 8004716:	2b04      	cmp	r3, #4
 8004718:	d003      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x3a>
 800471a:	e0db      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800471c:	4b73      	ldr	r3, [pc, #460]	; (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 800471e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004720:	e0db      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004722:	4b73      	ldr	r3, [pc, #460]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004726:	e0d8      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004728:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004732:	4b6d      	ldr	r3, [pc, #436]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d063      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	2200      	movs	r2, #0
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
 8004748:	63fa      	str	r2, [r7, #60]	; 0x3c
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
 8004756:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476c:	0150      	lsls	r0, r2, #5
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4621      	mov	r1, r4
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	6139      	str	r1, [r7, #16]
 8004778:	4629      	mov	r1, r5
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	018b      	lsls	r3, r1, #6
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004796:	4651      	mov	r1, sl
 8004798:	018a      	lsls	r2, r1, #6
 800479a:	4651      	mov	r1, sl
 800479c:	ebb2 0801 	subs.w	r8, r2, r1
 80047a0:	4659      	mov	r1, fp
 80047a2:	eb63 0901 	sbc.w	r9, r3, r1
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ba:	4690      	mov	r8, r2
 80047bc:	4699      	mov	r9, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	eb18 0303 	adds.w	r3, r8, r3
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	462b      	mov	r3, r5
 80047c8:	eb49 0303 	adc.w	r3, r9, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047da:	4629      	mov	r1, r5
 80047dc:	024b      	lsls	r3, r1, #9
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e4:	4621      	mov	r1, r4
 80047e6:	024a      	lsls	r2, r1, #9
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ee:	2200      	movs	r2, #0
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f8:	f7fc fa56 	bl	8000ca8 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004804:	e058      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	4618      	mov	r0, r3
 8004810:	4611      	mov	r1, r2
 8004812:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	0159      	lsls	r1, r3, #5
 800482e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004832:	0150      	lsls	r0, r2, #5
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4641      	mov	r1, r8
 800483a:	ebb2 0a01 	subs.w	sl, r2, r1
 800483e:	4649      	mov	r1, r9
 8004840:	eb63 0b01 	sbc.w	fp, r3, r1
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004858:	ebb2 040a 	subs.w	r4, r2, sl
 800485c:	eb63 050b 	sbc.w	r5, r3, fp
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	464b      	mov	r3, r9
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800488e:	4629      	mov	r1, r5
 8004890:	028b      	lsls	r3, r1, #10
 8004892:	4621      	mov	r1, r4
 8004894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004898:	4621      	mov	r1, r4
 800489a:	028a      	lsls	r2, r1, #10
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	2200      	movs	r2, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	61fa      	str	r2, [r7, #28]
 80048a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ac:	f7fc f9fc 	bl	8000ca8 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4613      	mov	r3, r2
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3750      	adds	r7, #80	; 0x50
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	007a1200 	.word	0x007a1200

080048f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_RCC_GetHCLKFreq+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000018 	.word	0x20000018

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004910:	f7ff fff0 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0a9b      	lsrs	r3, r3, #10
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	0800a128 	.word	0x0800a128

08004934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004938:	f7ff ffdc 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0b5b      	lsrs	r3, r3, #13
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	0800a128 	.word	0x0800a128

0800495c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e03f      	b.n	80049ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff faa8 	bl	8003ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800499e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9cb 	bl	8004d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b08a      	sub	sp, #40	; 0x28
 80049fa:	af02      	add	r7, sp, #8
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d17c      	bne.n	8004b10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_UART_Transmit+0x2c>
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e075      	b.n	8004b12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_UART_Transmit+0x3e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e06e      	b.n	8004b12 <HAL_UART_Transmit+0x11c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2221      	movs	r2, #33	; 0x21
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a4a:	f7fd ff6b 	bl	8002924 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	d108      	bne.n	8004a78 <HAL_UART_Transmit+0x82>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	e003      	b.n	8004a80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a88:	e02a      	b.n	8004ae0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f8e2 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e036      	b.n	8004b12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	3302      	adds	r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e007      	b.n	8004ad2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1cf      	bne.n	8004a8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2140      	movs	r1, #64	; 0x40
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f8b2 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e006      	b.n	8004b12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b08a      	sub	sp, #40	; 0x28
 8004b1e:	af02      	add	r7, sp, #8
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	f040 808c 	bne.w	8004c54 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Receive+0x2e>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e084      	b.n	8004c56 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Receive+0x40>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e07d      	b.n	8004c56 <HAL_UART_Receive+0x13c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2222      	movs	r2, #34	; 0x22
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fd fed5 	bl	8002924 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b90:	d108      	bne.n	8004ba4 <HAL_UART_Receive+0x8a>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bb4:	e043      	b.n	8004c3e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f84c 	bl	8004c5e <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e042      	b.n	8004c56 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	3302      	adds	r3, #2
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e01f      	b.n	8004c30 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d007      	beq.n	8004c0a <HAL_UART_Receive+0xf0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_UART_Receive+0xfe>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e008      	b.n	8004c2a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1b6      	bne.n	8004bb6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e000      	b.n	8004c56 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
  }
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b090      	sub	sp, #64	; 0x40
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6e:	e050      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c76:	d04c      	beq.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c7e:	f7fd fe51 	bl	8002924 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d241      	bcs.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cae:	637a      	str	r2, [r7, #52]	; 0x34
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ce2:	623a      	str	r2, [r7, #32]
 8004ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e00f      	b.n	8004d32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d09f      	beq.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3740      	adds	r7, #64	; 0x40
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d40:	b0c0      	sub	sp, #256	; 0x100
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	68d9      	ldr	r1, [r3, #12]
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	ea40 0301 	orr.w	r3, r0, r1
 8004d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d94:	f021 010c 	bic.w	r1, r1, #12
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004da2:	430b      	orrs	r3, r1
 8004da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	6999      	ldr	r1, [r3, #24]
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	ea40 0301 	orr.w	r3, r0, r1
 8004dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b8f      	ldr	r3, [pc, #572]	; (8005008 <UART_SetConfig+0x2cc>)
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d005      	beq.n	8004ddc <UART_SetConfig+0xa0>
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b8d      	ldr	r3, [pc, #564]	; (800500c <UART_SetConfig+0x2d0>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d104      	bne.n	8004de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7ff fdaa 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8004de0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004de4:	e003      	b.n	8004dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004de6:	f7ff fd91 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8004dea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df8:	f040 810c 	bne.w	8005014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e16:	415b      	adcs	r3, r3
 8004e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e1e:	4621      	mov	r1, r4
 8004e20:	eb12 0801 	adds.w	r8, r2, r1
 8004e24:	4629      	mov	r1, r5
 8004e26:	eb43 0901 	adc.w	r9, r3, r1
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb18 0303 	adds.w	r3, r8, r3
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	eb49 0303 	adc.w	r3, r9, r3
 8004e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	18db      	adds	r3, r3, r3
 8004e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e70:	4613      	mov	r3, r2
 8004e72:	eb42 0303 	adc.w	r3, r2, r3
 8004e76:	657b      	str	r3, [r7, #84]	; 0x54
 8004e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e80:	f7fb ff12 	bl	8000ca8 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4b61      	ldr	r3, [pc, #388]	; (8005010 <UART_SetConfig+0x2d4>)
 8004e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	011c      	lsls	r4, r3, #4
 8004e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	1891      	adds	r1, r2, r2
 8004eaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004eac:	415b      	adcs	r3, r3
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004eba:	4649      	mov	r1, r9
 8004ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ed4:	4692      	mov	sl, r2
 8004ed6:	469b      	mov	fp, r3
 8004ed8:	4643      	mov	r3, r8
 8004eda:	eb1a 0303 	adds.w	r3, sl, r3
 8004ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f00:	460b      	mov	r3, r1
 8004f02:	18db      	adds	r3, r3, r3
 8004f04:	643b      	str	r3, [r7, #64]	; 0x40
 8004f06:	4613      	mov	r3, r2
 8004f08:	eb42 0303 	adc.w	r3, r2, r3
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f16:	f7fb fec7 	bl	8000ca8 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <UART_SetConfig+0x2d4>)
 8004f22:	fba3 2301 	umull	r2, r3, r3, r1
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2264      	movs	r2, #100	; 0x64
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	1acb      	subs	r3, r1, r3
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f36:	4b36      	ldr	r3, [pc, #216]	; (8005010 <UART_SetConfig+0x2d4>)
 8004f38:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f44:	441c      	add	r4, r3
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f60:	415b      	adcs	r3, r3
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f68:	4641      	mov	r1, r8
 8004f6a:	1851      	adds	r1, r2, r1
 8004f6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f6e:	4649      	mov	r1, r9
 8004f70:	414b      	adcs	r3, r1
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f80:	4659      	mov	r1, fp
 8004f82:	00cb      	lsls	r3, r1, #3
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	00ca      	lsls	r2, r1, #3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	4642      	mov	r2, r8
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	18db      	adds	r3, r3, r3
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fd2:	f7fb fe69 	bl	8000ca8 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <UART_SetConfig+0x2d4>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	3332      	adds	r3, #50	; 0x32
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <UART_SetConfig+0x2d4>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	f003 0207 	and.w	r2, r3, #7
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4422      	add	r2, r4
 8005002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005004:	e106      	b.n	8005214 <UART_SetConfig+0x4d8>
 8005006:	bf00      	nop
 8005008:	40011000 	.word	0x40011000
 800500c:	40011400 	.word	0x40011400
 8005010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800501e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005026:	4642      	mov	r2, r8
 8005028:	464b      	mov	r3, r9
 800502a:	1891      	adds	r1, r2, r2
 800502c:	6239      	str	r1, [r7, #32]
 800502e:	415b      	adcs	r3, r3
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005036:	4641      	mov	r1, r8
 8005038:	1854      	adds	r4, r2, r1
 800503a:	4649      	mov	r1, r9
 800503c:	eb43 0501 	adc.w	r5, r3, r1
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	00eb      	lsls	r3, r5, #3
 800504a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504e:	00e2      	lsls	r2, r4, #3
 8005050:	4614      	mov	r4, r2
 8005052:	461d      	mov	r5, r3
 8005054:	4643      	mov	r3, r8
 8005056:	18e3      	adds	r3, r4, r3
 8005058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800505c:	464b      	mov	r3, r9
 800505e:	eb45 0303 	adc.w	r3, r5, r3
 8005062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005082:	4629      	mov	r1, r5
 8005084:	008b      	lsls	r3, r1, #2
 8005086:	4621      	mov	r1, r4
 8005088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508c:	4621      	mov	r1, r4
 800508e:	008a      	lsls	r2, r1, #2
 8005090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005094:	f7fb fe08 	bl	8000ca8 <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4b60      	ldr	r3, [pc, #384]	; (8005220 <UART_SetConfig+0x4e4>)
 800509e:	fba3 2302 	umull	r2, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	011c      	lsls	r4, r3, #4
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	61b9      	str	r1, [r7, #24]
 80050c0:	415b      	adcs	r3, r3
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c8:	4641      	mov	r1, r8
 80050ca:	1851      	adds	r1, r2, r1
 80050cc:	6139      	str	r1, [r7, #16]
 80050ce:	4649      	mov	r1, r9
 80050d0:	414b      	adcs	r3, r1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e0:	4659      	mov	r1, fp
 80050e2:	00cb      	lsls	r3, r1, #3
 80050e4:	4651      	mov	r1, sl
 80050e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ea:	4651      	mov	r1, sl
 80050ec:	00ca      	lsls	r2, r1, #3
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	4642      	mov	r2, r8
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	67bb      	str	r3, [r7, #120]	; 0x78
 8005112:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005120:	4649      	mov	r1, r9
 8005122:	008b      	lsls	r3, r1, #2
 8005124:	4641      	mov	r1, r8
 8005126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512a:	4641      	mov	r1, r8
 800512c:	008a      	lsls	r2, r1, #2
 800512e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005132:	f7fb fdb9 	bl	8000ca8 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4611      	mov	r1, r2
 800513c:	4b38      	ldr	r3, [pc, #224]	; (8005220 <UART_SetConfig+0x4e4>)
 800513e:	fba3 2301 	umull	r2, r3, r3, r1
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2264      	movs	r2, #100	; 0x64
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	1acb      	subs	r3, r1, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	3332      	adds	r3, #50	; 0x32
 8005150:	4a33      	ldr	r2, [pc, #204]	; (8005220 <UART_SetConfig+0x4e4>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800515c:	441c      	add	r4, r3
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	673b      	str	r3, [r7, #112]	; 0x70
 8005166:	677a      	str	r2, [r7, #116]	; 0x74
 8005168:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	415b      	adcs	r3, r3
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800517c:	4641      	mov	r1, r8
 800517e:	1851      	adds	r1, r2, r1
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	4649      	mov	r1, r9
 8005184:	414b      	adcs	r3, r1
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005194:	4659      	mov	r1, fp
 8005196:	00cb      	lsls	r3, r1, #3
 8005198:	4651      	mov	r1, sl
 800519a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800519e:	4651      	mov	r1, sl
 80051a0:	00ca      	lsls	r2, r1, #3
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	4642      	mov	r2, r8
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ae:	464b      	mov	r3, r9
 80051b0:	460a      	mov	r2, r1
 80051b2:	eb42 0303 	adc.w	r3, r2, r3
 80051b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	663b      	str	r3, [r7, #96]	; 0x60
 80051c2:	667a      	str	r2, [r7, #100]	; 0x64
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051d0:	4649      	mov	r1, r9
 80051d2:	008b      	lsls	r3, r1, #2
 80051d4:	4641      	mov	r1, r8
 80051d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051da:	4641      	mov	r1, r8
 80051dc:	008a      	lsls	r2, r1, #2
 80051de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051e2:	f7fb fd61 	bl	8000ca8 <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <UART_SetConfig+0x4e4>)
 80051ec:	fba3 1302 	umull	r1, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	2164      	movs	r1, #100	; 0x64
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	3332      	adds	r3, #50	; 0x32
 80051fe:	4a08      	ldr	r2, [pc, #32]	; (8005220 <UART_SetConfig+0x4e4>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	f003 020f 	and.w	r2, r3, #15
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4422      	add	r2, r4
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800521a:	46bd      	mov	sp, r7
 800521c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005220:	51eb851f 	.word	0x51eb851f

08005224 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */

	HAL_Init();
 8005228:	f7fd fb1c 	bl	8002864 <HAL_Init>
	setvbuf(stdin, NULL, _IONBF, 0); //scanf para la uart
 800522c:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <main+0x88>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6858      	ldr	r0, [r3, #4]
 8005232:	2300      	movs	r3, #0
 8005234:	2202      	movs	r2, #2
 8005236:	2100      	movs	r1, #0
 8005238:	f001 f864 	bl	8006304 <setvbuf>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800523c:	f000 f83a 	bl	80052b4 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8005240:	2000      	movs	r0, #0
 8005242:	f7fd f8f1 	bl	8002428 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8005246:	2001      	movs	r0, #1
 8005248:	f7fd f8ee 	bl	8002428 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800524c:	2002      	movs	r0, #2
 800524e:	f7fd f8eb 	bl	8002428 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8005252:	2100      	movs	r1, #0
 8005254:	2000      	movs	r0, #0
 8005256:	f7fd f985 	bl	8002564 <BSP_PB_Init>

	debounceFSM_init(); // Inicializa la máquina de estados
 800525a:	f7fc fe45 	bl	8001ee8 <debounceFSM_init>

	GPIO_Init();
 800525e:	f7fc f991 	bl	8001584 <GPIO_Init>
	I2C_Init();
 8005262:	f7fc ffc5 	bl	80021f0 <I2C_Init>
	uartInit();
 8005266:	f7fd f883 	bl	8002370 <uartInit>
	Lcd_Init();
 800526a:	f7fc fa87 	bl	800177c <Lcd_Init>

	Lcd_Clear();
 800526e:	f7fc fab9 	bl	80017e4 <Lcd_Clear>


	//Conf_update_Uart();
	Conf_update(); //CONFIGURO LA TEMPERATURA
 8005272:	f7fc fb6b 	bl	800194c <Conf_update>

	TEMPFSM_init(&conf_T);
 8005276:	480e      	ldr	r0, [pc, #56]	; (80052b0 <main+0x8c>)
 8005278:	f7fb ff52 	bl	8001120 <TEMPFSM_init>

	while (1)
	{

		//debounceFSM_update();
		TEMPFSM_update(&conf_T);
 800527c:	480c      	ldr	r0, [pc, #48]	; (80052b0 <main+0x8c>)
 800527e:	f7fb ff81 	bl	8001184 <TEMPFSM_update>

		if (Detecto_TempHigh())
 8005282:	f7fc f957 	bl	8001534 <Detecto_TempHigh>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <main+0x72>
		{
			Device_Cool();
 800528c:	f7fc fa26 	bl	80016dc <Device_Cool>
			BSP_LED_Toggle(LED3); //se activa para enfria
 8005290:	2002      	movs	r0, #2
 8005292:	f7fd f94d 	bl	8002530 <BSP_LED_Toggle>
		}
		if (Detecto_TempLow())
 8005296:	f7fc f961 	bl	800155c <Detecto_TempLow>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ed      	beq.n	800527c <main+0x58>
		{
			BSP_LED_Toggle(LED2); //se activa para calentar
 80052a0:	2001      	movs	r0, #1
 80052a2:	f7fd f945 	bl	8002530 <BSP_LED_Toggle>
		    Device_Heat();
 80052a6:	f7fc fa25 	bl	80016f4 <Device_Heat>
		TEMPFSM_update(&conf_T);
 80052aa:	e7e7      	b.n	800527c <main+0x58>
 80052ac:	2000007c 	.word	0x2000007c
 80052b0:	200002b0 	.word	0x200002b0

080052b4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config()
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b092      	sub	sp, #72	; 0x48
 80052b8:	af00      	add	r7, sp, #0
 /* __HAL_RCC_PWR_CLK_ENABLE();*/

  /* The voltage scaling allows optimizing the power consumption when the device is*/
    /* clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80052ba:	2300      	movs	r3, #0
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	4b25      	ldr	r3, [pc, #148]	; (8005354 <SystemClock_Config+0xa0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a24      	ldr	r2, [pc, #144]	; (8005354 <SystemClock_Config+0xa0>)
 80052c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <SystemClock_Config+0xa0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80052da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80052de:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052e0:	2302      	movs	r3, #2
 80052e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80052e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80052ea:	2308      	movs	r3, #8
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 360;
 80052ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80052f4:	2302      	movs	r3, #2
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80052f8:	2307      	movs	r3, #7
 80052fa:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fe94 	bl	800402c <HAL_RCC_OscConfig>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <SystemClock_Config+0x5a>
  {
    /* Initialization Error */
    Error_Handler();
 800530a:	f000 f825 	bl	8005358 <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800530e:	f7fe fe3d 	bl	8003f8c <HAL_PWREx_EnableOverDrive>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <SystemClock_Config+0x68>
  {
    /* Initialization Error */
    Error_Handler();
 8005318:	f000 f81e 	bl	8005358 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800531c:	230f      	movs	r3, #15
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005320:	2302      	movs	r3, #2
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005324:	2300      	movs	r3, #0
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005328:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800532e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005338:	2105      	movs	r1, #5
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f8ee 	bl	800451c <HAL_RCC_ClockConfig>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <SystemClock_Config+0x96>
  {
    /* Initialization Error */
    Error_Handler();
 8005346:	f000 f807 	bl	8005358 <Error_Handler>
  }
}
 800534a:	bf00      	nop
 800534c:	3748      	adds	r7, #72	; 0x48
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40007000 	.word	0x40007000

08005358 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  // Turn LED2 on
  BSP_LED_On(LED2);
 800535c:	2001      	movs	r0, #1
 800535e:	f7fd f8b3 	bl	80024c8 <BSP_LED_On>
  while (1)
 8005362:	e7fe      	b.n	8005362 <Error_Handler+0xa>

08005364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800539c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800536a:	e003      	b.n	8005374 <LoopCopyDataInit>

0800536c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800536e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005372:	3104      	adds	r1, #4

08005374 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005374:	480b      	ldr	r0, [pc, #44]	; (80053a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800537a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800537c:	d3f6      	bcc.n	800536c <CopyDataInit>
  ldr  r2, =_sbss
 800537e:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005380:	e002      	b.n	8005388 <LoopFillZerobss>

08005382 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005382:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005384:	f842 3b04 	str.w	r3, [r2], #4

08005388 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800538a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800538c:	d3f9      	bcc.n	8005382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800538e:	f7fd f93f 	bl	8002610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005392:	f001 f9b5 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005396:	f7ff ff45 	bl	8005224 <main>
  bx  lr    
 800539a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800539c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80053a0:	0800a568 	.word	0x0800a568
  ldr  r0, =_sdata
 80053a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053a8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80053ac:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80053b0:	2000056c 	.word	0x2000056c

080053b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053b4:	e7fe      	b.n	80053b4 <ADC_IRQHandler>

080053b6 <__cvt>:
 80053b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ba:	ec55 4b10 	vmov	r4, r5, d0
 80053be:	2d00      	cmp	r5, #0
 80053c0:	460e      	mov	r6, r1
 80053c2:	4619      	mov	r1, r3
 80053c4:	462b      	mov	r3, r5
 80053c6:	bfbb      	ittet	lt
 80053c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053cc:	461d      	movlt	r5, r3
 80053ce:	2300      	movge	r3, #0
 80053d0:	232d      	movlt	r3, #45	; 0x2d
 80053d2:	700b      	strb	r3, [r1, #0]
 80053d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053da:	4691      	mov	r9, r2
 80053dc:	f023 0820 	bic.w	r8, r3, #32
 80053e0:	bfbc      	itt	lt
 80053e2:	4622      	movlt	r2, r4
 80053e4:	4614      	movlt	r4, r2
 80053e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053ea:	d005      	beq.n	80053f8 <__cvt+0x42>
 80053ec:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053f0:	d100      	bne.n	80053f4 <__cvt+0x3e>
 80053f2:	3601      	adds	r6, #1
 80053f4:	2102      	movs	r1, #2
 80053f6:	e000      	b.n	80053fa <__cvt+0x44>
 80053f8:	2103      	movs	r1, #3
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	ab02      	add	r3, sp, #8
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	ec45 4b10 	vmov	d0, r4, r5
 8005406:	4653      	mov	r3, sl
 8005408:	4632      	mov	r2, r6
 800540a:	f001 fa31 	bl	8006870 <_dtoa_r>
 800540e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005412:	4607      	mov	r7, r0
 8005414:	d102      	bne.n	800541c <__cvt+0x66>
 8005416:	f019 0f01 	tst.w	r9, #1
 800541a:	d022      	beq.n	8005462 <__cvt+0xac>
 800541c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005420:	eb07 0906 	add.w	r9, r7, r6
 8005424:	d110      	bne.n	8005448 <__cvt+0x92>
 8005426:	783b      	ldrb	r3, [r7, #0]
 8005428:	2b30      	cmp	r3, #48	; 0x30
 800542a:	d10a      	bne.n	8005442 <__cvt+0x8c>
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4620      	mov	r0, r4
 8005432:	4629      	mov	r1, r5
 8005434:	f7fb fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8005438:	b918      	cbnz	r0, 8005442 <__cvt+0x8c>
 800543a:	f1c6 0601 	rsb	r6, r6, #1
 800543e:	f8ca 6000 	str.w	r6, [sl]
 8005442:	f8da 3000 	ldr.w	r3, [sl]
 8005446:	4499      	add	r9, r3
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb fb4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005454:	b108      	cbz	r0, 800545a <__cvt+0xa4>
 8005456:	f8cd 900c 	str.w	r9, [sp, #12]
 800545a:	2230      	movs	r2, #48	; 0x30
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	454b      	cmp	r3, r9
 8005460:	d307      	bcc.n	8005472 <__cvt+0xbc>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005466:	1bdb      	subs	r3, r3, r7
 8005468:	4638      	mov	r0, r7
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	b004      	add	sp, #16
 800546e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	9103      	str	r1, [sp, #12]
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e7f0      	b.n	800545c <__cvt+0xa6>

0800547a <__exponent>:
 800547a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800547c:	4603      	mov	r3, r0
 800547e:	2900      	cmp	r1, #0
 8005480:	bfb8      	it	lt
 8005482:	4249      	neglt	r1, r1
 8005484:	f803 2b02 	strb.w	r2, [r3], #2
 8005488:	bfb4      	ite	lt
 800548a:	222d      	movlt	r2, #45	; 0x2d
 800548c:	222b      	movge	r2, #43	; 0x2b
 800548e:	2909      	cmp	r1, #9
 8005490:	7042      	strb	r2, [r0, #1]
 8005492:	dd2a      	ble.n	80054ea <__exponent+0x70>
 8005494:	f10d 0207 	add.w	r2, sp, #7
 8005498:	4617      	mov	r7, r2
 800549a:	260a      	movs	r6, #10
 800549c:	4694      	mov	ip, r2
 800549e:	fb91 f5f6 	sdiv	r5, r1, r6
 80054a2:	fb06 1415 	mls	r4, r6, r5, r1
 80054a6:	3430      	adds	r4, #48	; 0x30
 80054a8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80054ac:	460c      	mov	r4, r1
 80054ae:	2c63      	cmp	r4, #99	; 0x63
 80054b0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80054b4:	4629      	mov	r1, r5
 80054b6:	dcf1      	bgt.n	800549c <__exponent+0x22>
 80054b8:	3130      	adds	r1, #48	; 0x30
 80054ba:	f1ac 0402 	sub.w	r4, ip, #2
 80054be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054c2:	1c41      	adds	r1, r0, #1
 80054c4:	4622      	mov	r2, r4
 80054c6:	42ba      	cmp	r2, r7
 80054c8:	d30a      	bcc.n	80054e0 <__exponent+0x66>
 80054ca:	f10d 0209 	add.w	r2, sp, #9
 80054ce:	eba2 020c 	sub.w	r2, r2, ip
 80054d2:	42bc      	cmp	r4, r7
 80054d4:	bf88      	it	hi
 80054d6:	2200      	movhi	r2, #0
 80054d8:	4413      	add	r3, r2
 80054da:	1a18      	subs	r0, r3, r0
 80054dc:	b003      	add	sp, #12
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80054e4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80054e8:	e7ed      	b.n	80054c6 <__exponent+0x4c>
 80054ea:	2330      	movs	r3, #48	; 0x30
 80054ec:	3130      	adds	r1, #48	; 0x30
 80054ee:	7083      	strb	r3, [r0, #2]
 80054f0:	70c1      	strb	r1, [r0, #3]
 80054f2:	1d03      	adds	r3, r0, #4
 80054f4:	e7f1      	b.n	80054da <__exponent+0x60>
	...

080054f8 <_printf_float>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	ed2d 8b02 	vpush	{d8}
 8005500:	b08d      	sub	sp, #52	; 0x34
 8005502:	460c      	mov	r4, r1
 8005504:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005508:	4616      	mov	r6, r2
 800550a:	461f      	mov	r7, r3
 800550c:	4605      	mov	r5, r0
 800550e:	f001 f8a7 	bl	8006660 <_localeconv_r>
 8005512:	f8d0 a000 	ldr.w	sl, [r0]
 8005516:	4650      	mov	r0, sl
 8005518:	f7fa feba 	bl	8000290 <strlen>
 800551c:	2300      	movs	r3, #0
 800551e:	930a      	str	r3, [sp, #40]	; 0x28
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	f8d8 3000 	ldr.w	r3, [r8]
 8005528:	f894 b018 	ldrb.w	fp, [r4, #24]
 800552c:	3307      	adds	r3, #7
 800552e:	f023 0307 	bic.w	r3, r3, #7
 8005532:	f103 0208 	add.w	r2, r3, #8
 8005536:	f8c8 2000 	str.w	r2, [r8]
 800553a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800553e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	f8cd 8018 	str.w	r8, [sp, #24]
 8005548:	ee08 0a10 	vmov	s16, r0
 800554c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005554:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <_printf_float+0x2d8>)
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	f7fb faf7 	bl	8000b4c <__aeabi_dcmpun>
 800555e:	bb88      	cbnz	r0, 80055c4 <_printf_float+0xcc>
 8005560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005564:	4b9a      	ldr	r3, [pc, #616]	; (80057d0 <_printf_float+0x2d8>)
 8005566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800556a:	f7fb fad1 	bl	8000b10 <__aeabi_dcmple>
 800556e:	bb48      	cbnz	r0, 80055c4 <_printf_float+0xcc>
 8005570:	2200      	movs	r2, #0
 8005572:	2300      	movs	r3, #0
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fb fac0 	bl	8000afc <__aeabi_dcmplt>
 800557c:	b110      	cbz	r0, 8005584 <_printf_float+0x8c>
 800557e:	232d      	movs	r3, #45	; 0x2d
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005584:	4a93      	ldr	r2, [pc, #588]	; (80057d4 <_printf_float+0x2dc>)
 8005586:	4b94      	ldr	r3, [pc, #592]	; (80057d8 <_printf_float+0x2e0>)
 8005588:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800558c:	bf94      	ite	ls
 800558e:	4690      	movls	r8, r2
 8005590:	4698      	movhi	r8, r3
 8005592:	2303      	movs	r3, #3
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	9b05      	ldr	r3, [sp, #20]
 8005598:	f023 0304 	bic.w	r3, r3, #4
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	f04f 0900 	mov.w	r9, #0
 80055a2:	9700      	str	r7, [sp, #0]
 80055a4:	4633      	mov	r3, r6
 80055a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f9da 	bl	8005964 <_printf_common>
 80055b0:	3001      	adds	r0, #1
 80055b2:	f040 8090 	bne.w	80056d6 <_printf_float+0x1de>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ba:	b00d      	add	sp, #52	; 0x34
 80055bc:	ecbd 8b02 	vpop	{d8}
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	4642      	mov	r2, r8
 80055c6:	464b      	mov	r3, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	f7fb fabe 	bl	8000b4c <__aeabi_dcmpun>
 80055d0:	b140      	cbz	r0, 80055e4 <_printf_float+0xec>
 80055d2:	464b      	mov	r3, r9
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bfbc      	itt	lt
 80055d8:	232d      	movlt	r3, #45	; 0x2d
 80055da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055de:	4a7f      	ldr	r2, [pc, #508]	; (80057dc <_printf_float+0x2e4>)
 80055e0:	4b7f      	ldr	r3, [pc, #508]	; (80057e0 <_printf_float+0x2e8>)
 80055e2:	e7d1      	b.n	8005588 <_printf_float+0x90>
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055ea:	9206      	str	r2, [sp, #24]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	d13f      	bne.n	8005670 <_printf_float+0x178>
 80055f0:	2306      	movs	r3, #6
 80055f2:	6063      	str	r3, [r4, #4]
 80055f4:	9b05      	ldr	r3, [sp, #20]
 80055f6:	6861      	ldr	r1, [r4, #4]
 80055f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055fc:	2300      	movs	r3, #0
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	ab0a      	add	r3, sp, #40	; 0x28
 8005602:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005606:	ab09      	add	r3, sp, #36	; 0x24
 8005608:	ec49 8b10 	vmov	d0, r8, r9
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	6022      	str	r2, [r4, #0]
 8005610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff fece 	bl	80053b6 <__cvt>
 800561a:	9b06      	ldr	r3, [sp, #24]
 800561c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800561e:	2b47      	cmp	r3, #71	; 0x47
 8005620:	4680      	mov	r8, r0
 8005622:	d108      	bne.n	8005636 <_printf_float+0x13e>
 8005624:	1cc8      	adds	r0, r1, #3
 8005626:	db02      	blt.n	800562e <_printf_float+0x136>
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	4299      	cmp	r1, r3
 800562c:	dd41      	ble.n	80056b2 <_printf_float+0x1ba>
 800562e:	f1ab 0302 	sub.w	r3, fp, #2
 8005632:	fa5f fb83 	uxtb.w	fp, r3
 8005636:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800563a:	d820      	bhi.n	800567e <_printf_float+0x186>
 800563c:	3901      	subs	r1, #1
 800563e:	465a      	mov	r2, fp
 8005640:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005644:	9109      	str	r1, [sp, #36]	; 0x24
 8005646:	f7ff ff18 	bl	800547a <__exponent>
 800564a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800564c:	1813      	adds	r3, r2, r0
 800564e:	2a01      	cmp	r2, #1
 8005650:	4681      	mov	r9, r0
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	dc02      	bgt.n	800565c <_printf_float+0x164>
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	07d2      	lsls	r2, r2, #31
 800565a:	d501      	bpl.n	8005660 <_printf_float+0x168>
 800565c:	3301      	adds	r3, #1
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005664:	2b00      	cmp	r3, #0
 8005666:	d09c      	beq.n	80055a2 <_printf_float+0xaa>
 8005668:	232d      	movs	r3, #45	; 0x2d
 800566a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566e:	e798      	b.n	80055a2 <_printf_float+0xaa>
 8005670:	9a06      	ldr	r2, [sp, #24]
 8005672:	2a47      	cmp	r2, #71	; 0x47
 8005674:	d1be      	bne.n	80055f4 <_printf_float+0xfc>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1bc      	bne.n	80055f4 <_printf_float+0xfc>
 800567a:	2301      	movs	r3, #1
 800567c:	e7b9      	b.n	80055f2 <_printf_float+0xfa>
 800567e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005682:	d118      	bne.n	80056b6 <_printf_float+0x1be>
 8005684:	2900      	cmp	r1, #0
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	dd0b      	ble.n	80056a2 <_printf_float+0x1aa>
 800568a:	6121      	str	r1, [r4, #16]
 800568c:	b913      	cbnz	r3, 8005694 <_printf_float+0x19c>
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	07d0      	lsls	r0, r2, #31
 8005692:	d502      	bpl.n	800569a <_printf_float+0x1a2>
 8005694:	3301      	adds	r3, #1
 8005696:	440b      	add	r3, r1
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	65a1      	str	r1, [r4, #88]	; 0x58
 800569c:	f04f 0900 	mov.w	r9, #0
 80056a0:	e7de      	b.n	8005660 <_printf_float+0x168>
 80056a2:	b913      	cbnz	r3, 80056aa <_printf_float+0x1b2>
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	07d2      	lsls	r2, r2, #31
 80056a8:	d501      	bpl.n	80056ae <_printf_float+0x1b6>
 80056aa:	3302      	adds	r3, #2
 80056ac:	e7f4      	b.n	8005698 <_printf_float+0x1a0>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e7f2      	b.n	8005698 <_printf_float+0x1a0>
 80056b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b8:	4299      	cmp	r1, r3
 80056ba:	db05      	blt.n	80056c8 <_printf_float+0x1d0>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	6121      	str	r1, [r4, #16]
 80056c0:	07d8      	lsls	r0, r3, #31
 80056c2:	d5ea      	bpl.n	800569a <_printf_float+0x1a2>
 80056c4:	1c4b      	adds	r3, r1, #1
 80056c6:	e7e7      	b.n	8005698 <_printf_float+0x1a0>
 80056c8:	2900      	cmp	r1, #0
 80056ca:	bfd4      	ite	le
 80056cc:	f1c1 0202 	rsble	r2, r1, #2
 80056d0:	2201      	movgt	r2, #1
 80056d2:	4413      	add	r3, r2
 80056d4:	e7e0      	b.n	8005698 <_printf_float+0x1a0>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	055a      	lsls	r2, r3, #21
 80056da:	d407      	bmi.n	80056ec <_printf_float+0x1f4>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	4642      	mov	r2, r8
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	d12c      	bne.n	8005744 <_printf_float+0x24c>
 80056ea:	e764      	b.n	80055b6 <_printf_float+0xbe>
 80056ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056f0:	f240 80e0 	bls.w	80058b4 <_printf_float+0x3bc>
 80056f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056f8:	2200      	movs	r2, #0
 80056fa:	2300      	movs	r3, #0
 80056fc:	f7fb f9f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005700:	2800      	cmp	r0, #0
 8005702:	d034      	beq.n	800576e <_printf_float+0x276>
 8005704:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <_printf_float+0x2ec>)
 8005706:	2301      	movs	r3, #1
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f af51 	beq.w	80055b6 <_printf_float+0xbe>
 8005714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005718:	429a      	cmp	r2, r3
 800571a:	db02      	blt.n	8005722 <_printf_float+0x22a>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	07d8      	lsls	r0, r3, #31
 8005720:	d510      	bpl.n	8005744 <_printf_float+0x24c>
 8005722:	ee18 3a10 	vmov	r3, s16
 8005726:	4652      	mov	r2, sl
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af41 	beq.w	80055b6 <_printf_float+0xbe>
 8005734:	f04f 0800 	mov.w	r8, #0
 8005738:	f104 091a 	add.w	r9, r4, #26
 800573c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573e:	3b01      	subs	r3, #1
 8005740:	4543      	cmp	r3, r8
 8005742:	dc09      	bgt.n	8005758 <_printf_float+0x260>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	079b      	lsls	r3, r3, #30
 8005748:	f100 8107 	bmi.w	800595a <_printf_float+0x462>
 800574c:	68e0      	ldr	r0, [r4, #12]
 800574e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005750:	4298      	cmp	r0, r3
 8005752:	bfb8      	it	lt
 8005754:	4618      	movlt	r0, r3
 8005756:	e730      	b.n	80055ba <_printf_float+0xc2>
 8005758:	2301      	movs	r3, #1
 800575a:	464a      	mov	r2, r9
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	f43f af27 	beq.w	80055b6 <_printf_float+0xbe>
 8005768:	f108 0801 	add.w	r8, r8, #1
 800576c:	e7e6      	b.n	800573c <_printf_float+0x244>
 800576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	dc39      	bgt.n	80057e8 <_printf_float+0x2f0>
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <_printf_float+0x2ec>)
 8005776:	2301      	movs	r3, #1
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f af19 	beq.w	80055b6 <_printf_float+0xbe>
 8005784:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005788:	4313      	orrs	r3, r2
 800578a:	d102      	bne.n	8005792 <_printf_float+0x29a>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	07d9      	lsls	r1, r3, #31
 8005790:	d5d8      	bpl.n	8005744 <_printf_float+0x24c>
 8005792:	ee18 3a10 	vmov	r3, s16
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af09 	beq.w	80055b6 <_printf_float+0xbe>
 80057a4:	f04f 0900 	mov.w	r9, #0
 80057a8:	f104 0a1a 	add.w	sl, r4, #26
 80057ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ae:	425b      	negs	r3, r3
 80057b0:	454b      	cmp	r3, r9
 80057b2:	dc01      	bgt.n	80057b8 <_printf_float+0x2c0>
 80057b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b6:	e792      	b.n	80056de <_printf_float+0x1e6>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4652      	mov	r2, sl
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f aef7 	beq.w	80055b6 <_printf_float+0xbe>
 80057c8:	f109 0901 	add.w	r9, r9, #1
 80057cc:	e7ee      	b.n	80057ac <_printf_float+0x2b4>
 80057ce:	bf00      	nop
 80057d0:	7fefffff 	.word	0x7fefffff
 80057d4:	0800a130 	.word	0x0800a130
 80057d8:	0800a134 	.word	0x0800a134
 80057dc:	0800a138 	.word	0x0800a138
 80057e0:	0800a13c 	.word	0x0800a13c
 80057e4:	0800a140 	.word	0x0800a140
 80057e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057ec:	429a      	cmp	r2, r3
 80057ee:	bfa8      	it	ge
 80057f0:	461a      	movge	r2, r3
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	4691      	mov	r9, r2
 80057f6:	dc37      	bgt.n	8005868 <_printf_float+0x370>
 80057f8:	f04f 0b00 	mov.w	fp, #0
 80057fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005800:	f104 021a 	add.w	r2, r4, #26
 8005804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005806:	9305      	str	r3, [sp, #20]
 8005808:	eba3 0309 	sub.w	r3, r3, r9
 800580c:	455b      	cmp	r3, fp
 800580e:	dc33      	bgt.n	8005878 <_printf_float+0x380>
 8005810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005814:	429a      	cmp	r2, r3
 8005816:	db3b      	blt.n	8005890 <_printf_float+0x398>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	07da      	lsls	r2, r3, #31
 800581c:	d438      	bmi.n	8005890 <_printf_float+0x398>
 800581e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005822:	eba2 0903 	sub.w	r9, r2, r3
 8005826:	9b05      	ldr	r3, [sp, #20]
 8005828:	1ad2      	subs	r2, r2, r3
 800582a:	4591      	cmp	r9, r2
 800582c:	bfa8      	it	ge
 800582e:	4691      	movge	r9, r2
 8005830:	f1b9 0f00 	cmp.w	r9, #0
 8005834:	dc35      	bgt.n	80058a2 <_printf_float+0x3aa>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800583e:	f104 0a1a 	add.w	sl, r4, #26
 8005842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	eba3 0309 	sub.w	r3, r3, r9
 800584c:	4543      	cmp	r3, r8
 800584e:	f77f af79 	ble.w	8005744 <_printf_float+0x24c>
 8005852:	2301      	movs	r3, #1
 8005854:	4652      	mov	r2, sl
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	f43f aeaa 	beq.w	80055b6 <_printf_float+0xbe>
 8005862:	f108 0801 	add.w	r8, r8, #1
 8005866:	e7ec      	b.n	8005842 <_printf_float+0x34a>
 8005868:	4613      	mov	r3, r2
 800586a:	4631      	mov	r1, r6
 800586c:	4642      	mov	r2, r8
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	d1c0      	bne.n	80057f8 <_printf_float+0x300>
 8005876:	e69e      	b.n	80055b6 <_printf_float+0xbe>
 8005878:	2301      	movs	r3, #1
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	9205      	str	r2, [sp, #20]
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f ae97 	beq.w	80055b6 <_printf_float+0xbe>
 8005888:	9a05      	ldr	r2, [sp, #20]
 800588a:	f10b 0b01 	add.w	fp, fp, #1
 800588e:	e7b9      	b.n	8005804 <_printf_float+0x30c>
 8005890:	ee18 3a10 	vmov	r3, s16
 8005894:	4652      	mov	r2, sl
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	d1be      	bne.n	800581e <_printf_float+0x326>
 80058a0:	e689      	b.n	80055b6 <_printf_float+0xbe>
 80058a2:	9a05      	ldr	r2, [sp, #20]
 80058a4:	464b      	mov	r3, r9
 80058a6:	4442      	add	r2, r8
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	d1c1      	bne.n	8005836 <_printf_float+0x33e>
 80058b2:	e680      	b.n	80055b6 <_printf_float+0xbe>
 80058b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b6:	2a01      	cmp	r2, #1
 80058b8:	dc01      	bgt.n	80058be <_printf_float+0x3c6>
 80058ba:	07db      	lsls	r3, r3, #31
 80058bc:	d53a      	bpl.n	8005934 <_printf_float+0x43c>
 80058be:	2301      	movs	r3, #1
 80058c0:	4642      	mov	r2, r8
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f ae74 	beq.w	80055b6 <_printf_float+0xbe>
 80058ce:	ee18 3a10 	vmov	r3, s16
 80058d2:	4652      	mov	r2, sl
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f ae6b 	beq.w	80055b6 <_printf_float+0xbe>
 80058e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80058ec:	f7fb f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80058f0:	b9d8      	cbnz	r0, 800592a <_printf_float+0x432>
 80058f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80058f6:	f108 0201 	add.w	r2, r8, #1
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d10e      	bne.n	8005922 <_printf_float+0x42a>
 8005904:	e657      	b.n	80055b6 <_printf_float+0xbe>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f ae50 	beq.w	80055b6 <_printf_float+0xbe>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	4543      	cmp	r3, r8
 8005920:	dcf1      	bgt.n	8005906 <_printf_float+0x40e>
 8005922:	464b      	mov	r3, r9
 8005924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005928:	e6da      	b.n	80056e0 <_printf_float+0x1e8>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	f104 0a1a 	add.w	sl, r4, #26
 8005932:	e7f2      	b.n	800591a <_printf_float+0x422>
 8005934:	2301      	movs	r3, #1
 8005936:	4642      	mov	r2, r8
 8005938:	e7df      	b.n	80058fa <_printf_float+0x402>
 800593a:	2301      	movs	r3, #1
 800593c:	464a      	mov	r2, r9
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae36 	beq.w	80055b6 <_printf_float+0xbe>
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005952:	1a5b      	subs	r3, r3, r1
 8005954:	4543      	cmp	r3, r8
 8005956:	dcf0      	bgt.n	800593a <_printf_float+0x442>
 8005958:	e6f8      	b.n	800574c <_printf_float+0x254>
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	f104 0919 	add.w	r9, r4, #25
 8005962:	e7f4      	b.n	800594e <_printf_float+0x456>

08005964 <_printf_common>:
 8005964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	4616      	mov	r6, r2
 800596a:	4699      	mov	r9, r3
 800596c:	688a      	ldr	r2, [r1, #8]
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005974:	4293      	cmp	r3, r2
 8005976:	bfb8      	it	lt
 8005978:	4613      	movlt	r3, r2
 800597a:	6033      	str	r3, [r6, #0]
 800597c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005980:	4607      	mov	r7, r0
 8005982:	460c      	mov	r4, r1
 8005984:	b10a      	cbz	r2, 800598a <_printf_common+0x26>
 8005986:	3301      	adds	r3, #1
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	0699      	lsls	r1, r3, #26
 800598e:	bf42      	ittt	mi
 8005990:	6833      	ldrmi	r3, [r6, #0]
 8005992:	3302      	addmi	r3, #2
 8005994:	6033      	strmi	r3, [r6, #0]
 8005996:	6825      	ldr	r5, [r4, #0]
 8005998:	f015 0506 	ands.w	r5, r5, #6
 800599c:	d106      	bne.n	80059ac <_printf_common+0x48>
 800599e:	f104 0a19 	add.w	sl, r4, #25
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	6832      	ldr	r2, [r6, #0]
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dc26      	bgt.n	80059fa <_printf_common+0x96>
 80059ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b0:	1e13      	subs	r3, r2, #0
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	bf18      	it	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	0692      	lsls	r2, r2, #26
 80059ba:	d42b      	bmi.n	8005a14 <_printf_common+0xb0>
 80059bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c0:	4649      	mov	r1, r9
 80059c2:	4638      	mov	r0, r7
 80059c4:	47c0      	blx	r8
 80059c6:	3001      	adds	r0, #1
 80059c8:	d01e      	beq.n	8005a08 <_printf_common+0xa4>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	f003 0306 	and.w	r3, r3, #6
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	bf02      	ittt	eq
 80059d6:	68e5      	ldreq	r5, [r4, #12]
 80059d8:	6833      	ldreq	r3, [r6, #0]
 80059da:	1aed      	subeq	r5, r5, r3
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	bf0c      	ite	eq
 80059e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e4:	2500      	movne	r5, #0
 80059e6:	4293      	cmp	r3, r2
 80059e8:	bfc4      	itt	gt
 80059ea:	1a9b      	subgt	r3, r3, r2
 80059ec:	18ed      	addgt	r5, r5, r3
 80059ee:	2600      	movs	r6, #0
 80059f0:	341a      	adds	r4, #26
 80059f2:	42b5      	cmp	r5, r6
 80059f4:	d11a      	bne.n	8005a2c <_printf_common+0xc8>
 80059f6:	2000      	movs	r0, #0
 80059f8:	e008      	b.n	8005a0c <_printf_common+0xa8>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4652      	mov	r2, sl
 80059fe:	4649      	mov	r1, r9
 8005a00:	4638      	mov	r0, r7
 8005a02:	47c0      	blx	r8
 8005a04:	3001      	adds	r0, #1
 8005a06:	d103      	bne.n	8005a10 <_printf_common+0xac>
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a10:	3501      	adds	r5, #1
 8005a12:	e7c6      	b.n	80059a2 <_printf_common+0x3e>
 8005a14:	18e1      	adds	r1, r4, r3
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	2030      	movs	r0, #48	; 0x30
 8005a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a1e:	4422      	add	r2, r4
 8005a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a28:	3302      	adds	r3, #2
 8005a2a:	e7c7      	b.n	80059bc <_printf_common+0x58>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4622      	mov	r2, r4
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d0e6      	beq.n	8005a08 <_printf_common+0xa4>
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7d9      	b.n	80059f2 <_printf_common+0x8e>
	...

08005a40 <_printf_i>:
 8005a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	7e0f      	ldrb	r7, [r1, #24]
 8005a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a48:	2f78      	cmp	r7, #120	; 0x78
 8005a4a:	4691      	mov	r9, r2
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	469a      	mov	sl, r3
 8005a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a56:	d807      	bhi.n	8005a68 <_printf_i+0x28>
 8005a58:	2f62      	cmp	r7, #98	; 0x62
 8005a5a:	d80a      	bhi.n	8005a72 <_printf_i+0x32>
 8005a5c:	2f00      	cmp	r7, #0
 8005a5e:	f000 80d4 	beq.w	8005c0a <_printf_i+0x1ca>
 8005a62:	2f58      	cmp	r7, #88	; 0x58
 8005a64:	f000 80c0 	beq.w	8005be8 <_printf_i+0x1a8>
 8005a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a70:	e03a      	b.n	8005ae8 <_printf_i+0xa8>
 8005a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a76:	2b15      	cmp	r3, #21
 8005a78:	d8f6      	bhi.n	8005a68 <_printf_i+0x28>
 8005a7a:	a101      	add	r1, pc, #4	; (adr r1, 8005a80 <_printf_i+0x40>)
 8005a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a80:	08005ad9 	.word	0x08005ad9
 8005a84:	08005aed 	.word	0x08005aed
 8005a88:	08005a69 	.word	0x08005a69
 8005a8c:	08005a69 	.word	0x08005a69
 8005a90:	08005a69 	.word	0x08005a69
 8005a94:	08005a69 	.word	0x08005a69
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005a69 	.word	0x08005a69
 8005aa0:	08005a69 	.word	0x08005a69
 8005aa4:	08005a69 	.word	0x08005a69
 8005aa8:	08005a69 	.word	0x08005a69
 8005aac:	08005bf1 	.word	0x08005bf1
 8005ab0:	08005b19 	.word	0x08005b19
 8005ab4:	08005bab 	.word	0x08005bab
 8005ab8:	08005a69 	.word	0x08005a69
 8005abc:	08005a69 	.word	0x08005a69
 8005ac0:	08005c13 	.word	0x08005c13
 8005ac4:	08005a69 	.word	0x08005a69
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005a69 	.word	0x08005a69
 8005ad0:	08005a69 	.word	0x08005a69
 8005ad4:	08005bb3 	.word	0x08005bb3
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	602a      	str	r2, [r5, #0]
 8005ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e09f      	b.n	8005c2c <_printf_i+0x1ec>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	682b      	ldr	r3, [r5, #0]
 8005af0:	0607      	lsls	r7, r0, #24
 8005af2:	f103 0104 	add.w	r1, r3, #4
 8005af6:	6029      	str	r1, [r5, #0]
 8005af8:	d501      	bpl.n	8005afe <_printf_i+0xbe>
 8005afa:	681e      	ldr	r6, [r3, #0]
 8005afc:	e003      	b.n	8005b06 <_printf_i+0xc6>
 8005afe:	0646      	lsls	r6, r0, #25
 8005b00:	d5fb      	bpl.n	8005afa <_printf_i+0xba>
 8005b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	da03      	bge.n	8005b12 <_printf_i+0xd2>
 8005b0a:	232d      	movs	r3, #45	; 0x2d
 8005b0c:	4276      	negs	r6, r6
 8005b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b12:	485a      	ldr	r0, [pc, #360]	; (8005c7c <_printf_i+0x23c>)
 8005b14:	230a      	movs	r3, #10
 8005b16:	e012      	b.n	8005b3e <_printf_i+0xfe>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	6820      	ldr	r0, [r4, #0]
 8005b1c:	1d19      	adds	r1, r3, #4
 8005b1e:	6029      	str	r1, [r5, #0]
 8005b20:	0605      	lsls	r5, r0, #24
 8005b22:	d501      	bpl.n	8005b28 <_printf_i+0xe8>
 8005b24:	681e      	ldr	r6, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <_printf_i+0xee>
 8005b28:	0641      	lsls	r1, r0, #25
 8005b2a:	d5fb      	bpl.n	8005b24 <_printf_i+0xe4>
 8005b2c:	881e      	ldrh	r6, [r3, #0]
 8005b2e:	4853      	ldr	r0, [pc, #332]	; (8005c7c <_printf_i+0x23c>)
 8005b30:	2f6f      	cmp	r7, #111	; 0x6f
 8005b32:	bf0c      	ite	eq
 8005b34:	2308      	moveq	r3, #8
 8005b36:	230a      	movne	r3, #10
 8005b38:	2100      	movs	r1, #0
 8005b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b3e:	6865      	ldr	r5, [r4, #4]
 8005b40:	60a5      	str	r5, [r4, #8]
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	bfa2      	ittt	ge
 8005b46:	6821      	ldrge	r1, [r4, #0]
 8005b48:	f021 0104 	bicge.w	r1, r1, #4
 8005b4c:	6021      	strge	r1, [r4, #0]
 8005b4e:	b90e      	cbnz	r6, 8005b54 <_printf_i+0x114>
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d04b      	beq.n	8005bec <_printf_i+0x1ac>
 8005b54:	4615      	mov	r5, r2
 8005b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b5e:	5dc7      	ldrb	r7, [r0, r7]
 8005b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b64:	4637      	mov	r7, r6
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	460e      	mov	r6, r1
 8005b6a:	d9f4      	bls.n	8005b56 <_printf_i+0x116>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d10b      	bne.n	8005b88 <_printf_i+0x148>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	07de      	lsls	r6, r3, #31
 8005b74:	d508      	bpl.n	8005b88 <_printf_i+0x148>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	6861      	ldr	r1, [r4, #4]
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	bfde      	ittt	le
 8005b7e:	2330      	movle	r3, #48	; 0x30
 8005b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b88:	1b52      	subs	r2, r2, r5
 8005b8a:	6122      	str	r2, [r4, #16]
 8005b8c:	f8cd a000 	str.w	sl, [sp]
 8005b90:	464b      	mov	r3, r9
 8005b92:	aa03      	add	r2, sp, #12
 8005b94:	4621      	mov	r1, r4
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7ff fee4 	bl	8005964 <_printf_common>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d14a      	bne.n	8005c36 <_printf_i+0x1f6>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba4:	b004      	add	sp, #16
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	f043 0320 	orr.w	r3, r3, #32
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	4833      	ldr	r0, [pc, #204]	; (8005c80 <_printf_i+0x240>)
 8005bb4:	2778      	movs	r7, #120	; 0x78
 8005bb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	6829      	ldr	r1, [r5, #0]
 8005bbe:	061f      	lsls	r7, r3, #24
 8005bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc4:	d402      	bmi.n	8005bcc <_printf_i+0x18c>
 8005bc6:	065f      	lsls	r7, r3, #25
 8005bc8:	bf48      	it	mi
 8005bca:	b2b6      	uxthmi	r6, r6
 8005bcc:	07df      	lsls	r7, r3, #31
 8005bce:	bf48      	it	mi
 8005bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd4:	6029      	str	r1, [r5, #0]
 8005bd6:	bf48      	it	mi
 8005bd8:	6023      	strmi	r3, [r4, #0]
 8005bda:	b91e      	cbnz	r6, 8005be4 <_printf_i+0x1a4>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	f023 0320 	bic.w	r3, r3, #32
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	2310      	movs	r3, #16
 8005be6:	e7a7      	b.n	8005b38 <_printf_i+0xf8>
 8005be8:	4824      	ldr	r0, [pc, #144]	; (8005c7c <_printf_i+0x23c>)
 8005bea:	e7e4      	b.n	8005bb6 <_printf_i+0x176>
 8005bec:	4615      	mov	r5, r2
 8005bee:	e7bd      	b.n	8005b6c <_printf_i+0x12c>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6826      	ldr	r6, [r4, #0]
 8005bf4:	6961      	ldr	r1, [r4, #20]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6028      	str	r0, [r5, #0]
 8005bfa:	0635      	lsls	r5, r6, #24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0x1c4>
 8005c00:	6019      	str	r1, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0x1ca>
 8005c04:	0670      	lsls	r0, r6, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0x1c0>
 8005c08:	8019      	strh	r1, [r3, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	4615      	mov	r5, r2
 8005c10:	e7bc      	b.n	8005b8c <_printf_i+0x14c>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	681d      	ldr	r5, [r3, #0]
 8005c1a:	6862      	ldr	r2, [r4, #4]
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f7fa fae6 	bl	80001f0 <memchr>
 8005c24:	b108      	cbz	r0, 8005c2a <_printf_i+0x1ea>
 8005c26:	1b40      	subs	r0, r0, r5
 8005c28:	6060      	str	r0, [r4, #4]
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c34:	e7aa      	b.n	8005b8c <_printf_i+0x14c>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0ad      	beq.n	8005ba0 <_printf_i+0x160>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d413      	bmi.n	8005c72 <_printf_i+0x232>
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	bfb8      	it	lt
 8005c52:	4618      	movlt	r0, r3
 8005c54:	e7a6      	b.n	8005ba4 <_printf_i+0x164>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	47d0      	blx	sl
 8005c60:	3001      	adds	r0, #1
 8005c62:	d09d      	beq.n	8005ba0 <_printf_i+0x160>
 8005c64:	3501      	adds	r5, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9903      	ldr	r1, [sp, #12]
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dcf2      	bgt.n	8005c56 <_printf_i+0x216>
 8005c70:	e7eb      	b.n	8005c4a <_printf_i+0x20a>
 8005c72:	2500      	movs	r5, #0
 8005c74:	f104 0619 	add.w	r6, r4, #25
 8005c78:	e7f5      	b.n	8005c66 <_printf_i+0x226>
 8005c7a:	bf00      	nop
 8005c7c:	0800a142 	.word	0x0800a142
 8005c80:	0800a153 	.word	0x0800a153

08005c84 <_scanf_float>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	b087      	sub	sp, #28
 8005c8a:	4617      	mov	r7, r2
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	688b      	ldr	r3, [r1, #8]
 8005c90:	1e5a      	subs	r2, r3, #1
 8005c92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c96:	bf83      	ittte	hi
 8005c98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c9c:	195b      	addhi	r3, r3, r5
 8005c9e:	9302      	strhi	r3, [sp, #8]
 8005ca0:	2300      	movls	r3, #0
 8005ca2:	bf86      	itte	hi
 8005ca4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ca8:	608b      	strhi	r3, [r1, #8]
 8005caa:	9302      	strls	r3, [sp, #8]
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	468b      	mov	fp, r1
 8005cb0:	2500      	movs	r5, #0
 8005cb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cb6:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	465e      	mov	r6, fp
 8005cc4:	46aa      	mov	sl, r5
 8005cc6:	46a9      	mov	r9, r5
 8005cc8:	9501      	str	r5, [sp, #4]
 8005cca:	68a2      	ldr	r2, [r4, #8]
 8005ccc:	b152      	cbz	r2, 8005ce4 <_scanf_float+0x60>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8005cd4:	d864      	bhi.n	8005da0 <_scanf_float+0x11c>
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d83c      	bhi.n	8005d54 <_scanf_float+0xd0>
 8005cda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005cde:	b2c8      	uxtb	r0, r1
 8005ce0:	280e      	cmp	r0, #14
 8005ce2:	d93a      	bls.n	8005d5a <_scanf_float+0xd6>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	d003      	beq.n	8005cf2 <_scanf_float+0x6e>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cf6:	f1ba 0f01 	cmp.w	sl, #1
 8005cfa:	f200 8113 	bhi.w	8005f24 <_scanf_float+0x2a0>
 8005cfe:	455e      	cmp	r6, fp
 8005d00:	f200 8105 	bhi.w	8005f0e <_scanf_float+0x28a>
 8005d04:	2501      	movs	r5, #1
 8005d06:	4628      	mov	r0, r5
 8005d08:	b007      	add	sp, #28
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d12:	2a0d      	cmp	r2, #13
 8005d14:	d8e6      	bhi.n	8005ce4 <_scanf_float+0x60>
 8005d16:	a101      	add	r1, pc, #4	; (adr r1, 8005d1c <_scanf_float+0x98>)
 8005d18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d1c:	08005e5b 	.word	0x08005e5b
 8005d20:	08005ce5 	.word	0x08005ce5
 8005d24:	08005ce5 	.word	0x08005ce5
 8005d28:	08005ce5 	.word	0x08005ce5
 8005d2c:	08005ebb 	.word	0x08005ebb
 8005d30:	08005e93 	.word	0x08005e93
 8005d34:	08005ce5 	.word	0x08005ce5
 8005d38:	08005ce5 	.word	0x08005ce5
 8005d3c:	08005e69 	.word	0x08005e69
 8005d40:	08005ce5 	.word	0x08005ce5
 8005d44:	08005ce5 	.word	0x08005ce5
 8005d48:	08005ce5 	.word	0x08005ce5
 8005d4c:	08005ce5 	.word	0x08005ce5
 8005d50:	08005e21 	.word	0x08005e21
 8005d54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d58:	e7db      	b.n	8005d12 <_scanf_float+0x8e>
 8005d5a:	290e      	cmp	r1, #14
 8005d5c:	d8c2      	bhi.n	8005ce4 <_scanf_float+0x60>
 8005d5e:	a001      	add	r0, pc, #4	; (adr r0, 8005d64 <_scanf_float+0xe0>)
 8005d60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d64:	08005e13 	.word	0x08005e13
 8005d68:	08005ce5 	.word	0x08005ce5
 8005d6c:	08005e13 	.word	0x08005e13
 8005d70:	08005ea7 	.word	0x08005ea7
 8005d74:	08005ce5 	.word	0x08005ce5
 8005d78:	08005dc1 	.word	0x08005dc1
 8005d7c:	08005dfd 	.word	0x08005dfd
 8005d80:	08005dfd 	.word	0x08005dfd
 8005d84:	08005dfd 	.word	0x08005dfd
 8005d88:	08005dfd 	.word	0x08005dfd
 8005d8c:	08005dfd 	.word	0x08005dfd
 8005d90:	08005dfd 	.word	0x08005dfd
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005dfd 	.word	0x08005dfd
 8005d9c:	08005dfd 	.word	0x08005dfd
 8005da0:	2b6e      	cmp	r3, #110	; 0x6e
 8005da2:	d809      	bhi.n	8005db8 <_scanf_float+0x134>
 8005da4:	2b60      	cmp	r3, #96	; 0x60
 8005da6:	d8b2      	bhi.n	8005d0e <_scanf_float+0x8a>
 8005da8:	2b54      	cmp	r3, #84	; 0x54
 8005daa:	d077      	beq.n	8005e9c <_scanf_float+0x218>
 8005dac:	2b59      	cmp	r3, #89	; 0x59
 8005dae:	d199      	bne.n	8005ce4 <_scanf_float+0x60>
 8005db0:	2d07      	cmp	r5, #7
 8005db2:	d197      	bne.n	8005ce4 <_scanf_float+0x60>
 8005db4:	2508      	movs	r5, #8
 8005db6:	e029      	b.n	8005e0c <_scanf_float+0x188>
 8005db8:	2b74      	cmp	r3, #116	; 0x74
 8005dba:	d06f      	beq.n	8005e9c <_scanf_float+0x218>
 8005dbc:	2b79      	cmp	r3, #121	; 0x79
 8005dbe:	e7f6      	b.n	8005dae <_scanf_float+0x12a>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	05c8      	lsls	r0, r1, #23
 8005dc4:	d51a      	bpl.n	8005dfc <_scanf_float+0x178>
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005dcc:	6021      	str	r1, [r4, #0]
 8005dce:	f109 0901 	add.w	r9, r9, #1
 8005dd2:	b11b      	cbz	r3, 8005ddc <_scanf_float+0x158>
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	68a3      	ldr	r3, [r4, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60a3      	str	r3, [r4, #8]
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	f340 8084 	ble.w	8005efc <_scanf_float+0x278>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	e766      	b.n	8005cca <_scanf_float+0x46>
 8005dfc:	eb1a 0f05 	cmn.w	sl, r5
 8005e00:	f47f af70 	bne.w	8005ce4 <_scanf_float+0x60>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e0a:	6022      	str	r2, [r4, #0]
 8005e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8005e10:	e7e4      	b.n	8005ddc <_scanf_float+0x158>
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	0610      	lsls	r0, r2, #24
 8005e16:	f57f af65 	bpl.w	8005ce4 <_scanf_float+0x60>
 8005e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1e:	e7f4      	b.n	8005e0a <_scanf_float+0x186>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	d10e      	bne.n	8005e44 <_scanf_float+0x1c0>
 8005e26:	f1b9 0f00 	cmp.w	r9, #0
 8005e2a:	d10e      	bne.n	8005e4a <_scanf_float+0x1c6>
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e36:	d108      	bne.n	8005e4a <_scanf_float+0x1c6>
 8005e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e3c:	6022      	str	r2, [r4, #0]
 8005e3e:	f04f 0a01 	mov.w	sl, #1
 8005e42:	e7e3      	b.n	8005e0c <_scanf_float+0x188>
 8005e44:	f1ba 0f02 	cmp.w	sl, #2
 8005e48:	d055      	beq.n	8005ef6 <_scanf_float+0x272>
 8005e4a:	2d01      	cmp	r5, #1
 8005e4c:	d002      	beq.n	8005e54 <_scanf_float+0x1d0>
 8005e4e:	2d04      	cmp	r5, #4
 8005e50:	f47f af48 	bne.w	8005ce4 <_scanf_float+0x60>
 8005e54:	3501      	adds	r5, #1
 8005e56:	b2ed      	uxtb	r5, r5
 8005e58:	e7d8      	b.n	8005e0c <_scanf_float+0x188>
 8005e5a:	f1ba 0f01 	cmp.w	sl, #1
 8005e5e:	f47f af41 	bne.w	8005ce4 <_scanf_float+0x60>
 8005e62:	f04f 0a02 	mov.w	sl, #2
 8005e66:	e7d1      	b.n	8005e0c <_scanf_float+0x188>
 8005e68:	b97d      	cbnz	r5, 8005e8a <_scanf_float+0x206>
 8005e6a:	f1b9 0f00 	cmp.w	r9, #0
 8005e6e:	f47f af3c 	bne.w	8005cea <_scanf_float+0x66>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e7c:	f47f af39 	bne.w	8005cf2 <_scanf_float+0x6e>
 8005e80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e84:	6022      	str	r2, [r4, #0]
 8005e86:	2501      	movs	r5, #1
 8005e88:	e7c0      	b.n	8005e0c <_scanf_float+0x188>
 8005e8a:	2d03      	cmp	r5, #3
 8005e8c:	d0e2      	beq.n	8005e54 <_scanf_float+0x1d0>
 8005e8e:	2d05      	cmp	r5, #5
 8005e90:	e7de      	b.n	8005e50 <_scanf_float+0x1cc>
 8005e92:	2d02      	cmp	r5, #2
 8005e94:	f47f af26 	bne.w	8005ce4 <_scanf_float+0x60>
 8005e98:	2503      	movs	r5, #3
 8005e9a:	e7b7      	b.n	8005e0c <_scanf_float+0x188>
 8005e9c:	2d06      	cmp	r5, #6
 8005e9e:	f47f af21 	bne.w	8005ce4 <_scanf_float+0x60>
 8005ea2:	2507      	movs	r5, #7
 8005ea4:	e7b2      	b.n	8005e0c <_scanf_float+0x188>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	0591      	lsls	r1, r2, #22
 8005eaa:	f57f af1b 	bpl.w	8005ce4 <_scanf_float+0x60>
 8005eae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eb8:	e7a8      	b.n	8005e0c <_scanf_float+0x188>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ec0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ec4:	d006      	beq.n	8005ed4 <_scanf_float+0x250>
 8005ec6:	0550      	lsls	r0, r2, #21
 8005ec8:	f57f af0c 	bpl.w	8005ce4 <_scanf_float+0x60>
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	f43f af0f 	beq.w	8005cf2 <_scanf_float+0x6e>
 8005ed4:	0591      	lsls	r1, r2, #22
 8005ed6:	bf58      	it	pl
 8005ed8:	9901      	ldrpl	r1, [sp, #4]
 8005eda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ede:	bf58      	it	pl
 8005ee0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ee4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ee8:	bf58      	it	pl
 8005eea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	f04f 0900 	mov.w	r9, #0
 8005ef4:	e78a      	b.n	8005e0c <_scanf_float+0x188>
 8005ef6:	f04f 0a03 	mov.w	sl, #3
 8005efa:	e787      	b.n	8005e0c <_scanf_float+0x188>
 8005efc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f00:	4639      	mov	r1, r7
 8005f02:	4640      	mov	r0, r8
 8005f04:	4798      	blx	r3
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f aedf 	beq.w	8005cca <_scanf_float+0x46>
 8005f0c:	e6ea      	b.n	8005ce4 <_scanf_float+0x60>
 8005f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f16:	463a      	mov	r2, r7
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4798      	blx	r3
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	e6ec      	b.n	8005cfe <_scanf_float+0x7a>
 8005f24:	1e6b      	subs	r3, r5, #1
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d825      	bhi.n	8005f76 <_scanf_float+0x2f2>
 8005f2a:	2d02      	cmp	r5, #2
 8005f2c:	d836      	bhi.n	8005f9c <_scanf_float+0x318>
 8005f2e:	455e      	cmp	r6, fp
 8005f30:	f67f aee8 	bls.w	8005d04 <_scanf_float+0x80>
 8005f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4798      	blx	r3
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	e7f1      	b.n	8005f2e <_scanf_float+0x2aa>
 8005f4a:	9802      	ldr	r0, [sp, #8]
 8005f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f54:	9002      	str	r0, [sp, #8]
 8005f56:	463a      	mov	r2, r7
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4798      	blx	r3
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f66:	fa5f fa8a 	uxtb.w	sl, sl
 8005f6a:	f1ba 0f02 	cmp.w	sl, #2
 8005f6e:	d1ec      	bne.n	8005f4a <_scanf_float+0x2c6>
 8005f70:	3d03      	subs	r5, #3
 8005f72:	b2ed      	uxtb	r5, r5
 8005f74:	1b76      	subs	r6, r6, r5
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	05da      	lsls	r2, r3, #23
 8005f7a:	d52f      	bpl.n	8005fdc <_scanf_float+0x358>
 8005f7c:	055b      	lsls	r3, r3, #21
 8005f7e:	d510      	bpl.n	8005fa2 <_scanf_float+0x31e>
 8005f80:	455e      	cmp	r6, fp
 8005f82:	f67f aebf 	bls.w	8005d04 <_scanf_float+0x80>
 8005f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f8e:	463a      	mov	r2, r7
 8005f90:	4640      	mov	r0, r8
 8005f92:	4798      	blx	r3
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	e7f1      	b.n	8005f80 <_scanf_float+0x2fc>
 8005f9c:	46aa      	mov	sl, r5
 8005f9e:	9602      	str	r6, [sp, #8]
 8005fa0:	e7df      	b.n	8005f62 <_scanf_float+0x2de>
 8005fa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2965      	cmp	r1, #101	; 0x65
 8005faa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005fae:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	d00c      	beq.n	8005fd0 <_scanf_float+0x34c>
 8005fb6:	2945      	cmp	r1, #69	; 0x45
 8005fb8:	d00a      	beq.n	8005fd0 <_scanf_float+0x34c>
 8005fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4798      	blx	r3
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	1eb5      	subs	r5, r6, #2
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fd4:	463a      	mov	r2, r7
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4798      	blx	r3
 8005fda:	462e      	mov	r6, r5
 8005fdc:	6825      	ldr	r5, [r4, #0]
 8005fde:	f015 0510 	ands.w	r5, r5, #16
 8005fe2:	d158      	bne.n	8006096 <_scanf_float+0x412>
 8005fe4:	7035      	strb	r5, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d11c      	bne.n	800602c <_scanf_float+0x3a8>
 8005ff2:	9b01      	ldr	r3, [sp, #4]
 8005ff4:	454b      	cmp	r3, r9
 8005ff6:	eba3 0209 	sub.w	r2, r3, r9
 8005ffa:	d124      	bne.n	8006046 <_scanf_float+0x3c2>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4659      	mov	r1, fp
 8006000:	4640      	mov	r0, r8
 8006002:	f002 fde1 	bl	8008bc8 <_strtod_r>
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f011 0f02 	tst.w	r1, #2
 8006010:	ec57 6b10 	vmov	r6, r7, d0
 8006014:	f103 0204 	add.w	r2, r3, #4
 8006018:	d020      	beq.n	800605c <_scanf_float+0x3d8>
 800601a:	9903      	ldr	r1, [sp, #12]
 800601c:	600a      	str	r2, [r1, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	e9c3 6700 	strd	r6, r7, [r3]
 8006024:	68e3      	ldr	r3, [r4, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60e3      	str	r3, [r4, #12]
 800602a:	e66c      	b.n	8005d06 <_scanf_float+0x82>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0e4      	beq.n	8005ffc <_scanf_float+0x378>
 8006032:	9905      	ldr	r1, [sp, #20]
 8006034:	230a      	movs	r3, #10
 8006036:	462a      	mov	r2, r5
 8006038:	3101      	adds	r1, #1
 800603a:	4640      	mov	r0, r8
 800603c:	f002 fe4c 	bl	8008cd8 <_strtol_r>
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	9e05      	ldr	r6, [sp, #20]
 8006044:	1ac2      	subs	r2, r0, r3
 8006046:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800604a:	429e      	cmp	r6, r3
 800604c:	bf28      	it	cs
 800604e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006052:	4912      	ldr	r1, [pc, #72]	; (800609c <_scanf_float+0x418>)
 8006054:	4630      	mov	r0, r6
 8006056:	f000 fa03 	bl	8006460 <siprintf>
 800605a:	e7cf      	b.n	8005ffc <_scanf_float+0x378>
 800605c:	f011 0f04 	tst.w	r1, #4
 8006060:	9903      	ldr	r1, [sp, #12]
 8006062:	600a      	str	r2, [r1, #0]
 8006064:	d1db      	bne.n	800601e <_scanf_float+0x39a>
 8006066:	f8d3 8000 	ldr.w	r8, [r3]
 800606a:	ee10 2a10 	vmov	r2, s0
 800606e:	ee10 0a10 	vmov	r0, s0
 8006072:	463b      	mov	r3, r7
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa fd69 	bl	8000b4c <__aeabi_dcmpun>
 800607a:	b128      	cbz	r0, 8006088 <_scanf_float+0x404>
 800607c:	4808      	ldr	r0, [pc, #32]	; (80060a0 <_scanf_float+0x41c>)
 800607e:	f000 fb67 	bl	8006750 <nanf>
 8006082:	ed88 0a00 	vstr	s0, [r8]
 8006086:	e7cd      	b.n	8006024 <_scanf_float+0x3a0>
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fdbc 	bl	8000c08 <__aeabi_d2f>
 8006090:	f8c8 0000 	str.w	r0, [r8]
 8006094:	e7c6      	b.n	8006024 <_scanf_float+0x3a0>
 8006096:	2500      	movs	r5, #0
 8006098:	e635      	b.n	8005d06 <_scanf_float+0x82>
 800609a:	bf00      	nop
 800609c:	0800a164 	.word	0x0800a164
 80060a0:	0800a4f5 	.word	0x0800a4f5

080060a4 <std>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	e9c0 3300 	strd	r3, r3, [r0]
 80060ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b2:	6083      	str	r3, [r0, #8]
 80060b4:	8181      	strh	r1, [r0, #12]
 80060b6:	6643      	str	r3, [r0, #100]	; 0x64
 80060b8:	81c2      	strh	r2, [r0, #14]
 80060ba:	6183      	str	r3, [r0, #24]
 80060bc:	4619      	mov	r1, r3
 80060be:	2208      	movs	r2, #8
 80060c0:	305c      	adds	r0, #92	; 0x5c
 80060c2:	f000 fac5 	bl	8006650 <memset>
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <std+0x58>)
 80060c8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <std+0x5c>)
 80060cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ce:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <std+0x60>)
 80060d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <std+0x64>)
 80060d4:	6323      	str	r3, [r4, #48]	; 0x30
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <std+0x68>)
 80060d8:	6224      	str	r4, [r4, #32]
 80060da:	429c      	cmp	r4, r3
 80060dc:	d006      	beq.n	80060ec <std+0x48>
 80060de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060e2:	4294      	cmp	r4, r2
 80060e4:	d002      	beq.n	80060ec <std+0x48>
 80060e6:	33d0      	adds	r3, #208	; 0xd0
 80060e8:	429c      	cmp	r4, r3
 80060ea:	d105      	bne.n	80060f8 <std+0x54>
 80060ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f4:	f000 bb28 	b.w	8006748 <__retarget_lock_init_recursive>
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop
 80060fc:	080064a1 	.word	0x080064a1
 8006100:	080064c3 	.word	0x080064c3
 8006104:	080064fb 	.word	0x080064fb
 8006108:	0800651f 	.word	0x0800651f
 800610c:	20000420 	.word	0x20000420

08006110 <stdio_exit_handler>:
 8006110:	4a02      	ldr	r2, [pc, #8]	; (800611c <stdio_exit_handler+0xc>)
 8006112:	4903      	ldr	r1, [pc, #12]	; (8006120 <stdio_exit_handler+0x10>)
 8006114:	4803      	ldr	r0, [pc, #12]	; (8006124 <stdio_exit_handler+0x14>)
 8006116:	f000 b869 	b.w	80061ec <_fwalk_sglue>
 800611a:	bf00      	nop
 800611c:	20000024 	.word	0x20000024
 8006120:	08009321 	.word	0x08009321
 8006124:	20000030 	.word	0x20000030

08006128 <cleanup_stdio>:
 8006128:	6841      	ldr	r1, [r0, #4]
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <cleanup_stdio+0x34>)
 800612c:	4299      	cmp	r1, r3
 800612e:	b510      	push	{r4, lr}
 8006130:	4604      	mov	r4, r0
 8006132:	d001      	beq.n	8006138 <cleanup_stdio+0x10>
 8006134:	f003 f8f4 	bl	8009320 <_fflush_r>
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <cleanup_stdio+0x38>)
 800613c:	4299      	cmp	r1, r3
 800613e:	d002      	beq.n	8006146 <cleanup_stdio+0x1e>
 8006140:	4620      	mov	r0, r4
 8006142:	f003 f8ed 	bl	8009320 <_fflush_r>
 8006146:	68e1      	ldr	r1, [r4, #12]
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <cleanup_stdio+0x3c>)
 800614a:	4299      	cmp	r1, r3
 800614c:	d004      	beq.n	8006158 <cleanup_stdio+0x30>
 800614e:	4620      	mov	r0, r4
 8006150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006154:	f003 b8e4 	b.w	8009320 <_fflush_r>
 8006158:	bd10      	pop	{r4, pc}
 800615a:	bf00      	nop
 800615c:	20000420 	.word	0x20000420
 8006160:	20000488 	.word	0x20000488
 8006164:	200004f0 	.word	0x200004f0

08006168 <global_stdio_init.part.0>:
 8006168:	b510      	push	{r4, lr}
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <global_stdio_init.part.0+0x30>)
 800616c:	4c0b      	ldr	r4, [pc, #44]	; (800619c <global_stdio_init.part.0+0x34>)
 800616e:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <global_stdio_init.part.0+0x38>)
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	2200      	movs	r2, #0
 8006176:	2104      	movs	r1, #4
 8006178:	f7ff ff94 	bl	80060a4 <std>
 800617c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006180:	2201      	movs	r2, #1
 8006182:	2109      	movs	r1, #9
 8006184:	f7ff ff8e 	bl	80060a4 <std>
 8006188:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800618c:	2202      	movs	r2, #2
 800618e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006192:	2112      	movs	r1, #18
 8006194:	f7ff bf86 	b.w	80060a4 <std>
 8006198:	20000558 	.word	0x20000558
 800619c:	20000420 	.word	0x20000420
 80061a0:	08006111 	.word	0x08006111

080061a4 <__sfp_lock_acquire>:
 80061a4:	4801      	ldr	r0, [pc, #4]	; (80061ac <__sfp_lock_acquire+0x8>)
 80061a6:	f000 bad0 	b.w	800674a <__retarget_lock_acquire_recursive>
 80061aa:	bf00      	nop
 80061ac:	20000561 	.word	0x20000561

080061b0 <__sfp_lock_release>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__sfp_lock_release+0x8>)
 80061b2:	f000 bacb 	b.w	800674c <__retarget_lock_release_recursive>
 80061b6:	bf00      	nop
 80061b8:	20000561 	.word	0x20000561

080061bc <__sinit>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	f7ff fff0 	bl	80061a4 <__sfp_lock_acquire>
 80061c4:	6a23      	ldr	r3, [r4, #32]
 80061c6:	b11b      	cbz	r3, 80061d0 <__sinit+0x14>
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	f7ff bff0 	b.w	80061b0 <__sfp_lock_release>
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__sinit+0x28>)
 80061d2:	6223      	str	r3, [r4, #32]
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <__sinit+0x2c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f5      	bne.n	80061c8 <__sinit+0xc>
 80061dc:	f7ff ffc4 	bl	8006168 <global_stdio_init.part.0>
 80061e0:	e7f2      	b.n	80061c8 <__sinit+0xc>
 80061e2:	bf00      	nop
 80061e4:	08006129 	.word	0x08006129
 80061e8:	20000558 	.word	0x20000558

080061ec <_fwalk_sglue>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	4607      	mov	r7, r0
 80061f2:	4688      	mov	r8, r1
 80061f4:	4614      	mov	r4, r2
 80061f6:	2600      	movs	r6, #0
 80061f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006200:	d505      	bpl.n	800620e <_fwalk_sglue+0x22>
 8006202:	6824      	ldr	r4, [r4, #0]
 8006204:	2c00      	cmp	r4, #0
 8006206:	d1f7      	bne.n	80061f8 <_fwalk_sglue+0xc>
 8006208:	4630      	mov	r0, r6
 800620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d907      	bls.n	8006224 <_fwalk_sglue+0x38>
 8006214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006218:	3301      	adds	r3, #1
 800621a:	d003      	beq.n	8006224 <_fwalk_sglue+0x38>
 800621c:	4629      	mov	r1, r5
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	4306      	orrs	r6, r0
 8006224:	3568      	adds	r5, #104	; 0x68
 8006226:	e7e9      	b.n	80061fc <_fwalk_sglue+0x10>

08006228 <iprintf>:
 8006228:	b40f      	push	{r0, r1, r2, r3}
 800622a:	b507      	push	{r0, r1, r2, lr}
 800622c:	4906      	ldr	r1, [pc, #24]	; (8006248 <iprintf+0x20>)
 800622e:	ab04      	add	r3, sp, #16
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	f853 2b04 	ldr.w	r2, [r3], #4
 8006236:	6881      	ldr	r1, [r0, #8]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f002 fed1 	bl	8008fe0 <_vfiprintf_r>
 800623e:	b003      	add	sp, #12
 8006240:	f85d eb04 	ldr.w	lr, [sp], #4
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr
 8006248:	2000007c 	.word	0x2000007c

0800624c <_puts_r>:
 800624c:	6a03      	ldr	r3, [r0, #32]
 800624e:	b570      	push	{r4, r5, r6, lr}
 8006250:	6884      	ldr	r4, [r0, #8]
 8006252:	4605      	mov	r5, r0
 8006254:	460e      	mov	r6, r1
 8006256:	b90b      	cbnz	r3, 800625c <_puts_r+0x10>
 8006258:	f7ff ffb0 	bl	80061bc <__sinit>
 800625c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800625e:	07db      	lsls	r3, r3, #31
 8006260:	d405      	bmi.n	800626e <_puts_r+0x22>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	0598      	lsls	r0, r3, #22
 8006266:	d402      	bmi.n	800626e <_puts_r+0x22>
 8006268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626a:	f000 fa6e 	bl	800674a <__retarget_lock_acquire_recursive>
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	0719      	lsls	r1, r3, #28
 8006272:	d513      	bpl.n	800629c <_puts_r+0x50>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	b18b      	cbz	r3, 800629c <_puts_r+0x50>
 8006278:	3e01      	subs	r6, #1
 800627a:	68a3      	ldr	r3, [r4, #8]
 800627c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006280:	3b01      	subs	r3, #1
 8006282:	60a3      	str	r3, [r4, #8]
 8006284:	b9e9      	cbnz	r1, 80062c2 <_puts_r+0x76>
 8006286:	2b00      	cmp	r3, #0
 8006288:	da2e      	bge.n	80062e8 <_puts_r+0x9c>
 800628a:	4622      	mov	r2, r4
 800628c:	210a      	movs	r1, #10
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f949 	bl	8006526 <__swbuf_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d007      	beq.n	80062a8 <_puts_r+0x5c>
 8006298:	250a      	movs	r5, #10
 800629a:	e007      	b.n	80062ac <_puts_r+0x60>
 800629c:	4621      	mov	r1, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 f97e 	bl	80065a0 <__swsetup_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d0e7      	beq.n	8006278 <_puts_r+0x2c>
 80062a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80062ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ae:	07da      	lsls	r2, r3, #31
 80062b0:	d405      	bmi.n	80062be <_puts_r+0x72>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	059b      	lsls	r3, r3, #22
 80062b6:	d402      	bmi.n	80062be <_puts_r+0x72>
 80062b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ba:	f000 fa47 	bl	800674c <__retarget_lock_release_recursive>
 80062be:	4628      	mov	r0, r5
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da04      	bge.n	80062d0 <_puts_r+0x84>
 80062c6:	69a2      	ldr	r2, [r4, #24]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	dc06      	bgt.n	80062da <_puts_r+0x8e>
 80062cc:	290a      	cmp	r1, #10
 80062ce:	d004      	beq.n	80062da <_puts_r+0x8e>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	6022      	str	r2, [r4, #0]
 80062d6:	7019      	strb	r1, [r3, #0]
 80062d8:	e7cf      	b.n	800627a <_puts_r+0x2e>
 80062da:	4622      	mov	r2, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f922 	bl	8006526 <__swbuf_r>
 80062e2:	3001      	adds	r0, #1
 80062e4:	d1c9      	bne.n	800627a <_puts_r+0x2e>
 80062e6:	e7df      	b.n	80062a8 <_puts_r+0x5c>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	250a      	movs	r5, #10
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	6022      	str	r2, [r4, #0]
 80062f0:	701d      	strb	r5, [r3, #0]
 80062f2:	e7db      	b.n	80062ac <_puts_r+0x60>

080062f4 <puts>:
 80062f4:	4b02      	ldr	r3, [pc, #8]	; (8006300 <puts+0xc>)
 80062f6:	4601      	mov	r1, r0
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f7ff bfa7 	b.w	800624c <_puts_r>
 80062fe:	bf00      	nop
 8006300:	2000007c 	.word	0x2000007c

08006304 <setvbuf>:
 8006304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006308:	461d      	mov	r5, r3
 800630a:	4b54      	ldr	r3, [pc, #336]	; (800645c <setvbuf+0x158>)
 800630c:	681f      	ldr	r7, [r3, #0]
 800630e:	4604      	mov	r4, r0
 8006310:	460e      	mov	r6, r1
 8006312:	4690      	mov	r8, r2
 8006314:	b127      	cbz	r7, 8006320 <setvbuf+0x1c>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	b913      	cbnz	r3, 8006320 <setvbuf+0x1c>
 800631a:	4638      	mov	r0, r7
 800631c:	f7ff ff4e 	bl	80061bc <__sinit>
 8006320:	f1b8 0f02 	cmp.w	r8, #2
 8006324:	d006      	beq.n	8006334 <setvbuf+0x30>
 8006326:	f1b8 0f01 	cmp.w	r8, #1
 800632a:	f200 8094 	bhi.w	8006456 <setvbuf+0x152>
 800632e:	2d00      	cmp	r5, #0
 8006330:	f2c0 8091 	blt.w	8006456 <setvbuf+0x152>
 8006334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d405      	bmi.n	8006346 <setvbuf+0x42>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	d402      	bmi.n	8006346 <setvbuf+0x42>
 8006340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006342:	f000 fa02 	bl	800674a <__retarget_lock_acquire_recursive>
 8006346:	4621      	mov	r1, r4
 8006348:	4638      	mov	r0, r7
 800634a:	f002 ffe9 	bl	8009320 <_fflush_r>
 800634e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006350:	b141      	cbz	r1, 8006364 <setvbuf+0x60>
 8006352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006356:	4299      	cmp	r1, r3
 8006358:	d002      	beq.n	8006360 <setvbuf+0x5c>
 800635a:	4638      	mov	r0, r7
 800635c:	f001 f87a 	bl	8007454 <_free_r>
 8006360:	2300      	movs	r3, #0
 8006362:	6363      	str	r3, [r4, #52]	; 0x34
 8006364:	2300      	movs	r3, #0
 8006366:	61a3      	str	r3, [r4, #24]
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	0618      	lsls	r0, r3, #24
 800636e:	d503      	bpl.n	8006378 <setvbuf+0x74>
 8006370:	6921      	ldr	r1, [r4, #16]
 8006372:	4638      	mov	r0, r7
 8006374:	f001 f86e 	bl	8007454 <_free_r>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	f1b8 0f02 	cmp.w	r8, #2
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	d05f      	beq.n	800644a <setvbuf+0x146>
 800638a:	ab01      	add	r3, sp, #4
 800638c:	466a      	mov	r2, sp
 800638e:	4621      	mov	r1, r4
 8006390:	4638      	mov	r0, r7
 8006392:	f002 ffed 	bl	8009370 <__swhatbuf_r>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	4318      	orrs	r0, r3
 800639a:	81a0      	strh	r0, [r4, #12]
 800639c:	bb2d      	cbnz	r5, 80063ea <setvbuf+0xe6>
 800639e:	9d00      	ldr	r5, [sp, #0]
 80063a0:	4628      	mov	r0, r5
 80063a2:	f001 f8a3 	bl	80074ec <malloc>
 80063a6:	4606      	mov	r6, r0
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d150      	bne.n	800644e <setvbuf+0x14a>
 80063ac:	f8dd 9000 	ldr.w	r9, [sp]
 80063b0:	45a9      	cmp	r9, r5
 80063b2:	d13e      	bne.n	8006432 <setvbuf+0x12e>
 80063b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80063b8:	2200      	movs	r2, #0
 80063ba:	60a2      	str	r2, [r4, #8]
 80063bc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80063c0:	6022      	str	r2, [r4, #0]
 80063c2:	6122      	str	r2, [r4, #16]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ca:	6162      	str	r2, [r4, #20]
 80063cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063ce:	f043 0302 	orr.w	r3, r3, #2
 80063d2:	07d1      	lsls	r1, r2, #31
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	d404      	bmi.n	80063e2 <setvbuf+0xde>
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d402      	bmi.n	80063e2 <setvbuf+0xde>
 80063dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063de:	f000 f9b5 	bl	800674c <__retarget_lock_release_recursive>
 80063e2:	4628      	mov	r0, r5
 80063e4:	b003      	add	sp, #12
 80063e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d0d8      	beq.n	80063a0 <setvbuf+0x9c>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	b913      	cbnz	r3, 80063f8 <setvbuf+0xf4>
 80063f2:	4638      	mov	r0, r7
 80063f4:	f7ff fee2 	bl	80061bc <__sinit>
 80063f8:	f1b8 0f01 	cmp.w	r8, #1
 80063fc:	bf08      	it	eq
 80063fe:	89a3      	ldrheq	r3, [r4, #12]
 8006400:	6026      	str	r6, [r4, #0]
 8006402:	bf04      	itt	eq
 8006404:	f043 0301 	orreq.w	r3, r3, #1
 8006408:	81a3      	strheq	r3, [r4, #12]
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f013 0208 	ands.w	r2, r3, #8
 8006410:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006414:	d01d      	beq.n	8006452 <setvbuf+0x14e>
 8006416:	07da      	lsls	r2, r3, #31
 8006418:	bf41      	itttt	mi
 800641a:	2200      	movmi	r2, #0
 800641c:	426d      	negmi	r5, r5
 800641e:	60a2      	strmi	r2, [r4, #8]
 8006420:	61a5      	strmi	r5, [r4, #24]
 8006422:	bf58      	it	pl
 8006424:	60a5      	strpl	r5, [r4, #8]
 8006426:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006428:	f015 0501 	ands.w	r5, r5, #1
 800642c:	d0d4      	beq.n	80063d8 <setvbuf+0xd4>
 800642e:	2500      	movs	r5, #0
 8006430:	e7d7      	b.n	80063e2 <setvbuf+0xde>
 8006432:	4648      	mov	r0, r9
 8006434:	f001 f85a 	bl	80074ec <malloc>
 8006438:	4606      	mov	r6, r0
 800643a:	2800      	cmp	r0, #0
 800643c:	d0ba      	beq.n	80063b4 <setvbuf+0xb0>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	464d      	mov	r5, r9
 8006448:	e7d1      	b.n	80063ee <setvbuf+0xea>
 800644a:	2500      	movs	r5, #0
 800644c:	e7b4      	b.n	80063b8 <setvbuf+0xb4>
 800644e:	46a9      	mov	r9, r5
 8006450:	e7f5      	b.n	800643e <setvbuf+0x13a>
 8006452:	60a2      	str	r2, [r4, #8]
 8006454:	e7e7      	b.n	8006426 <setvbuf+0x122>
 8006456:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800645a:	e7c2      	b.n	80063e2 <setvbuf+0xde>
 800645c:	2000007c 	.word	0x2000007c

08006460 <siprintf>:
 8006460:	b40e      	push	{r1, r2, r3}
 8006462:	b500      	push	{lr}
 8006464:	b09c      	sub	sp, #112	; 0x70
 8006466:	ab1d      	add	r3, sp, #116	; 0x74
 8006468:	9002      	str	r0, [sp, #8]
 800646a:	9006      	str	r0, [sp, #24]
 800646c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006470:	4809      	ldr	r0, [pc, #36]	; (8006498 <siprintf+0x38>)
 8006472:	9107      	str	r1, [sp, #28]
 8006474:	9104      	str	r1, [sp, #16]
 8006476:	4909      	ldr	r1, [pc, #36]	; (800649c <siprintf+0x3c>)
 8006478:	f853 2b04 	ldr.w	r2, [r3], #4
 800647c:	9105      	str	r1, [sp, #20]
 800647e:	6800      	ldr	r0, [r0, #0]
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	a902      	add	r1, sp, #8
 8006484:	f002 fc84 	bl	8008d90 <_svfiprintf_r>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	b01c      	add	sp, #112	; 0x70
 8006490:	f85d eb04 	ldr.w	lr, [sp], #4
 8006494:	b003      	add	sp, #12
 8006496:	4770      	bx	lr
 8006498:	2000007c 	.word	0x2000007c
 800649c:	ffff0208 	.word	0xffff0208

080064a0 <__sread>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	f000 f900 	bl	80066ac <_read_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	bfab      	itete	ge
 80064b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064b2:	89a3      	ldrhlt	r3, [r4, #12]
 80064b4:	181b      	addge	r3, r3, r0
 80064b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ba:	bfac      	ite	ge
 80064bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064be:	81a3      	strhlt	r3, [r4, #12]
 80064c0:	bd10      	pop	{r4, pc}

080064c2 <__swrite>:
 80064c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	461f      	mov	r7, r3
 80064c8:	898b      	ldrh	r3, [r1, #12]
 80064ca:	05db      	lsls	r3, r3, #23
 80064cc:	4605      	mov	r5, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4616      	mov	r6, r2
 80064d2:	d505      	bpl.n	80064e0 <__swrite+0x1e>
 80064d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d8:	2302      	movs	r3, #2
 80064da:	2200      	movs	r2, #0
 80064dc:	f000 f8d4 	bl	8006688 <_lseek_r>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	4632      	mov	r2, r6
 80064ee:	463b      	mov	r3, r7
 80064f0:	4628      	mov	r0, r5
 80064f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f6:	f000 b8eb 	b.w	80066d0 <_write_r>

080064fa <__sseek>:
 80064fa:	b510      	push	{r4, lr}
 80064fc:	460c      	mov	r4, r1
 80064fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006502:	f000 f8c1 	bl	8006688 <_lseek_r>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	bf15      	itete	ne
 800650c:	6560      	strne	r0, [r4, #84]	; 0x54
 800650e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006516:	81a3      	strheq	r3, [r4, #12]
 8006518:	bf18      	it	ne
 800651a:	81a3      	strhne	r3, [r4, #12]
 800651c:	bd10      	pop	{r4, pc}

0800651e <__sclose>:
 800651e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006522:	f000 b8a1 	b.w	8006668 <_close_r>

08006526 <__swbuf_r>:
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	460e      	mov	r6, r1
 800652a:	4614      	mov	r4, r2
 800652c:	4605      	mov	r5, r0
 800652e:	b118      	cbz	r0, 8006538 <__swbuf_r+0x12>
 8006530:	6a03      	ldr	r3, [r0, #32]
 8006532:	b90b      	cbnz	r3, 8006538 <__swbuf_r+0x12>
 8006534:	f7ff fe42 	bl	80061bc <__sinit>
 8006538:	69a3      	ldr	r3, [r4, #24]
 800653a:	60a3      	str	r3, [r4, #8]
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	071a      	lsls	r2, r3, #28
 8006540:	d525      	bpl.n	800658e <__swbuf_r+0x68>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	b31b      	cbz	r3, 800658e <__swbuf_r+0x68>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	6922      	ldr	r2, [r4, #16]
 800654a:	1a98      	subs	r0, r3, r2
 800654c:	6963      	ldr	r3, [r4, #20]
 800654e:	b2f6      	uxtb	r6, r6
 8006550:	4283      	cmp	r3, r0
 8006552:	4637      	mov	r7, r6
 8006554:	dc04      	bgt.n	8006560 <__swbuf_r+0x3a>
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f002 fee1 	bl	8009320 <_fflush_r>
 800655e:	b9e0      	cbnz	r0, 800659a <__swbuf_r+0x74>
 8006560:	68a3      	ldr	r3, [r4, #8]
 8006562:	3b01      	subs	r3, #1
 8006564:	60a3      	str	r3, [r4, #8]
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	6022      	str	r2, [r4, #0]
 800656c:	701e      	strb	r6, [r3, #0]
 800656e:	6962      	ldr	r2, [r4, #20]
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	429a      	cmp	r2, r3
 8006574:	d004      	beq.n	8006580 <__swbuf_r+0x5a>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	07db      	lsls	r3, r3, #31
 800657a:	d506      	bpl.n	800658a <__swbuf_r+0x64>
 800657c:	2e0a      	cmp	r6, #10
 800657e:	d104      	bne.n	800658a <__swbuf_r+0x64>
 8006580:	4621      	mov	r1, r4
 8006582:	4628      	mov	r0, r5
 8006584:	f002 fecc 	bl	8009320 <_fflush_r>
 8006588:	b938      	cbnz	r0, 800659a <__swbuf_r+0x74>
 800658a:	4638      	mov	r0, r7
 800658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658e:	4621      	mov	r1, r4
 8006590:	4628      	mov	r0, r5
 8006592:	f000 f805 	bl	80065a0 <__swsetup_r>
 8006596:	2800      	cmp	r0, #0
 8006598:	d0d5      	beq.n	8006546 <__swbuf_r+0x20>
 800659a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800659e:	e7f4      	b.n	800658a <__swbuf_r+0x64>

080065a0 <__swsetup_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4b2a      	ldr	r3, [pc, #168]	; (800664c <__swsetup_r+0xac>)
 80065a4:	4605      	mov	r5, r0
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	460c      	mov	r4, r1
 80065aa:	b118      	cbz	r0, 80065b4 <__swsetup_r+0x14>
 80065ac:	6a03      	ldr	r3, [r0, #32]
 80065ae:	b90b      	cbnz	r3, 80065b4 <__swsetup_r+0x14>
 80065b0:	f7ff fe04 	bl	80061bc <__sinit>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ba:	0718      	lsls	r0, r3, #28
 80065bc:	d422      	bmi.n	8006604 <__swsetup_r+0x64>
 80065be:	06d9      	lsls	r1, r3, #27
 80065c0:	d407      	bmi.n	80065d2 <__swsetup_r+0x32>
 80065c2:	2309      	movs	r3, #9
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d0:	e034      	b.n	800663c <__swsetup_r+0x9c>
 80065d2:	0758      	lsls	r0, r3, #29
 80065d4:	d512      	bpl.n	80065fc <__swsetup_r+0x5c>
 80065d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065d8:	b141      	cbz	r1, 80065ec <__swsetup_r+0x4c>
 80065da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065de:	4299      	cmp	r1, r3
 80065e0:	d002      	beq.n	80065e8 <__swsetup_r+0x48>
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 ff36 	bl	8007454 <_free_r>
 80065e8:	2300      	movs	r3, #0
 80065ea:	6363      	str	r3, [r4, #52]	; 0x34
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	2300      	movs	r3, #0
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f043 0308 	orr.w	r3, r3, #8
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	b94b      	cbnz	r3, 800661c <__swsetup_r+0x7c>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800660e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006612:	d003      	beq.n	800661c <__swsetup_r+0x7c>
 8006614:	4621      	mov	r1, r4
 8006616:	4628      	mov	r0, r5
 8006618:	f002 fed0 	bl	80093bc <__smakebuf_r>
 800661c:	89a0      	ldrh	r0, [r4, #12]
 800661e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006622:	f010 0301 	ands.w	r3, r0, #1
 8006626:	d00a      	beq.n	800663e <__swsetup_r+0x9e>
 8006628:	2300      	movs	r3, #0
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	6963      	ldr	r3, [r4, #20]
 800662e:	425b      	negs	r3, r3
 8006630:	61a3      	str	r3, [r4, #24]
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	b943      	cbnz	r3, 8006648 <__swsetup_r+0xa8>
 8006636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800663a:	d1c4      	bne.n	80065c6 <__swsetup_r+0x26>
 800663c:	bd38      	pop	{r3, r4, r5, pc}
 800663e:	0781      	lsls	r1, r0, #30
 8006640:	bf58      	it	pl
 8006642:	6963      	ldrpl	r3, [r4, #20]
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	e7f4      	b.n	8006632 <__swsetup_r+0x92>
 8006648:	2000      	movs	r0, #0
 800664a:	e7f7      	b.n	800663c <__swsetup_r+0x9c>
 800664c:	2000007c 	.word	0x2000007c

08006650 <memset>:
 8006650:	4402      	add	r2, r0
 8006652:	4603      	mov	r3, r0
 8006654:	4293      	cmp	r3, r2
 8006656:	d100      	bne.n	800665a <memset+0xa>
 8006658:	4770      	bx	lr
 800665a:	f803 1b01 	strb.w	r1, [r3], #1
 800665e:	e7f9      	b.n	8006654 <memset+0x4>

08006660 <_localeconv_r>:
 8006660:	4800      	ldr	r0, [pc, #0]	; (8006664 <_localeconv_r+0x4>)
 8006662:	4770      	bx	lr
 8006664:	20000170 	.word	0x20000170

08006668 <_close_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_close_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fc f88b 	bl	800278e <_close>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_close_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_close_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	2000055c 	.word	0x2000055c

08006688 <_lseek_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	; (80066a8 <_lseek_r+0x20>)
 800668c:	4604      	mov	r4, r0
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fc f8a0 	bl	80027dc <_lseek>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_lseek_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_lseek_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	2000055c 	.word	0x2000055c

080066ac <_read_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	; (80066cc <_read_r+0x20>)
 80066b0:	4604      	mov	r4, r0
 80066b2:	4608      	mov	r0, r1
 80066b4:	4611      	mov	r1, r2
 80066b6:	2200      	movs	r2, #0
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fc f82e 	bl	800271c <_read>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_read_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_read_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	2000055c 	.word	0x2000055c

080066d0 <_write_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	; (80066f0 <_write_r+0x20>)
 80066d4:	4604      	mov	r4, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fc f839 	bl	8002756 <_write>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_write_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_write_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	2000055c 	.word	0x2000055c

080066f4 <__errno>:
 80066f4:	4b01      	ldr	r3, [pc, #4]	; (80066fc <__errno+0x8>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	2000007c 	.word	0x2000007c

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	; (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	; (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	; (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	; (8006744 <__libc_init_array+0x44>)
 8006714:	f003 fb44 	bl	8009da0 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	0800a560 	.word	0x0800a560
 800673c:	0800a560 	.word	0x0800a560
 8006740:	0800a560 	.word	0x0800a560
 8006744:	0800a564 	.word	0x0800a564

08006748 <__retarget_lock_init_recursive>:
 8006748:	4770      	bx	lr

0800674a <__retarget_lock_acquire_recursive>:
 800674a:	4770      	bx	lr

0800674c <__retarget_lock_release_recursive>:
 800674c:	4770      	bx	lr
	...

08006750 <nanf>:
 8006750:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006758 <nanf+0x8>
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	7fc00000 	.word	0x7fc00000

0800675c <quorem>:
 800675c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	6903      	ldr	r3, [r0, #16]
 8006762:	690c      	ldr	r4, [r1, #16]
 8006764:	42a3      	cmp	r3, r4
 8006766:	4607      	mov	r7, r0
 8006768:	db7e      	blt.n	8006868 <quorem+0x10c>
 800676a:	3c01      	subs	r4, #1
 800676c:	f101 0814 	add.w	r8, r1, #20
 8006770:	f100 0514 	add.w	r5, r0, #20
 8006774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800677e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006782:	3301      	adds	r3, #1
 8006784:	429a      	cmp	r2, r3
 8006786:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800678a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800678e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006792:	d331      	bcc.n	80067f8 <quorem+0x9c>
 8006794:	f04f 0e00 	mov.w	lr, #0
 8006798:	4640      	mov	r0, r8
 800679a:	46ac      	mov	ip, r5
 800679c:	46f2      	mov	sl, lr
 800679e:	f850 2b04 	ldr.w	r2, [r0], #4
 80067a2:	b293      	uxth	r3, r2
 80067a4:	fb06 e303 	mla	r3, r6, r3, lr
 80067a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ac:	0c1a      	lsrs	r2, r3, #16
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ebaa 0303 	sub.w	r3, sl, r3
 80067b4:	f8dc a000 	ldr.w	sl, [ip]
 80067b8:	fa13 f38a 	uxtah	r3, r3, sl
 80067bc:	fb06 220e 	mla	r2, r6, lr, r2
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	9b00      	ldr	r3, [sp, #0]
 80067c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067c8:	b292      	uxth	r2, r2
 80067ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80067d6:	4581      	cmp	r9, r0
 80067d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067dc:	f84c 3b04 	str.w	r3, [ip], #4
 80067e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067e4:	d2db      	bcs.n	800679e <quorem+0x42>
 80067e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80067ea:	b92b      	cbnz	r3, 80067f8 <quorem+0x9c>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	3b04      	subs	r3, #4
 80067f0:	429d      	cmp	r5, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	d32c      	bcc.n	8006850 <quorem+0xf4>
 80067f6:	613c      	str	r4, [r7, #16]
 80067f8:	4638      	mov	r0, r7
 80067fa:	f001 f9f1 	bl	8007be0 <__mcmp>
 80067fe:	2800      	cmp	r0, #0
 8006800:	db22      	blt.n	8006848 <quorem+0xec>
 8006802:	3601      	adds	r6, #1
 8006804:	4629      	mov	r1, r5
 8006806:	2000      	movs	r0, #0
 8006808:	f858 2b04 	ldr.w	r2, [r8], #4
 800680c:	f8d1 c000 	ldr.w	ip, [r1]
 8006810:	b293      	uxth	r3, r2
 8006812:	1ac3      	subs	r3, r0, r3
 8006814:	0c12      	lsrs	r2, r2, #16
 8006816:	fa13 f38c 	uxtah	r3, r3, ip
 800681a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800681e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006828:	45c1      	cmp	r9, r8
 800682a:	f841 3b04 	str.w	r3, [r1], #4
 800682e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006832:	d2e9      	bcs.n	8006808 <quorem+0xac>
 8006834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800683c:	b922      	cbnz	r2, 8006848 <quorem+0xec>
 800683e:	3b04      	subs	r3, #4
 8006840:	429d      	cmp	r5, r3
 8006842:	461a      	mov	r2, r3
 8006844:	d30a      	bcc.n	800685c <quorem+0x100>
 8006846:	613c      	str	r4, [r7, #16]
 8006848:	4630      	mov	r0, r6
 800684a:	b003      	add	sp, #12
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	3b04      	subs	r3, #4
 8006854:	2a00      	cmp	r2, #0
 8006856:	d1ce      	bne.n	80067f6 <quorem+0x9a>
 8006858:	3c01      	subs	r4, #1
 800685a:	e7c9      	b.n	80067f0 <quorem+0x94>
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	3b04      	subs	r3, #4
 8006860:	2a00      	cmp	r2, #0
 8006862:	d1f0      	bne.n	8006846 <quorem+0xea>
 8006864:	3c01      	subs	r4, #1
 8006866:	e7eb      	b.n	8006840 <quorem+0xe4>
 8006868:	2000      	movs	r0, #0
 800686a:	e7ee      	b.n	800684a <quorem+0xee>
 800686c:	0000      	movs	r0, r0
	...

08006870 <_dtoa_r>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	ed2d 8b04 	vpush	{d8-d9}
 8006878:	69c5      	ldr	r5, [r0, #28]
 800687a:	b093      	sub	sp, #76	; 0x4c
 800687c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006880:	ec57 6b10 	vmov	r6, r7, d0
 8006884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006888:	9107      	str	r1, [sp, #28]
 800688a:	4604      	mov	r4, r0
 800688c:	920a      	str	r2, [sp, #40]	; 0x28
 800688e:	930d      	str	r3, [sp, #52]	; 0x34
 8006890:	b975      	cbnz	r5, 80068b0 <_dtoa_r+0x40>
 8006892:	2010      	movs	r0, #16
 8006894:	f000 fe2a 	bl	80074ec <malloc>
 8006898:	4602      	mov	r2, r0
 800689a:	61e0      	str	r0, [r4, #28]
 800689c:	b920      	cbnz	r0, 80068a8 <_dtoa_r+0x38>
 800689e:	4bae      	ldr	r3, [pc, #696]	; (8006b58 <_dtoa_r+0x2e8>)
 80068a0:	21ef      	movs	r1, #239	; 0xef
 80068a2:	48ae      	ldr	r0, [pc, #696]	; (8006b5c <_dtoa_r+0x2ec>)
 80068a4:	f002 fe3c 	bl	8009520 <__assert_func>
 80068a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068ac:	6005      	str	r5, [r0, #0]
 80068ae:	60c5      	str	r5, [r0, #12]
 80068b0:	69e3      	ldr	r3, [r4, #28]
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	b151      	cbz	r1, 80068cc <_dtoa_r+0x5c>
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	604a      	str	r2, [r1, #4]
 80068ba:	2301      	movs	r3, #1
 80068bc:	4093      	lsls	r3, r2
 80068be:	608b      	str	r3, [r1, #8]
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 ff07 	bl	80076d4 <_Bfree>
 80068c6:	69e3      	ldr	r3, [r4, #28]
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	1e3b      	subs	r3, r7, #0
 80068ce:	bfbb      	ittet	lt
 80068d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068d4:	9303      	strlt	r3, [sp, #12]
 80068d6:	2300      	movge	r3, #0
 80068d8:	2201      	movlt	r2, #1
 80068da:	bfac      	ite	ge
 80068dc:	f8c8 3000 	strge.w	r3, [r8]
 80068e0:	f8c8 2000 	strlt.w	r2, [r8]
 80068e4:	4b9e      	ldr	r3, [pc, #632]	; (8006b60 <_dtoa_r+0x2f0>)
 80068e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80068ea:	ea33 0308 	bics.w	r3, r3, r8
 80068ee:	d11b      	bne.n	8006928 <_dtoa_r+0xb8>
 80068f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80068fc:	4333      	orrs	r3, r6
 80068fe:	f000 8593 	beq.w	8007428 <_dtoa_r+0xbb8>
 8006902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006904:	b963      	cbnz	r3, 8006920 <_dtoa_r+0xb0>
 8006906:	4b97      	ldr	r3, [pc, #604]	; (8006b64 <_dtoa_r+0x2f4>)
 8006908:	e027      	b.n	800695a <_dtoa_r+0xea>
 800690a:	4b97      	ldr	r3, [pc, #604]	; (8006b68 <_dtoa_r+0x2f8>)
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	9800      	ldr	r0, [sp, #0]
 8006916:	b013      	add	sp, #76	; 0x4c
 8006918:	ecbd 8b04 	vpop	{d8-d9}
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	4b90      	ldr	r3, [pc, #576]	; (8006b64 <_dtoa_r+0x2f4>)
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	3303      	adds	r3, #3
 8006926:	e7f3      	b.n	8006910 <_dtoa_r+0xa0>
 8006928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	ec51 0b17 	vmov	r0, r1, d7
 8006932:	eeb0 8a47 	vmov.f32	s16, s14
 8006936:	eef0 8a67 	vmov.f32	s17, s15
 800693a:	2300      	movs	r3, #0
 800693c:	f7fa f8d4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006940:	4681      	mov	r9, r0
 8006942:	b160      	cbz	r0, 800695e <_dtoa_r+0xee>
 8006944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006946:	2301      	movs	r3, #1
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8568 	beq.w	8007422 <_dtoa_r+0xbb2>
 8006952:	4b86      	ldr	r3, [pc, #536]	; (8006b6c <_dtoa_r+0x2fc>)
 8006954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	3b01      	subs	r3, #1
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	e7da      	b.n	8006914 <_dtoa_r+0xa4>
 800695e:	aa10      	add	r2, sp, #64	; 0x40
 8006960:	a911      	add	r1, sp, #68	; 0x44
 8006962:	4620      	mov	r0, r4
 8006964:	eeb0 0a48 	vmov.f32	s0, s16
 8006968:	eef0 0a68 	vmov.f32	s1, s17
 800696c:	f001 fa4e 	bl	8007e0c <__d2b>
 8006970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006974:	4682      	mov	sl, r0
 8006976:	2d00      	cmp	r5, #0
 8006978:	d07f      	beq.n	8006a7a <_dtoa_r+0x20a>
 800697a:	ee18 3a90 	vmov	r3, s17
 800697e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006982:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006986:	ec51 0b18 	vmov	r0, r1, d8
 800698a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800698e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006992:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006996:	4619      	mov	r1, r3
 8006998:	2200      	movs	r2, #0
 800699a:	4b75      	ldr	r3, [pc, #468]	; (8006b70 <_dtoa_r+0x300>)
 800699c:	f7f9 fc84 	bl	80002a8 <__aeabi_dsub>
 80069a0:	a367      	add	r3, pc, #412	; (adr r3, 8006b40 <_dtoa_r+0x2d0>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f7f9 fe37 	bl	8000618 <__aeabi_dmul>
 80069aa:	a367      	add	r3, pc, #412	; (adr r3, 8006b48 <_dtoa_r+0x2d8>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f7f9 fc7c 	bl	80002ac <__adddf3>
 80069b4:	4606      	mov	r6, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	460f      	mov	r7, r1
 80069ba:	f7f9 fdc3 	bl	8000544 <__aeabi_i2d>
 80069be:	a364      	add	r3, pc, #400	; (adr r3, 8006b50 <_dtoa_r+0x2e0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fe28 	bl	8000618 <__aeabi_dmul>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7f9 fc6c 	bl	80002ac <__adddf3>
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	f7fa f8ce 	bl	8000b78 <__aeabi_d2iz>
 80069dc:	2200      	movs	r2, #0
 80069de:	4683      	mov	fp, r0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7fa f889 	bl	8000afc <__aeabi_dcmplt>
 80069ea:	b148      	cbz	r0, 8006a00 <_dtoa_r+0x190>
 80069ec:	4658      	mov	r0, fp
 80069ee:	f7f9 fda9 	bl	8000544 <__aeabi_i2d>
 80069f2:	4632      	mov	r2, r6
 80069f4:	463b      	mov	r3, r7
 80069f6:	f7fa f877 	bl	8000ae8 <__aeabi_dcmpeq>
 80069fa:	b908      	cbnz	r0, 8006a00 <_dtoa_r+0x190>
 80069fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a00:	f1bb 0f16 	cmp.w	fp, #22
 8006a04:	d857      	bhi.n	8006ab6 <_dtoa_r+0x246>
 8006a06:	4b5b      	ldr	r3, [pc, #364]	; (8006b74 <_dtoa_r+0x304>)
 8006a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	ec51 0b18 	vmov	r0, r1, d8
 8006a14:	f7fa f872 	bl	8000afc <__aeabi_dcmplt>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d04e      	beq.n	8006aba <_dtoa_r+0x24a>
 8006a1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a20:	2300      	movs	r3, #0
 8006a22:	930c      	str	r3, [sp, #48]	; 0x30
 8006a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a26:	1b5b      	subs	r3, r3, r5
 8006a28:	1e5a      	subs	r2, r3, #1
 8006a2a:	bf45      	ittet	mi
 8006a2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a30:	9305      	strmi	r3, [sp, #20]
 8006a32:	2300      	movpl	r3, #0
 8006a34:	2300      	movmi	r3, #0
 8006a36:	9206      	str	r2, [sp, #24]
 8006a38:	bf54      	ite	pl
 8006a3a:	9305      	strpl	r3, [sp, #20]
 8006a3c:	9306      	strmi	r3, [sp, #24]
 8006a3e:	f1bb 0f00 	cmp.w	fp, #0
 8006a42:	db3c      	blt.n	8006abe <_dtoa_r+0x24e>
 8006a44:	9b06      	ldr	r3, [sp, #24]
 8006a46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006a4a:	445b      	add	r3, fp
 8006a4c:	9306      	str	r3, [sp, #24]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9308      	str	r3, [sp, #32]
 8006a52:	9b07      	ldr	r3, [sp, #28]
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d868      	bhi.n	8006b2a <_dtoa_r+0x2ba>
 8006a58:	2b05      	cmp	r3, #5
 8006a5a:	bfc4      	itt	gt
 8006a5c:	3b04      	subgt	r3, #4
 8006a5e:	9307      	strgt	r3, [sp, #28]
 8006a60:	9b07      	ldr	r3, [sp, #28]
 8006a62:	f1a3 0302 	sub.w	r3, r3, #2
 8006a66:	bfcc      	ite	gt
 8006a68:	2500      	movgt	r5, #0
 8006a6a:	2501      	movle	r5, #1
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	f200 8085 	bhi.w	8006b7c <_dtoa_r+0x30c>
 8006a72:	e8df f003 	tbb	[pc, r3]
 8006a76:	3b2e      	.short	0x3b2e
 8006a78:	5839      	.short	0x5839
 8006a7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a7e:	441d      	add	r5, r3
 8006a80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	bfc1      	itttt	gt
 8006a88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006a94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006a98:	bfd6      	itet	le
 8006a9a:	f1c3 0320 	rsble	r3, r3, #32
 8006a9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006aa2:	fa06 f003 	lslle.w	r0, r6, r3
 8006aa6:	f7f9 fd3d 	bl	8000524 <__aeabi_ui2d>
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006ab0:	3d01      	subs	r5, #1
 8006ab2:	920e      	str	r2, [sp, #56]	; 0x38
 8006ab4:	e76f      	b.n	8006996 <_dtoa_r+0x126>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e7b3      	b.n	8006a22 <_dtoa_r+0x1b2>
 8006aba:	900c      	str	r0, [sp, #48]	; 0x30
 8006abc:	e7b2      	b.n	8006a24 <_dtoa_r+0x1b4>
 8006abe:	9b05      	ldr	r3, [sp, #20]
 8006ac0:	eba3 030b 	sub.w	r3, r3, fp
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	f1cb 0300 	rsb	r3, fp, #0
 8006aca:	9308      	str	r3, [sp, #32]
 8006acc:	2300      	movs	r3, #0
 8006ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad0:	e7bf      	b.n	8006a52 <_dtoa_r+0x1e2>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc52      	bgt.n	8006b82 <_dtoa_r+0x312>
 8006adc:	2301      	movs	r3, #1
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8006ae6:	e00b      	b.n	8006b00 <_dtoa_r+0x290>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f3      	b.n	8006ad4 <_dtoa_r+0x264>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9309      	str	r3, [sp, #36]	; 0x24
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	445b      	add	r3, fp
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	3301      	adds	r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	bfb8      	it	lt
 8006afe:	2301      	movlt	r3, #1
 8006b00:	69e0      	ldr	r0, [r4, #28]
 8006b02:	2100      	movs	r1, #0
 8006b04:	2204      	movs	r2, #4
 8006b06:	f102 0614 	add.w	r6, r2, #20
 8006b0a:	429e      	cmp	r6, r3
 8006b0c:	d93d      	bls.n	8006b8a <_dtoa_r+0x31a>
 8006b0e:	6041      	str	r1, [r0, #4]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fd9f 	bl	8007654 <_Balloc>
 8006b16:	9000      	str	r0, [sp, #0]
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d139      	bne.n	8006b90 <_dtoa_r+0x320>
 8006b1c:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <_dtoa_r+0x308>)
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f240 11af 	movw	r1, #431	; 0x1af
 8006b24:	e6bd      	b.n	80068a2 <_dtoa_r+0x32>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e7e1      	b.n	8006aee <_dtoa_r+0x27e>
 8006b2a:	2501      	movs	r5, #1
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	9509      	str	r5, [sp, #36]	; 0x24
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2312      	movs	r3, #18
 8006b3e:	e7d1      	b.n	8006ae4 <_dtoa_r+0x274>
 8006b40:	636f4361 	.word	0x636f4361
 8006b44:	3fd287a7 	.word	0x3fd287a7
 8006b48:	8b60c8b3 	.word	0x8b60c8b3
 8006b4c:	3fc68a28 	.word	0x3fc68a28
 8006b50:	509f79fb 	.word	0x509f79fb
 8006b54:	3fd34413 	.word	0x3fd34413
 8006b58:	0800a176 	.word	0x0800a176
 8006b5c:	0800a18d 	.word	0x0800a18d
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	0800a172 	.word	0x0800a172
 8006b68:	0800a169 	.word	0x0800a169
 8006b6c:	0800a141 	.word	0x0800a141
 8006b70:	3ff80000 	.word	0x3ff80000
 8006b74:	0800a278 	.word	0x0800a278
 8006b78:	0800a1e5 	.word	0x0800a1e5
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b80:	e7d7      	b.n	8006b32 <_dtoa_r+0x2c2>
 8006b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	e7ba      	b.n	8006b00 <_dtoa_r+0x290>
 8006b8a:	3101      	adds	r1, #1
 8006b8c:	0052      	lsls	r2, r2, #1
 8006b8e:	e7ba      	b.n	8006b06 <_dtoa_r+0x296>
 8006b90:	69e3      	ldr	r3, [r4, #28]
 8006b92:	9a00      	ldr	r2, [sp, #0]
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	9b04      	ldr	r3, [sp, #16]
 8006b98:	2b0e      	cmp	r3, #14
 8006b9a:	f200 80a8 	bhi.w	8006cee <_dtoa_r+0x47e>
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	f000 80a5 	beq.w	8006cee <_dtoa_r+0x47e>
 8006ba4:	f1bb 0f00 	cmp.w	fp, #0
 8006ba8:	dd38      	ble.n	8006c1c <_dtoa_r+0x3ac>
 8006baa:	4bc0      	ldr	r3, [pc, #768]	; (8006eac <_dtoa_r+0x63c>)
 8006bac:	f00b 020f 	and.w	r2, fp, #15
 8006bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006bb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006bbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006bc0:	d019      	beq.n	8006bf6 <_dtoa_r+0x386>
 8006bc2:	4bbb      	ldr	r3, [pc, #748]	; (8006eb0 <_dtoa_r+0x640>)
 8006bc4:	ec51 0b18 	vmov	r0, r1, d8
 8006bc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bcc:	f7f9 fe4e 	bl	800086c <__aeabi_ddiv>
 8006bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd4:	f008 080f 	and.w	r8, r8, #15
 8006bd8:	2503      	movs	r5, #3
 8006bda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006eb0 <_dtoa_r+0x640>
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	d10a      	bne.n	8006bfa <_dtoa_r+0x38a>
 8006be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006be8:	4632      	mov	r2, r6
 8006bea:	463b      	mov	r3, r7
 8006bec:	f7f9 fe3e 	bl	800086c <__aeabi_ddiv>
 8006bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf4:	e02b      	b.n	8006c4e <_dtoa_r+0x3de>
 8006bf6:	2502      	movs	r5, #2
 8006bf8:	e7ef      	b.n	8006bda <_dtoa_r+0x36a>
 8006bfa:	f018 0f01 	tst.w	r8, #1
 8006bfe:	d008      	beq.n	8006c12 <_dtoa_r+0x3a2>
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c08:	f7f9 fd06 	bl	8000618 <__aeabi_dmul>
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c16:	f109 0908 	add.w	r9, r9, #8
 8006c1a:	e7e0      	b.n	8006bde <_dtoa_r+0x36e>
 8006c1c:	f000 809f 	beq.w	8006d5e <_dtoa_r+0x4ee>
 8006c20:	f1cb 0600 	rsb	r6, fp, #0
 8006c24:	4ba1      	ldr	r3, [pc, #644]	; (8006eac <_dtoa_r+0x63c>)
 8006c26:	4fa2      	ldr	r7, [pc, #648]	; (8006eb0 <_dtoa_r+0x640>)
 8006c28:	f006 020f 	and.w	r2, r6, #15
 8006c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	ec51 0b18 	vmov	r0, r1, d8
 8006c38:	f7f9 fcee 	bl	8000618 <__aeabi_dmul>
 8006c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c40:	1136      	asrs	r6, r6, #4
 8006c42:	2300      	movs	r3, #0
 8006c44:	2502      	movs	r5, #2
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	d17e      	bne.n	8006d48 <_dtoa_r+0x4d8>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1d0      	bne.n	8006bf0 <_dtoa_r+0x380>
 8006c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8084 	beq.w	8006d62 <_dtoa_r+0x4f2>
 8006c5a:	4b96      	ldr	r3, [pc, #600]	; (8006eb4 <_dtoa_r+0x644>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4640      	mov	r0, r8
 8006c60:	4649      	mov	r1, r9
 8006c62:	f7f9 ff4b 	bl	8000afc <__aeabi_dcmplt>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d07b      	beq.n	8006d62 <_dtoa_r+0x4f2>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d078      	beq.n	8006d62 <_dtoa_r+0x4f2>
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd39      	ble.n	8006cea <_dtoa_r+0x47a>
 8006c76:	4b90      	ldr	r3, [pc, #576]	; (8006eb8 <_dtoa_r+0x648>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fccb 	bl	8000618 <__aeabi_dmul>
 8006c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c86:	9e01      	ldr	r6, [sp, #4]
 8006c88:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7f9 fc56 	bl	8000544 <__aeabi_i2d>
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	f7f9 fcbc 	bl	8000618 <__aeabi_dmul>
 8006ca0:	4b86      	ldr	r3, [pc, #536]	; (8006ebc <_dtoa_r+0x64c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fb02 	bl	80002ac <__adddf3>
 8006ca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	d158      	bne.n	8006d68 <_dtoa_r+0x4f8>
 8006cb6:	4b82      	ldr	r3, [pc, #520]	; (8006ec0 <_dtoa_r+0x650>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7f9 faf3 	bl	80002a8 <__aeabi_dsub>
 8006cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	4689      	mov	r9, r1
 8006cca:	f7f9 ff35 	bl	8000b38 <__aeabi_dcmpgt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f040 8296 	bne.w	8007200 <_dtoa_r+0x990>
 8006cd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006cd8:	4640      	mov	r0, r8
 8006cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cde:	4649      	mov	r1, r9
 8006ce0:	f7f9 ff0c 	bl	8000afc <__aeabi_dcmplt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 8289 	bne.w	80071fc <_dtoa_r+0x98c>
 8006cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f2c0 814e 	blt.w	8006f92 <_dtoa_r+0x722>
 8006cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8006cfa:	f300 814a 	bgt.w	8006f92 <_dtoa_r+0x722>
 8006cfe:	4b6b      	ldr	r3, [pc, #428]	; (8006eac <_dtoa_r+0x63c>)
 8006d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f280 80dc 	bge.w	8006ec8 <_dtoa_r+0x658>
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f300 80d8 	bgt.w	8006ec8 <_dtoa_r+0x658>
 8006d18:	f040 826f 	bne.w	80071fa <_dtoa_r+0x98a>
 8006d1c:	4b68      	ldr	r3, [pc, #416]	; (8006ec0 <_dtoa_r+0x650>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fc78 	bl	8000618 <__aeabi_dmul>
 8006d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d2c:	f7f9 fefa 	bl	8000b24 <__aeabi_dcmpge>
 8006d30:	9e04      	ldr	r6, [sp, #16]
 8006d32:	4637      	mov	r7, r6
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 8245 	bne.w	80071c4 <_dtoa_r+0x954>
 8006d3a:	9d00      	ldr	r5, [sp, #0]
 8006d3c:	2331      	movs	r3, #49	; 0x31
 8006d3e:	f805 3b01 	strb.w	r3, [r5], #1
 8006d42:	f10b 0b01 	add.w	fp, fp, #1
 8006d46:	e241      	b.n	80071cc <_dtoa_r+0x95c>
 8006d48:	07f2      	lsls	r2, r6, #31
 8006d4a:	d505      	bpl.n	8006d58 <_dtoa_r+0x4e8>
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	f7f9 fc62 	bl	8000618 <__aeabi_dmul>
 8006d54:	3501      	adds	r5, #1
 8006d56:	2301      	movs	r3, #1
 8006d58:	1076      	asrs	r6, r6, #1
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	e773      	b.n	8006c46 <_dtoa_r+0x3d6>
 8006d5e:	2502      	movs	r5, #2
 8006d60:	e775      	b.n	8006c4e <_dtoa_r+0x3de>
 8006d62:	9e04      	ldr	r6, [sp, #16]
 8006d64:	465f      	mov	r7, fp
 8006d66:	e792      	b.n	8006c8e <_dtoa_r+0x41e>
 8006d68:	9900      	ldr	r1, [sp, #0]
 8006d6a:	4b50      	ldr	r3, [pc, #320]	; (8006eac <_dtoa_r+0x63c>)
 8006d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d70:	4431      	add	r1, r6
 8006d72:	9102      	str	r1, [sp, #8]
 8006d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d76:	eeb0 9a47 	vmov.f32	s18, s14
 8006d7a:	eef0 9a67 	vmov.f32	s19, s15
 8006d7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d86:	2900      	cmp	r1, #0
 8006d88:	d044      	beq.n	8006e14 <_dtoa_r+0x5a4>
 8006d8a:	494e      	ldr	r1, [pc, #312]	; (8006ec4 <_dtoa_r+0x654>)
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f7f9 fd6d 	bl	800086c <__aeabi_ddiv>
 8006d92:	ec53 2b19 	vmov	r2, r3, d9
 8006d96:	f7f9 fa87 	bl	80002a8 <__aeabi_dsub>
 8006d9a:	9d00      	ldr	r5, [sp, #0]
 8006d9c:	ec41 0b19 	vmov	d9, r0, r1
 8006da0:	4649      	mov	r1, r9
 8006da2:	4640      	mov	r0, r8
 8006da4:	f7f9 fee8 	bl	8000b78 <__aeabi_d2iz>
 8006da8:	4606      	mov	r6, r0
 8006daa:	f7f9 fbcb 	bl	8000544 <__aeabi_i2d>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fa77 	bl	80002a8 <__aeabi_dsub>
 8006dba:	3630      	adds	r6, #48	; 0x30
 8006dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8006dc0:	ec53 2b19 	vmov	r2, r3, d9
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	4689      	mov	r9, r1
 8006dc8:	f7f9 fe98 	bl	8000afc <__aeabi_dcmplt>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d164      	bne.n	8006e9a <_dtoa_r+0x62a>
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	4937      	ldr	r1, [pc, #220]	; (8006eb4 <_dtoa_r+0x644>)
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f7f9 fa66 	bl	80002a8 <__aeabi_dsub>
 8006ddc:	ec53 2b19 	vmov	r2, r3, d9
 8006de0:	f7f9 fe8c 	bl	8000afc <__aeabi_dcmplt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f040 80b6 	bne.w	8006f56 <_dtoa_r+0x6e6>
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	429d      	cmp	r5, r3
 8006dee:	f43f af7c 	beq.w	8006cea <_dtoa_r+0x47a>
 8006df2:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <_dtoa_r+0x648>)
 8006df4:	ec51 0b19 	vmov	r0, r1, d9
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f7f9 fc0d 	bl	8000618 <__aeabi_dmul>
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <_dtoa_r+0x648>)
 8006e00:	ec41 0b19 	vmov	d9, r0, r1
 8006e04:	2200      	movs	r2, #0
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fc05 	bl	8000618 <__aeabi_dmul>
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	e7c5      	b.n	8006da0 <_dtoa_r+0x530>
 8006e14:	ec51 0b17 	vmov	r0, r1, d7
 8006e18:	f7f9 fbfe 	bl	8000618 <__aeabi_dmul>
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	9d00      	ldr	r5, [sp, #0]
 8006e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e22:	ec41 0b19 	vmov	d9, r0, r1
 8006e26:	4649      	mov	r1, r9
 8006e28:	4640      	mov	r0, r8
 8006e2a:	f7f9 fea5 	bl	8000b78 <__aeabi_d2iz>
 8006e2e:	4606      	mov	r6, r0
 8006e30:	f7f9 fb88 	bl	8000544 <__aeabi_i2d>
 8006e34:	3630      	adds	r6, #48	; 0x30
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fa33 	bl	80002a8 <__aeabi_dsub>
 8006e42:	f805 6b01 	strb.w	r6, [r5], #1
 8006e46:	9b02      	ldr	r3, [sp, #8]
 8006e48:	429d      	cmp	r5, r3
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	4689      	mov	r9, r1
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	d124      	bne.n	8006e9e <_dtoa_r+0x62e>
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <_dtoa_r+0x654>)
 8006e56:	ec51 0b19 	vmov	r0, r1, d9
 8006e5a:	f7f9 fa27 	bl	80002ac <__adddf3>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fe67 	bl	8000b38 <__aeabi_dcmpgt>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d173      	bne.n	8006f56 <_dtoa_r+0x6e6>
 8006e6e:	ec53 2b19 	vmov	r2, r3, d9
 8006e72:	4914      	ldr	r1, [pc, #80]	; (8006ec4 <_dtoa_r+0x654>)
 8006e74:	2000      	movs	r0, #0
 8006e76:	f7f9 fa17 	bl	80002a8 <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4640      	mov	r0, r8
 8006e80:	4649      	mov	r1, r9
 8006e82:	f7f9 fe3b 	bl	8000afc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f43f af2f 	beq.w	8006cea <_dtoa_r+0x47a>
 8006e8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e8e:	1e6b      	subs	r3, r5, #1
 8006e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e96:	2b30      	cmp	r3, #48	; 0x30
 8006e98:	d0f8      	beq.n	8006e8c <_dtoa_r+0x61c>
 8006e9a:	46bb      	mov	fp, r7
 8006e9c:	e04a      	b.n	8006f34 <_dtoa_r+0x6c4>
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <_dtoa_r+0x648>)
 8006ea0:	f7f9 fbba 	bl	8000618 <__aeabi_dmul>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	e7bd      	b.n	8006e26 <_dtoa_r+0x5b6>
 8006eaa:	bf00      	nop
 8006eac:	0800a278 	.word	0x0800a278
 8006eb0:	0800a250 	.word	0x0800a250
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	40240000 	.word	0x40240000
 8006ebc:	401c0000 	.word	0x401c0000
 8006ec0:	40140000 	.word	0x40140000
 8006ec4:	3fe00000 	.word	0x3fe00000
 8006ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ecc:	9d00      	ldr	r5, [sp, #0]
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 fcc9 	bl	800086c <__aeabi_ddiv>
 8006eda:	f7f9 fe4d 	bl	8000b78 <__aeabi_d2iz>
 8006ede:	9001      	str	r0, [sp, #4]
 8006ee0:	f7f9 fb30 	bl	8000544 <__aeabi_i2d>
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	f7f9 fb96 	bl	8000618 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	f7f9 f9d8 	bl	80002a8 <__aeabi_dsub>
 8006ef8:	9e01      	ldr	r6, [sp, #4]
 8006efa:	9f04      	ldr	r7, [sp, #16]
 8006efc:	3630      	adds	r6, #48	; 0x30
 8006efe:	f805 6b01 	strb.w	r6, [r5], #1
 8006f02:	9e00      	ldr	r6, [sp, #0]
 8006f04:	1bae      	subs	r6, r5, r6
 8006f06:	42b7      	cmp	r7, r6
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	d134      	bne.n	8006f78 <_dtoa_r+0x708>
 8006f0e:	f7f9 f9cd 	bl	80002ac <__adddf3>
 8006f12:	4642      	mov	r2, r8
 8006f14:	464b      	mov	r3, r9
 8006f16:	4606      	mov	r6, r0
 8006f18:	460f      	mov	r7, r1
 8006f1a:	f7f9 fe0d 	bl	8000b38 <__aeabi_dcmpgt>
 8006f1e:	b9c8      	cbnz	r0, 8006f54 <_dtoa_r+0x6e4>
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fdde 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f2c:	b110      	cbz	r0, 8006f34 <_dtoa_r+0x6c4>
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	07db      	lsls	r3, r3, #31
 8006f32:	d40f      	bmi.n	8006f54 <_dtoa_r+0x6e4>
 8006f34:	4651      	mov	r1, sl
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 fbcc 	bl	80076d4 <_Bfree>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f40:	702b      	strb	r3, [r5, #0]
 8006f42:	f10b 0301 	add.w	r3, fp, #1
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f43f ace2 	beq.w	8006914 <_dtoa_r+0xa4>
 8006f50:	601d      	str	r5, [r3, #0]
 8006f52:	e4df      	b.n	8006914 <_dtoa_r+0xa4>
 8006f54:	465f      	mov	r7, fp
 8006f56:	462b      	mov	r3, r5
 8006f58:	461d      	mov	r5, r3
 8006f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f5e:	2a39      	cmp	r2, #57	; 0x39
 8006f60:	d106      	bne.n	8006f70 <_dtoa_r+0x700>
 8006f62:	9a00      	ldr	r2, [sp, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d1f7      	bne.n	8006f58 <_dtoa_r+0x6e8>
 8006f68:	9900      	ldr	r1, [sp, #0]
 8006f6a:	2230      	movs	r2, #48	; 0x30
 8006f6c:	3701      	adds	r7, #1
 8006f6e:	700a      	strb	r2, [r1, #0]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	3201      	adds	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e790      	b.n	8006e9a <_dtoa_r+0x62a>
 8006f78:	4ba3      	ldr	r3, [pc, #652]	; (8007208 <_dtoa_r+0x998>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7f9 fb4c 	bl	8000618 <__aeabi_dmul>
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	4606      	mov	r6, r0
 8006f86:	460f      	mov	r7, r1
 8006f88:	f7f9 fdae 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d09e      	beq.n	8006ece <_dtoa_r+0x65e>
 8006f90:	e7d0      	b.n	8006f34 <_dtoa_r+0x6c4>
 8006f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	f000 80ca 	beq.w	800712e <_dtoa_r+0x8be>
 8006f9a:	9a07      	ldr	r2, [sp, #28]
 8006f9c:	2a01      	cmp	r2, #1
 8006f9e:	f300 80ad 	bgt.w	80070fc <_dtoa_r+0x88c>
 8006fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	f000 80a5 	beq.w	80070f4 <_dtoa_r+0x884>
 8006faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fae:	9e08      	ldr	r6, [sp, #32]
 8006fb0:	9d05      	ldr	r5, [sp, #20]
 8006fb2:	9a05      	ldr	r2, [sp, #20]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	9205      	str	r2, [sp, #20]
 8006fb8:	9a06      	ldr	r2, [sp, #24]
 8006fba:	2101      	movs	r1, #1
 8006fbc:	441a      	add	r2, r3
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	9206      	str	r2, [sp, #24]
 8006fc2:	f000 fc87 	bl	80078d4 <__i2b>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	b165      	cbz	r5, 8006fe4 <_dtoa_r+0x774>
 8006fca:	9b06      	ldr	r3, [sp, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dd09      	ble.n	8006fe4 <_dtoa_r+0x774>
 8006fd0:	42ab      	cmp	r3, r5
 8006fd2:	9a05      	ldr	r2, [sp, #20]
 8006fd4:	bfa8      	it	ge
 8006fd6:	462b      	movge	r3, r5
 8006fd8:	1ad2      	subs	r2, r2, r3
 8006fda:	9205      	str	r2, [sp, #20]
 8006fdc:	9a06      	ldr	r2, [sp, #24]
 8006fde:	1aed      	subs	r5, r5, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	9306      	str	r3, [sp, #24]
 8006fe4:	9b08      	ldr	r3, [sp, #32]
 8006fe6:	b1f3      	cbz	r3, 8007026 <_dtoa_r+0x7b6>
 8006fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80a3 	beq.w	8007136 <_dtoa_r+0x8c6>
 8006ff0:	2e00      	cmp	r6, #0
 8006ff2:	dd10      	ble.n	8007016 <_dtoa_r+0x7a6>
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fd2b 	bl	8007a54 <__pow5mult>
 8006ffe:	4652      	mov	r2, sl
 8007000:	4601      	mov	r1, r0
 8007002:	4607      	mov	r7, r0
 8007004:	4620      	mov	r0, r4
 8007006:	f000 fc7b 	bl	8007900 <__multiply>
 800700a:	4651      	mov	r1, sl
 800700c:	4680      	mov	r8, r0
 800700e:	4620      	mov	r0, r4
 8007010:	f000 fb60 	bl	80076d4 <_Bfree>
 8007014:	46c2      	mov	sl, r8
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	1b9a      	subs	r2, r3, r6
 800701a:	d004      	beq.n	8007026 <_dtoa_r+0x7b6>
 800701c:	4651      	mov	r1, sl
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fd18 	bl	8007a54 <__pow5mult>
 8007024:	4682      	mov	sl, r0
 8007026:	2101      	movs	r1, #1
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fc53 	bl	80078d4 <__i2b>
 800702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007030:	2b00      	cmp	r3, #0
 8007032:	4606      	mov	r6, r0
 8007034:	f340 8081 	ble.w	800713a <_dtoa_r+0x8ca>
 8007038:	461a      	mov	r2, r3
 800703a:	4601      	mov	r1, r0
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fd09 	bl	8007a54 <__pow5mult>
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	2b01      	cmp	r3, #1
 8007046:	4606      	mov	r6, r0
 8007048:	dd7a      	ble.n	8007140 <_dtoa_r+0x8d0>
 800704a:	f04f 0800 	mov.w	r8, #0
 800704e:	6933      	ldr	r3, [r6, #16]
 8007050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007054:	6918      	ldr	r0, [r3, #16]
 8007056:	f000 fbef 	bl	8007838 <__hi0bits>
 800705a:	f1c0 0020 	rsb	r0, r0, #32
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	4418      	add	r0, r3
 8007062:	f010 001f 	ands.w	r0, r0, #31
 8007066:	f000 8094 	beq.w	8007192 <_dtoa_r+0x922>
 800706a:	f1c0 0320 	rsb	r3, r0, #32
 800706e:	2b04      	cmp	r3, #4
 8007070:	f340 8085 	ble.w	800717e <_dtoa_r+0x90e>
 8007074:	9b05      	ldr	r3, [sp, #20]
 8007076:	f1c0 001c 	rsb	r0, r0, #28
 800707a:	4403      	add	r3, r0
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	4403      	add	r3, r0
 8007082:	4405      	add	r5, r0
 8007084:	9306      	str	r3, [sp, #24]
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	dd05      	ble.n	8007098 <_dtoa_r+0x828>
 800708c:	4651      	mov	r1, sl
 800708e:	461a      	mov	r2, r3
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fd39 	bl	8007b08 <__lshift>
 8007096:	4682      	mov	sl, r0
 8007098:	9b06      	ldr	r3, [sp, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	dd05      	ble.n	80070aa <_dtoa_r+0x83a>
 800709e:	4631      	mov	r1, r6
 80070a0:	461a      	mov	r2, r3
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fd30 	bl	8007b08 <__lshift>
 80070a8:	4606      	mov	r6, r0
 80070aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d072      	beq.n	8007196 <_dtoa_r+0x926>
 80070b0:	4631      	mov	r1, r6
 80070b2:	4650      	mov	r0, sl
 80070b4:	f000 fd94 	bl	8007be0 <__mcmp>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	da6c      	bge.n	8007196 <_dtoa_r+0x926>
 80070bc:	2300      	movs	r3, #0
 80070be:	4651      	mov	r1, sl
 80070c0:	220a      	movs	r2, #10
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fb28 	bl	8007718 <__multadd>
 80070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80070ce:	4682      	mov	sl, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81b0 	beq.w	8007436 <_dtoa_r+0xbc6>
 80070d6:	2300      	movs	r3, #0
 80070d8:	4639      	mov	r1, r7
 80070da:	220a      	movs	r2, #10
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fb1b 	bl	8007718 <__multadd>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	4607      	mov	r7, r0
 80070e8:	f300 8096 	bgt.w	8007218 <_dtoa_r+0x9a8>
 80070ec:	9b07      	ldr	r3, [sp, #28]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	dc59      	bgt.n	80071a6 <_dtoa_r+0x936>
 80070f2:	e091      	b.n	8007218 <_dtoa_r+0x9a8>
 80070f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070fa:	e758      	b.n	8006fae <_dtoa_r+0x73e>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	1e5e      	subs	r6, r3, #1
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	42b3      	cmp	r3, r6
 8007104:	bfbf      	itttt	lt
 8007106:	9b08      	ldrlt	r3, [sp, #32]
 8007108:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800710a:	9608      	strlt	r6, [sp, #32]
 800710c:	1af3      	sublt	r3, r6, r3
 800710e:	bfb4      	ite	lt
 8007110:	18d2      	addlt	r2, r2, r3
 8007112:	1b9e      	subge	r6, r3, r6
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	bfbc      	itt	lt
 8007118:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800711a:	2600      	movlt	r6, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfb7      	itett	lt
 8007120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007128:	1a9d      	sublt	r5, r3, r2
 800712a:	2300      	movlt	r3, #0
 800712c:	e741      	b.n	8006fb2 <_dtoa_r+0x742>
 800712e:	9e08      	ldr	r6, [sp, #32]
 8007130:	9d05      	ldr	r5, [sp, #20]
 8007132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007134:	e748      	b.n	8006fc8 <_dtoa_r+0x758>
 8007136:	9a08      	ldr	r2, [sp, #32]
 8007138:	e770      	b.n	800701c <_dtoa_r+0x7ac>
 800713a:	9b07      	ldr	r3, [sp, #28]
 800713c:	2b01      	cmp	r3, #1
 800713e:	dc19      	bgt.n	8007174 <_dtoa_r+0x904>
 8007140:	9b02      	ldr	r3, [sp, #8]
 8007142:	b9bb      	cbnz	r3, 8007174 <_dtoa_r+0x904>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800714a:	b99b      	cbnz	r3, 8007174 <_dtoa_r+0x904>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007152:	0d1b      	lsrs	r3, r3, #20
 8007154:	051b      	lsls	r3, r3, #20
 8007156:	b183      	cbz	r3, 800717a <_dtoa_r+0x90a>
 8007158:	9b05      	ldr	r3, [sp, #20]
 800715a:	3301      	adds	r3, #1
 800715c:	9305      	str	r3, [sp, #20]
 800715e:	9b06      	ldr	r3, [sp, #24]
 8007160:	3301      	adds	r3, #1
 8007162:	9306      	str	r3, [sp, #24]
 8007164:	f04f 0801 	mov.w	r8, #1
 8007168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f47f af6f 	bne.w	800704e <_dtoa_r+0x7de>
 8007170:	2001      	movs	r0, #1
 8007172:	e774      	b.n	800705e <_dtoa_r+0x7ee>
 8007174:	f04f 0800 	mov.w	r8, #0
 8007178:	e7f6      	b.n	8007168 <_dtoa_r+0x8f8>
 800717a:	4698      	mov	r8, r3
 800717c:	e7f4      	b.n	8007168 <_dtoa_r+0x8f8>
 800717e:	d082      	beq.n	8007086 <_dtoa_r+0x816>
 8007180:	9a05      	ldr	r2, [sp, #20]
 8007182:	331c      	adds	r3, #28
 8007184:	441a      	add	r2, r3
 8007186:	9205      	str	r2, [sp, #20]
 8007188:	9a06      	ldr	r2, [sp, #24]
 800718a:	441a      	add	r2, r3
 800718c:	441d      	add	r5, r3
 800718e:	9206      	str	r2, [sp, #24]
 8007190:	e779      	b.n	8007086 <_dtoa_r+0x816>
 8007192:	4603      	mov	r3, r0
 8007194:	e7f4      	b.n	8007180 <_dtoa_r+0x910>
 8007196:	9b04      	ldr	r3, [sp, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc37      	bgt.n	800720c <_dtoa_r+0x99c>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dd34      	ble.n	800720c <_dtoa_r+0x99c>
 80071a2:	9b04      	ldr	r3, [sp, #16]
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	b963      	cbnz	r3, 80071c4 <_dtoa_r+0x954>
 80071aa:	4631      	mov	r1, r6
 80071ac:	2205      	movs	r2, #5
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fab2 	bl	8007718 <__multadd>
 80071b4:	4601      	mov	r1, r0
 80071b6:	4606      	mov	r6, r0
 80071b8:	4650      	mov	r0, sl
 80071ba:	f000 fd11 	bl	8007be0 <__mcmp>
 80071be:	2800      	cmp	r0, #0
 80071c0:	f73f adbb 	bgt.w	8006d3a <_dtoa_r+0x4ca>
 80071c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c6:	9d00      	ldr	r5, [sp, #0]
 80071c8:	ea6f 0b03 	mvn.w	fp, r3
 80071cc:	f04f 0800 	mov.w	r8, #0
 80071d0:	4631      	mov	r1, r6
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fa7e 	bl	80076d4 <_Bfree>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	f43f aeab 	beq.w	8006f34 <_dtoa_r+0x6c4>
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	d005      	beq.n	80071f0 <_dtoa_r+0x980>
 80071e4:	45b8      	cmp	r8, r7
 80071e6:	d003      	beq.n	80071f0 <_dtoa_r+0x980>
 80071e8:	4641      	mov	r1, r8
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fa72 	bl	80076d4 <_Bfree>
 80071f0:	4639      	mov	r1, r7
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fa6e 	bl	80076d4 <_Bfree>
 80071f8:	e69c      	b.n	8006f34 <_dtoa_r+0x6c4>
 80071fa:	2600      	movs	r6, #0
 80071fc:	4637      	mov	r7, r6
 80071fe:	e7e1      	b.n	80071c4 <_dtoa_r+0x954>
 8007200:	46bb      	mov	fp, r7
 8007202:	4637      	mov	r7, r6
 8007204:	e599      	b.n	8006d3a <_dtoa_r+0x4ca>
 8007206:	bf00      	nop
 8007208:	40240000 	.word	0x40240000
 800720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80c8 	beq.w	80073a4 <_dtoa_r+0xb34>
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	2d00      	cmp	r5, #0
 800721a:	dd05      	ble.n	8007228 <_dtoa_r+0x9b8>
 800721c:	4639      	mov	r1, r7
 800721e:	462a      	mov	r2, r5
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fc71 	bl	8007b08 <__lshift>
 8007226:	4607      	mov	r7, r0
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	d05b      	beq.n	80072e6 <_dtoa_r+0xa76>
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fa0f 	bl	8007654 <_Balloc>
 8007236:	4605      	mov	r5, r0
 8007238:	b928      	cbnz	r0, 8007246 <_dtoa_r+0x9d6>
 800723a:	4b83      	ldr	r3, [pc, #524]	; (8007448 <_dtoa_r+0xbd8>)
 800723c:	4602      	mov	r2, r0
 800723e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007242:	f7ff bb2e 	b.w	80068a2 <_dtoa_r+0x32>
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	3202      	adds	r2, #2
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	f107 010c 	add.w	r1, r7, #12
 8007250:	300c      	adds	r0, #12
 8007252:	f002 f94d 	bl	80094f0 <memcpy>
 8007256:	2201      	movs	r2, #1
 8007258:	4629      	mov	r1, r5
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fc54 	bl	8007b08 <__lshift>
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726a:	4413      	add	r3, r2
 800726c:	9308      	str	r3, [sp, #32]
 800726e:	9b02      	ldr	r3, [sp, #8]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	46b8      	mov	r8, r7
 8007276:	9306      	str	r3, [sp, #24]
 8007278:	4607      	mov	r7, r0
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	4631      	mov	r1, r6
 800727e:	3b01      	subs	r3, #1
 8007280:	4650      	mov	r0, sl
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	f7ff fa6a 	bl	800675c <quorem>
 8007288:	4641      	mov	r1, r8
 800728a:	9002      	str	r0, [sp, #8]
 800728c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007290:	4650      	mov	r0, sl
 8007292:	f000 fca5 	bl	8007be0 <__mcmp>
 8007296:	463a      	mov	r2, r7
 8007298:	9005      	str	r0, [sp, #20]
 800729a:	4631      	mov	r1, r6
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fcbb 	bl	8007c18 <__mdiff>
 80072a2:	68c2      	ldr	r2, [r0, #12]
 80072a4:	4605      	mov	r5, r0
 80072a6:	bb02      	cbnz	r2, 80072ea <_dtoa_r+0xa7a>
 80072a8:	4601      	mov	r1, r0
 80072aa:	4650      	mov	r0, sl
 80072ac:	f000 fc98 	bl	8007be0 <__mcmp>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4629      	mov	r1, r5
 80072b4:	4620      	mov	r0, r4
 80072b6:	9209      	str	r2, [sp, #36]	; 0x24
 80072b8:	f000 fa0c 	bl	80076d4 <_Bfree>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c0:	9d04      	ldr	r5, [sp, #16]
 80072c2:	ea43 0102 	orr.w	r1, r3, r2
 80072c6:	9b06      	ldr	r3, [sp, #24]
 80072c8:	4319      	orrs	r1, r3
 80072ca:	d110      	bne.n	80072ee <_dtoa_r+0xa7e>
 80072cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072d0:	d029      	beq.n	8007326 <_dtoa_r+0xab6>
 80072d2:	9b05      	ldr	r3, [sp, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dd02      	ble.n	80072de <_dtoa_r+0xa6e>
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	f883 9000 	strb.w	r9, [r3]
 80072e4:	e774      	b.n	80071d0 <_dtoa_r+0x960>
 80072e6:	4638      	mov	r0, r7
 80072e8:	e7ba      	b.n	8007260 <_dtoa_r+0x9f0>
 80072ea:	2201      	movs	r2, #1
 80072ec:	e7e1      	b.n	80072b2 <_dtoa_r+0xa42>
 80072ee:	9b05      	ldr	r3, [sp, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	db04      	blt.n	80072fe <_dtoa_r+0xa8e>
 80072f4:	9907      	ldr	r1, [sp, #28]
 80072f6:	430b      	orrs	r3, r1
 80072f8:	9906      	ldr	r1, [sp, #24]
 80072fa:	430b      	orrs	r3, r1
 80072fc:	d120      	bne.n	8007340 <_dtoa_r+0xad0>
 80072fe:	2a00      	cmp	r2, #0
 8007300:	dded      	ble.n	80072de <_dtoa_r+0xa6e>
 8007302:	4651      	mov	r1, sl
 8007304:	2201      	movs	r2, #1
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fbfe 	bl	8007b08 <__lshift>
 800730c:	4631      	mov	r1, r6
 800730e:	4682      	mov	sl, r0
 8007310:	f000 fc66 	bl	8007be0 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	dc03      	bgt.n	8007320 <_dtoa_r+0xab0>
 8007318:	d1e1      	bne.n	80072de <_dtoa_r+0xa6e>
 800731a:	f019 0f01 	tst.w	r9, #1
 800731e:	d0de      	beq.n	80072de <_dtoa_r+0xa6e>
 8007320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007324:	d1d8      	bne.n	80072d8 <_dtoa_r+0xa68>
 8007326:	9a01      	ldr	r2, [sp, #4]
 8007328:	2339      	movs	r3, #57	; 0x39
 800732a:	7013      	strb	r3, [r2, #0]
 800732c:	462b      	mov	r3, r5
 800732e:	461d      	mov	r5, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007336:	2a39      	cmp	r2, #57	; 0x39
 8007338:	d06c      	beq.n	8007414 <_dtoa_r+0xba4>
 800733a:	3201      	adds	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e747      	b.n	80071d0 <_dtoa_r+0x960>
 8007340:	2a00      	cmp	r2, #0
 8007342:	dd07      	ble.n	8007354 <_dtoa_r+0xae4>
 8007344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007348:	d0ed      	beq.n	8007326 <_dtoa_r+0xab6>
 800734a:	9a01      	ldr	r2, [sp, #4]
 800734c:	f109 0301 	add.w	r3, r9, #1
 8007350:	7013      	strb	r3, [r2, #0]
 8007352:	e73d      	b.n	80071d0 <_dtoa_r+0x960>
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	9a08      	ldr	r2, [sp, #32]
 8007358:	f803 9c01 	strb.w	r9, [r3, #-1]
 800735c:	4293      	cmp	r3, r2
 800735e:	d043      	beq.n	80073e8 <_dtoa_r+0xb78>
 8007360:	4651      	mov	r1, sl
 8007362:	2300      	movs	r3, #0
 8007364:	220a      	movs	r2, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f9d6 	bl	8007718 <__multadd>
 800736c:	45b8      	cmp	r8, r7
 800736e:	4682      	mov	sl, r0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	f04f 020a 	mov.w	r2, #10
 8007378:	4641      	mov	r1, r8
 800737a:	4620      	mov	r0, r4
 800737c:	d107      	bne.n	800738e <_dtoa_r+0xb1e>
 800737e:	f000 f9cb 	bl	8007718 <__multadd>
 8007382:	4680      	mov	r8, r0
 8007384:	4607      	mov	r7, r0
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	3301      	adds	r3, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	e775      	b.n	800727a <_dtoa_r+0xa0a>
 800738e:	f000 f9c3 	bl	8007718 <__multadd>
 8007392:	4639      	mov	r1, r7
 8007394:	4680      	mov	r8, r0
 8007396:	2300      	movs	r3, #0
 8007398:	220a      	movs	r2, #10
 800739a:	4620      	mov	r0, r4
 800739c:	f000 f9bc 	bl	8007718 <__multadd>
 80073a0:	4607      	mov	r7, r0
 80073a2:	e7f0      	b.n	8007386 <_dtoa_r+0xb16>
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	9d00      	ldr	r5, [sp, #0]
 80073aa:	4631      	mov	r1, r6
 80073ac:	4650      	mov	r0, sl
 80073ae:	f7ff f9d5 	bl	800675c <quorem>
 80073b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073b6:	9b00      	ldr	r3, [sp, #0]
 80073b8:	f805 9b01 	strb.w	r9, [r5], #1
 80073bc:	1aea      	subs	r2, r5, r3
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	dd07      	ble.n	80073d4 <_dtoa_r+0xb64>
 80073c4:	4651      	mov	r1, sl
 80073c6:	2300      	movs	r3, #0
 80073c8:	220a      	movs	r2, #10
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f9a4 	bl	8007718 <__multadd>
 80073d0:	4682      	mov	sl, r0
 80073d2:	e7ea      	b.n	80073aa <_dtoa_r+0xb3a>
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfc8      	it	gt
 80073da:	461d      	movgt	r5, r3
 80073dc:	9b00      	ldr	r3, [sp, #0]
 80073de:	bfd8      	it	le
 80073e0:	2501      	movle	r5, #1
 80073e2:	441d      	add	r5, r3
 80073e4:	f04f 0800 	mov.w	r8, #0
 80073e8:	4651      	mov	r1, sl
 80073ea:	2201      	movs	r2, #1
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fb8b 	bl	8007b08 <__lshift>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4682      	mov	sl, r0
 80073f6:	f000 fbf3 	bl	8007be0 <__mcmp>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	dc96      	bgt.n	800732c <_dtoa_r+0xabc>
 80073fe:	d102      	bne.n	8007406 <_dtoa_r+0xb96>
 8007400:	f019 0f01 	tst.w	r9, #1
 8007404:	d192      	bne.n	800732c <_dtoa_r+0xabc>
 8007406:	462b      	mov	r3, r5
 8007408:	461d      	mov	r5, r3
 800740a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800740e:	2a30      	cmp	r2, #48	; 0x30
 8007410:	d0fa      	beq.n	8007408 <_dtoa_r+0xb98>
 8007412:	e6dd      	b.n	80071d0 <_dtoa_r+0x960>
 8007414:	9a00      	ldr	r2, [sp, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d189      	bne.n	800732e <_dtoa_r+0xabe>
 800741a:	f10b 0b01 	add.w	fp, fp, #1
 800741e:	2331      	movs	r3, #49	; 0x31
 8007420:	e796      	b.n	8007350 <_dtoa_r+0xae0>
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <_dtoa_r+0xbdc>)
 8007424:	f7ff ba99 	b.w	800695a <_dtoa_r+0xea>
 8007428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800742a:	2b00      	cmp	r3, #0
 800742c:	f47f aa6d 	bne.w	800690a <_dtoa_r+0x9a>
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <_dtoa_r+0xbe0>)
 8007432:	f7ff ba92 	b.w	800695a <_dtoa_r+0xea>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dcb5      	bgt.n	80073a8 <_dtoa_r+0xb38>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b02      	cmp	r3, #2
 8007440:	f73f aeb1 	bgt.w	80071a6 <_dtoa_r+0x936>
 8007444:	e7b0      	b.n	80073a8 <_dtoa_r+0xb38>
 8007446:	bf00      	nop
 8007448:	0800a1e5 	.word	0x0800a1e5
 800744c:	0800a140 	.word	0x0800a140
 8007450:	0800a169 	.word	0x0800a169

08007454 <_free_r>:
 8007454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007456:	2900      	cmp	r1, #0
 8007458:	d044      	beq.n	80074e4 <_free_r+0x90>
 800745a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800745e:	9001      	str	r0, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f1a1 0404 	sub.w	r4, r1, #4
 8007466:	bfb8      	it	lt
 8007468:	18e4      	addlt	r4, r4, r3
 800746a:	f000 f8e7 	bl	800763c <__malloc_lock>
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <_free_r+0x94>)
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	b933      	cbnz	r3, 8007484 <_free_r+0x30>
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6014      	str	r4, [r2, #0]
 800747a:	b003      	add	sp, #12
 800747c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007480:	f000 b8e2 	b.w	8007648 <__malloc_unlock>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d908      	bls.n	800749a <_free_r+0x46>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	1961      	adds	r1, r4, r5
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1949      	addeq	r1, r1, r5
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	e7ed      	b.n	8007476 <_free_r+0x22>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x50>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x46>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1855      	adds	r5, r2, r1
 80074a8:	42a5      	cmp	r5, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x70>
 80074ac:	6824      	ldr	r4, [r4, #0]
 80074ae:	4421      	add	r1, r4
 80074b0:	1854      	adds	r4, r2, r1
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1e0      	bne.n	800747a <_free_r+0x26>
 80074b8:	681c      	ldr	r4, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	6053      	str	r3, [r2, #4]
 80074be:	440c      	add	r4, r1
 80074c0:	6014      	str	r4, [r2, #0]
 80074c2:	e7da      	b.n	800747a <_free_r+0x26>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x78>
 80074c6:	230c      	movs	r3, #12
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7d6      	b.n	800747a <_free_r+0x26>
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	1961      	adds	r1, r4, r5
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf04      	itt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	bf04      	itt	eq
 80074dc:	1949      	addeq	r1, r1, r5
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6054      	str	r4, [r2, #4]
 80074e2:	e7ca      	b.n	800747a <_free_r+0x26>
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
 80074e8:	20000564 	.word	0x20000564

080074ec <malloc>:
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <malloc+0xc>)
 80074ee:	4601      	mov	r1, r0
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f000 b823 	b.w	800753c <_malloc_r>
 80074f6:	bf00      	nop
 80074f8:	2000007c 	.word	0x2000007c

080074fc <sbrk_aligned>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4e0e      	ldr	r6, [pc, #56]	; (8007538 <sbrk_aligned+0x3c>)
 8007500:	460c      	mov	r4, r1
 8007502:	6831      	ldr	r1, [r6, #0]
 8007504:	4605      	mov	r5, r0
 8007506:	b911      	cbnz	r1, 800750e <sbrk_aligned+0x12>
 8007508:	f001 ffe2 	bl	80094d0 <_sbrk_r>
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	4621      	mov	r1, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f001 ffdd 	bl	80094d0 <_sbrk_r>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d00a      	beq.n	8007530 <sbrk_aligned+0x34>
 800751a:	1cc4      	adds	r4, r0, #3
 800751c:	f024 0403 	bic.w	r4, r4, #3
 8007520:	42a0      	cmp	r0, r4
 8007522:	d007      	beq.n	8007534 <sbrk_aligned+0x38>
 8007524:	1a21      	subs	r1, r4, r0
 8007526:	4628      	mov	r0, r5
 8007528:	f001 ffd2 	bl	80094d0 <_sbrk_r>
 800752c:	3001      	adds	r0, #1
 800752e:	d101      	bne.n	8007534 <sbrk_aligned+0x38>
 8007530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007534:	4620      	mov	r0, r4
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	20000568 	.word	0x20000568

0800753c <_malloc_r>:
 800753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007540:	1ccd      	adds	r5, r1, #3
 8007542:	f025 0503 	bic.w	r5, r5, #3
 8007546:	3508      	adds	r5, #8
 8007548:	2d0c      	cmp	r5, #12
 800754a:	bf38      	it	cc
 800754c:	250c      	movcc	r5, #12
 800754e:	2d00      	cmp	r5, #0
 8007550:	4607      	mov	r7, r0
 8007552:	db01      	blt.n	8007558 <_malloc_r+0x1c>
 8007554:	42a9      	cmp	r1, r5
 8007556:	d905      	bls.n	8007564 <_malloc_r+0x28>
 8007558:	230c      	movs	r3, #12
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	2600      	movs	r6, #0
 800755e:	4630      	mov	r0, r6
 8007560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007638 <_malloc_r+0xfc>
 8007568:	f000 f868 	bl	800763c <__malloc_lock>
 800756c:	f8d8 3000 	ldr.w	r3, [r8]
 8007570:	461c      	mov	r4, r3
 8007572:	bb5c      	cbnz	r4, 80075cc <_malloc_r+0x90>
 8007574:	4629      	mov	r1, r5
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ffc0 	bl	80074fc <sbrk_aligned>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	4604      	mov	r4, r0
 8007580:	d155      	bne.n	800762e <_malloc_r+0xf2>
 8007582:	f8d8 4000 	ldr.w	r4, [r8]
 8007586:	4626      	mov	r6, r4
 8007588:	2e00      	cmp	r6, #0
 800758a:	d145      	bne.n	8007618 <_malloc_r+0xdc>
 800758c:	2c00      	cmp	r4, #0
 800758e:	d048      	beq.n	8007622 <_malloc_r+0xe6>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	4631      	mov	r1, r6
 8007594:	4638      	mov	r0, r7
 8007596:	eb04 0903 	add.w	r9, r4, r3
 800759a:	f001 ff99 	bl	80094d0 <_sbrk_r>
 800759e:	4581      	cmp	r9, r0
 80075a0:	d13f      	bne.n	8007622 <_malloc_r+0xe6>
 80075a2:	6821      	ldr	r1, [r4, #0]
 80075a4:	1a6d      	subs	r5, r5, r1
 80075a6:	4629      	mov	r1, r5
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff ffa7 	bl	80074fc <sbrk_aligned>
 80075ae:	3001      	adds	r0, #1
 80075b0:	d037      	beq.n	8007622 <_malloc_r+0xe6>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	442b      	add	r3, r5
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	f8d8 3000 	ldr.w	r3, [r8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d038      	beq.n	8007632 <_malloc_r+0xf6>
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	42a2      	cmp	r2, r4
 80075c4:	d12b      	bne.n	800761e <_malloc_r+0xe2>
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e00f      	b.n	80075ec <_malloc_r+0xb0>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	1b52      	subs	r2, r2, r5
 80075d0:	d41f      	bmi.n	8007612 <_malloc_r+0xd6>
 80075d2:	2a0b      	cmp	r2, #11
 80075d4:	d917      	bls.n	8007606 <_malloc_r+0xca>
 80075d6:	1961      	adds	r1, r4, r5
 80075d8:	42a3      	cmp	r3, r4
 80075da:	6025      	str	r5, [r4, #0]
 80075dc:	bf18      	it	ne
 80075de:	6059      	strne	r1, [r3, #4]
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	bf08      	it	eq
 80075e4:	f8c8 1000 	streq.w	r1, [r8]
 80075e8:	5162      	str	r2, [r4, r5]
 80075ea:	604b      	str	r3, [r1, #4]
 80075ec:	4638      	mov	r0, r7
 80075ee:	f104 060b 	add.w	r6, r4, #11
 80075f2:	f000 f829 	bl	8007648 <__malloc_unlock>
 80075f6:	f026 0607 	bic.w	r6, r6, #7
 80075fa:	1d23      	adds	r3, r4, #4
 80075fc:	1af2      	subs	r2, r6, r3
 80075fe:	d0ae      	beq.n	800755e <_malloc_r+0x22>
 8007600:	1b9b      	subs	r3, r3, r6
 8007602:	50a3      	str	r3, [r4, r2]
 8007604:	e7ab      	b.n	800755e <_malloc_r+0x22>
 8007606:	42a3      	cmp	r3, r4
 8007608:	6862      	ldr	r2, [r4, #4]
 800760a:	d1dd      	bne.n	80075c8 <_malloc_r+0x8c>
 800760c:	f8c8 2000 	str.w	r2, [r8]
 8007610:	e7ec      	b.n	80075ec <_malloc_r+0xb0>
 8007612:	4623      	mov	r3, r4
 8007614:	6864      	ldr	r4, [r4, #4]
 8007616:	e7ac      	b.n	8007572 <_malloc_r+0x36>
 8007618:	4634      	mov	r4, r6
 800761a:	6876      	ldr	r6, [r6, #4]
 800761c:	e7b4      	b.n	8007588 <_malloc_r+0x4c>
 800761e:	4613      	mov	r3, r2
 8007620:	e7cc      	b.n	80075bc <_malloc_r+0x80>
 8007622:	230c      	movs	r3, #12
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4638      	mov	r0, r7
 8007628:	f000 f80e 	bl	8007648 <__malloc_unlock>
 800762c:	e797      	b.n	800755e <_malloc_r+0x22>
 800762e:	6025      	str	r5, [r4, #0]
 8007630:	e7dc      	b.n	80075ec <_malloc_r+0xb0>
 8007632:	605b      	str	r3, [r3, #4]
 8007634:	deff      	udf	#255	; 0xff
 8007636:	bf00      	nop
 8007638:	20000564 	.word	0x20000564

0800763c <__malloc_lock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_lock+0x8>)
 800763e:	f7ff b884 	b.w	800674a <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	20000560 	.word	0x20000560

08007648 <__malloc_unlock>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__malloc_unlock+0x8>)
 800764a:	f7ff b87f 	b.w	800674c <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	20000560 	.word	0x20000560

08007654 <_Balloc>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	69c6      	ldr	r6, [r0, #28]
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	b976      	cbnz	r6, 800767c <_Balloc+0x28>
 800765e:	2010      	movs	r0, #16
 8007660:	f7ff ff44 	bl	80074ec <malloc>
 8007664:	4602      	mov	r2, r0
 8007666:	61e0      	str	r0, [r4, #28]
 8007668:	b920      	cbnz	r0, 8007674 <_Balloc+0x20>
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <_Balloc+0x78>)
 800766c:	4818      	ldr	r0, [pc, #96]	; (80076d0 <_Balloc+0x7c>)
 800766e:	216b      	movs	r1, #107	; 0x6b
 8007670:	f001 ff56 	bl	8009520 <__assert_func>
 8007674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007678:	6006      	str	r6, [r0, #0]
 800767a:	60c6      	str	r6, [r0, #12]
 800767c:	69e6      	ldr	r6, [r4, #28]
 800767e:	68f3      	ldr	r3, [r6, #12]
 8007680:	b183      	cbz	r3, 80076a4 <_Balloc+0x50>
 8007682:	69e3      	ldr	r3, [r4, #28]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800768a:	b9b8      	cbnz	r0, 80076bc <_Balloc+0x68>
 800768c:	2101      	movs	r1, #1
 800768e:	fa01 f605 	lsl.w	r6, r1, r5
 8007692:	1d72      	adds	r2, r6, #5
 8007694:	0092      	lsls	r2, r2, #2
 8007696:	4620      	mov	r0, r4
 8007698:	f001 ff60 	bl	800955c <_calloc_r>
 800769c:	b160      	cbz	r0, 80076b8 <_Balloc+0x64>
 800769e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076a2:	e00e      	b.n	80076c2 <_Balloc+0x6e>
 80076a4:	2221      	movs	r2, #33	; 0x21
 80076a6:	2104      	movs	r1, #4
 80076a8:	4620      	mov	r0, r4
 80076aa:	f001 ff57 	bl	800955c <_calloc_r>
 80076ae:	69e3      	ldr	r3, [r4, #28]
 80076b0:	60f0      	str	r0, [r6, #12]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e4      	bne.n	8007682 <_Balloc+0x2e>
 80076b8:	2000      	movs	r0, #0
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	6802      	ldr	r2, [r0, #0]
 80076be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076c2:	2300      	movs	r3, #0
 80076c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076c8:	e7f7      	b.n	80076ba <_Balloc+0x66>
 80076ca:	bf00      	nop
 80076cc:	0800a176 	.word	0x0800a176
 80076d0:	0800a1f6 	.word	0x0800a1f6

080076d4 <_Bfree>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	69c6      	ldr	r6, [r0, #28]
 80076d8:	4605      	mov	r5, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	b976      	cbnz	r6, 80076fc <_Bfree+0x28>
 80076de:	2010      	movs	r0, #16
 80076e0:	f7ff ff04 	bl	80074ec <malloc>
 80076e4:	4602      	mov	r2, r0
 80076e6:	61e8      	str	r0, [r5, #28]
 80076e8:	b920      	cbnz	r0, 80076f4 <_Bfree+0x20>
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <_Bfree+0x3c>)
 80076ec:	4809      	ldr	r0, [pc, #36]	; (8007714 <_Bfree+0x40>)
 80076ee:	218f      	movs	r1, #143	; 0x8f
 80076f0:	f001 ff16 	bl	8009520 <__assert_func>
 80076f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076f8:	6006      	str	r6, [r0, #0]
 80076fa:	60c6      	str	r6, [r0, #12]
 80076fc:	b13c      	cbz	r4, 800770e <_Bfree+0x3a>
 80076fe:	69eb      	ldr	r3, [r5, #28]
 8007700:	6862      	ldr	r2, [r4, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007708:	6021      	str	r1, [r4, #0]
 800770a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	0800a176 	.word	0x0800a176
 8007714:	0800a1f6 	.word	0x0800a1f6

08007718 <__multadd>:
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	690d      	ldr	r5, [r1, #16]
 800771e:	4607      	mov	r7, r0
 8007720:	460c      	mov	r4, r1
 8007722:	461e      	mov	r6, r3
 8007724:	f101 0c14 	add.w	ip, r1, #20
 8007728:	2000      	movs	r0, #0
 800772a:	f8dc 3000 	ldr.w	r3, [ip]
 800772e:	b299      	uxth	r1, r3
 8007730:	fb02 6101 	mla	r1, r2, r1, r6
 8007734:	0c1e      	lsrs	r6, r3, #16
 8007736:	0c0b      	lsrs	r3, r1, #16
 8007738:	fb02 3306 	mla	r3, r2, r6, r3
 800773c:	b289      	uxth	r1, r1
 800773e:	3001      	adds	r0, #1
 8007740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007744:	4285      	cmp	r5, r0
 8007746:	f84c 1b04 	str.w	r1, [ip], #4
 800774a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800774e:	dcec      	bgt.n	800772a <__multadd+0x12>
 8007750:	b30e      	cbz	r6, 8007796 <__multadd+0x7e>
 8007752:	68a3      	ldr	r3, [r4, #8]
 8007754:	42ab      	cmp	r3, r5
 8007756:	dc19      	bgt.n	800778c <__multadd+0x74>
 8007758:	6861      	ldr	r1, [r4, #4]
 800775a:	4638      	mov	r0, r7
 800775c:	3101      	adds	r1, #1
 800775e:	f7ff ff79 	bl	8007654 <_Balloc>
 8007762:	4680      	mov	r8, r0
 8007764:	b928      	cbnz	r0, 8007772 <__multadd+0x5a>
 8007766:	4602      	mov	r2, r0
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <__multadd+0x84>)
 800776a:	480d      	ldr	r0, [pc, #52]	; (80077a0 <__multadd+0x88>)
 800776c:	21ba      	movs	r1, #186	; 0xba
 800776e:	f001 fed7 	bl	8009520 <__assert_func>
 8007772:	6922      	ldr	r2, [r4, #16]
 8007774:	3202      	adds	r2, #2
 8007776:	f104 010c 	add.w	r1, r4, #12
 800777a:	0092      	lsls	r2, r2, #2
 800777c:	300c      	adds	r0, #12
 800777e:	f001 feb7 	bl	80094f0 <memcpy>
 8007782:	4621      	mov	r1, r4
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff ffa5 	bl	80076d4 <_Bfree>
 800778a:	4644      	mov	r4, r8
 800778c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007790:	3501      	adds	r5, #1
 8007792:	615e      	str	r6, [r3, #20]
 8007794:	6125      	str	r5, [r4, #16]
 8007796:	4620      	mov	r0, r4
 8007798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800779c:	0800a1e5 	.word	0x0800a1e5
 80077a0:	0800a1f6 	.word	0x0800a1f6

080077a4 <__s2b>:
 80077a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	4615      	mov	r5, r2
 80077ac:	461f      	mov	r7, r3
 80077ae:	2209      	movs	r2, #9
 80077b0:	3308      	adds	r3, #8
 80077b2:	4606      	mov	r6, r0
 80077b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b8:	2100      	movs	r1, #0
 80077ba:	2201      	movs	r2, #1
 80077bc:	429a      	cmp	r2, r3
 80077be:	db09      	blt.n	80077d4 <__s2b+0x30>
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff ff47 	bl	8007654 <_Balloc>
 80077c6:	b940      	cbnz	r0, 80077da <__s2b+0x36>
 80077c8:	4602      	mov	r2, r0
 80077ca:	4b19      	ldr	r3, [pc, #100]	; (8007830 <__s2b+0x8c>)
 80077cc:	4819      	ldr	r0, [pc, #100]	; (8007834 <__s2b+0x90>)
 80077ce:	21d3      	movs	r1, #211	; 0xd3
 80077d0:	f001 fea6 	bl	8009520 <__assert_func>
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	3101      	adds	r1, #1
 80077d8:	e7f0      	b.n	80077bc <__s2b+0x18>
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	6143      	str	r3, [r0, #20]
 80077de:	2d09      	cmp	r5, #9
 80077e0:	f04f 0301 	mov.w	r3, #1
 80077e4:	6103      	str	r3, [r0, #16]
 80077e6:	dd16      	ble.n	8007816 <__s2b+0x72>
 80077e8:	f104 0909 	add.w	r9, r4, #9
 80077ec:	46c8      	mov	r8, r9
 80077ee:	442c      	add	r4, r5
 80077f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077f4:	4601      	mov	r1, r0
 80077f6:	3b30      	subs	r3, #48	; 0x30
 80077f8:	220a      	movs	r2, #10
 80077fa:	4630      	mov	r0, r6
 80077fc:	f7ff ff8c 	bl	8007718 <__multadd>
 8007800:	45a0      	cmp	r8, r4
 8007802:	d1f5      	bne.n	80077f0 <__s2b+0x4c>
 8007804:	f1a5 0408 	sub.w	r4, r5, #8
 8007808:	444c      	add	r4, r9
 800780a:	1b2d      	subs	r5, r5, r4
 800780c:	1963      	adds	r3, r4, r5
 800780e:	42bb      	cmp	r3, r7
 8007810:	db04      	blt.n	800781c <__s2b+0x78>
 8007812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007816:	340a      	adds	r4, #10
 8007818:	2509      	movs	r5, #9
 800781a:	e7f6      	b.n	800780a <__s2b+0x66>
 800781c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007820:	4601      	mov	r1, r0
 8007822:	3b30      	subs	r3, #48	; 0x30
 8007824:	220a      	movs	r2, #10
 8007826:	4630      	mov	r0, r6
 8007828:	f7ff ff76 	bl	8007718 <__multadd>
 800782c:	e7ee      	b.n	800780c <__s2b+0x68>
 800782e:	bf00      	nop
 8007830:	0800a1e5 	.word	0x0800a1e5
 8007834:	0800a1f6 	.word	0x0800a1f6

08007838 <__hi0bits>:
 8007838:	0c03      	lsrs	r3, r0, #16
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	b9d3      	cbnz	r3, 8007874 <__hi0bits+0x3c>
 800783e:	0400      	lsls	r0, r0, #16
 8007840:	2310      	movs	r3, #16
 8007842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007846:	bf04      	itt	eq
 8007848:	0200      	lsleq	r0, r0, #8
 800784a:	3308      	addeq	r3, #8
 800784c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007850:	bf04      	itt	eq
 8007852:	0100      	lsleq	r0, r0, #4
 8007854:	3304      	addeq	r3, #4
 8007856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800785a:	bf04      	itt	eq
 800785c:	0080      	lsleq	r0, r0, #2
 800785e:	3302      	addeq	r3, #2
 8007860:	2800      	cmp	r0, #0
 8007862:	db05      	blt.n	8007870 <__hi0bits+0x38>
 8007864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007868:	f103 0301 	add.w	r3, r3, #1
 800786c:	bf08      	it	eq
 800786e:	2320      	moveq	r3, #32
 8007870:	4618      	mov	r0, r3
 8007872:	4770      	bx	lr
 8007874:	2300      	movs	r3, #0
 8007876:	e7e4      	b.n	8007842 <__hi0bits+0xa>

08007878 <__lo0bits>:
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	f013 0207 	ands.w	r2, r3, #7
 800787e:	d00c      	beq.n	800789a <__lo0bits+0x22>
 8007880:	07d9      	lsls	r1, r3, #31
 8007882:	d422      	bmi.n	80078ca <__lo0bits+0x52>
 8007884:	079a      	lsls	r2, r3, #30
 8007886:	bf49      	itett	mi
 8007888:	085b      	lsrmi	r3, r3, #1
 800788a:	089b      	lsrpl	r3, r3, #2
 800788c:	6003      	strmi	r3, [r0, #0]
 800788e:	2201      	movmi	r2, #1
 8007890:	bf5c      	itt	pl
 8007892:	6003      	strpl	r3, [r0, #0]
 8007894:	2202      	movpl	r2, #2
 8007896:	4610      	mov	r0, r2
 8007898:	4770      	bx	lr
 800789a:	b299      	uxth	r1, r3
 800789c:	b909      	cbnz	r1, 80078a2 <__lo0bits+0x2a>
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	2210      	movs	r2, #16
 80078a2:	b2d9      	uxtb	r1, r3
 80078a4:	b909      	cbnz	r1, 80078aa <__lo0bits+0x32>
 80078a6:	3208      	adds	r2, #8
 80078a8:	0a1b      	lsrs	r3, r3, #8
 80078aa:	0719      	lsls	r1, r3, #28
 80078ac:	bf04      	itt	eq
 80078ae:	091b      	lsreq	r3, r3, #4
 80078b0:	3204      	addeq	r2, #4
 80078b2:	0799      	lsls	r1, r3, #30
 80078b4:	bf04      	itt	eq
 80078b6:	089b      	lsreq	r3, r3, #2
 80078b8:	3202      	addeq	r2, #2
 80078ba:	07d9      	lsls	r1, r3, #31
 80078bc:	d403      	bmi.n	80078c6 <__lo0bits+0x4e>
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f102 0201 	add.w	r2, r2, #1
 80078c4:	d003      	beq.n	80078ce <__lo0bits+0x56>
 80078c6:	6003      	str	r3, [r0, #0]
 80078c8:	e7e5      	b.n	8007896 <__lo0bits+0x1e>
 80078ca:	2200      	movs	r2, #0
 80078cc:	e7e3      	b.n	8007896 <__lo0bits+0x1e>
 80078ce:	2220      	movs	r2, #32
 80078d0:	e7e1      	b.n	8007896 <__lo0bits+0x1e>
	...

080078d4 <__i2b>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	2101      	movs	r1, #1
 80078da:	f7ff febb 	bl	8007654 <_Balloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__i2b+0x1a>
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <__i2b+0x24>)
 80078e4:	4805      	ldr	r0, [pc, #20]	; (80078fc <__i2b+0x28>)
 80078e6:	f240 1145 	movw	r1, #325	; 0x145
 80078ea:	f001 fe19 	bl	8009520 <__assert_func>
 80078ee:	2301      	movs	r3, #1
 80078f0:	6144      	str	r4, [r0, #20]
 80078f2:	6103      	str	r3, [r0, #16]
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	bf00      	nop
 80078f8:	0800a1e5 	.word	0x0800a1e5
 80078fc:	0800a1f6 	.word	0x0800a1f6

08007900 <__multiply>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	4691      	mov	r9, r2
 8007906:	690a      	ldr	r2, [r1, #16]
 8007908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	bfb8      	it	lt
 8007910:	460b      	movlt	r3, r1
 8007912:	460c      	mov	r4, r1
 8007914:	bfbc      	itt	lt
 8007916:	464c      	movlt	r4, r9
 8007918:	4699      	movlt	r9, r3
 800791a:	6927      	ldr	r7, [r4, #16]
 800791c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007920:	68a3      	ldr	r3, [r4, #8]
 8007922:	6861      	ldr	r1, [r4, #4]
 8007924:	eb07 060a 	add.w	r6, r7, sl
 8007928:	42b3      	cmp	r3, r6
 800792a:	b085      	sub	sp, #20
 800792c:	bfb8      	it	lt
 800792e:	3101      	addlt	r1, #1
 8007930:	f7ff fe90 	bl	8007654 <_Balloc>
 8007934:	b930      	cbnz	r0, 8007944 <__multiply+0x44>
 8007936:	4602      	mov	r2, r0
 8007938:	4b44      	ldr	r3, [pc, #272]	; (8007a4c <__multiply+0x14c>)
 800793a:	4845      	ldr	r0, [pc, #276]	; (8007a50 <__multiply+0x150>)
 800793c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007940:	f001 fdee 	bl	8009520 <__assert_func>
 8007944:	f100 0514 	add.w	r5, r0, #20
 8007948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800794c:	462b      	mov	r3, r5
 800794e:	2200      	movs	r2, #0
 8007950:	4543      	cmp	r3, r8
 8007952:	d321      	bcc.n	8007998 <__multiply+0x98>
 8007954:	f104 0314 	add.w	r3, r4, #20
 8007958:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800795c:	f109 0314 	add.w	r3, r9, #20
 8007960:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007964:	9202      	str	r2, [sp, #8]
 8007966:	1b3a      	subs	r2, r7, r4
 8007968:	3a15      	subs	r2, #21
 800796a:	f022 0203 	bic.w	r2, r2, #3
 800796e:	3204      	adds	r2, #4
 8007970:	f104 0115 	add.w	r1, r4, #21
 8007974:	428f      	cmp	r7, r1
 8007976:	bf38      	it	cc
 8007978:	2204      	movcc	r2, #4
 800797a:	9201      	str	r2, [sp, #4]
 800797c:	9a02      	ldr	r2, [sp, #8]
 800797e:	9303      	str	r3, [sp, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d80c      	bhi.n	800799e <__multiply+0x9e>
 8007984:	2e00      	cmp	r6, #0
 8007986:	dd03      	ble.n	8007990 <__multiply+0x90>
 8007988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800798c:	2b00      	cmp	r3, #0
 800798e:	d05b      	beq.n	8007a48 <__multiply+0x148>
 8007990:	6106      	str	r6, [r0, #16]
 8007992:	b005      	add	sp, #20
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	f843 2b04 	str.w	r2, [r3], #4
 800799c:	e7d8      	b.n	8007950 <__multiply+0x50>
 800799e:	f8b3 a000 	ldrh.w	sl, [r3]
 80079a2:	f1ba 0f00 	cmp.w	sl, #0
 80079a6:	d024      	beq.n	80079f2 <__multiply+0xf2>
 80079a8:	f104 0e14 	add.w	lr, r4, #20
 80079ac:	46a9      	mov	r9, r5
 80079ae:	f04f 0c00 	mov.w	ip, #0
 80079b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079b6:	f8d9 1000 	ldr.w	r1, [r9]
 80079ba:	fa1f fb82 	uxth.w	fp, r2
 80079be:	b289      	uxth	r1, r1
 80079c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80079c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079c8:	f8d9 2000 	ldr.w	r2, [r9]
 80079cc:	4461      	add	r1, ip
 80079ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80079d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079da:	b289      	uxth	r1, r1
 80079dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079e0:	4577      	cmp	r7, lr
 80079e2:	f849 1b04 	str.w	r1, [r9], #4
 80079e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079ea:	d8e2      	bhi.n	80079b2 <__multiply+0xb2>
 80079ec:	9a01      	ldr	r2, [sp, #4]
 80079ee:	f845 c002 	str.w	ip, [r5, r2]
 80079f2:	9a03      	ldr	r2, [sp, #12]
 80079f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079f8:	3304      	adds	r3, #4
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	d021      	beq.n	8007a44 <__multiply+0x144>
 8007a00:	6829      	ldr	r1, [r5, #0]
 8007a02:	f104 0c14 	add.w	ip, r4, #20
 8007a06:	46ae      	mov	lr, r5
 8007a08:	f04f 0a00 	mov.w	sl, #0
 8007a0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a14:	fb09 220b 	mla	r2, r9, fp, r2
 8007a18:	4452      	add	r2, sl
 8007a1a:	b289      	uxth	r1, r1
 8007a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a20:	f84e 1b04 	str.w	r1, [lr], #4
 8007a24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a30:	fb09 110a 	mla	r1, r9, sl, r1
 8007a34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a38:	4567      	cmp	r7, ip
 8007a3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a3e:	d8e5      	bhi.n	8007a0c <__multiply+0x10c>
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	50a9      	str	r1, [r5, r2]
 8007a44:	3504      	adds	r5, #4
 8007a46:	e799      	b.n	800797c <__multiply+0x7c>
 8007a48:	3e01      	subs	r6, #1
 8007a4a:	e79b      	b.n	8007984 <__multiply+0x84>
 8007a4c:	0800a1e5 	.word	0x0800a1e5
 8007a50:	0800a1f6 	.word	0x0800a1f6

08007a54 <__pow5mult>:
 8007a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a58:	4615      	mov	r5, r2
 8007a5a:	f012 0203 	ands.w	r2, r2, #3
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	d007      	beq.n	8007a74 <__pow5mult+0x20>
 8007a64:	4c25      	ldr	r4, [pc, #148]	; (8007afc <__pow5mult+0xa8>)
 8007a66:	3a01      	subs	r2, #1
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a6e:	f7ff fe53 	bl	8007718 <__multadd>
 8007a72:	4607      	mov	r7, r0
 8007a74:	10ad      	asrs	r5, r5, #2
 8007a76:	d03d      	beq.n	8007af4 <__pow5mult+0xa0>
 8007a78:	69f4      	ldr	r4, [r6, #28]
 8007a7a:	b97c      	cbnz	r4, 8007a9c <__pow5mult+0x48>
 8007a7c:	2010      	movs	r0, #16
 8007a7e:	f7ff fd35 	bl	80074ec <malloc>
 8007a82:	4602      	mov	r2, r0
 8007a84:	61f0      	str	r0, [r6, #28]
 8007a86:	b928      	cbnz	r0, 8007a94 <__pow5mult+0x40>
 8007a88:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <__pow5mult+0xac>)
 8007a8a:	481e      	ldr	r0, [pc, #120]	; (8007b04 <__pow5mult+0xb0>)
 8007a8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a90:	f001 fd46 	bl	8009520 <__assert_func>
 8007a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a98:	6004      	str	r4, [r0, #0]
 8007a9a:	60c4      	str	r4, [r0, #12]
 8007a9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007aa4:	b94c      	cbnz	r4, 8007aba <__pow5mult+0x66>
 8007aa6:	f240 2171 	movw	r1, #625	; 0x271
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff ff12 	bl	80078d4 <__i2b>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	6003      	str	r3, [r0, #0]
 8007aba:	f04f 0900 	mov.w	r9, #0
 8007abe:	07eb      	lsls	r3, r5, #31
 8007ac0:	d50a      	bpl.n	8007ad8 <__pow5mult+0x84>
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff ff1a 	bl	8007900 <__multiply>
 8007acc:	4639      	mov	r1, r7
 8007ace:	4680      	mov	r8, r0
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff fdff 	bl	80076d4 <_Bfree>
 8007ad6:	4647      	mov	r7, r8
 8007ad8:	106d      	asrs	r5, r5, #1
 8007ada:	d00b      	beq.n	8007af4 <__pow5mult+0xa0>
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	b938      	cbnz	r0, 8007af0 <__pow5mult+0x9c>
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff ff0b 	bl	8007900 <__multiply>
 8007aea:	6020      	str	r0, [r4, #0]
 8007aec:	f8c0 9000 	str.w	r9, [r0]
 8007af0:	4604      	mov	r4, r0
 8007af2:	e7e4      	b.n	8007abe <__pow5mult+0x6a>
 8007af4:	4638      	mov	r0, r7
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	bf00      	nop
 8007afc:	0800a340 	.word	0x0800a340
 8007b00:	0800a176 	.word	0x0800a176
 8007b04:	0800a1f6 	.word	0x0800a1f6

08007b08 <__lshift>:
 8007b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	6849      	ldr	r1, [r1, #4]
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	4607      	mov	r7, r0
 8007b1a:	4691      	mov	r9, r2
 8007b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b20:	f108 0601 	add.w	r6, r8, #1
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	db0b      	blt.n	8007b40 <__lshift+0x38>
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f7ff fd93 	bl	8007654 <_Balloc>
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b948      	cbnz	r0, 8007b46 <__lshift+0x3e>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4b28      	ldr	r3, [pc, #160]	; (8007bd8 <__lshift+0xd0>)
 8007b36:	4829      	ldr	r0, [pc, #164]	; (8007bdc <__lshift+0xd4>)
 8007b38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b3c:	f001 fcf0 	bl	8009520 <__assert_func>
 8007b40:	3101      	adds	r1, #1
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	e7ee      	b.n	8007b24 <__lshift+0x1c>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f100 0114 	add.w	r1, r0, #20
 8007b4c:	f100 0210 	add.w	r2, r0, #16
 8007b50:	4618      	mov	r0, r3
 8007b52:	4553      	cmp	r3, sl
 8007b54:	db33      	blt.n	8007bbe <__lshift+0xb6>
 8007b56:	6920      	ldr	r0, [r4, #16]
 8007b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b5c:	f104 0314 	add.w	r3, r4, #20
 8007b60:	f019 091f 	ands.w	r9, r9, #31
 8007b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b6c:	d02b      	beq.n	8007bc6 <__lshift+0xbe>
 8007b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b72:	468a      	mov	sl, r1
 8007b74:	2200      	movs	r2, #0
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	fa00 f009 	lsl.w	r0, r0, r9
 8007b7c:	4310      	orrs	r0, r2
 8007b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b86:	459c      	cmp	ip, r3
 8007b88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b8c:	d8f3      	bhi.n	8007b76 <__lshift+0x6e>
 8007b8e:	ebac 0304 	sub.w	r3, ip, r4
 8007b92:	3b15      	subs	r3, #21
 8007b94:	f023 0303 	bic.w	r3, r3, #3
 8007b98:	3304      	adds	r3, #4
 8007b9a:	f104 0015 	add.w	r0, r4, #21
 8007b9e:	4584      	cmp	ip, r0
 8007ba0:	bf38      	it	cc
 8007ba2:	2304      	movcc	r3, #4
 8007ba4:	50ca      	str	r2, [r1, r3]
 8007ba6:	b10a      	cbz	r2, 8007bac <__lshift+0xa4>
 8007ba8:	f108 0602 	add.w	r6, r8, #2
 8007bac:	3e01      	subs	r6, #1
 8007bae:	4638      	mov	r0, r7
 8007bb0:	612e      	str	r6, [r5, #16]
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	f7ff fd8e 	bl	80076d4 <_Bfree>
 8007bb8:	4628      	mov	r0, r5
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	e7c5      	b.n	8007b52 <__lshift+0x4a>
 8007bc6:	3904      	subs	r1, #4
 8007bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bd0:	459c      	cmp	ip, r3
 8007bd2:	d8f9      	bhi.n	8007bc8 <__lshift+0xc0>
 8007bd4:	e7ea      	b.n	8007bac <__lshift+0xa4>
 8007bd6:	bf00      	nop
 8007bd8:	0800a1e5 	.word	0x0800a1e5
 8007bdc:	0800a1f6 	.word	0x0800a1f6

08007be0 <__mcmp>:
 8007be0:	b530      	push	{r4, r5, lr}
 8007be2:	6902      	ldr	r2, [r0, #16]
 8007be4:	690c      	ldr	r4, [r1, #16]
 8007be6:	1b12      	subs	r2, r2, r4
 8007be8:	d10e      	bne.n	8007c08 <__mcmp+0x28>
 8007bea:	f100 0314 	add.w	r3, r0, #20
 8007bee:	3114      	adds	r1, #20
 8007bf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c00:	42a5      	cmp	r5, r4
 8007c02:	d003      	beq.n	8007c0c <__mcmp+0x2c>
 8007c04:	d305      	bcc.n	8007c12 <__mcmp+0x32>
 8007c06:	2201      	movs	r2, #1
 8007c08:	4610      	mov	r0, r2
 8007c0a:	bd30      	pop	{r4, r5, pc}
 8007c0c:	4283      	cmp	r3, r0
 8007c0e:	d3f3      	bcc.n	8007bf8 <__mcmp+0x18>
 8007c10:	e7fa      	b.n	8007c08 <__mcmp+0x28>
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c16:	e7f7      	b.n	8007c08 <__mcmp+0x28>

08007c18 <__mdiff>:
 8007c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	4606      	mov	r6, r0
 8007c20:	4611      	mov	r1, r2
 8007c22:	4620      	mov	r0, r4
 8007c24:	4690      	mov	r8, r2
 8007c26:	f7ff ffdb 	bl	8007be0 <__mcmp>
 8007c2a:	1e05      	subs	r5, r0, #0
 8007c2c:	d110      	bne.n	8007c50 <__mdiff+0x38>
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff fd0f 	bl	8007654 <_Balloc>
 8007c36:	b930      	cbnz	r0, 8007c46 <__mdiff+0x2e>
 8007c38:	4b3a      	ldr	r3, [pc, #232]	; (8007d24 <__mdiff+0x10c>)
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	f240 2137 	movw	r1, #567	; 0x237
 8007c40:	4839      	ldr	r0, [pc, #228]	; (8007d28 <__mdiff+0x110>)
 8007c42:	f001 fc6d 	bl	8009520 <__assert_func>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	bfa4      	itt	ge
 8007c52:	4643      	movge	r3, r8
 8007c54:	46a0      	movge	r8, r4
 8007c56:	4630      	mov	r0, r6
 8007c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c5c:	bfa6      	itte	ge
 8007c5e:	461c      	movge	r4, r3
 8007c60:	2500      	movge	r5, #0
 8007c62:	2501      	movlt	r5, #1
 8007c64:	f7ff fcf6 	bl	8007654 <_Balloc>
 8007c68:	b920      	cbnz	r0, 8007c74 <__mdiff+0x5c>
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	; (8007d24 <__mdiff+0x10c>)
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	f240 2145 	movw	r1, #581	; 0x245
 8007c72:	e7e5      	b.n	8007c40 <__mdiff+0x28>
 8007c74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c78:	6926      	ldr	r6, [r4, #16]
 8007c7a:	60c5      	str	r5, [r0, #12]
 8007c7c:	f104 0914 	add.w	r9, r4, #20
 8007c80:	f108 0514 	add.w	r5, r8, #20
 8007c84:	f100 0e14 	add.w	lr, r0, #20
 8007c88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c90:	f108 0210 	add.w	r2, r8, #16
 8007c94:	46f2      	mov	sl, lr
 8007c96:	2100      	movs	r1, #0
 8007c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ca0:	fa11 f88b 	uxtah	r8, r1, fp
 8007ca4:	b299      	uxth	r1, r3
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	eba8 0801 	sub.w	r8, r8, r1
 8007cac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cb4:	fa1f f888 	uxth.w	r8, r8
 8007cb8:	1419      	asrs	r1, r3, #16
 8007cba:	454e      	cmp	r6, r9
 8007cbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007cc0:	f84a 3b04 	str.w	r3, [sl], #4
 8007cc4:	d8e8      	bhi.n	8007c98 <__mdiff+0x80>
 8007cc6:	1b33      	subs	r3, r6, r4
 8007cc8:	3b15      	subs	r3, #21
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	3304      	adds	r3, #4
 8007cd0:	3415      	adds	r4, #21
 8007cd2:	42a6      	cmp	r6, r4
 8007cd4:	bf38      	it	cc
 8007cd6:	2304      	movcc	r3, #4
 8007cd8:	441d      	add	r5, r3
 8007cda:	4473      	add	r3, lr
 8007cdc:	469e      	mov	lr, r3
 8007cde:	462e      	mov	r6, r5
 8007ce0:	4566      	cmp	r6, ip
 8007ce2:	d30e      	bcc.n	8007d02 <__mdiff+0xea>
 8007ce4:	f10c 0203 	add.w	r2, ip, #3
 8007ce8:	1b52      	subs	r2, r2, r5
 8007cea:	f022 0203 	bic.w	r2, r2, #3
 8007cee:	3d03      	subs	r5, #3
 8007cf0:	45ac      	cmp	ip, r5
 8007cf2:	bf38      	it	cc
 8007cf4:	2200      	movcc	r2, #0
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007cfc:	b17a      	cbz	r2, 8007d1e <__mdiff+0x106>
 8007cfe:	6107      	str	r7, [r0, #16]
 8007d00:	e7a4      	b.n	8007c4c <__mdiff+0x34>
 8007d02:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d06:	fa11 f288 	uxtah	r2, r1, r8
 8007d0a:	1414      	asrs	r4, r2, #16
 8007d0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d10:	b292      	uxth	r2, r2
 8007d12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d16:	f84e 2b04 	str.w	r2, [lr], #4
 8007d1a:	1421      	asrs	r1, r4, #16
 8007d1c:	e7e0      	b.n	8007ce0 <__mdiff+0xc8>
 8007d1e:	3f01      	subs	r7, #1
 8007d20:	e7ea      	b.n	8007cf8 <__mdiff+0xe0>
 8007d22:	bf00      	nop
 8007d24:	0800a1e5 	.word	0x0800a1e5
 8007d28:	0800a1f6 	.word	0x0800a1f6

08007d2c <__ulp>:
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	ed8d 0b00 	vstr	d0, [sp]
 8007d32:	9a01      	ldr	r2, [sp, #4]
 8007d34:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <__ulp+0x48>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dc08      	bgt.n	8007d52 <__ulp+0x26>
 8007d40:	425b      	negs	r3, r3
 8007d42:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007d46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d4a:	da04      	bge.n	8007d56 <__ulp+0x2a>
 8007d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d50:	4113      	asrs	r3, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	e008      	b.n	8007d68 <__ulp+0x3c>
 8007d56:	f1a2 0314 	sub.w	r3, r2, #20
 8007d5a:	2b1e      	cmp	r3, #30
 8007d5c:	bfda      	itte	le
 8007d5e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007d62:	40da      	lsrle	r2, r3
 8007d64:	2201      	movgt	r2, #1
 8007d66:	2300      	movs	r3, #0
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	ec41 0b10 	vmov	d0, r0, r1
 8007d70:	b002      	add	sp, #8
 8007d72:	4770      	bx	lr
 8007d74:	7ff00000 	.word	0x7ff00000

08007d78 <__b2d>:
 8007d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7c:	6906      	ldr	r6, [r0, #16]
 8007d7e:	f100 0814 	add.w	r8, r0, #20
 8007d82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d86:	1f37      	subs	r7, r6, #4
 8007d88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7ff fd53 	bl	8007838 <__hi0bits>
 8007d92:	f1c0 0320 	rsb	r3, r0, #32
 8007d96:	280a      	cmp	r0, #10
 8007d98:	600b      	str	r3, [r1, #0]
 8007d9a:	491b      	ldr	r1, [pc, #108]	; (8007e08 <__b2d+0x90>)
 8007d9c:	dc15      	bgt.n	8007dca <__b2d+0x52>
 8007d9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007da2:	fa22 f30c 	lsr.w	r3, r2, ip
 8007da6:	45b8      	cmp	r8, r7
 8007da8:	ea43 0501 	orr.w	r5, r3, r1
 8007dac:	bf34      	ite	cc
 8007dae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007db2:	2300      	movcs	r3, #0
 8007db4:	3015      	adds	r0, #21
 8007db6:	fa02 f000 	lsl.w	r0, r2, r0
 8007dba:	fa23 f30c 	lsr.w	r3, r3, ip
 8007dbe:	4303      	orrs	r3, r0
 8007dc0:	461c      	mov	r4, r3
 8007dc2:	ec45 4b10 	vmov	d0, r4, r5
 8007dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dca:	45b8      	cmp	r8, r7
 8007dcc:	bf3a      	itte	cc
 8007dce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dd2:	f1a6 0708 	subcc.w	r7, r6, #8
 8007dd6:	2300      	movcs	r3, #0
 8007dd8:	380b      	subs	r0, #11
 8007dda:	d012      	beq.n	8007e02 <__b2d+0x8a>
 8007ddc:	f1c0 0120 	rsb	r1, r0, #32
 8007de0:	fa23 f401 	lsr.w	r4, r3, r1
 8007de4:	4082      	lsls	r2, r0
 8007de6:	4322      	orrs	r2, r4
 8007de8:	4547      	cmp	r7, r8
 8007dea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007dee:	bf8c      	ite	hi
 8007df0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007df4:	2200      	movls	r2, #0
 8007df6:	4083      	lsls	r3, r0
 8007df8:	40ca      	lsrs	r2, r1
 8007dfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	e7de      	b.n	8007dc0 <__b2d+0x48>
 8007e02:	ea42 0501 	orr.w	r5, r2, r1
 8007e06:	e7db      	b.n	8007dc0 <__b2d+0x48>
 8007e08:	3ff00000 	.word	0x3ff00000

08007e0c <__d2b>:
 8007e0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	460f      	mov	r7, r1
 8007e12:	2101      	movs	r1, #1
 8007e14:	ec59 8b10 	vmov	r8, r9, d0
 8007e18:	4616      	mov	r6, r2
 8007e1a:	f7ff fc1b 	bl	8007654 <_Balloc>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b930      	cbnz	r0, 8007e30 <__d2b+0x24>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <__d2b+0xac>)
 8007e26:	4825      	ldr	r0, [pc, #148]	; (8007ebc <__d2b+0xb0>)
 8007e28:	f240 310f 	movw	r1, #783	; 0x30f
 8007e2c:	f001 fb78 	bl	8009520 <__assert_func>
 8007e30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e38:	bb2d      	cbnz	r5, 8007e86 <__d2b+0x7a>
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	f1b8 0300 	subs.w	r3, r8, #0
 8007e40:	d026      	beq.n	8007e90 <__d2b+0x84>
 8007e42:	4668      	mov	r0, sp
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	f7ff fd17 	bl	8007878 <__lo0bits>
 8007e4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e4e:	b1e8      	cbz	r0, 8007e8c <__d2b+0x80>
 8007e50:	f1c0 0320 	rsb	r3, r0, #32
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	40c2      	lsrs	r2, r0
 8007e5c:	6163      	str	r3, [r4, #20]
 8007e5e:	9201      	str	r2, [sp, #4]
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	61a3      	str	r3, [r4, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bf14      	ite	ne
 8007e68:	2202      	movne	r2, #2
 8007e6a:	2201      	moveq	r2, #1
 8007e6c:	6122      	str	r2, [r4, #16]
 8007e6e:	b1bd      	cbz	r5, 8007ea0 <__d2b+0x94>
 8007e70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e74:	4405      	add	r5, r0
 8007e76:	603d      	str	r5, [r7, #0]
 8007e78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	b003      	add	sp, #12
 8007e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e8a:	e7d6      	b.n	8007e3a <__d2b+0x2e>
 8007e8c:	6161      	str	r1, [r4, #20]
 8007e8e:	e7e7      	b.n	8007e60 <__d2b+0x54>
 8007e90:	a801      	add	r0, sp, #4
 8007e92:	f7ff fcf1 	bl	8007878 <__lo0bits>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	6163      	str	r3, [r4, #20]
 8007e9a:	3020      	adds	r0, #32
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	e7e5      	b.n	8007e6c <__d2b+0x60>
 8007ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ea8:	6038      	str	r0, [r7, #0]
 8007eaa:	6918      	ldr	r0, [r3, #16]
 8007eac:	f7ff fcc4 	bl	8007838 <__hi0bits>
 8007eb0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eb4:	e7e2      	b.n	8007e7c <__d2b+0x70>
 8007eb6:	bf00      	nop
 8007eb8:	0800a1e5 	.word	0x0800a1e5
 8007ebc:	0800a1f6 	.word	0x0800a1f6

08007ec0 <__ratio>:
 8007ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	4688      	mov	r8, r1
 8007ec6:	4669      	mov	r1, sp
 8007ec8:	4681      	mov	r9, r0
 8007eca:	f7ff ff55 	bl	8007d78 <__b2d>
 8007ece:	a901      	add	r1, sp, #4
 8007ed0:	4640      	mov	r0, r8
 8007ed2:	ec55 4b10 	vmov	r4, r5, d0
 8007ed6:	f7ff ff4f 	bl	8007d78 <__b2d>
 8007eda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ede:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ee2:	eba3 0c02 	sub.w	ip, r3, r2
 8007ee6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ef0:	ec51 0b10 	vmov	r0, r1, d0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfd6      	itet	le
 8007ef8:	460a      	movle	r2, r1
 8007efa:	462a      	movgt	r2, r5
 8007efc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f00:	468b      	mov	fp, r1
 8007f02:	462f      	mov	r7, r5
 8007f04:	bfd4      	ite	le
 8007f06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f0e:	4620      	mov	r0, r4
 8007f10:	ee10 2a10 	vmov	r2, s0
 8007f14:	465b      	mov	r3, fp
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 fca8 	bl	800086c <__aeabi_ddiv>
 8007f1c:	ec41 0b10 	vmov	d0, r0, r1
 8007f20:	b003      	add	sp, #12
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f26 <__copybits>:
 8007f26:	3901      	subs	r1, #1
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	1149      	asrs	r1, r1, #5
 8007f2c:	6914      	ldr	r4, [r2, #16]
 8007f2e:	3101      	adds	r1, #1
 8007f30:	f102 0314 	add.w	r3, r2, #20
 8007f34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f3c:	1f05      	subs	r5, r0, #4
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	d30c      	bcc.n	8007f5c <__copybits+0x36>
 8007f42:	1aa3      	subs	r3, r4, r2
 8007f44:	3b11      	subs	r3, #17
 8007f46:	f023 0303 	bic.w	r3, r3, #3
 8007f4a:	3211      	adds	r2, #17
 8007f4c:	42a2      	cmp	r2, r4
 8007f4e:	bf88      	it	hi
 8007f50:	2300      	movhi	r3, #0
 8007f52:	4418      	add	r0, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	4288      	cmp	r0, r1
 8007f58:	d305      	bcc.n	8007f66 <__copybits+0x40>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f60:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f64:	e7eb      	b.n	8007f3e <__copybits+0x18>
 8007f66:	f840 3b04 	str.w	r3, [r0], #4
 8007f6a:	e7f4      	b.n	8007f56 <__copybits+0x30>

08007f6c <__any_on>:
 8007f6c:	f100 0214 	add.w	r2, r0, #20
 8007f70:	6900      	ldr	r0, [r0, #16]
 8007f72:	114b      	asrs	r3, r1, #5
 8007f74:	4298      	cmp	r0, r3
 8007f76:	b510      	push	{r4, lr}
 8007f78:	db11      	blt.n	8007f9e <__any_on+0x32>
 8007f7a:	dd0a      	ble.n	8007f92 <__any_on+0x26>
 8007f7c:	f011 011f 	ands.w	r1, r1, #31
 8007f80:	d007      	beq.n	8007f92 <__any_on+0x26>
 8007f82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f86:	fa24 f001 	lsr.w	r0, r4, r1
 8007f8a:	fa00 f101 	lsl.w	r1, r0, r1
 8007f8e:	428c      	cmp	r4, r1
 8007f90:	d10b      	bne.n	8007faa <__any_on+0x3e>
 8007f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d803      	bhi.n	8007fa2 <__any_on+0x36>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	e7f7      	b.n	8007f92 <__any_on+0x26>
 8007fa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d0f5      	beq.n	8007f96 <__any_on+0x2a>
 8007faa:	2001      	movs	r0, #1
 8007fac:	e7f6      	b.n	8007f9c <__any_on+0x30>

08007fae <sulp>:
 8007fae:	b570      	push	{r4, r5, r6, lr}
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	4616      	mov	r6, r2
 8007fba:	f7ff feb7 	bl	8007d2c <__ulp>
 8007fbe:	ec51 0b10 	vmov	r0, r1, d0
 8007fc2:	b17e      	cbz	r6, 8007fe4 <sulp+0x36>
 8007fc4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dd09      	ble.n	8007fe4 <sulp+0x36>
 8007fd0:	051b      	lsls	r3, r3, #20
 8007fd2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	f7f8 fb1a 	bl	8000618 <__aeabi_dmul>
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fe8 <_strtod_l>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	ed2d 8b02 	vpush	{d8}
 8007ff0:	b09b      	sub	sp, #108	; 0x6c
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	9216      	str	r2, [sp, #88]	; 0x58
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	460a      	mov	r2, r1
 8008006:	9215      	str	r2, [sp, #84]	; 0x54
 8008008:	7811      	ldrb	r1, [r2, #0]
 800800a:	292b      	cmp	r1, #43	; 0x2b
 800800c:	d04c      	beq.n	80080a8 <_strtod_l+0xc0>
 800800e:	d83a      	bhi.n	8008086 <_strtod_l+0x9e>
 8008010:	290d      	cmp	r1, #13
 8008012:	d834      	bhi.n	800807e <_strtod_l+0x96>
 8008014:	2908      	cmp	r1, #8
 8008016:	d834      	bhi.n	8008082 <_strtod_l+0x9a>
 8008018:	2900      	cmp	r1, #0
 800801a:	d03d      	beq.n	8008098 <_strtod_l+0xb0>
 800801c:	2200      	movs	r2, #0
 800801e:	920a      	str	r2, [sp, #40]	; 0x28
 8008020:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008022:	7832      	ldrb	r2, [r6, #0]
 8008024:	2a30      	cmp	r2, #48	; 0x30
 8008026:	f040 80b4 	bne.w	8008192 <_strtod_l+0x1aa>
 800802a:	7872      	ldrb	r2, [r6, #1]
 800802c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008030:	2a58      	cmp	r2, #88	; 0x58
 8008032:	d170      	bne.n	8008116 <_strtod_l+0x12e>
 8008034:	9302      	str	r3, [sp, #8]
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	ab16      	add	r3, sp, #88	; 0x58
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	4a8e      	ldr	r2, [pc, #568]	; (8008278 <_strtod_l+0x290>)
 8008040:	ab17      	add	r3, sp, #92	; 0x5c
 8008042:	a915      	add	r1, sp, #84	; 0x54
 8008044:	4620      	mov	r0, r4
 8008046:	f001 fb07 	bl	8009658 <__gethex>
 800804a:	f010 070f 	ands.w	r7, r0, #15
 800804e:	4605      	mov	r5, r0
 8008050:	d005      	beq.n	800805e <_strtod_l+0x76>
 8008052:	2f06      	cmp	r7, #6
 8008054:	d12a      	bne.n	80080ac <_strtod_l+0xc4>
 8008056:	3601      	adds	r6, #1
 8008058:	2300      	movs	r3, #0
 800805a:	9615      	str	r6, [sp, #84]	; 0x54
 800805c:	930a      	str	r3, [sp, #40]	; 0x28
 800805e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008060:	2b00      	cmp	r3, #0
 8008062:	f040 857f 	bne.w	8008b64 <_strtod_l+0xb7c>
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	b1db      	cbz	r3, 80080a2 <_strtod_l+0xba>
 800806a:	4642      	mov	r2, r8
 800806c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008070:	ec43 2b10 	vmov	d0, r2, r3
 8008074:	b01b      	add	sp, #108	; 0x6c
 8008076:	ecbd 8b02 	vpop	{d8}
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807e:	2920      	cmp	r1, #32
 8008080:	d1cc      	bne.n	800801c <_strtod_l+0x34>
 8008082:	3201      	adds	r2, #1
 8008084:	e7bf      	b.n	8008006 <_strtod_l+0x1e>
 8008086:	292d      	cmp	r1, #45	; 0x2d
 8008088:	d1c8      	bne.n	800801c <_strtod_l+0x34>
 800808a:	2101      	movs	r1, #1
 800808c:	910a      	str	r1, [sp, #40]	; 0x28
 800808e:	1c51      	adds	r1, r2, #1
 8008090:	9115      	str	r1, [sp, #84]	; 0x54
 8008092:	7852      	ldrb	r2, [r2, #1]
 8008094:	2a00      	cmp	r2, #0
 8008096:	d1c3      	bne.n	8008020 <_strtod_l+0x38>
 8008098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800809a:	9515      	str	r5, [sp, #84]	; 0x54
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 855f 	bne.w	8008b60 <_strtod_l+0xb78>
 80080a2:	4642      	mov	r2, r8
 80080a4:	464b      	mov	r3, r9
 80080a6:	e7e3      	b.n	8008070 <_strtod_l+0x88>
 80080a8:	2100      	movs	r1, #0
 80080aa:	e7ef      	b.n	800808c <_strtod_l+0xa4>
 80080ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80080ae:	b13a      	cbz	r2, 80080c0 <_strtod_l+0xd8>
 80080b0:	2135      	movs	r1, #53	; 0x35
 80080b2:	a818      	add	r0, sp, #96	; 0x60
 80080b4:	f7ff ff37 	bl	8007f26 <__copybits>
 80080b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff fb0a 	bl	80076d4 <_Bfree>
 80080c0:	3f01      	subs	r7, #1
 80080c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080c4:	2f04      	cmp	r7, #4
 80080c6:	d806      	bhi.n	80080d6 <_strtod_l+0xee>
 80080c8:	e8df f007 	tbb	[pc, r7]
 80080cc:	201d0314 	.word	0x201d0314
 80080d0:	14          	.byte	0x14
 80080d1:	00          	.byte	0x00
 80080d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80080d6:	05e9      	lsls	r1, r5, #23
 80080d8:	bf48      	it	mi
 80080da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80080de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080e2:	0d1b      	lsrs	r3, r3, #20
 80080e4:	051b      	lsls	r3, r3, #20
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1b9      	bne.n	800805e <_strtod_l+0x76>
 80080ea:	f7fe fb03 	bl	80066f4 <__errno>
 80080ee:	2322      	movs	r3, #34	; 0x22
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	e7b4      	b.n	800805e <_strtod_l+0x76>
 80080f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80080f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008100:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008104:	e7e7      	b.n	80080d6 <_strtod_l+0xee>
 8008106:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008280 <_strtod_l+0x298>
 800810a:	e7e4      	b.n	80080d6 <_strtod_l+0xee>
 800810c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008110:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008114:	e7df      	b.n	80080d6 <_strtod_l+0xee>
 8008116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	9215      	str	r2, [sp, #84]	; 0x54
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d0f9      	beq.n	8008116 <_strtod_l+0x12e>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d09b      	beq.n	800805e <_strtod_l+0x76>
 8008126:	2301      	movs	r3, #1
 8008128:	f04f 0a00 	mov.w	sl, #0
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008130:	930b      	str	r3, [sp, #44]	; 0x2c
 8008132:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008136:	46d3      	mov	fp, sl
 8008138:	220a      	movs	r2, #10
 800813a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800813c:	7806      	ldrb	r6, [r0, #0]
 800813e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008142:	b2d9      	uxtb	r1, r3
 8008144:	2909      	cmp	r1, #9
 8008146:	d926      	bls.n	8008196 <_strtod_l+0x1ae>
 8008148:	494c      	ldr	r1, [pc, #304]	; (800827c <_strtod_l+0x294>)
 800814a:	2201      	movs	r2, #1
 800814c:	f001 f98c 	bl	8009468 <strncmp>
 8008150:	2800      	cmp	r0, #0
 8008152:	d030      	beq.n	80081b6 <_strtod_l+0x1ce>
 8008154:	2000      	movs	r0, #0
 8008156:	4632      	mov	r2, r6
 8008158:	9005      	str	r0, [sp, #20]
 800815a:	465e      	mov	r6, fp
 800815c:	4603      	mov	r3, r0
 800815e:	2a65      	cmp	r2, #101	; 0x65
 8008160:	d001      	beq.n	8008166 <_strtod_l+0x17e>
 8008162:	2a45      	cmp	r2, #69	; 0x45
 8008164:	d113      	bne.n	800818e <_strtod_l+0x1a6>
 8008166:	b91e      	cbnz	r6, 8008170 <_strtod_l+0x188>
 8008168:	9a04      	ldr	r2, [sp, #16]
 800816a:	4302      	orrs	r2, r0
 800816c:	d094      	beq.n	8008098 <_strtod_l+0xb0>
 800816e:	2600      	movs	r6, #0
 8008170:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008172:	1c6a      	adds	r2, r5, #1
 8008174:	9215      	str	r2, [sp, #84]	; 0x54
 8008176:	786a      	ldrb	r2, [r5, #1]
 8008178:	2a2b      	cmp	r2, #43	; 0x2b
 800817a:	d074      	beq.n	8008266 <_strtod_l+0x27e>
 800817c:	2a2d      	cmp	r2, #45	; 0x2d
 800817e:	d078      	beq.n	8008272 <_strtod_l+0x28a>
 8008180:	f04f 0c00 	mov.w	ip, #0
 8008184:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008188:	2909      	cmp	r1, #9
 800818a:	d97f      	bls.n	800828c <_strtod_l+0x2a4>
 800818c:	9515      	str	r5, [sp, #84]	; 0x54
 800818e:	2700      	movs	r7, #0
 8008190:	e09e      	b.n	80082d0 <_strtod_l+0x2e8>
 8008192:	2300      	movs	r3, #0
 8008194:	e7c8      	b.n	8008128 <_strtod_l+0x140>
 8008196:	f1bb 0f08 	cmp.w	fp, #8
 800819a:	bfd8      	it	le
 800819c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800819e:	f100 0001 	add.w	r0, r0, #1
 80081a2:	bfda      	itte	le
 80081a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80081a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80081aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80081ae:	f10b 0b01 	add.w	fp, fp, #1
 80081b2:	9015      	str	r0, [sp, #84]	; 0x54
 80081b4:	e7c1      	b.n	800813a <_strtod_l+0x152>
 80081b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	9215      	str	r2, [sp, #84]	; 0x54
 80081bc:	785a      	ldrb	r2, [r3, #1]
 80081be:	f1bb 0f00 	cmp.w	fp, #0
 80081c2:	d037      	beq.n	8008234 <_strtod_l+0x24c>
 80081c4:	9005      	str	r0, [sp, #20]
 80081c6:	465e      	mov	r6, fp
 80081c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	d912      	bls.n	80081f6 <_strtod_l+0x20e>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7c4      	b.n	800815e <_strtod_l+0x176>
 80081d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	9215      	str	r2, [sp, #84]	; 0x54
 80081da:	785a      	ldrb	r2, [r3, #1]
 80081dc:	3001      	adds	r0, #1
 80081de:	2a30      	cmp	r2, #48	; 0x30
 80081e0:	d0f8      	beq.n	80081d4 <_strtod_l+0x1ec>
 80081e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	f200 84c1 	bhi.w	8008b6e <_strtod_l+0xb86>
 80081ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ee:	9005      	str	r0, [sp, #20]
 80081f0:	2000      	movs	r0, #0
 80081f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f4:	4606      	mov	r6, r0
 80081f6:	3a30      	subs	r2, #48	; 0x30
 80081f8:	f100 0301 	add.w	r3, r0, #1
 80081fc:	d014      	beq.n	8008228 <_strtod_l+0x240>
 80081fe:	9905      	ldr	r1, [sp, #20]
 8008200:	4419      	add	r1, r3
 8008202:	9105      	str	r1, [sp, #20]
 8008204:	4633      	mov	r3, r6
 8008206:	eb00 0c06 	add.w	ip, r0, r6
 800820a:	210a      	movs	r1, #10
 800820c:	4563      	cmp	r3, ip
 800820e:	d113      	bne.n	8008238 <_strtod_l+0x250>
 8008210:	1833      	adds	r3, r6, r0
 8008212:	2b08      	cmp	r3, #8
 8008214:	f106 0601 	add.w	r6, r6, #1
 8008218:	4406      	add	r6, r0
 800821a:	dc1a      	bgt.n	8008252 <_strtod_l+0x26a>
 800821c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821e:	230a      	movs	r3, #10
 8008220:	fb03 2301 	mla	r3, r3, r1, r2
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	2300      	movs	r3, #0
 8008228:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800822a:	1c51      	adds	r1, r2, #1
 800822c:	9115      	str	r1, [sp, #84]	; 0x54
 800822e:	7852      	ldrb	r2, [r2, #1]
 8008230:	4618      	mov	r0, r3
 8008232:	e7c9      	b.n	80081c8 <_strtod_l+0x1e0>
 8008234:	4658      	mov	r0, fp
 8008236:	e7d2      	b.n	80081de <_strtod_l+0x1f6>
 8008238:	2b08      	cmp	r3, #8
 800823a:	f103 0301 	add.w	r3, r3, #1
 800823e:	dc03      	bgt.n	8008248 <_strtod_l+0x260>
 8008240:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008242:	434f      	muls	r7, r1
 8008244:	9709      	str	r7, [sp, #36]	; 0x24
 8008246:	e7e1      	b.n	800820c <_strtod_l+0x224>
 8008248:	2b10      	cmp	r3, #16
 800824a:	bfd8      	it	le
 800824c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008250:	e7dc      	b.n	800820c <_strtod_l+0x224>
 8008252:	2e10      	cmp	r6, #16
 8008254:	bfdc      	itt	le
 8008256:	230a      	movle	r3, #10
 8008258:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800825c:	e7e3      	b.n	8008226 <_strtod_l+0x23e>
 800825e:	2300      	movs	r3, #0
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	2301      	movs	r3, #1
 8008264:	e780      	b.n	8008168 <_strtod_l+0x180>
 8008266:	f04f 0c00 	mov.w	ip, #0
 800826a:	1caa      	adds	r2, r5, #2
 800826c:	9215      	str	r2, [sp, #84]	; 0x54
 800826e:	78aa      	ldrb	r2, [r5, #2]
 8008270:	e788      	b.n	8008184 <_strtod_l+0x19c>
 8008272:	f04f 0c01 	mov.w	ip, #1
 8008276:	e7f8      	b.n	800826a <_strtod_l+0x282>
 8008278:	0800a350 	.word	0x0800a350
 800827c:	0800a34c 	.word	0x0800a34c
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008286:	1c51      	adds	r1, r2, #1
 8008288:	9115      	str	r1, [sp, #84]	; 0x54
 800828a:	7852      	ldrb	r2, [r2, #1]
 800828c:	2a30      	cmp	r2, #48	; 0x30
 800828e:	d0f9      	beq.n	8008284 <_strtod_l+0x29c>
 8008290:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008294:	2908      	cmp	r1, #8
 8008296:	f63f af7a 	bhi.w	800818e <_strtod_l+0x1a6>
 800829a:	3a30      	subs	r2, #48	; 0x30
 800829c:	9208      	str	r2, [sp, #32]
 800829e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082a0:	920c      	str	r2, [sp, #48]	; 0x30
 80082a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082a4:	1c57      	adds	r7, r2, #1
 80082a6:	9715      	str	r7, [sp, #84]	; 0x54
 80082a8:	7852      	ldrb	r2, [r2, #1]
 80082aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80082ae:	f1be 0f09 	cmp.w	lr, #9
 80082b2:	d938      	bls.n	8008326 <_strtod_l+0x33e>
 80082b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082b6:	1a7f      	subs	r7, r7, r1
 80082b8:	2f08      	cmp	r7, #8
 80082ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80082be:	dc03      	bgt.n	80082c8 <_strtod_l+0x2e0>
 80082c0:	9908      	ldr	r1, [sp, #32]
 80082c2:	428f      	cmp	r7, r1
 80082c4:	bfa8      	it	ge
 80082c6:	460f      	movge	r7, r1
 80082c8:	f1bc 0f00 	cmp.w	ip, #0
 80082cc:	d000      	beq.n	80082d0 <_strtod_l+0x2e8>
 80082ce:	427f      	negs	r7, r7
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	d14f      	bne.n	8008374 <_strtod_l+0x38c>
 80082d4:	9904      	ldr	r1, [sp, #16]
 80082d6:	4301      	orrs	r1, r0
 80082d8:	f47f aec1 	bne.w	800805e <_strtod_l+0x76>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f47f aedb 	bne.w	8008098 <_strtod_l+0xb0>
 80082e2:	2a69      	cmp	r2, #105	; 0x69
 80082e4:	d029      	beq.n	800833a <_strtod_l+0x352>
 80082e6:	dc26      	bgt.n	8008336 <_strtod_l+0x34e>
 80082e8:	2a49      	cmp	r2, #73	; 0x49
 80082ea:	d026      	beq.n	800833a <_strtod_l+0x352>
 80082ec:	2a4e      	cmp	r2, #78	; 0x4e
 80082ee:	f47f aed3 	bne.w	8008098 <_strtod_l+0xb0>
 80082f2:	499b      	ldr	r1, [pc, #620]	; (8008560 <_strtod_l+0x578>)
 80082f4:	a815      	add	r0, sp, #84	; 0x54
 80082f6:	f001 fbef 	bl	8009ad8 <__match>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f aecc 	beq.w	8008098 <_strtod_l+0xb0>
 8008300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b28      	cmp	r3, #40	; 0x28
 8008306:	d12f      	bne.n	8008368 <_strtod_l+0x380>
 8008308:	4996      	ldr	r1, [pc, #600]	; (8008564 <_strtod_l+0x57c>)
 800830a:	aa18      	add	r2, sp, #96	; 0x60
 800830c:	a815      	add	r0, sp, #84	; 0x54
 800830e:	f001 fbf7 	bl	8009b00 <__hexnan>
 8008312:	2805      	cmp	r0, #5
 8008314:	d128      	bne.n	8008368 <_strtod_l+0x380>
 8008316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800831c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008320:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008324:	e69b      	b.n	800805e <_strtod_l+0x76>
 8008326:	9f08      	ldr	r7, [sp, #32]
 8008328:	210a      	movs	r1, #10
 800832a:	fb01 2107 	mla	r1, r1, r7, r2
 800832e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008332:	9208      	str	r2, [sp, #32]
 8008334:	e7b5      	b.n	80082a2 <_strtod_l+0x2ba>
 8008336:	2a6e      	cmp	r2, #110	; 0x6e
 8008338:	e7d9      	b.n	80082ee <_strtod_l+0x306>
 800833a:	498b      	ldr	r1, [pc, #556]	; (8008568 <_strtod_l+0x580>)
 800833c:	a815      	add	r0, sp, #84	; 0x54
 800833e:	f001 fbcb 	bl	8009ad8 <__match>
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f aea8 	beq.w	8008098 <_strtod_l+0xb0>
 8008348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800834a:	4988      	ldr	r1, [pc, #544]	; (800856c <_strtod_l+0x584>)
 800834c:	3b01      	subs	r3, #1
 800834e:	a815      	add	r0, sp, #84	; 0x54
 8008350:	9315      	str	r3, [sp, #84]	; 0x54
 8008352:	f001 fbc1 	bl	8009ad8 <__match>
 8008356:	b910      	cbnz	r0, 800835e <_strtod_l+0x376>
 8008358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800835a:	3301      	adds	r3, #1
 800835c:	9315      	str	r3, [sp, #84]	; 0x54
 800835e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800857c <_strtod_l+0x594>
 8008362:	f04f 0800 	mov.w	r8, #0
 8008366:	e67a      	b.n	800805e <_strtod_l+0x76>
 8008368:	4881      	ldr	r0, [pc, #516]	; (8008570 <_strtod_l+0x588>)
 800836a:	f001 f8d1 	bl	8009510 <nan>
 800836e:	ec59 8b10 	vmov	r8, r9, d0
 8008372:	e674      	b.n	800805e <_strtod_l+0x76>
 8008374:	9b05      	ldr	r3, [sp, #20]
 8008376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008378:	1afb      	subs	r3, r7, r3
 800837a:	f1bb 0f00 	cmp.w	fp, #0
 800837e:	bf08      	it	eq
 8008380:	46b3      	moveq	fp, r6
 8008382:	2e10      	cmp	r6, #16
 8008384:	9308      	str	r3, [sp, #32]
 8008386:	4635      	mov	r5, r6
 8008388:	bfa8      	it	ge
 800838a:	2510      	movge	r5, #16
 800838c:	f7f8 f8ca 	bl	8000524 <__aeabi_ui2d>
 8008390:	2e09      	cmp	r6, #9
 8008392:	4680      	mov	r8, r0
 8008394:	4689      	mov	r9, r1
 8008396:	dd13      	ble.n	80083c0 <_strtod_l+0x3d8>
 8008398:	4b76      	ldr	r3, [pc, #472]	; (8008574 <_strtod_l+0x58c>)
 800839a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800839e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083a2:	f7f8 f939 	bl	8000618 <__aeabi_dmul>
 80083a6:	4680      	mov	r8, r0
 80083a8:	4650      	mov	r0, sl
 80083aa:	4689      	mov	r9, r1
 80083ac:	f7f8 f8ba 	bl	8000524 <__aeabi_ui2d>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4640      	mov	r0, r8
 80083b6:	4649      	mov	r1, r9
 80083b8:	f7f7 ff78 	bl	80002ac <__adddf3>
 80083bc:	4680      	mov	r8, r0
 80083be:	4689      	mov	r9, r1
 80083c0:	2e0f      	cmp	r6, #15
 80083c2:	dc38      	bgt.n	8008436 <_strtod_l+0x44e>
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f43f ae49 	beq.w	800805e <_strtod_l+0x76>
 80083cc:	dd24      	ble.n	8008418 <_strtod_l+0x430>
 80083ce:	2b16      	cmp	r3, #22
 80083d0:	dc0b      	bgt.n	80083ea <_strtod_l+0x402>
 80083d2:	4968      	ldr	r1, [pc, #416]	; (8008574 <_strtod_l+0x58c>)
 80083d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	f7f8 f91a 	bl	8000618 <__aeabi_dmul>
 80083e4:	4680      	mov	r8, r0
 80083e6:	4689      	mov	r9, r1
 80083e8:	e639      	b.n	800805e <_strtod_l+0x76>
 80083ea:	9a08      	ldr	r2, [sp, #32]
 80083ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80083f0:	4293      	cmp	r3, r2
 80083f2:	db20      	blt.n	8008436 <_strtod_l+0x44e>
 80083f4:	4c5f      	ldr	r4, [pc, #380]	; (8008574 <_strtod_l+0x58c>)
 80083f6:	f1c6 060f 	rsb	r6, r6, #15
 80083fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80083fe:	4642      	mov	r2, r8
 8008400:	464b      	mov	r3, r9
 8008402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008406:	f7f8 f907 	bl	8000618 <__aeabi_dmul>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	1b9e      	subs	r6, r3, r6
 800840e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008412:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008416:	e7e3      	b.n	80083e0 <_strtod_l+0x3f8>
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	3316      	adds	r3, #22
 800841c:	db0b      	blt.n	8008436 <_strtod_l+0x44e>
 800841e:	9b05      	ldr	r3, [sp, #20]
 8008420:	1bdf      	subs	r7, r3, r7
 8008422:	4b54      	ldr	r3, [pc, #336]	; (8008574 <_strtod_l+0x58c>)
 8008424:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fa1c 	bl	800086c <__aeabi_ddiv>
 8008434:	e7d6      	b.n	80083e4 <_strtod_l+0x3fc>
 8008436:	9b08      	ldr	r3, [sp, #32]
 8008438:	1b75      	subs	r5, r6, r5
 800843a:	441d      	add	r5, r3
 800843c:	2d00      	cmp	r5, #0
 800843e:	dd70      	ble.n	8008522 <_strtod_l+0x53a>
 8008440:	f015 030f 	ands.w	r3, r5, #15
 8008444:	d00a      	beq.n	800845c <_strtod_l+0x474>
 8008446:	494b      	ldr	r1, [pc, #300]	; (8008574 <_strtod_l+0x58c>)
 8008448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008454:	f7f8 f8e0 	bl	8000618 <__aeabi_dmul>
 8008458:	4680      	mov	r8, r0
 800845a:	4689      	mov	r9, r1
 800845c:	f035 050f 	bics.w	r5, r5, #15
 8008460:	d04d      	beq.n	80084fe <_strtod_l+0x516>
 8008462:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008466:	dd22      	ble.n	80084ae <_strtod_l+0x4c6>
 8008468:	2500      	movs	r5, #0
 800846a:	46ab      	mov	fp, r5
 800846c:	9509      	str	r5, [sp, #36]	; 0x24
 800846e:	9505      	str	r5, [sp, #20]
 8008470:	2322      	movs	r3, #34	; 0x22
 8008472:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800857c <_strtod_l+0x594>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	f04f 0800 	mov.w	r8, #0
 800847c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	f43f aded 	beq.w	800805e <_strtod_l+0x76>
 8008484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008486:	4620      	mov	r0, r4
 8008488:	f7ff f924 	bl	80076d4 <_Bfree>
 800848c:	9905      	ldr	r1, [sp, #20]
 800848e:	4620      	mov	r0, r4
 8008490:	f7ff f920 	bl	80076d4 <_Bfree>
 8008494:	4659      	mov	r1, fp
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff f91c 	bl	80076d4 <_Bfree>
 800849c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff f918 	bl	80076d4 <_Bfree>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff f914 	bl	80076d4 <_Bfree>
 80084ac:	e5d7      	b.n	800805e <_strtod_l+0x76>
 80084ae:	4b32      	ldr	r3, [pc, #200]	; (8008578 <_strtod_l+0x590>)
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	2300      	movs	r3, #0
 80084b4:	112d      	asrs	r5, r5, #4
 80084b6:	4640      	mov	r0, r8
 80084b8:	4649      	mov	r1, r9
 80084ba:	469a      	mov	sl, r3
 80084bc:	2d01      	cmp	r5, #1
 80084be:	dc21      	bgt.n	8008504 <_strtod_l+0x51c>
 80084c0:	b10b      	cbz	r3, 80084c6 <_strtod_l+0x4de>
 80084c2:	4680      	mov	r8, r0
 80084c4:	4689      	mov	r9, r1
 80084c6:	492c      	ldr	r1, [pc, #176]	; (8008578 <_strtod_l+0x590>)
 80084c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80084cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80084d0:	4642      	mov	r2, r8
 80084d2:	464b      	mov	r3, r9
 80084d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d8:	f7f8 f89e 	bl	8000618 <__aeabi_dmul>
 80084dc:	4b27      	ldr	r3, [pc, #156]	; (800857c <_strtod_l+0x594>)
 80084de:	460a      	mov	r2, r1
 80084e0:	400b      	ands	r3, r1
 80084e2:	4927      	ldr	r1, [pc, #156]	; (8008580 <_strtod_l+0x598>)
 80084e4:	428b      	cmp	r3, r1
 80084e6:	4680      	mov	r8, r0
 80084e8:	d8be      	bhi.n	8008468 <_strtod_l+0x480>
 80084ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084ee:	428b      	cmp	r3, r1
 80084f0:	bf86      	itte	hi
 80084f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008584 <_strtod_l+0x59c>
 80084f6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80084fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80084fe:	2300      	movs	r3, #0
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	e07b      	b.n	80085fc <_strtod_l+0x614>
 8008504:	07ea      	lsls	r2, r5, #31
 8008506:	d505      	bpl.n	8008514 <_strtod_l+0x52c>
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 f883 	bl	8000618 <__aeabi_dmul>
 8008512:	2301      	movs	r3, #1
 8008514:	9a04      	ldr	r2, [sp, #16]
 8008516:	3208      	adds	r2, #8
 8008518:	f10a 0a01 	add.w	sl, sl, #1
 800851c:	106d      	asrs	r5, r5, #1
 800851e:	9204      	str	r2, [sp, #16]
 8008520:	e7cc      	b.n	80084bc <_strtod_l+0x4d4>
 8008522:	d0ec      	beq.n	80084fe <_strtod_l+0x516>
 8008524:	426d      	negs	r5, r5
 8008526:	f015 020f 	ands.w	r2, r5, #15
 800852a:	d00a      	beq.n	8008542 <_strtod_l+0x55a>
 800852c:	4b11      	ldr	r3, [pc, #68]	; (8008574 <_strtod_l+0x58c>)
 800852e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008532:	4640      	mov	r0, r8
 8008534:	4649      	mov	r1, r9
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	f7f8 f997 	bl	800086c <__aeabi_ddiv>
 800853e:	4680      	mov	r8, r0
 8008540:	4689      	mov	r9, r1
 8008542:	112d      	asrs	r5, r5, #4
 8008544:	d0db      	beq.n	80084fe <_strtod_l+0x516>
 8008546:	2d1f      	cmp	r5, #31
 8008548:	dd1e      	ble.n	8008588 <_strtod_l+0x5a0>
 800854a:	2500      	movs	r5, #0
 800854c:	46ab      	mov	fp, r5
 800854e:	9509      	str	r5, [sp, #36]	; 0x24
 8008550:	9505      	str	r5, [sp, #20]
 8008552:	2322      	movs	r3, #34	; 0x22
 8008554:	f04f 0800 	mov.w	r8, #0
 8008558:	f04f 0900 	mov.w	r9, #0
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	e78d      	b.n	800847c <_strtod_l+0x494>
 8008560:	0800a13d 	.word	0x0800a13d
 8008564:	0800a364 	.word	0x0800a364
 8008568:	0800a135 	.word	0x0800a135
 800856c:	0800a16c 	.word	0x0800a16c
 8008570:	0800a4f5 	.word	0x0800a4f5
 8008574:	0800a278 	.word	0x0800a278
 8008578:	0800a250 	.word	0x0800a250
 800857c:	7ff00000 	.word	0x7ff00000
 8008580:	7ca00000 	.word	0x7ca00000
 8008584:	7fefffff 	.word	0x7fefffff
 8008588:	f015 0310 	ands.w	r3, r5, #16
 800858c:	bf18      	it	ne
 800858e:	236a      	movne	r3, #106	; 0x6a
 8008590:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008934 <_strtod_l+0x94c>
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	2300      	movs	r3, #0
 800859c:	07ea      	lsls	r2, r5, #31
 800859e:	d504      	bpl.n	80085aa <_strtod_l+0x5c2>
 80085a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80085a4:	f7f8 f838 	bl	8000618 <__aeabi_dmul>
 80085a8:	2301      	movs	r3, #1
 80085aa:	106d      	asrs	r5, r5, #1
 80085ac:	f10a 0a08 	add.w	sl, sl, #8
 80085b0:	d1f4      	bne.n	800859c <_strtod_l+0x5b4>
 80085b2:	b10b      	cbz	r3, 80085b8 <_strtod_l+0x5d0>
 80085b4:	4680      	mov	r8, r0
 80085b6:	4689      	mov	r9, r1
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	b1bb      	cbz	r3, 80085ec <_strtod_l+0x604>
 80085bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80085c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	4649      	mov	r1, r9
 80085c8:	dd10      	ble.n	80085ec <_strtod_l+0x604>
 80085ca:	2b1f      	cmp	r3, #31
 80085cc:	f340 811e 	ble.w	800880c <_strtod_l+0x824>
 80085d0:	2b34      	cmp	r3, #52	; 0x34
 80085d2:	bfde      	ittt	le
 80085d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80085d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80085dc:	4093      	lslle	r3, r2
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	bfcc      	ite	gt
 80085e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80085e8:	ea03 0901 	andle.w	r9, r3, r1
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f8 fa78 	bl	8000ae8 <__aeabi_dcmpeq>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d1a6      	bne.n	800854a <_strtod_l+0x562>
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008602:	4633      	mov	r3, r6
 8008604:	465a      	mov	r2, fp
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff f8cc 	bl	80077a4 <__s2b>
 800860c:	9009      	str	r0, [sp, #36]	; 0x24
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f af2a 	beq.w	8008468 <_strtod_l+0x480>
 8008614:	9a08      	ldr	r2, [sp, #32]
 8008616:	9b05      	ldr	r3, [sp, #20]
 8008618:	2a00      	cmp	r2, #0
 800861a:	eba3 0307 	sub.w	r3, r3, r7
 800861e:	bfa8      	it	ge
 8008620:	2300      	movge	r3, #0
 8008622:	930c      	str	r3, [sp, #48]	; 0x30
 8008624:	2500      	movs	r5, #0
 8008626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800862a:	9312      	str	r3, [sp, #72]	; 0x48
 800862c:	46ab      	mov	fp, r5
 800862e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008630:	4620      	mov	r0, r4
 8008632:	6859      	ldr	r1, [r3, #4]
 8008634:	f7ff f80e 	bl	8007654 <_Balloc>
 8008638:	9005      	str	r0, [sp, #20]
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f af18 	beq.w	8008470 <_strtod_l+0x488>
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	3202      	adds	r2, #2
 8008646:	f103 010c 	add.w	r1, r3, #12
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	300c      	adds	r0, #12
 800864e:	f000 ff4f 	bl	80094f0 <memcpy>
 8008652:	ec49 8b10 	vmov	d0, r8, r9
 8008656:	aa18      	add	r2, sp, #96	; 0x60
 8008658:	a917      	add	r1, sp, #92	; 0x5c
 800865a:	4620      	mov	r0, r4
 800865c:	f7ff fbd6 	bl	8007e0c <__d2b>
 8008660:	ec49 8b18 	vmov	d8, r8, r9
 8008664:	9016      	str	r0, [sp, #88]	; 0x58
 8008666:	2800      	cmp	r0, #0
 8008668:	f43f af02 	beq.w	8008470 <_strtod_l+0x488>
 800866c:	2101      	movs	r1, #1
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff f930 	bl	80078d4 <__i2b>
 8008674:	4683      	mov	fp, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aefa 	beq.w	8008470 <_strtod_l+0x488>
 800867c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800867e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008680:	2e00      	cmp	r6, #0
 8008682:	bfab      	itete	ge
 8008684:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008686:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800868a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800868e:	bfac      	ite	ge
 8008690:	eb06 0a03 	addge.w	sl, r6, r3
 8008694:	1b9f      	sublt	r7, r3, r6
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	1af6      	subs	r6, r6, r3
 800869a:	4416      	add	r6, r2
 800869c:	4ba0      	ldr	r3, [pc, #640]	; (8008920 <_strtod_l+0x938>)
 800869e:	3e01      	subs	r6, #1
 80086a0:	429e      	cmp	r6, r3
 80086a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086a6:	f280 80c4 	bge.w	8008832 <_strtod_l+0x84a>
 80086aa:	1b9b      	subs	r3, r3, r6
 80086ac:	2b1f      	cmp	r3, #31
 80086ae:	eba2 0203 	sub.w	r2, r2, r3
 80086b2:	f04f 0101 	mov.w	r1, #1
 80086b6:	f300 80b0 	bgt.w	800881a <_strtod_l+0x832>
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	930e      	str	r3, [sp, #56]	; 0x38
 80086c0:	2300      	movs	r3, #0
 80086c2:	930d      	str	r3, [sp, #52]	; 0x34
 80086c4:	eb0a 0602 	add.w	r6, sl, r2
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	45b2      	cmp	sl, r6
 80086cc:	4417      	add	r7, r2
 80086ce:	441f      	add	r7, r3
 80086d0:	4653      	mov	r3, sl
 80086d2:	bfa8      	it	ge
 80086d4:	4633      	movge	r3, r6
 80086d6:	42bb      	cmp	r3, r7
 80086d8:	bfa8      	it	ge
 80086da:	463b      	movge	r3, r7
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfc2      	ittt	gt
 80086e0:	1af6      	subgt	r6, r6, r3
 80086e2:	1aff      	subgt	r7, r7, r3
 80086e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80086e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd17      	ble.n	800871e <_strtod_l+0x736>
 80086ee:	4659      	mov	r1, fp
 80086f0:	461a      	mov	r2, r3
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7ff f9ae 	bl	8007a54 <__pow5mult>
 80086f8:	4683      	mov	fp, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f aeb8 	beq.w	8008470 <_strtod_l+0x488>
 8008700:	4601      	mov	r1, r0
 8008702:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008704:	4620      	mov	r0, r4
 8008706:	f7ff f8fb 	bl	8007900 <__multiply>
 800870a:	900b      	str	r0, [sp, #44]	; 0x2c
 800870c:	2800      	cmp	r0, #0
 800870e:	f43f aeaf 	beq.w	8008470 <_strtod_l+0x488>
 8008712:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008714:	4620      	mov	r0, r4
 8008716:	f7fe ffdd 	bl	80076d4 <_Bfree>
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	9316      	str	r3, [sp, #88]	; 0x58
 800871e:	2e00      	cmp	r6, #0
 8008720:	f300 808c 	bgt.w	800883c <_strtod_l+0x854>
 8008724:	9b08      	ldr	r3, [sp, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd08      	ble.n	800873c <_strtod_l+0x754>
 800872a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800872c:	9905      	ldr	r1, [sp, #20]
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff f990 	bl	8007a54 <__pow5mult>
 8008734:	9005      	str	r0, [sp, #20]
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f ae9a 	beq.w	8008470 <_strtod_l+0x488>
 800873c:	2f00      	cmp	r7, #0
 800873e:	dd08      	ble.n	8008752 <_strtod_l+0x76a>
 8008740:	9905      	ldr	r1, [sp, #20]
 8008742:	463a      	mov	r2, r7
 8008744:	4620      	mov	r0, r4
 8008746:	f7ff f9df 	bl	8007b08 <__lshift>
 800874a:	9005      	str	r0, [sp, #20]
 800874c:	2800      	cmp	r0, #0
 800874e:	f43f ae8f 	beq.w	8008470 <_strtod_l+0x488>
 8008752:	f1ba 0f00 	cmp.w	sl, #0
 8008756:	dd08      	ble.n	800876a <_strtod_l+0x782>
 8008758:	4659      	mov	r1, fp
 800875a:	4652      	mov	r2, sl
 800875c:	4620      	mov	r0, r4
 800875e:	f7ff f9d3 	bl	8007b08 <__lshift>
 8008762:	4683      	mov	fp, r0
 8008764:	2800      	cmp	r0, #0
 8008766:	f43f ae83 	beq.w	8008470 <_strtod_l+0x488>
 800876a:	9a05      	ldr	r2, [sp, #20]
 800876c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fa52 	bl	8007c18 <__mdiff>
 8008774:	4605      	mov	r5, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f ae7a 	beq.w	8008470 <_strtod_l+0x488>
 800877c:	68c3      	ldr	r3, [r0, #12]
 800877e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008780:	2300      	movs	r3, #0
 8008782:	60c3      	str	r3, [r0, #12]
 8008784:	4659      	mov	r1, fp
 8008786:	f7ff fa2b 	bl	8007be0 <__mcmp>
 800878a:	2800      	cmp	r0, #0
 800878c:	da60      	bge.n	8008850 <_strtod_l+0x868>
 800878e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008790:	ea53 0308 	orrs.w	r3, r3, r8
 8008794:	f040 8084 	bne.w	80088a0 <_strtod_l+0x8b8>
 8008798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800879c:	2b00      	cmp	r3, #0
 800879e:	d17f      	bne.n	80088a0 <_strtod_l+0x8b8>
 80087a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087a4:	0d1b      	lsrs	r3, r3, #20
 80087a6:	051b      	lsls	r3, r3, #20
 80087a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087ac:	d978      	bls.n	80088a0 <_strtod_l+0x8b8>
 80087ae:	696b      	ldr	r3, [r5, #20]
 80087b0:	b913      	cbnz	r3, 80087b8 <_strtod_l+0x7d0>
 80087b2:	692b      	ldr	r3, [r5, #16]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	dd73      	ble.n	80088a0 <_strtod_l+0x8b8>
 80087b8:	4629      	mov	r1, r5
 80087ba:	2201      	movs	r2, #1
 80087bc:	4620      	mov	r0, r4
 80087be:	f7ff f9a3 	bl	8007b08 <__lshift>
 80087c2:	4659      	mov	r1, fp
 80087c4:	4605      	mov	r5, r0
 80087c6:	f7ff fa0b 	bl	8007be0 <__mcmp>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	dd68      	ble.n	80088a0 <_strtod_l+0x8b8>
 80087ce:	9904      	ldr	r1, [sp, #16]
 80087d0:	4a54      	ldr	r2, [pc, #336]	; (8008924 <_strtod_l+0x93c>)
 80087d2:	464b      	mov	r3, r9
 80087d4:	2900      	cmp	r1, #0
 80087d6:	f000 8084 	beq.w	80088e2 <_strtod_l+0x8fa>
 80087da:	ea02 0109 	and.w	r1, r2, r9
 80087de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087e2:	dc7e      	bgt.n	80088e2 <_strtod_l+0x8fa>
 80087e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087e8:	f77f aeb3 	ble.w	8008552 <_strtod_l+0x56a>
 80087ec:	4b4e      	ldr	r3, [pc, #312]	; (8008928 <_strtod_l+0x940>)
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	2200      	movs	r2, #0
 80087f4:	f7f7 ff10 	bl	8000618 <__aeabi_dmul>
 80087f8:	4b4a      	ldr	r3, [pc, #296]	; (8008924 <_strtod_l+0x93c>)
 80087fa:	400b      	ands	r3, r1
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	2b00      	cmp	r3, #0
 8008802:	f47f ae3f 	bne.w	8008484 <_strtod_l+0x49c>
 8008806:	2322      	movs	r3, #34	; 0x22
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	e63b      	b.n	8008484 <_strtod_l+0x49c>
 800880c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	ea03 0808 	and.w	r8, r3, r8
 8008818:	e6e8      	b.n	80085ec <_strtod_l+0x604>
 800881a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800881e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008822:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008826:	36e2      	adds	r6, #226	; 0xe2
 8008828:	fa01 f306 	lsl.w	r3, r1, r6
 800882c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008830:	e748      	b.n	80086c4 <_strtod_l+0x6dc>
 8008832:	2100      	movs	r1, #0
 8008834:	2301      	movs	r3, #1
 8008836:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800883a:	e743      	b.n	80086c4 <_strtod_l+0x6dc>
 800883c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800883e:	4632      	mov	r2, r6
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff f961 	bl	8007b08 <__lshift>
 8008846:	9016      	str	r0, [sp, #88]	; 0x58
 8008848:	2800      	cmp	r0, #0
 800884a:	f47f af6b 	bne.w	8008724 <_strtod_l+0x73c>
 800884e:	e60f      	b.n	8008470 <_strtod_l+0x488>
 8008850:	46ca      	mov	sl, r9
 8008852:	d171      	bne.n	8008938 <_strtod_l+0x950>
 8008854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800885a:	b352      	cbz	r2, 80088b2 <_strtod_l+0x8ca>
 800885c:	4a33      	ldr	r2, [pc, #204]	; (800892c <_strtod_l+0x944>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d12a      	bne.n	80088b8 <_strtod_l+0x8d0>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	4641      	mov	r1, r8
 8008866:	b1fb      	cbz	r3, 80088a8 <_strtod_l+0x8c0>
 8008868:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <_strtod_l+0x93c>)
 800886a:	ea09 0303 	and.w	r3, r9, r3
 800886e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008876:	d81a      	bhi.n	80088ae <_strtod_l+0x8c6>
 8008878:	0d1b      	lsrs	r3, r3, #20
 800887a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	4299      	cmp	r1, r3
 8008884:	d118      	bne.n	80088b8 <_strtod_l+0x8d0>
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <_strtod_l+0x948>)
 8008888:	459a      	cmp	sl, r3
 800888a:	d102      	bne.n	8008892 <_strtod_l+0x8aa>
 800888c:	3101      	adds	r1, #1
 800888e:	f43f adef 	beq.w	8008470 <_strtod_l+0x488>
 8008892:	4b24      	ldr	r3, [pc, #144]	; (8008924 <_strtod_l+0x93c>)
 8008894:	ea0a 0303 	and.w	r3, sl, r3
 8008898:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800889c:	f04f 0800 	mov.w	r8, #0
 80088a0:	9b04      	ldr	r3, [sp, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1a2      	bne.n	80087ec <_strtod_l+0x804>
 80088a6:	e5ed      	b.n	8008484 <_strtod_l+0x49c>
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ac:	e7e9      	b.n	8008882 <_strtod_l+0x89a>
 80088ae:	4613      	mov	r3, r2
 80088b0:	e7e7      	b.n	8008882 <_strtod_l+0x89a>
 80088b2:	ea53 0308 	orrs.w	r3, r3, r8
 80088b6:	d08a      	beq.n	80087ce <_strtod_l+0x7e6>
 80088b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ba:	b1e3      	cbz	r3, 80088f6 <_strtod_l+0x90e>
 80088bc:	ea13 0f0a 	tst.w	r3, sl
 80088c0:	d0ee      	beq.n	80088a0 <_strtod_l+0x8b8>
 80088c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c4:	9a04      	ldr	r2, [sp, #16]
 80088c6:	4640      	mov	r0, r8
 80088c8:	4649      	mov	r1, r9
 80088ca:	b1c3      	cbz	r3, 80088fe <_strtod_l+0x916>
 80088cc:	f7ff fb6f 	bl	8007fae <sulp>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	ec51 0b18 	vmov	r0, r1, d8
 80088d8:	f7f7 fce8 	bl	80002ac <__adddf3>
 80088dc:	4680      	mov	r8, r0
 80088de:	4689      	mov	r9, r1
 80088e0:	e7de      	b.n	80088a0 <_strtod_l+0x8b8>
 80088e2:	4013      	ands	r3, r2
 80088e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80088ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80088f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80088f4:	e7d4      	b.n	80088a0 <_strtod_l+0x8b8>
 80088f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f8:	ea13 0f08 	tst.w	r3, r8
 80088fc:	e7e0      	b.n	80088c0 <_strtod_l+0x8d8>
 80088fe:	f7ff fb56 	bl	8007fae <sulp>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	ec51 0b18 	vmov	r0, r1, d8
 800890a:	f7f7 fccd 	bl	80002a8 <__aeabi_dsub>
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	f7f8 f8e7 	bl	8000ae8 <__aeabi_dcmpeq>
 800891a:	2800      	cmp	r0, #0
 800891c:	d0c0      	beq.n	80088a0 <_strtod_l+0x8b8>
 800891e:	e618      	b.n	8008552 <_strtod_l+0x56a>
 8008920:	fffffc02 	.word	0xfffffc02
 8008924:	7ff00000 	.word	0x7ff00000
 8008928:	39500000 	.word	0x39500000
 800892c:	000fffff 	.word	0x000fffff
 8008930:	7fefffff 	.word	0x7fefffff
 8008934:	0800a378 	.word	0x0800a378
 8008938:	4659      	mov	r1, fp
 800893a:	4628      	mov	r0, r5
 800893c:	f7ff fac0 	bl	8007ec0 <__ratio>
 8008940:	ec57 6b10 	vmov	r6, r7, d0
 8008944:	ee10 0a10 	vmov	r0, s0
 8008948:	2200      	movs	r2, #0
 800894a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800894e:	4639      	mov	r1, r7
 8008950:	f7f8 f8de 	bl	8000b10 <__aeabi_dcmple>
 8008954:	2800      	cmp	r0, #0
 8008956:	d071      	beq.n	8008a3c <_strtod_l+0xa54>
 8008958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d17c      	bne.n	8008a58 <_strtod_l+0xa70>
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	d15a      	bne.n	8008a1a <_strtod_l+0xa32>
 8008964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008968:	2b00      	cmp	r3, #0
 800896a:	d15d      	bne.n	8008a28 <_strtod_l+0xa40>
 800896c:	4b90      	ldr	r3, [pc, #576]	; (8008bb0 <_strtod_l+0xbc8>)
 800896e:	2200      	movs	r2, #0
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8c2 	bl	8000afc <__aeabi_dcmplt>
 8008978:	2800      	cmp	r0, #0
 800897a:	d15c      	bne.n	8008a36 <_strtod_l+0xa4e>
 800897c:	4630      	mov	r0, r6
 800897e:	4639      	mov	r1, r7
 8008980:	4b8c      	ldr	r3, [pc, #560]	; (8008bb4 <_strtod_l+0xbcc>)
 8008982:	2200      	movs	r2, #0
 8008984:	f7f7 fe48 	bl	8000618 <__aeabi_dmul>
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008990:	9606      	str	r6, [sp, #24]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800899c:	4b86      	ldr	r3, [pc, #536]	; (8008bb8 <_strtod_l+0xbd0>)
 800899e:	ea0a 0303 	and.w	r3, sl, r3
 80089a2:	930d      	str	r3, [sp, #52]	; 0x34
 80089a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089a6:	4b85      	ldr	r3, [pc, #532]	; (8008bbc <_strtod_l+0xbd4>)
 80089a8:	429a      	cmp	r2, r3
 80089aa:	f040 8090 	bne.w	8008ace <_strtod_l+0xae6>
 80089ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80089b2:	ec49 8b10 	vmov	d0, r8, r9
 80089b6:	f7ff f9b9 	bl	8007d2c <__ulp>
 80089ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089be:	ec51 0b10 	vmov	r0, r1, d0
 80089c2:	f7f7 fe29 	bl	8000618 <__aeabi_dmul>
 80089c6:	4642      	mov	r2, r8
 80089c8:	464b      	mov	r3, r9
 80089ca:	f7f7 fc6f 	bl	80002ac <__adddf3>
 80089ce:	460b      	mov	r3, r1
 80089d0:	4979      	ldr	r1, [pc, #484]	; (8008bb8 <_strtod_l+0xbd0>)
 80089d2:	4a7b      	ldr	r2, [pc, #492]	; (8008bc0 <_strtod_l+0xbd8>)
 80089d4:	4019      	ands	r1, r3
 80089d6:	4291      	cmp	r1, r2
 80089d8:	4680      	mov	r8, r0
 80089da:	d944      	bls.n	8008a66 <_strtod_l+0xa7e>
 80089dc:	ee18 2a90 	vmov	r2, s17
 80089e0:	4b78      	ldr	r3, [pc, #480]	; (8008bc4 <_strtod_l+0xbdc>)
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d104      	bne.n	80089f0 <_strtod_l+0xa08>
 80089e6:	ee18 3a10 	vmov	r3, s16
 80089ea:	3301      	adds	r3, #1
 80089ec:	f43f ad40 	beq.w	8008470 <_strtod_l+0x488>
 80089f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008bc4 <_strtod_l+0xbdc>
 80089f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80089f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089fa:	4620      	mov	r0, r4
 80089fc:	f7fe fe6a 	bl	80076d4 <_Bfree>
 8008a00:	9905      	ldr	r1, [sp, #20]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7fe fe66 	bl	80076d4 <_Bfree>
 8008a08:	4659      	mov	r1, fp
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7fe fe62 	bl	80076d4 <_Bfree>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7fe fe5e 	bl	80076d4 <_Bfree>
 8008a18:	e609      	b.n	800862e <_strtod_l+0x646>
 8008a1a:	f1b8 0f01 	cmp.w	r8, #1
 8008a1e:	d103      	bne.n	8008a28 <_strtod_l+0xa40>
 8008a20:	f1b9 0f00 	cmp.w	r9, #0
 8008a24:	f43f ad95 	beq.w	8008552 <_strtod_l+0x56a>
 8008a28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008b80 <_strtod_l+0xb98>
 8008a2c:	4f60      	ldr	r7, [pc, #384]	; (8008bb0 <_strtod_l+0xbc8>)
 8008a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a32:	2600      	movs	r6, #0
 8008a34:	e7ae      	b.n	8008994 <_strtod_l+0x9ac>
 8008a36:	4f5f      	ldr	r7, [pc, #380]	; (8008bb4 <_strtod_l+0xbcc>)
 8008a38:	2600      	movs	r6, #0
 8008a3a:	e7a7      	b.n	800898c <_strtod_l+0x9a4>
 8008a3c:	4b5d      	ldr	r3, [pc, #372]	; (8008bb4 <_strtod_l+0xbcc>)
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	2200      	movs	r2, #0
 8008a44:	f7f7 fde8 	bl	8000618 <__aeabi_dmul>
 8008a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d09c      	beq.n	800898c <_strtod_l+0x9a4>
 8008a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a56:	e79d      	b.n	8008994 <_strtod_l+0x9ac>
 8008a58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008b88 <_strtod_l+0xba0>
 8008a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a60:	ec57 6b17 	vmov	r6, r7, d7
 8008a64:	e796      	b.n	8008994 <_strtod_l+0x9ac>
 8008a66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	46ca      	mov	sl, r9
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1c2      	bne.n	80089f8 <_strtod_l+0xa10>
 8008a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a78:	0d1b      	lsrs	r3, r3, #20
 8008a7a:	051b      	lsls	r3, r3, #20
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d1bb      	bne.n	80089f8 <_strtod_l+0xa10>
 8008a80:	4630      	mov	r0, r6
 8008a82:	4639      	mov	r1, r7
 8008a84:	f7f8 f928 	bl	8000cd8 <__aeabi_d2lz>
 8008a88:	f7f7 fd98 	bl	80005bc <__aeabi_l2d>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f7 fc08 	bl	80002a8 <__aeabi_dsub>
 8008a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a9e:	ea43 0308 	orr.w	r3, r3, r8
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	d054      	beq.n	8008b54 <_strtod_l+0xb6c>
 8008aaa:	a339      	add	r3, pc, #228	; (adr r3, 8008b90 <_strtod_l+0xba8>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f8 f824 	bl	8000afc <__aeabi_dcmplt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f47f ace5 	bne.w	8008484 <_strtod_l+0x49c>
 8008aba:	a337      	add	r3, pc, #220	; (adr r3, 8008b98 <_strtod_l+0xbb0>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f8 f838 	bl	8000b38 <__aeabi_dcmpgt>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d095      	beq.n	80089f8 <_strtod_l+0xa10>
 8008acc:	e4da      	b.n	8008484 <_strtod_l+0x49c>
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	b333      	cbz	r3, 8008b20 <_strtod_l+0xb38>
 8008ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ad4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ad8:	d822      	bhi.n	8008b20 <_strtod_l+0xb38>
 8008ada:	a331      	add	r3, pc, #196	; (adr r3, 8008ba0 <_strtod_l+0xbb8>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f8 f814 	bl	8000b10 <__aeabi_dcmple>
 8008ae8:	b1a0      	cbz	r0, 8008b14 <_strtod_l+0xb2c>
 8008aea:	4639      	mov	r1, r7
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7f8 f86b 	bl	8000bc8 <__aeabi_d2uiz>
 8008af2:	2801      	cmp	r0, #1
 8008af4:	bf38      	it	cc
 8008af6:	2001      	movcc	r0, #1
 8008af8:	f7f7 fd14 	bl	8000524 <__aeabi_ui2d>
 8008afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	bb23      	cbnz	r3, 8008b4e <_strtod_l+0xb66>
 8008b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b08:	9010      	str	r0, [sp, #64]	; 0x40
 8008b0a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b24:	eeb0 0a48 	vmov.f32	s0, s16
 8008b28:	eef0 0a68 	vmov.f32	s1, s17
 8008b2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008b30:	f7ff f8fc 	bl	8007d2c <__ulp>
 8008b34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b38:	ec53 2b10 	vmov	r2, r3, d0
 8008b3c:	f7f7 fd6c 	bl	8000618 <__aeabi_dmul>
 8008b40:	ec53 2b18 	vmov	r2, r3, d8
 8008b44:	f7f7 fbb2 	bl	80002ac <__adddf3>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	e78d      	b.n	8008a6a <_strtod_l+0xa82>
 8008b4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b52:	e7db      	b.n	8008b0c <_strtod_l+0xb24>
 8008b54:	a314      	add	r3, pc, #80	; (adr r3, 8008ba8 <_strtod_l+0xbc0>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f7f7 ffcf 	bl	8000afc <__aeabi_dcmplt>
 8008b5e:	e7b3      	b.n	8008ac8 <_strtod_l+0xae0>
 8008b60:	2300      	movs	r3, #0
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	f7ff ba7c 	b.w	8008066 <_strtod_l+0x7e>
 8008b6e:	2a65      	cmp	r2, #101	; 0x65
 8008b70:	f43f ab75 	beq.w	800825e <_strtod_l+0x276>
 8008b74:	2a45      	cmp	r2, #69	; 0x45
 8008b76:	f43f ab72 	beq.w	800825e <_strtod_l+0x276>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f7ff bbaa 	b.w	80082d4 <_strtod_l+0x2ec>
 8008b80:	00000000 	.word	0x00000000
 8008b84:	bff00000 	.word	0xbff00000
 8008b88:	00000000 	.word	0x00000000
 8008b8c:	3ff00000 	.word	0x3ff00000
 8008b90:	94a03595 	.word	0x94a03595
 8008b94:	3fdfffff 	.word	0x3fdfffff
 8008b98:	35afe535 	.word	0x35afe535
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	ffc00000 	.word	0xffc00000
 8008ba4:	41dfffff 	.word	0x41dfffff
 8008ba8:	94a03595 	.word	0x94a03595
 8008bac:	3fcfffff 	.word	0x3fcfffff
 8008bb0:	3ff00000 	.word	0x3ff00000
 8008bb4:	3fe00000 	.word	0x3fe00000
 8008bb8:	7ff00000 	.word	0x7ff00000
 8008bbc:	7fe00000 	.word	0x7fe00000
 8008bc0:	7c9fffff 	.word	0x7c9fffff
 8008bc4:	7fefffff 	.word	0x7fefffff

08008bc8 <_strtod_r>:
 8008bc8:	4b01      	ldr	r3, [pc, #4]	; (8008bd0 <_strtod_r+0x8>)
 8008bca:	f7ff ba0d 	b.w	8007fe8 <_strtod_l>
 8008bce:	bf00      	nop
 8008bd0:	20000080 	.word	0x20000080

08008bd4 <_strtol_l.constprop.0>:
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bda:	d001      	beq.n	8008be0 <_strtol_l.constprop.0+0xc>
 8008bdc:	2b24      	cmp	r3, #36	; 0x24
 8008bde:	d906      	bls.n	8008bee <_strtol_l.constprop.0+0x1a>
 8008be0:	f7fd fd88 	bl	80066f4 <__errno>
 8008be4:	2316      	movs	r3, #22
 8008be6:	6003      	str	r3, [r0, #0]
 8008be8:	2000      	movs	r0, #0
 8008bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008cd4 <_strtol_l.constprop.0+0x100>
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	462e      	mov	r6, r5
 8008bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008bfe:	f017 0708 	ands.w	r7, r7, #8
 8008c02:	d1f7      	bne.n	8008bf4 <_strtol_l.constprop.0+0x20>
 8008c04:	2c2d      	cmp	r4, #45	; 0x2d
 8008c06:	d132      	bne.n	8008c6e <_strtol_l.constprop.0+0x9a>
 8008c08:	782c      	ldrb	r4, [r5, #0]
 8008c0a:	2701      	movs	r7, #1
 8008c0c:	1cb5      	adds	r5, r6, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d05b      	beq.n	8008cca <_strtol_l.constprop.0+0xf6>
 8008c12:	2b10      	cmp	r3, #16
 8008c14:	d109      	bne.n	8008c2a <_strtol_l.constprop.0+0x56>
 8008c16:	2c30      	cmp	r4, #48	; 0x30
 8008c18:	d107      	bne.n	8008c2a <_strtol_l.constprop.0+0x56>
 8008c1a:	782c      	ldrb	r4, [r5, #0]
 8008c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c20:	2c58      	cmp	r4, #88	; 0x58
 8008c22:	d14d      	bne.n	8008cc0 <_strtol_l.constprop.0+0xec>
 8008c24:	786c      	ldrb	r4, [r5, #1]
 8008c26:	2310      	movs	r3, #16
 8008c28:	3502      	adds	r5, #2
 8008c2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c32:	f04f 0e00 	mov.w	lr, #0
 8008c36:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c3a:	4676      	mov	r6, lr
 8008c3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008c44:	f1bc 0f09 	cmp.w	ip, #9
 8008c48:	d816      	bhi.n	8008c78 <_strtol_l.constprop.0+0xa4>
 8008c4a:	4664      	mov	r4, ip
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	dd24      	ble.n	8008c9a <_strtol_l.constprop.0+0xc6>
 8008c50:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008c54:	d008      	beq.n	8008c68 <_strtol_l.constprop.0+0x94>
 8008c56:	45b1      	cmp	r9, r6
 8008c58:	d31c      	bcc.n	8008c94 <_strtol_l.constprop.0+0xc0>
 8008c5a:	d101      	bne.n	8008c60 <_strtol_l.constprop.0+0x8c>
 8008c5c:	45a2      	cmp	sl, r4
 8008c5e:	db19      	blt.n	8008c94 <_strtol_l.constprop.0+0xc0>
 8008c60:	fb06 4603 	mla	r6, r6, r3, r4
 8008c64:	f04f 0e01 	mov.w	lr, #1
 8008c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c6c:	e7e8      	b.n	8008c40 <_strtol_l.constprop.0+0x6c>
 8008c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c70:	bf04      	itt	eq
 8008c72:	782c      	ldrbeq	r4, [r5, #0]
 8008c74:	1cb5      	addeq	r5, r6, #2
 8008c76:	e7ca      	b.n	8008c0e <_strtol_l.constprop.0+0x3a>
 8008c78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c7c:	f1bc 0f19 	cmp.w	ip, #25
 8008c80:	d801      	bhi.n	8008c86 <_strtol_l.constprop.0+0xb2>
 8008c82:	3c37      	subs	r4, #55	; 0x37
 8008c84:	e7e2      	b.n	8008c4c <_strtol_l.constprop.0+0x78>
 8008c86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c8a:	f1bc 0f19 	cmp.w	ip, #25
 8008c8e:	d804      	bhi.n	8008c9a <_strtol_l.constprop.0+0xc6>
 8008c90:	3c57      	subs	r4, #87	; 0x57
 8008c92:	e7db      	b.n	8008c4c <_strtol_l.constprop.0+0x78>
 8008c94:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008c98:	e7e6      	b.n	8008c68 <_strtol_l.constprop.0+0x94>
 8008c9a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008c9e:	d105      	bne.n	8008cac <_strtol_l.constprop.0+0xd8>
 8008ca0:	2322      	movs	r3, #34	; 0x22
 8008ca2:	6003      	str	r3, [r0, #0]
 8008ca4:	4646      	mov	r6, r8
 8008ca6:	b942      	cbnz	r2, 8008cba <_strtol_l.constprop.0+0xe6>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	e79e      	b.n	8008bea <_strtol_l.constprop.0+0x16>
 8008cac:	b107      	cbz	r7, 8008cb0 <_strtol_l.constprop.0+0xdc>
 8008cae:	4276      	negs	r6, r6
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d0f9      	beq.n	8008ca8 <_strtol_l.constprop.0+0xd4>
 8008cb4:	f1be 0f00 	cmp.w	lr, #0
 8008cb8:	d000      	beq.n	8008cbc <_strtol_l.constprop.0+0xe8>
 8008cba:	1e69      	subs	r1, r5, #1
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	e7f3      	b.n	8008ca8 <_strtol_l.constprop.0+0xd4>
 8008cc0:	2430      	movs	r4, #48	; 0x30
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1b1      	bne.n	8008c2a <_strtol_l.constprop.0+0x56>
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	e7af      	b.n	8008c2a <_strtol_l.constprop.0+0x56>
 8008cca:	2c30      	cmp	r4, #48	; 0x30
 8008ccc:	d0a5      	beq.n	8008c1a <_strtol_l.constprop.0+0x46>
 8008cce:	230a      	movs	r3, #10
 8008cd0:	e7ab      	b.n	8008c2a <_strtol_l.constprop.0+0x56>
 8008cd2:	bf00      	nop
 8008cd4:	0800a3a1 	.word	0x0800a3a1

08008cd8 <_strtol_r>:
 8008cd8:	f7ff bf7c 	b.w	8008bd4 <_strtol_l.constprop.0>

08008cdc <__ssputs_r>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	688e      	ldr	r6, [r1, #8]
 8008ce2:	461f      	mov	r7, r3
 8008ce4:	42be      	cmp	r6, r7
 8008ce6:	680b      	ldr	r3, [r1, #0]
 8008ce8:	4682      	mov	sl, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4690      	mov	r8, r2
 8008cee:	d82c      	bhi.n	8008d4a <__ssputs_r+0x6e>
 8008cf0:	898a      	ldrh	r2, [r1, #12]
 8008cf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cf6:	d026      	beq.n	8008d46 <__ssputs_r+0x6a>
 8008cf8:	6965      	ldr	r5, [r4, #20]
 8008cfa:	6909      	ldr	r1, [r1, #16]
 8008cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d00:	eba3 0901 	sub.w	r9, r3, r1
 8008d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d08:	1c7b      	adds	r3, r7, #1
 8008d0a:	444b      	add	r3, r9
 8008d0c:	106d      	asrs	r5, r5, #1
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	bf38      	it	cc
 8008d12:	461d      	movcc	r5, r3
 8008d14:	0553      	lsls	r3, r2, #21
 8008d16:	d527      	bpl.n	8008d68 <__ssputs_r+0x8c>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7fe fc0f 	bl	800753c <_malloc_r>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	b360      	cbz	r0, 8008d7c <__ssputs_r+0xa0>
 8008d22:	6921      	ldr	r1, [r4, #16]
 8008d24:	464a      	mov	r2, r9
 8008d26:	f000 fbe3 	bl	80094f0 <memcpy>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	6126      	str	r6, [r4, #16]
 8008d38:	6165      	str	r5, [r4, #20]
 8008d3a:	444e      	add	r6, r9
 8008d3c:	eba5 0509 	sub.w	r5, r5, r9
 8008d40:	6026      	str	r6, [r4, #0]
 8008d42:	60a5      	str	r5, [r4, #8]
 8008d44:	463e      	mov	r6, r7
 8008d46:	42be      	cmp	r6, r7
 8008d48:	d900      	bls.n	8008d4c <__ssputs_r+0x70>
 8008d4a:	463e      	mov	r6, r7
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	4632      	mov	r2, r6
 8008d50:	4641      	mov	r1, r8
 8008d52:	f000 fb6f 	bl	8009434 <memmove>
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	1b9b      	subs	r3, r3, r6
 8008d5a:	60a3      	str	r3, [r4, #8]
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	4433      	add	r3, r6
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	2000      	movs	r0, #0
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	462a      	mov	r2, r5
 8008d6a:	f000 ff76 	bl	8009c5a <_realloc_r>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d1e0      	bne.n	8008d36 <__ssputs_r+0x5a>
 8008d74:	6921      	ldr	r1, [r4, #16]
 8008d76:	4650      	mov	r0, sl
 8008d78:	f7fe fb6c 	bl	8007454 <_free_r>
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	f8ca 3000 	str.w	r3, [sl]
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d88:	81a3      	strh	r3, [r4, #12]
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d8e:	e7e9      	b.n	8008d64 <__ssputs_r+0x88>

08008d90 <_svfiprintf_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	4698      	mov	r8, r3
 8008d96:	898b      	ldrh	r3, [r1, #12]
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	b09d      	sub	sp, #116	; 0x74
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	d50e      	bpl.n	8008dc2 <_svfiprintf_r+0x32>
 8008da4:	690b      	ldr	r3, [r1, #16]
 8008da6:	b963      	cbnz	r3, 8008dc2 <_svfiprintf_r+0x32>
 8008da8:	2140      	movs	r1, #64	; 0x40
 8008daa:	f7fe fbc7 	bl	800753c <_malloc_r>
 8008dae:	6028      	str	r0, [r5, #0]
 8008db0:	6128      	str	r0, [r5, #16]
 8008db2:	b920      	cbnz	r0, 8008dbe <_svfiprintf_r+0x2e>
 8008db4:	230c      	movs	r3, #12
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dbc:	e0d0      	b.n	8008f60 <_svfiprintf_r+0x1d0>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	616b      	str	r3, [r5, #20]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc6:	2320      	movs	r3, #32
 8008dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd0:	2330      	movs	r3, #48	; 0x30
 8008dd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f78 <_svfiprintf_r+0x1e8>
 8008dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dda:	f04f 0901 	mov.w	r9, #1
 8008dde:	4623      	mov	r3, r4
 8008de0:	469a      	mov	sl, r3
 8008de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de6:	b10a      	cbz	r2, 8008dec <_svfiprintf_r+0x5c>
 8008de8:	2a25      	cmp	r2, #37	; 0x25
 8008dea:	d1f9      	bne.n	8008de0 <_svfiprintf_r+0x50>
 8008dec:	ebba 0b04 	subs.w	fp, sl, r4
 8008df0:	d00b      	beq.n	8008e0a <_svfiprintf_r+0x7a>
 8008df2:	465b      	mov	r3, fp
 8008df4:	4622      	mov	r2, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ff6f 	bl	8008cdc <__ssputs_r>
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f000 80a9 	beq.w	8008f56 <_svfiprintf_r+0x1c6>
 8008e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e06:	445a      	add	r2, fp
 8008e08:	9209      	str	r2, [sp, #36]	; 0x24
 8008e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80a1 	beq.w	8008f56 <_svfiprintf_r+0x1c6>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e1e:	f10a 0a01 	add.w	sl, sl, #1
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	9307      	str	r3, [sp, #28]
 8008e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e2c:	4654      	mov	r4, sl
 8008e2e:	2205      	movs	r2, #5
 8008e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e34:	4850      	ldr	r0, [pc, #320]	; (8008f78 <_svfiprintf_r+0x1e8>)
 8008e36:	f7f7 f9db 	bl	80001f0 <memchr>
 8008e3a:	9a04      	ldr	r2, [sp, #16]
 8008e3c:	b9d8      	cbnz	r0, 8008e76 <_svfiprintf_r+0xe6>
 8008e3e:	06d0      	lsls	r0, r2, #27
 8008e40:	bf44      	itt	mi
 8008e42:	2320      	movmi	r3, #32
 8008e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e48:	0711      	lsls	r1, r2, #28
 8008e4a:	bf44      	itt	mi
 8008e4c:	232b      	movmi	r3, #43	; 0x2b
 8008e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e52:	f89a 3000 	ldrb.w	r3, [sl]
 8008e56:	2b2a      	cmp	r3, #42	; 0x2a
 8008e58:	d015      	beq.n	8008e86 <_svfiprintf_r+0xf6>
 8008e5a:	9a07      	ldr	r2, [sp, #28]
 8008e5c:	4654      	mov	r4, sl
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f04f 0c0a 	mov.w	ip, #10
 8008e64:	4621      	mov	r1, r4
 8008e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e6a:	3b30      	subs	r3, #48	; 0x30
 8008e6c:	2b09      	cmp	r3, #9
 8008e6e:	d94d      	bls.n	8008f0c <_svfiprintf_r+0x17c>
 8008e70:	b1b0      	cbz	r0, 8008ea0 <_svfiprintf_r+0x110>
 8008e72:	9207      	str	r2, [sp, #28]
 8008e74:	e014      	b.n	8008ea0 <_svfiprintf_r+0x110>
 8008e76:	eba0 0308 	sub.w	r3, r0, r8
 8008e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	46a2      	mov	sl, r4
 8008e84:	e7d2      	b.n	8008e2c <_svfiprintf_r+0x9c>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	1d19      	adds	r1, r3, #4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	9103      	str	r1, [sp, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bfbb      	ittet	lt
 8008e92:	425b      	neglt	r3, r3
 8008e94:	f042 0202 	orrlt.w	r2, r2, #2
 8008e98:	9307      	strge	r3, [sp, #28]
 8008e9a:	9307      	strlt	r3, [sp, #28]
 8008e9c:	bfb8      	it	lt
 8008e9e:	9204      	strlt	r2, [sp, #16]
 8008ea0:	7823      	ldrb	r3, [r4, #0]
 8008ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea4:	d10c      	bne.n	8008ec0 <_svfiprintf_r+0x130>
 8008ea6:	7863      	ldrb	r3, [r4, #1]
 8008ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eaa:	d134      	bne.n	8008f16 <_svfiprintf_r+0x186>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	1d1a      	adds	r2, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	9203      	str	r2, [sp, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfb8      	it	lt
 8008eb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ebc:	3402      	adds	r4, #2
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f88 <_svfiprintf_r+0x1f8>
 8008ec4:	7821      	ldrb	r1, [r4, #0]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	4650      	mov	r0, sl
 8008eca:	f7f7 f991 	bl	80001f0 <memchr>
 8008ece:	b138      	cbz	r0, 8008ee0 <_svfiprintf_r+0x150>
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	eba0 000a 	sub.w	r0, r0, sl
 8008ed6:	2240      	movs	r2, #64	; 0x40
 8008ed8:	4082      	lsls	r2, r0
 8008eda:	4313      	orrs	r3, r2
 8008edc:	3401      	adds	r4, #1
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee4:	4825      	ldr	r0, [pc, #148]	; (8008f7c <_svfiprintf_r+0x1ec>)
 8008ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eea:	2206      	movs	r2, #6
 8008eec:	f7f7 f980 	bl	80001f0 <memchr>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d038      	beq.n	8008f66 <_svfiprintf_r+0x1d6>
 8008ef4:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <_svfiprintf_r+0x1f0>)
 8008ef6:	bb1b      	cbnz	r3, 8008f40 <_svfiprintf_r+0x1b0>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	3307      	adds	r3, #7
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f06:	4433      	add	r3, r6
 8008f08:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0a:	e768      	b.n	8008dde <_svfiprintf_r+0x4e>
 8008f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f10:	460c      	mov	r4, r1
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7a6      	b.n	8008e64 <_svfiprintf_r+0xd4>
 8008f16:	2300      	movs	r3, #0
 8008f18:	3401      	adds	r4, #1
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4620      	mov	r0, r4
 8008f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f28:	3a30      	subs	r2, #48	; 0x30
 8008f2a:	2a09      	cmp	r2, #9
 8008f2c:	d903      	bls.n	8008f36 <_svfiprintf_r+0x1a6>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0c6      	beq.n	8008ec0 <_svfiprintf_r+0x130>
 8008f32:	9105      	str	r1, [sp, #20]
 8008f34:	e7c4      	b.n	8008ec0 <_svfiprintf_r+0x130>
 8008f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7f0      	b.n	8008f22 <_svfiprintf_r+0x192>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <_svfiprintf_r+0x1f4>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7fc fad4 	bl	80054f8 <_printf_float>
 8008f50:	1c42      	adds	r2, r0, #1
 8008f52:	4606      	mov	r6, r0
 8008f54:	d1d6      	bne.n	8008f04 <_svfiprintf_r+0x174>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	065b      	lsls	r3, r3, #25
 8008f5a:	f53f af2d 	bmi.w	8008db8 <_svfiprintf_r+0x28>
 8008f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f60:	b01d      	add	sp, #116	; 0x74
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <_svfiprintf_r+0x1f4>)
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7fc fd65 	bl	8005a40 <_printf_i>
 8008f76:	e7eb      	b.n	8008f50 <_svfiprintf_r+0x1c0>
 8008f78:	0800a4a1 	.word	0x0800a4a1
 8008f7c:	0800a4ab 	.word	0x0800a4ab
 8008f80:	080054f9 	.word	0x080054f9
 8008f84:	08008cdd 	.word	0x08008cdd
 8008f88:	0800a4a7 	.word	0x0800a4a7

08008f8c <__sfputc_r>:
 8008f8c:	6893      	ldr	r3, [r2, #8]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	b410      	push	{r4}
 8008f94:	6093      	str	r3, [r2, #8]
 8008f96:	da08      	bge.n	8008faa <__sfputc_r+0x1e>
 8008f98:	6994      	ldr	r4, [r2, #24]
 8008f9a:	42a3      	cmp	r3, r4
 8008f9c:	db01      	blt.n	8008fa2 <__sfputc_r+0x16>
 8008f9e:	290a      	cmp	r1, #10
 8008fa0:	d103      	bne.n	8008faa <__sfputc_r+0x1e>
 8008fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa6:	f7fd babe 	b.w	8006526 <__swbuf_r>
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	1c58      	adds	r0, r3, #1
 8008fae:	6010      	str	r0, [r2, #0]
 8008fb0:	7019      	strb	r1, [r3, #0]
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <__sfputs_r>:
 8008fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	18d5      	adds	r5, r2, r3
 8008fc4:	42ac      	cmp	r4, r5
 8008fc6:	d101      	bne.n	8008fcc <__sfputs_r+0x12>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e007      	b.n	8008fdc <__sfputs_r+0x22>
 8008fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd0:	463a      	mov	r2, r7
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7ff ffda 	bl	8008f8c <__sfputc_r>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d1f3      	bne.n	8008fc4 <__sfputs_r+0xa>
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fe0 <_vfiprintf_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	b09d      	sub	sp, #116	; 0x74
 8008fe8:	4614      	mov	r4, r2
 8008fea:	4698      	mov	r8, r3
 8008fec:	4606      	mov	r6, r0
 8008fee:	b118      	cbz	r0, 8008ff8 <_vfiprintf_r+0x18>
 8008ff0:	6a03      	ldr	r3, [r0, #32]
 8008ff2:	b90b      	cbnz	r3, 8008ff8 <_vfiprintf_r+0x18>
 8008ff4:	f7fd f8e2 	bl	80061bc <__sinit>
 8008ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ffa:	07d9      	lsls	r1, r3, #31
 8008ffc:	d405      	bmi.n	800900a <_vfiprintf_r+0x2a>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	059a      	lsls	r2, r3, #22
 8009002:	d402      	bmi.n	800900a <_vfiprintf_r+0x2a>
 8009004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009006:	f7fd fba0 	bl	800674a <__retarget_lock_acquire_recursive>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	071b      	lsls	r3, r3, #28
 800900e:	d501      	bpl.n	8009014 <_vfiprintf_r+0x34>
 8009010:	692b      	ldr	r3, [r5, #16]
 8009012:	b99b      	cbnz	r3, 800903c <_vfiprintf_r+0x5c>
 8009014:	4629      	mov	r1, r5
 8009016:	4630      	mov	r0, r6
 8009018:	f7fd fac2 	bl	80065a0 <__swsetup_r>
 800901c:	b170      	cbz	r0, 800903c <_vfiprintf_r+0x5c>
 800901e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009020:	07dc      	lsls	r4, r3, #31
 8009022:	d504      	bpl.n	800902e <_vfiprintf_r+0x4e>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009028:	b01d      	add	sp, #116	; 0x74
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	0598      	lsls	r0, r3, #22
 8009032:	d4f7      	bmi.n	8009024 <_vfiprintf_r+0x44>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f7fd fb89 	bl	800674c <__retarget_lock_release_recursive>
 800903a:	e7f3      	b.n	8009024 <_vfiprintf_r+0x44>
 800903c:	2300      	movs	r3, #0
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	2320      	movs	r3, #32
 8009042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009046:	f8cd 800c 	str.w	r8, [sp, #12]
 800904a:	2330      	movs	r3, #48	; 0x30
 800904c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009200 <_vfiprintf_r+0x220>
 8009050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009054:	f04f 0901 	mov.w	r9, #1
 8009058:	4623      	mov	r3, r4
 800905a:	469a      	mov	sl, r3
 800905c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009060:	b10a      	cbz	r2, 8009066 <_vfiprintf_r+0x86>
 8009062:	2a25      	cmp	r2, #37	; 0x25
 8009064:	d1f9      	bne.n	800905a <_vfiprintf_r+0x7a>
 8009066:	ebba 0b04 	subs.w	fp, sl, r4
 800906a:	d00b      	beq.n	8009084 <_vfiprintf_r+0xa4>
 800906c:	465b      	mov	r3, fp
 800906e:	4622      	mov	r2, r4
 8009070:	4629      	mov	r1, r5
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ffa1 	bl	8008fba <__sfputs_r>
 8009078:	3001      	adds	r0, #1
 800907a:	f000 80a9 	beq.w	80091d0 <_vfiprintf_r+0x1f0>
 800907e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009080:	445a      	add	r2, fp
 8009082:	9209      	str	r2, [sp, #36]	; 0x24
 8009084:	f89a 3000 	ldrb.w	r3, [sl]
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 80a1 	beq.w	80091d0 <_vfiprintf_r+0x1f0>
 800908e:	2300      	movs	r3, #0
 8009090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009098:	f10a 0a01 	add.w	sl, sl, #1
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090a4:	931a      	str	r3, [sp, #104]	; 0x68
 80090a6:	4654      	mov	r4, sl
 80090a8:	2205      	movs	r2, #5
 80090aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ae:	4854      	ldr	r0, [pc, #336]	; (8009200 <_vfiprintf_r+0x220>)
 80090b0:	f7f7 f89e 	bl	80001f0 <memchr>
 80090b4:	9a04      	ldr	r2, [sp, #16]
 80090b6:	b9d8      	cbnz	r0, 80090f0 <_vfiprintf_r+0x110>
 80090b8:	06d1      	lsls	r1, r2, #27
 80090ba:	bf44      	itt	mi
 80090bc:	2320      	movmi	r3, #32
 80090be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c2:	0713      	lsls	r3, r2, #28
 80090c4:	bf44      	itt	mi
 80090c6:	232b      	movmi	r3, #43	; 0x2b
 80090c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090cc:	f89a 3000 	ldrb.w	r3, [sl]
 80090d0:	2b2a      	cmp	r3, #42	; 0x2a
 80090d2:	d015      	beq.n	8009100 <_vfiprintf_r+0x120>
 80090d4:	9a07      	ldr	r2, [sp, #28]
 80090d6:	4654      	mov	r4, sl
 80090d8:	2000      	movs	r0, #0
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4621      	mov	r1, r4
 80090e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e4:	3b30      	subs	r3, #48	; 0x30
 80090e6:	2b09      	cmp	r3, #9
 80090e8:	d94d      	bls.n	8009186 <_vfiprintf_r+0x1a6>
 80090ea:	b1b0      	cbz	r0, 800911a <_vfiprintf_r+0x13a>
 80090ec:	9207      	str	r2, [sp, #28]
 80090ee:	e014      	b.n	800911a <_vfiprintf_r+0x13a>
 80090f0:	eba0 0308 	sub.w	r3, r0, r8
 80090f4:	fa09 f303 	lsl.w	r3, r9, r3
 80090f8:	4313      	orrs	r3, r2
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	46a2      	mov	sl, r4
 80090fe:	e7d2      	b.n	80090a6 <_vfiprintf_r+0xc6>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	1d19      	adds	r1, r3, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	9103      	str	r1, [sp, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfbb      	ittet	lt
 800910c:	425b      	neglt	r3, r3
 800910e:	f042 0202 	orrlt.w	r2, r2, #2
 8009112:	9307      	strge	r3, [sp, #28]
 8009114:	9307      	strlt	r3, [sp, #28]
 8009116:	bfb8      	it	lt
 8009118:	9204      	strlt	r2, [sp, #16]
 800911a:	7823      	ldrb	r3, [r4, #0]
 800911c:	2b2e      	cmp	r3, #46	; 0x2e
 800911e:	d10c      	bne.n	800913a <_vfiprintf_r+0x15a>
 8009120:	7863      	ldrb	r3, [r4, #1]
 8009122:	2b2a      	cmp	r3, #42	; 0x2a
 8009124:	d134      	bne.n	8009190 <_vfiprintf_r+0x1b0>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	1d1a      	adds	r2, r3, #4
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	9203      	str	r2, [sp, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	bfb8      	it	lt
 8009132:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009136:	3402      	adds	r4, #2
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009210 <_vfiprintf_r+0x230>
 800913e:	7821      	ldrb	r1, [r4, #0]
 8009140:	2203      	movs	r2, #3
 8009142:	4650      	mov	r0, sl
 8009144:	f7f7 f854 	bl	80001f0 <memchr>
 8009148:	b138      	cbz	r0, 800915a <_vfiprintf_r+0x17a>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	eba0 000a 	sub.w	r0, r0, sl
 8009150:	2240      	movs	r2, #64	; 0x40
 8009152:	4082      	lsls	r2, r0
 8009154:	4313      	orrs	r3, r2
 8009156:	3401      	adds	r4, #1
 8009158:	9304      	str	r3, [sp, #16]
 800915a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915e:	4829      	ldr	r0, [pc, #164]	; (8009204 <_vfiprintf_r+0x224>)
 8009160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009164:	2206      	movs	r2, #6
 8009166:	f7f7 f843 	bl	80001f0 <memchr>
 800916a:	2800      	cmp	r0, #0
 800916c:	d03f      	beq.n	80091ee <_vfiprintf_r+0x20e>
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <_vfiprintf_r+0x228>)
 8009170:	bb1b      	cbnz	r3, 80091ba <_vfiprintf_r+0x1da>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	3307      	adds	r3, #7
 8009176:	f023 0307 	bic.w	r3, r3, #7
 800917a:	3308      	adds	r3, #8
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	443b      	add	r3, r7
 8009182:	9309      	str	r3, [sp, #36]	; 0x24
 8009184:	e768      	b.n	8009058 <_vfiprintf_r+0x78>
 8009186:	fb0c 3202 	mla	r2, ip, r2, r3
 800918a:	460c      	mov	r4, r1
 800918c:	2001      	movs	r0, #1
 800918e:	e7a6      	b.n	80090de <_vfiprintf_r+0xfe>
 8009190:	2300      	movs	r3, #0
 8009192:	3401      	adds	r4, #1
 8009194:	9305      	str	r3, [sp, #20]
 8009196:	4619      	mov	r1, r3
 8009198:	f04f 0c0a 	mov.w	ip, #10
 800919c:	4620      	mov	r0, r4
 800919e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a2:	3a30      	subs	r2, #48	; 0x30
 80091a4:	2a09      	cmp	r2, #9
 80091a6:	d903      	bls.n	80091b0 <_vfiprintf_r+0x1d0>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0c6      	beq.n	800913a <_vfiprintf_r+0x15a>
 80091ac:	9105      	str	r1, [sp, #20]
 80091ae:	e7c4      	b.n	800913a <_vfiprintf_r+0x15a>
 80091b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b4:	4604      	mov	r4, r0
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7f0      	b.n	800919c <_vfiprintf_r+0x1bc>
 80091ba:	ab03      	add	r3, sp, #12
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	462a      	mov	r2, r5
 80091c0:	4b12      	ldr	r3, [pc, #72]	; (800920c <_vfiprintf_r+0x22c>)
 80091c2:	a904      	add	r1, sp, #16
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7fc f997 	bl	80054f8 <_printf_float>
 80091ca:	4607      	mov	r7, r0
 80091cc:	1c78      	adds	r0, r7, #1
 80091ce:	d1d6      	bne.n	800917e <_vfiprintf_r+0x19e>
 80091d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d2:	07d9      	lsls	r1, r3, #31
 80091d4:	d405      	bmi.n	80091e2 <_vfiprintf_r+0x202>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	059a      	lsls	r2, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_vfiprintf_r+0x202>
 80091dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091de:	f7fd fab5 	bl	800674c <__retarget_lock_release_recursive>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	065b      	lsls	r3, r3, #25
 80091e6:	f53f af1d 	bmi.w	8009024 <_vfiprintf_r+0x44>
 80091ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ec:	e71c      	b.n	8009028 <_vfiprintf_r+0x48>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <_vfiprintf_r+0x22c>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7fc fc21 	bl	8005a40 <_printf_i>
 80091fe:	e7e4      	b.n	80091ca <_vfiprintf_r+0x1ea>
 8009200:	0800a4a1 	.word	0x0800a4a1
 8009204:	0800a4ab 	.word	0x0800a4ab
 8009208:	080054f9 	.word	0x080054f9
 800920c:	08008fbb 	.word	0x08008fbb
 8009210:	0800a4a7 	.word	0x0800a4a7

08009214 <__sflush_r>:
 8009214:	898a      	ldrh	r2, [r1, #12]
 8009216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921a:	4605      	mov	r5, r0
 800921c:	0710      	lsls	r0, r2, #28
 800921e:	460c      	mov	r4, r1
 8009220:	d458      	bmi.n	80092d4 <__sflush_r+0xc0>
 8009222:	684b      	ldr	r3, [r1, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc05      	bgt.n	8009234 <__sflush_r+0x20>
 8009228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	dc02      	bgt.n	8009234 <__sflush_r+0x20>
 800922e:	2000      	movs	r0, #0
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009236:	2e00      	cmp	r6, #0
 8009238:	d0f9      	beq.n	800922e <__sflush_r+0x1a>
 800923a:	2300      	movs	r3, #0
 800923c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009240:	682f      	ldr	r7, [r5, #0]
 8009242:	6a21      	ldr	r1, [r4, #32]
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	d032      	beq.n	80092ae <__sflush_r+0x9a>
 8009248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	075a      	lsls	r2, r3, #29
 800924e:	d505      	bpl.n	800925c <__sflush_r+0x48>
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	1ac0      	subs	r0, r0, r3
 8009254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009256:	b10b      	cbz	r3, 800925c <__sflush_r+0x48>
 8009258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800925a:	1ac0      	subs	r0, r0, r3
 800925c:	2300      	movs	r3, #0
 800925e:	4602      	mov	r2, r0
 8009260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009262:	6a21      	ldr	r1, [r4, #32]
 8009264:	4628      	mov	r0, r5
 8009266:	47b0      	blx	r6
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	d106      	bne.n	800927c <__sflush_r+0x68>
 800926e:	6829      	ldr	r1, [r5, #0]
 8009270:	291d      	cmp	r1, #29
 8009272:	d82b      	bhi.n	80092cc <__sflush_r+0xb8>
 8009274:	4a29      	ldr	r2, [pc, #164]	; (800931c <__sflush_r+0x108>)
 8009276:	410a      	asrs	r2, r1
 8009278:	07d6      	lsls	r6, r2, #31
 800927a:	d427      	bmi.n	80092cc <__sflush_r+0xb8>
 800927c:	2200      	movs	r2, #0
 800927e:	6062      	str	r2, [r4, #4]
 8009280:	04d9      	lsls	r1, r3, #19
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	d504      	bpl.n	8009292 <__sflush_r+0x7e>
 8009288:	1c42      	adds	r2, r0, #1
 800928a:	d101      	bne.n	8009290 <__sflush_r+0x7c>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b903      	cbnz	r3, 8009292 <__sflush_r+0x7e>
 8009290:	6560      	str	r0, [r4, #84]	; 0x54
 8009292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009294:	602f      	str	r7, [r5, #0]
 8009296:	2900      	cmp	r1, #0
 8009298:	d0c9      	beq.n	800922e <__sflush_r+0x1a>
 800929a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800929e:	4299      	cmp	r1, r3
 80092a0:	d002      	beq.n	80092a8 <__sflush_r+0x94>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7fe f8d6 	bl	8007454 <_free_r>
 80092a8:	2000      	movs	r0, #0
 80092aa:	6360      	str	r0, [r4, #52]	; 0x34
 80092ac:	e7c0      	b.n	8009230 <__sflush_r+0x1c>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	1c41      	adds	r1, r0, #1
 80092b6:	d1c8      	bne.n	800924a <__sflush_r+0x36>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0c5      	beq.n	800924a <__sflush_r+0x36>
 80092be:	2b1d      	cmp	r3, #29
 80092c0:	d001      	beq.n	80092c6 <__sflush_r+0xb2>
 80092c2:	2b16      	cmp	r3, #22
 80092c4:	d101      	bne.n	80092ca <__sflush_r+0xb6>
 80092c6:	602f      	str	r7, [r5, #0]
 80092c8:	e7b1      	b.n	800922e <__sflush_r+0x1a>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	e7ad      	b.n	8009230 <__sflush_r+0x1c>
 80092d4:	690f      	ldr	r7, [r1, #16]
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	d0a9      	beq.n	800922e <__sflush_r+0x1a>
 80092da:	0793      	lsls	r3, r2, #30
 80092dc:	680e      	ldr	r6, [r1, #0]
 80092de:	bf08      	it	eq
 80092e0:	694b      	ldreq	r3, [r1, #20]
 80092e2:	600f      	str	r7, [r1, #0]
 80092e4:	bf18      	it	ne
 80092e6:	2300      	movne	r3, #0
 80092e8:	eba6 0807 	sub.w	r8, r6, r7
 80092ec:	608b      	str	r3, [r1, #8]
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	dd9c      	ble.n	800922e <__sflush_r+0x1a>
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f8:	4643      	mov	r3, r8
 80092fa:	463a      	mov	r2, r7
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	2800      	cmp	r0, #0
 8009302:	dc06      	bgt.n	8009312 <__sflush_r+0xfe>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009310:	e78e      	b.n	8009230 <__sflush_r+0x1c>
 8009312:	4407      	add	r7, r0
 8009314:	eba8 0800 	sub.w	r8, r8, r0
 8009318:	e7e9      	b.n	80092ee <__sflush_r+0xda>
 800931a:	bf00      	nop
 800931c:	dfbffffe 	.word	0xdfbffffe

08009320 <_fflush_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b913      	cbnz	r3, 8009330 <_fflush_r+0x10>
 800932a:	2500      	movs	r5, #0
 800932c:	4628      	mov	r0, r5
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	b118      	cbz	r0, 800933a <_fflush_r+0x1a>
 8009332:	6a03      	ldr	r3, [r0, #32]
 8009334:	b90b      	cbnz	r3, 800933a <_fflush_r+0x1a>
 8009336:	f7fc ff41 	bl	80061bc <__sinit>
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f3      	beq.n	800932a <_fflush_r+0xa>
 8009342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009344:	07d0      	lsls	r0, r2, #31
 8009346:	d404      	bmi.n	8009352 <_fflush_r+0x32>
 8009348:	0599      	lsls	r1, r3, #22
 800934a:	d402      	bmi.n	8009352 <_fflush_r+0x32>
 800934c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934e:	f7fd f9fc 	bl	800674a <__retarget_lock_acquire_recursive>
 8009352:	4628      	mov	r0, r5
 8009354:	4621      	mov	r1, r4
 8009356:	f7ff ff5d 	bl	8009214 <__sflush_r>
 800935a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935c:	07da      	lsls	r2, r3, #31
 800935e:	4605      	mov	r5, r0
 8009360:	d4e4      	bmi.n	800932c <_fflush_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	059b      	lsls	r3, r3, #22
 8009366:	d4e1      	bmi.n	800932c <_fflush_r+0xc>
 8009368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800936a:	f7fd f9ef 	bl	800674c <__retarget_lock_release_recursive>
 800936e:	e7dd      	b.n	800932c <_fflush_r+0xc>

08009370 <__swhatbuf_r>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	460c      	mov	r4, r1
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	2900      	cmp	r1, #0
 800937a:	b096      	sub	sp, #88	; 0x58
 800937c:	4615      	mov	r5, r2
 800937e:	461e      	mov	r6, r3
 8009380:	da0d      	bge.n	800939e <__swhatbuf_r+0x2e>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009388:	f04f 0100 	mov.w	r1, #0
 800938c:	bf0c      	ite	eq
 800938e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009392:	2340      	movne	r3, #64	; 0x40
 8009394:	2000      	movs	r0, #0
 8009396:	6031      	str	r1, [r6, #0]
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	b016      	add	sp, #88	; 0x58
 800939c:	bd70      	pop	{r4, r5, r6, pc}
 800939e:	466a      	mov	r2, sp
 80093a0:	f000 f874 	bl	800948c <_fstat_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	dbec      	blt.n	8009382 <__swhatbuf_r+0x12>
 80093a8:	9901      	ldr	r1, [sp, #4]
 80093aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80093ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80093b2:	4259      	negs	r1, r3
 80093b4:	4159      	adcs	r1, r3
 80093b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ba:	e7eb      	b.n	8009394 <__swhatbuf_r+0x24>

080093bc <__smakebuf_r>:
 80093bc:	898b      	ldrh	r3, [r1, #12]
 80093be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093c0:	079d      	lsls	r5, r3, #30
 80093c2:	4606      	mov	r6, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	d507      	bpl.n	80093d8 <__smakebuf_r+0x1c>
 80093c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	2301      	movs	r3, #1
 80093d2:	6163      	str	r3, [r4, #20]
 80093d4:	b002      	add	sp, #8
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	ab01      	add	r3, sp, #4
 80093da:	466a      	mov	r2, sp
 80093dc:	f7ff ffc8 	bl	8009370 <__swhatbuf_r>
 80093e0:	9900      	ldr	r1, [sp, #0]
 80093e2:	4605      	mov	r5, r0
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7fe f8a9 	bl	800753c <_malloc_r>
 80093ea:	b948      	cbnz	r0, 8009400 <__smakebuf_r+0x44>
 80093ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f0:	059a      	lsls	r2, r3, #22
 80093f2:	d4ef      	bmi.n	80093d4 <__smakebuf_r+0x18>
 80093f4:	f023 0303 	bic.w	r3, r3, #3
 80093f8:	f043 0302 	orr.w	r3, r3, #2
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	e7e3      	b.n	80093c8 <__smakebuf_r+0xc>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	6020      	str	r0, [r4, #0]
 8009404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	6163      	str	r3, [r4, #20]
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	6120      	str	r0, [r4, #16]
 8009412:	b15b      	cbz	r3, 800942c <__smakebuf_r+0x70>
 8009414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009418:	4630      	mov	r0, r6
 800941a:	f000 f849 	bl	80094b0 <_isatty_r>
 800941e:	b128      	cbz	r0, 800942c <__smakebuf_r+0x70>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	f043 0301 	orr.w	r3, r3, #1
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	431d      	orrs	r5, r3
 8009430:	81a5      	strh	r5, [r4, #12]
 8009432:	e7cf      	b.n	80093d4 <__smakebuf_r+0x18>

08009434 <memmove>:
 8009434:	4288      	cmp	r0, r1
 8009436:	b510      	push	{r4, lr}
 8009438:	eb01 0402 	add.w	r4, r1, r2
 800943c:	d902      	bls.n	8009444 <memmove+0x10>
 800943e:	4284      	cmp	r4, r0
 8009440:	4623      	mov	r3, r4
 8009442:	d807      	bhi.n	8009454 <memmove+0x20>
 8009444:	1e43      	subs	r3, r0, #1
 8009446:	42a1      	cmp	r1, r4
 8009448:	d008      	beq.n	800945c <memmove+0x28>
 800944a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800944e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009452:	e7f8      	b.n	8009446 <memmove+0x12>
 8009454:	4402      	add	r2, r0
 8009456:	4601      	mov	r1, r0
 8009458:	428a      	cmp	r2, r1
 800945a:	d100      	bne.n	800945e <memmove+0x2a>
 800945c:	bd10      	pop	{r4, pc}
 800945e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009466:	e7f7      	b.n	8009458 <memmove+0x24>

08009468 <strncmp>:
 8009468:	b510      	push	{r4, lr}
 800946a:	b16a      	cbz	r2, 8009488 <strncmp+0x20>
 800946c:	3901      	subs	r1, #1
 800946e:	1884      	adds	r4, r0, r2
 8009470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009474:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009478:	429a      	cmp	r2, r3
 800947a:	d103      	bne.n	8009484 <strncmp+0x1c>
 800947c:	42a0      	cmp	r0, r4
 800947e:	d001      	beq.n	8009484 <strncmp+0x1c>
 8009480:	2a00      	cmp	r2, #0
 8009482:	d1f5      	bne.n	8009470 <strncmp+0x8>
 8009484:	1ad0      	subs	r0, r2, r3
 8009486:	bd10      	pop	{r4, pc}
 8009488:	4610      	mov	r0, r2
 800948a:	e7fc      	b.n	8009486 <strncmp+0x1e>

0800948c <_fstat_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_fstat_r+0x20>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	4611      	mov	r1, r2
 8009498:	602b      	str	r3, [r5, #0]
 800949a:	f7f9 f984 	bl	80027a6 <_fstat>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d102      	bne.n	80094a8 <_fstat_r+0x1c>
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	b103      	cbz	r3, 80094a8 <_fstat_r+0x1c>
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	bf00      	nop
 80094ac:	2000055c 	.word	0x2000055c

080094b0 <_isatty_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	; (80094cc <_isatty_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f9 f983 	bl	80027c6 <_isatty>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_isatty_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_isatty_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	2000055c 	.word	0x2000055c

080094d0 <_sbrk_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	; (80094ec <_sbrk_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f9 f98c 	bl	80027f8 <_sbrk>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_sbrk_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_sbrk_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	2000055c 	.word	0x2000055c

080094f0 <memcpy>:
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	4770      	bx	lr
 80094fc:	b510      	push	{r4, lr}
 80094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	4291      	cmp	r1, r2
 8009508:	d1f9      	bne.n	80094fe <memcpy+0xe>
 800950a:	bd10      	pop	{r4, pc}
 800950c:	0000      	movs	r0, r0
	...

08009510 <nan>:
 8009510:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009518 <nan+0x8>
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	00000000 	.word	0x00000000
 800951c:	7ff80000 	.word	0x7ff80000

08009520 <__assert_func>:
 8009520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009522:	4614      	mov	r4, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <__assert_func+0x2c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4605      	mov	r5, r0
 800952c:	68d8      	ldr	r0, [r3, #12]
 800952e:	b14c      	cbz	r4, 8009544 <__assert_func+0x24>
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <__assert_func+0x30>)
 8009532:	9100      	str	r1, [sp, #0]
 8009534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009538:	4906      	ldr	r1, [pc, #24]	; (8009554 <__assert_func+0x34>)
 800953a:	462b      	mov	r3, r5
 800953c:	f000 fbca 	bl	8009cd4 <fiprintf>
 8009540:	f000 fbda 	bl	8009cf8 <abort>
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <__assert_func+0x38>)
 8009546:	461c      	mov	r4, r3
 8009548:	e7f3      	b.n	8009532 <__assert_func+0x12>
 800954a:	bf00      	nop
 800954c:	2000007c 	.word	0x2000007c
 8009550:	0800a4ba 	.word	0x0800a4ba
 8009554:	0800a4c7 	.word	0x0800a4c7
 8009558:	0800a4f5 	.word	0x0800a4f5

0800955c <_calloc_r>:
 800955c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800955e:	fba1 2402 	umull	r2, r4, r1, r2
 8009562:	b94c      	cbnz	r4, 8009578 <_calloc_r+0x1c>
 8009564:	4611      	mov	r1, r2
 8009566:	9201      	str	r2, [sp, #4]
 8009568:	f7fd ffe8 	bl	800753c <_malloc_r>
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	4605      	mov	r5, r0
 8009570:	b930      	cbnz	r0, 8009580 <_calloc_r+0x24>
 8009572:	4628      	mov	r0, r5
 8009574:	b003      	add	sp, #12
 8009576:	bd30      	pop	{r4, r5, pc}
 8009578:	220c      	movs	r2, #12
 800957a:	6002      	str	r2, [r0, #0]
 800957c:	2500      	movs	r5, #0
 800957e:	e7f8      	b.n	8009572 <_calloc_r+0x16>
 8009580:	4621      	mov	r1, r4
 8009582:	f7fd f865 	bl	8006650 <memset>
 8009586:	e7f4      	b.n	8009572 <_calloc_r+0x16>

08009588 <rshift>:
 8009588:	6903      	ldr	r3, [r0, #16]
 800958a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800958e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009592:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009596:	f100 0414 	add.w	r4, r0, #20
 800959a:	dd45      	ble.n	8009628 <rshift+0xa0>
 800959c:	f011 011f 	ands.w	r1, r1, #31
 80095a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095a8:	d10c      	bne.n	80095c4 <rshift+0x3c>
 80095aa:	f100 0710 	add.w	r7, r0, #16
 80095ae:	4629      	mov	r1, r5
 80095b0:	42b1      	cmp	r1, r6
 80095b2:	d334      	bcc.n	800961e <rshift+0x96>
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	1eea      	subs	r2, r5, #3
 80095ba:	4296      	cmp	r6, r2
 80095bc:	bf38      	it	cc
 80095be:	2300      	movcc	r3, #0
 80095c0:	4423      	add	r3, r4
 80095c2:	e015      	b.n	80095f0 <rshift+0x68>
 80095c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095c8:	f1c1 0820 	rsb	r8, r1, #32
 80095cc:	40cf      	lsrs	r7, r1
 80095ce:	f105 0e04 	add.w	lr, r5, #4
 80095d2:	46a1      	mov	r9, r4
 80095d4:	4576      	cmp	r6, lr
 80095d6:	46f4      	mov	ip, lr
 80095d8:	d815      	bhi.n	8009606 <rshift+0x7e>
 80095da:	1a9a      	subs	r2, r3, r2
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	3a04      	subs	r2, #4
 80095e0:	3501      	adds	r5, #1
 80095e2:	42ae      	cmp	r6, r5
 80095e4:	bf38      	it	cc
 80095e6:	2200      	movcc	r2, #0
 80095e8:	18a3      	adds	r3, r4, r2
 80095ea:	50a7      	str	r7, [r4, r2]
 80095ec:	b107      	cbz	r7, 80095f0 <rshift+0x68>
 80095ee:	3304      	adds	r3, #4
 80095f0:	1b1a      	subs	r2, r3, r4
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095f8:	bf08      	it	eq
 80095fa:	2300      	moveq	r3, #0
 80095fc:	6102      	str	r2, [r0, #16]
 80095fe:	bf08      	it	eq
 8009600:	6143      	streq	r3, [r0, #20]
 8009602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009606:	f8dc c000 	ldr.w	ip, [ip]
 800960a:	fa0c fc08 	lsl.w	ip, ip, r8
 800960e:	ea4c 0707 	orr.w	r7, ip, r7
 8009612:	f849 7b04 	str.w	r7, [r9], #4
 8009616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800961a:	40cf      	lsrs	r7, r1
 800961c:	e7da      	b.n	80095d4 <rshift+0x4c>
 800961e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009622:	f847 cf04 	str.w	ip, [r7, #4]!
 8009626:	e7c3      	b.n	80095b0 <rshift+0x28>
 8009628:	4623      	mov	r3, r4
 800962a:	e7e1      	b.n	80095f0 <rshift+0x68>

0800962c <__hexdig_fun>:
 800962c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009630:	2b09      	cmp	r3, #9
 8009632:	d802      	bhi.n	800963a <__hexdig_fun+0xe>
 8009634:	3820      	subs	r0, #32
 8009636:	b2c0      	uxtb	r0, r0
 8009638:	4770      	bx	lr
 800963a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800963e:	2b05      	cmp	r3, #5
 8009640:	d801      	bhi.n	8009646 <__hexdig_fun+0x1a>
 8009642:	3847      	subs	r0, #71	; 0x47
 8009644:	e7f7      	b.n	8009636 <__hexdig_fun+0xa>
 8009646:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800964a:	2b05      	cmp	r3, #5
 800964c:	d801      	bhi.n	8009652 <__hexdig_fun+0x26>
 800964e:	3827      	subs	r0, #39	; 0x27
 8009650:	e7f1      	b.n	8009636 <__hexdig_fun+0xa>
 8009652:	2000      	movs	r0, #0
 8009654:	4770      	bx	lr
	...

08009658 <__gethex>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	4617      	mov	r7, r2
 800965e:	680a      	ldr	r2, [r1, #0]
 8009660:	b085      	sub	sp, #20
 8009662:	f102 0b02 	add.w	fp, r2, #2
 8009666:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800966a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800966e:	4681      	mov	r9, r0
 8009670:	468a      	mov	sl, r1
 8009672:	9302      	str	r3, [sp, #8]
 8009674:	32fe      	adds	r2, #254	; 0xfe
 8009676:	eb02 030b 	add.w	r3, r2, fp
 800967a:	46d8      	mov	r8, fp
 800967c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	2830      	cmp	r0, #48	; 0x30
 8009684:	d0f7      	beq.n	8009676 <__gethex+0x1e>
 8009686:	f7ff ffd1 	bl	800962c <__hexdig_fun>
 800968a:	4604      	mov	r4, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	d138      	bne.n	8009702 <__gethex+0xaa>
 8009690:	49a7      	ldr	r1, [pc, #668]	; (8009930 <__gethex+0x2d8>)
 8009692:	2201      	movs	r2, #1
 8009694:	4640      	mov	r0, r8
 8009696:	f7ff fee7 	bl	8009468 <strncmp>
 800969a:	4606      	mov	r6, r0
 800969c:	2800      	cmp	r0, #0
 800969e:	d169      	bne.n	8009774 <__gethex+0x11c>
 80096a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80096a4:	465d      	mov	r5, fp
 80096a6:	f7ff ffc1 	bl	800962c <__hexdig_fun>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d064      	beq.n	8009778 <__gethex+0x120>
 80096ae:	465a      	mov	r2, fp
 80096b0:	7810      	ldrb	r0, [r2, #0]
 80096b2:	2830      	cmp	r0, #48	; 0x30
 80096b4:	4690      	mov	r8, r2
 80096b6:	f102 0201 	add.w	r2, r2, #1
 80096ba:	d0f9      	beq.n	80096b0 <__gethex+0x58>
 80096bc:	f7ff ffb6 	bl	800962c <__hexdig_fun>
 80096c0:	2301      	movs	r3, #1
 80096c2:	fab0 f480 	clz	r4, r0
 80096c6:	0964      	lsrs	r4, r4, #5
 80096c8:	465e      	mov	r6, fp
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	4642      	mov	r2, r8
 80096ce:	4615      	mov	r5, r2
 80096d0:	3201      	adds	r2, #1
 80096d2:	7828      	ldrb	r0, [r5, #0]
 80096d4:	f7ff ffaa 	bl	800962c <__hexdig_fun>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1f8      	bne.n	80096ce <__gethex+0x76>
 80096dc:	4994      	ldr	r1, [pc, #592]	; (8009930 <__gethex+0x2d8>)
 80096de:	2201      	movs	r2, #1
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7ff fec1 	bl	8009468 <strncmp>
 80096e6:	b978      	cbnz	r0, 8009708 <__gethex+0xb0>
 80096e8:	b946      	cbnz	r6, 80096fc <__gethex+0xa4>
 80096ea:	1c6e      	adds	r6, r5, #1
 80096ec:	4632      	mov	r2, r6
 80096ee:	4615      	mov	r5, r2
 80096f0:	3201      	adds	r2, #1
 80096f2:	7828      	ldrb	r0, [r5, #0]
 80096f4:	f7ff ff9a 	bl	800962c <__hexdig_fun>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d1f8      	bne.n	80096ee <__gethex+0x96>
 80096fc:	1b73      	subs	r3, r6, r5
 80096fe:	009e      	lsls	r6, r3, #2
 8009700:	e004      	b.n	800970c <__gethex+0xb4>
 8009702:	2400      	movs	r4, #0
 8009704:	4626      	mov	r6, r4
 8009706:	e7e1      	b.n	80096cc <__gethex+0x74>
 8009708:	2e00      	cmp	r6, #0
 800970a:	d1f7      	bne.n	80096fc <__gethex+0xa4>
 800970c:	782b      	ldrb	r3, [r5, #0]
 800970e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009712:	2b50      	cmp	r3, #80	; 0x50
 8009714:	d13d      	bne.n	8009792 <__gethex+0x13a>
 8009716:	786b      	ldrb	r3, [r5, #1]
 8009718:	2b2b      	cmp	r3, #43	; 0x2b
 800971a:	d02f      	beq.n	800977c <__gethex+0x124>
 800971c:	2b2d      	cmp	r3, #45	; 0x2d
 800971e:	d031      	beq.n	8009784 <__gethex+0x12c>
 8009720:	1c69      	adds	r1, r5, #1
 8009722:	f04f 0b00 	mov.w	fp, #0
 8009726:	7808      	ldrb	r0, [r1, #0]
 8009728:	f7ff ff80 	bl	800962c <__hexdig_fun>
 800972c:	1e42      	subs	r2, r0, #1
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	2a18      	cmp	r2, #24
 8009732:	d82e      	bhi.n	8009792 <__gethex+0x13a>
 8009734:	f1a0 0210 	sub.w	r2, r0, #16
 8009738:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800973c:	f7ff ff76 	bl	800962c <__hexdig_fun>
 8009740:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009744:	fa5f fc8c 	uxtb.w	ip, ip
 8009748:	f1bc 0f18 	cmp.w	ip, #24
 800974c:	d91d      	bls.n	800978a <__gethex+0x132>
 800974e:	f1bb 0f00 	cmp.w	fp, #0
 8009752:	d000      	beq.n	8009756 <__gethex+0xfe>
 8009754:	4252      	negs	r2, r2
 8009756:	4416      	add	r6, r2
 8009758:	f8ca 1000 	str.w	r1, [sl]
 800975c:	b1dc      	cbz	r4, 8009796 <__gethex+0x13e>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bf14      	ite	ne
 8009764:	f04f 0800 	movne.w	r8, #0
 8009768:	f04f 0806 	moveq.w	r8, #6
 800976c:	4640      	mov	r0, r8
 800976e:	b005      	add	sp, #20
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	4645      	mov	r5, r8
 8009776:	4626      	mov	r6, r4
 8009778:	2401      	movs	r4, #1
 800977a:	e7c7      	b.n	800970c <__gethex+0xb4>
 800977c:	f04f 0b00 	mov.w	fp, #0
 8009780:	1ca9      	adds	r1, r5, #2
 8009782:	e7d0      	b.n	8009726 <__gethex+0xce>
 8009784:	f04f 0b01 	mov.w	fp, #1
 8009788:	e7fa      	b.n	8009780 <__gethex+0x128>
 800978a:	230a      	movs	r3, #10
 800978c:	fb03 0002 	mla	r0, r3, r2, r0
 8009790:	e7d0      	b.n	8009734 <__gethex+0xdc>
 8009792:	4629      	mov	r1, r5
 8009794:	e7e0      	b.n	8009758 <__gethex+0x100>
 8009796:	eba5 0308 	sub.w	r3, r5, r8
 800979a:	3b01      	subs	r3, #1
 800979c:	4621      	mov	r1, r4
 800979e:	2b07      	cmp	r3, #7
 80097a0:	dc0a      	bgt.n	80097b8 <__gethex+0x160>
 80097a2:	4648      	mov	r0, r9
 80097a4:	f7fd ff56 	bl	8007654 <_Balloc>
 80097a8:	4604      	mov	r4, r0
 80097aa:	b940      	cbnz	r0, 80097be <__gethex+0x166>
 80097ac:	4b61      	ldr	r3, [pc, #388]	; (8009934 <__gethex+0x2dc>)
 80097ae:	4602      	mov	r2, r0
 80097b0:	21e4      	movs	r1, #228	; 0xe4
 80097b2:	4861      	ldr	r0, [pc, #388]	; (8009938 <__gethex+0x2e0>)
 80097b4:	f7ff feb4 	bl	8009520 <__assert_func>
 80097b8:	3101      	adds	r1, #1
 80097ba:	105b      	asrs	r3, r3, #1
 80097bc:	e7ef      	b.n	800979e <__gethex+0x146>
 80097be:	f100 0a14 	add.w	sl, r0, #20
 80097c2:	2300      	movs	r3, #0
 80097c4:	495a      	ldr	r1, [pc, #360]	; (8009930 <__gethex+0x2d8>)
 80097c6:	f8cd a004 	str.w	sl, [sp, #4]
 80097ca:	469b      	mov	fp, r3
 80097cc:	45a8      	cmp	r8, r5
 80097ce:	d342      	bcc.n	8009856 <__gethex+0x1fe>
 80097d0:	9801      	ldr	r0, [sp, #4]
 80097d2:	f840 bb04 	str.w	fp, [r0], #4
 80097d6:	eba0 000a 	sub.w	r0, r0, sl
 80097da:	1080      	asrs	r0, r0, #2
 80097dc:	6120      	str	r0, [r4, #16]
 80097de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80097e2:	4658      	mov	r0, fp
 80097e4:	f7fe f828 	bl	8007838 <__hi0bits>
 80097e8:	683d      	ldr	r5, [r7, #0]
 80097ea:	eba8 0000 	sub.w	r0, r8, r0
 80097ee:	42a8      	cmp	r0, r5
 80097f0:	dd59      	ble.n	80098a6 <__gethex+0x24e>
 80097f2:	eba0 0805 	sub.w	r8, r0, r5
 80097f6:	4641      	mov	r1, r8
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7fe fbb7 	bl	8007f6c <__any_on>
 80097fe:	4683      	mov	fp, r0
 8009800:	b1b8      	cbz	r0, 8009832 <__gethex+0x1da>
 8009802:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009806:	1159      	asrs	r1, r3, #5
 8009808:	f003 021f 	and.w	r2, r3, #31
 800980c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009810:	f04f 0b01 	mov.w	fp, #1
 8009814:	fa0b f202 	lsl.w	r2, fp, r2
 8009818:	420a      	tst	r2, r1
 800981a:	d00a      	beq.n	8009832 <__gethex+0x1da>
 800981c:	455b      	cmp	r3, fp
 800981e:	dd06      	ble.n	800982e <__gethex+0x1d6>
 8009820:	f1a8 0102 	sub.w	r1, r8, #2
 8009824:	4620      	mov	r0, r4
 8009826:	f7fe fba1 	bl	8007f6c <__any_on>
 800982a:	2800      	cmp	r0, #0
 800982c:	d138      	bne.n	80098a0 <__gethex+0x248>
 800982e:	f04f 0b02 	mov.w	fp, #2
 8009832:	4641      	mov	r1, r8
 8009834:	4620      	mov	r0, r4
 8009836:	f7ff fea7 	bl	8009588 <rshift>
 800983a:	4446      	add	r6, r8
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	42b3      	cmp	r3, r6
 8009840:	da41      	bge.n	80098c6 <__gethex+0x26e>
 8009842:	4621      	mov	r1, r4
 8009844:	4648      	mov	r0, r9
 8009846:	f7fd ff45 	bl	80076d4 <_Bfree>
 800984a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800984c:	2300      	movs	r3, #0
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009854:	e78a      	b.n	800976c <__gethex+0x114>
 8009856:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800985a:	2a2e      	cmp	r2, #46	; 0x2e
 800985c:	d014      	beq.n	8009888 <__gethex+0x230>
 800985e:	2b20      	cmp	r3, #32
 8009860:	d106      	bne.n	8009870 <__gethex+0x218>
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	f843 bb04 	str.w	fp, [r3], #4
 8009868:	f04f 0b00 	mov.w	fp, #0
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	465b      	mov	r3, fp
 8009870:	7828      	ldrb	r0, [r5, #0]
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	f7ff feda 	bl	800962c <__hexdig_fun>
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	f000 000f 	and.w	r0, r0, #15
 800987e:	4098      	lsls	r0, r3
 8009880:	ea4b 0b00 	orr.w	fp, fp, r0
 8009884:	3304      	adds	r3, #4
 8009886:	e7a1      	b.n	80097cc <__gethex+0x174>
 8009888:	45a8      	cmp	r8, r5
 800988a:	d8e8      	bhi.n	800985e <__gethex+0x206>
 800988c:	2201      	movs	r2, #1
 800988e:	4628      	mov	r0, r5
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	f7ff fde9 	bl	8009468 <strncmp>
 8009896:	4926      	ldr	r1, [pc, #152]	; (8009930 <__gethex+0x2d8>)
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	2800      	cmp	r0, #0
 800989c:	d1df      	bne.n	800985e <__gethex+0x206>
 800989e:	e795      	b.n	80097cc <__gethex+0x174>
 80098a0:	f04f 0b03 	mov.w	fp, #3
 80098a4:	e7c5      	b.n	8009832 <__gethex+0x1da>
 80098a6:	da0b      	bge.n	80098c0 <__gethex+0x268>
 80098a8:	eba5 0800 	sub.w	r8, r5, r0
 80098ac:	4621      	mov	r1, r4
 80098ae:	4642      	mov	r2, r8
 80098b0:	4648      	mov	r0, r9
 80098b2:	f7fe f929 	bl	8007b08 <__lshift>
 80098b6:	eba6 0608 	sub.w	r6, r6, r8
 80098ba:	4604      	mov	r4, r0
 80098bc:	f100 0a14 	add.w	sl, r0, #20
 80098c0:	f04f 0b00 	mov.w	fp, #0
 80098c4:	e7ba      	b.n	800983c <__gethex+0x1e4>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	42b3      	cmp	r3, r6
 80098ca:	dd73      	ble.n	80099b4 <__gethex+0x35c>
 80098cc:	1b9e      	subs	r6, r3, r6
 80098ce:	42b5      	cmp	r5, r6
 80098d0:	dc34      	bgt.n	800993c <__gethex+0x2e4>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d023      	beq.n	8009920 <__gethex+0x2c8>
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d025      	beq.n	8009928 <__gethex+0x2d0>
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d115      	bne.n	800990c <__gethex+0x2b4>
 80098e0:	42b5      	cmp	r5, r6
 80098e2:	d113      	bne.n	800990c <__gethex+0x2b4>
 80098e4:	2d01      	cmp	r5, #1
 80098e6:	d10b      	bne.n	8009900 <__gethex+0x2a8>
 80098e8:	9a02      	ldr	r2, [sp, #8]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	2301      	movs	r3, #1
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	f8ca 3000 	str.w	r3, [sl]
 80098f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80098fc:	601c      	str	r4, [r3, #0]
 80098fe:	e735      	b.n	800976c <__gethex+0x114>
 8009900:	1e69      	subs	r1, r5, #1
 8009902:	4620      	mov	r0, r4
 8009904:	f7fe fb32 	bl	8007f6c <__any_on>
 8009908:	2800      	cmp	r0, #0
 800990a:	d1ed      	bne.n	80098e8 <__gethex+0x290>
 800990c:	4621      	mov	r1, r4
 800990e:	4648      	mov	r0, r9
 8009910:	f7fd fee0 	bl	80076d4 <_Bfree>
 8009914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009916:	2300      	movs	r3, #0
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800991e:	e725      	b.n	800976c <__gethex+0x114>
 8009920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1f2      	bne.n	800990c <__gethex+0x2b4>
 8009926:	e7df      	b.n	80098e8 <__gethex+0x290>
 8009928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1dc      	bne.n	80098e8 <__gethex+0x290>
 800992e:	e7ed      	b.n	800990c <__gethex+0x2b4>
 8009930:	0800a34c 	.word	0x0800a34c
 8009934:	0800a1e5 	.word	0x0800a1e5
 8009938:	0800a4f6 	.word	0x0800a4f6
 800993c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	d133      	bne.n	80099ae <__gethex+0x356>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d004      	beq.n	8009956 <__gethex+0x2fe>
 800994c:	4641      	mov	r1, r8
 800994e:	4620      	mov	r0, r4
 8009950:	f7fe fb0c 	bl	8007f6c <__any_on>
 8009954:	4683      	mov	fp, r0
 8009956:	ea4f 1268 	mov.w	r2, r8, asr #5
 800995a:	2301      	movs	r3, #1
 800995c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009960:	f008 081f 	and.w	r8, r8, #31
 8009964:	fa03 f308 	lsl.w	r3, r3, r8
 8009968:	4213      	tst	r3, r2
 800996a:	4631      	mov	r1, r6
 800996c:	4620      	mov	r0, r4
 800996e:	bf18      	it	ne
 8009970:	f04b 0b02 	orrne.w	fp, fp, #2
 8009974:	1bad      	subs	r5, r5, r6
 8009976:	f7ff fe07 	bl	8009588 <rshift>
 800997a:	687e      	ldr	r6, [r7, #4]
 800997c:	f04f 0802 	mov.w	r8, #2
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	d04a      	beq.n	8009a1c <__gethex+0x3c4>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d016      	beq.n	80099ba <__gethex+0x362>
 800998c:	2b03      	cmp	r3, #3
 800998e:	d018      	beq.n	80099c2 <__gethex+0x36a>
 8009990:	2b01      	cmp	r3, #1
 8009992:	d109      	bne.n	80099a8 <__gethex+0x350>
 8009994:	f01b 0f02 	tst.w	fp, #2
 8009998:	d006      	beq.n	80099a8 <__gethex+0x350>
 800999a:	f8da 3000 	ldr.w	r3, [sl]
 800999e:	ea4b 0b03 	orr.w	fp, fp, r3
 80099a2:	f01b 0f01 	tst.w	fp, #1
 80099a6:	d10f      	bne.n	80099c8 <__gethex+0x370>
 80099a8:	f048 0810 	orr.w	r8, r8, #16
 80099ac:	e036      	b.n	8009a1c <__gethex+0x3c4>
 80099ae:	f04f 0b01 	mov.w	fp, #1
 80099b2:	e7d0      	b.n	8009956 <__gethex+0x2fe>
 80099b4:	f04f 0801 	mov.w	r8, #1
 80099b8:	e7e2      	b.n	8009980 <__gethex+0x328>
 80099ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099bc:	f1c3 0301 	rsb	r3, r3, #1
 80099c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0ef      	beq.n	80099a8 <__gethex+0x350>
 80099c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099cc:	f104 0214 	add.w	r2, r4, #20
 80099d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80099da:	2300      	movs	r3, #0
 80099dc:	4694      	mov	ip, r2
 80099de:	f852 1b04 	ldr.w	r1, [r2], #4
 80099e2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80099e6:	d01e      	beq.n	8009a26 <__gethex+0x3ce>
 80099e8:	3101      	adds	r1, #1
 80099ea:	f8cc 1000 	str.w	r1, [ip]
 80099ee:	f1b8 0f02 	cmp.w	r8, #2
 80099f2:	f104 0214 	add.w	r2, r4, #20
 80099f6:	d13d      	bne.n	8009a74 <__gethex+0x41c>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	42ab      	cmp	r3, r5
 80099fe:	d10b      	bne.n	8009a18 <__gethex+0x3c0>
 8009a00:	1169      	asrs	r1, r5, #5
 8009a02:	2301      	movs	r3, #1
 8009a04:	f005 051f 	and.w	r5, r5, #31
 8009a08:	fa03 f505 	lsl.w	r5, r3, r5
 8009a0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a10:	421d      	tst	r5, r3
 8009a12:	bf18      	it	ne
 8009a14:	f04f 0801 	movne.w	r8, #1
 8009a18:	f048 0820 	orr.w	r8, r8, #32
 8009a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a1e:	601c      	str	r4, [r3, #0]
 8009a20:	9b02      	ldr	r3, [sp, #8]
 8009a22:	601e      	str	r6, [r3, #0]
 8009a24:	e6a2      	b.n	800976c <__gethex+0x114>
 8009a26:	4290      	cmp	r0, r2
 8009a28:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a2c:	d8d6      	bhi.n	80099dc <__gethex+0x384>
 8009a2e:	68a2      	ldr	r2, [r4, #8]
 8009a30:	4593      	cmp	fp, r2
 8009a32:	db17      	blt.n	8009a64 <__gethex+0x40c>
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	4648      	mov	r0, r9
 8009a38:	3101      	adds	r1, #1
 8009a3a:	f7fd fe0b 	bl	8007654 <_Balloc>
 8009a3e:	4682      	mov	sl, r0
 8009a40:	b918      	cbnz	r0, 8009a4a <__gethex+0x3f2>
 8009a42:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <__gethex+0x458>)
 8009a44:	4602      	mov	r2, r0
 8009a46:	2184      	movs	r1, #132	; 0x84
 8009a48:	e6b3      	b.n	80097b2 <__gethex+0x15a>
 8009a4a:	6922      	ldr	r2, [r4, #16]
 8009a4c:	3202      	adds	r2, #2
 8009a4e:	f104 010c 	add.w	r1, r4, #12
 8009a52:	0092      	lsls	r2, r2, #2
 8009a54:	300c      	adds	r0, #12
 8009a56:	f7ff fd4b 	bl	80094f0 <memcpy>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4648      	mov	r0, r9
 8009a5e:	f7fd fe39 	bl	80076d4 <_Bfree>
 8009a62:	4654      	mov	r4, sl
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	1c51      	adds	r1, r2, #1
 8009a68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a6c:	6121      	str	r1, [r4, #16]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	6151      	str	r1, [r2, #20]
 8009a72:	e7bc      	b.n	80099ee <__gethex+0x396>
 8009a74:	6921      	ldr	r1, [r4, #16]
 8009a76:	4559      	cmp	r1, fp
 8009a78:	dd0b      	ble.n	8009a92 <__gethex+0x43a>
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7ff fd83 	bl	8009588 <rshift>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	3601      	adds	r6, #1
 8009a86:	42b3      	cmp	r3, r6
 8009a88:	f6ff aedb 	blt.w	8009842 <__gethex+0x1ea>
 8009a8c:	f04f 0801 	mov.w	r8, #1
 8009a90:	e7c2      	b.n	8009a18 <__gethex+0x3c0>
 8009a92:	f015 051f 	ands.w	r5, r5, #31
 8009a96:	d0f9      	beq.n	8009a8c <__gethex+0x434>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	441a      	add	r2, r3
 8009a9c:	f1c5 0520 	rsb	r5, r5, #32
 8009aa0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009aa4:	f7fd fec8 	bl	8007838 <__hi0bits>
 8009aa8:	42a8      	cmp	r0, r5
 8009aaa:	dbe6      	blt.n	8009a7a <__gethex+0x422>
 8009aac:	e7ee      	b.n	8009a8c <__gethex+0x434>
 8009aae:	bf00      	nop
 8009ab0:	0800a1e5 	.word	0x0800a1e5

08009ab4 <L_shift>:
 8009ab4:	f1c2 0208 	rsb	r2, r2, #8
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	b570      	push	{r4, r5, r6, lr}
 8009abc:	f1c2 0620 	rsb	r6, r2, #32
 8009ac0:	6843      	ldr	r3, [r0, #4]
 8009ac2:	6804      	ldr	r4, [r0, #0]
 8009ac4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ac8:	432c      	orrs	r4, r5
 8009aca:	40d3      	lsrs	r3, r2
 8009acc:	6004      	str	r4, [r0, #0]
 8009ace:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ad2:	4288      	cmp	r0, r1
 8009ad4:	d3f4      	bcc.n	8009ac0 <L_shift+0xc>
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}

08009ad8 <__match>:
 8009ad8:	b530      	push	{r4, r5, lr}
 8009ada:	6803      	ldr	r3, [r0, #0]
 8009adc:	3301      	adds	r3, #1
 8009ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ae2:	b914      	cbnz	r4, 8009aea <__match+0x12>
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	bd30      	pop	{r4, r5, pc}
 8009aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009af2:	2d19      	cmp	r5, #25
 8009af4:	bf98      	it	ls
 8009af6:	3220      	addls	r2, #32
 8009af8:	42a2      	cmp	r2, r4
 8009afa:	d0f0      	beq.n	8009ade <__match+0x6>
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7f3      	b.n	8009ae8 <__match+0x10>

08009b00 <__hexnan>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	680b      	ldr	r3, [r1, #0]
 8009b06:	6801      	ldr	r1, [r0, #0]
 8009b08:	115e      	asrs	r6, r3, #5
 8009b0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b0e:	f013 031f 	ands.w	r3, r3, #31
 8009b12:	b087      	sub	sp, #28
 8009b14:	bf18      	it	ne
 8009b16:	3604      	addne	r6, #4
 8009b18:	2500      	movs	r5, #0
 8009b1a:	1f37      	subs	r7, r6, #4
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	4690      	mov	r8, r2
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b26:	46b9      	mov	r9, r7
 8009b28:	463c      	mov	r4, r7
 8009b2a:	9502      	str	r5, [sp, #8]
 8009b2c:	46ab      	mov	fp, r5
 8009b2e:	784a      	ldrb	r2, [r1, #1]
 8009b30:	1c4b      	adds	r3, r1, #1
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	b342      	cbz	r2, 8009b88 <__hexnan+0x88>
 8009b36:	4610      	mov	r0, r2
 8009b38:	9105      	str	r1, [sp, #20]
 8009b3a:	9204      	str	r2, [sp, #16]
 8009b3c:	f7ff fd76 	bl	800962c <__hexdig_fun>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d14f      	bne.n	8009be4 <__hexnan+0xe4>
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	9905      	ldr	r1, [sp, #20]
 8009b48:	2a20      	cmp	r2, #32
 8009b4a:	d818      	bhi.n	8009b7e <__hexnan+0x7e>
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	459b      	cmp	fp, r3
 8009b50:	dd13      	ble.n	8009b7a <__hexnan+0x7a>
 8009b52:	454c      	cmp	r4, r9
 8009b54:	d206      	bcs.n	8009b64 <__hexnan+0x64>
 8009b56:	2d07      	cmp	r5, #7
 8009b58:	dc04      	bgt.n	8009b64 <__hexnan+0x64>
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7ff ffa8 	bl	8009ab4 <L_shift>
 8009b64:	4544      	cmp	r4, r8
 8009b66:	d950      	bls.n	8009c0a <__hexnan+0x10a>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f1a4 0904 	sub.w	r9, r4, #4
 8009b6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b72:	f8cd b008 	str.w	fp, [sp, #8]
 8009b76:	464c      	mov	r4, r9
 8009b78:	461d      	mov	r5, r3
 8009b7a:	9903      	ldr	r1, [sp, #12]
 8009b7c:	e7d7      	b.n	8009b2e <__hexnan+0x2e>
 8009b7e:	2a29      	cmp	r2, #41	; 0x29
 8009b80:	d155      	bne.n	8009c2e <__hexnan+0x12e>
 8009b82:	3102      	adds	r1, #2
 8009b84:	f8ca 1000 	str.w	r1, [sl]
 8009b88:	f1bb 0f00 	cmp.w	fp, #0
 8009b8c:	d04f      	beq.n	8009c2e <__hexnan+0x12e>
 8009b8e:	454c      	cmp	r4, r9
 8009b90:	d206      	bcs.n	8009ba0 <__hexnan+0xa0>
 8009b92:	2d07      	cmp	r5, #7
 8009b94:	dc04      	bgt.n	8009ba0 <__hexnan+0xa0>
 8009b96:	462a      	mov	r2, r5
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff ff8a 	bl	8009ab4 <L_shift>
 8009ba0:	4544      	cmp	r4, r8
 8009ba2:	d934      	bls.n	8009c0e <__hexnan+0x10e>
 8009ba4:	f1a8 0204 	sub.w	r2, r8, #4
 8009ba8:	4623      	mov	r3, r4
 8009baa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bae:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bb2:	429f      	cmp	r7, r3
 8009bb4:	d2f9      	bcs.n	8009baa <__hexnan+0xaa>
 8009bb6:	1b3b      	subs	r3, r7, r4
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	3e03      	subs	r6, #3
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	42a6      	cmp	r6, r4
 8009bc4:	bf38      	it	cc
 8009bc6:	2304      	movcc	r3, #4
 8009bc8:	4443      	add	r3, r8
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f843 2b04 	str.w	r2, [r3], #4
 8009bd0:	429f      	cmp	r7, r3
 8009bd2:	d2fb      	bcs.n	8009bcc <__hexnan+0xcc>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	b91b      	cbnz	r3, 8009be0 <__hexnan+0xe0>
 8009bd8:	4547      	cmp	r7, r8
 8009bda:	d126      	bne.n	8009c2a <__hexnan+0x12a>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	2005      	movs	r0, #5
 8009be2:	e025      	b.n	8009c30 <__hexnan+0x130>
 8009be4:	3501      	adds	r5, #1
 8009be6:	2d08      	cmp	r5, #8
 8009be8:	f10b 0b01 	add.w	fp, fp, #1
 8009bec:	dd06      	ble.n	8009bfc <__hexnan+0xfc>
 8009bee:	4544      	cmp	r4, r8
 8009bf0:	d9c3      	bls.n	8009b7a <__hexnan+0x7a>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bf8:	2501      	movs	r5, #1
 8009bfa:	3c04      	subs	r4, #4
 8009bfc:	6822      	ldr	r2, [r4, #0]
 8009bfe:	f000 000f 	and.w	r0, r0, #15
 8009c02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	e7b7      	b.n	8009b7a <__hexnan+0x7a>
 8009c0a:	2508      	movs	r5, #8
 8009c0c:	e7b5      	b.n	8009b7a <__hexnan+0x7a>
 8009c0e:	9b01      	ldr	r3, [sp, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0df      	beq.n	8009bd4 <__hexnan+0xd4>
 8009c14:	f1c3 0320 	rsb	r3, r3, #32
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c1c:	40da      	lsrs	r2, r3
 8009c1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c22:	4013      	ands	r3, r2
 8009c24:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c28:	e7d4      	b.n	8009bd4 <__hexnan+0xd4>
 8009c2a:	3f04      	subs	r7, #4
 8009c2c:	e7d2      	b.n	8009bd4 <__hexnan+0xd4>
 8009c2e:	2004      	movs	r0, #4
 8009c30:	b007      	add	sp, #28
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c36 <__ascii_mbtowc>:
 8009c36:	b082      	sub	sp, #8
 8009c38:	b901      	cbnz	r1, 8009c3c <__ascii_mbtowc+0x6>
 8009c3a:	a901      	add	r1, sp, #4
 8009c3c:	b142      	cbz	r2, 8009c50 <__ascii_mbtowc+0x1a>
 8009c3e:	b14b      	cbz	r3, 8009c54 <__ascii_mbtowc+0x1e>
 8009c40:	7813      	ldrb	r3, [r2, #0]
 8009c42:	600b      	str	r3, [r1, #0]
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	1e10      	subs	r0, r2, #0
 8009c48:	bf18      	it	ne
 8009c4a:	2001      	movne	r0, #1
 8009c4c:	b002      	add	sp, #8
 8009c4e:	4770      	bx	lr
 8009c50:	4610      	mov	r0, r2
 8009c52:	e7fb      	b.n	8009c4c <__ascii_mbtowc+0x16>
 8009c54:	f06f 0001 	mvn.w	r0, #1
 8009c58:	e7f8      	b.n	8009c4c <__ascii_mbtowc+0x16>

08009c5a <_realloc_r>:
 8009c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	4680      	mov	r8, r0
 8009c60:	4614      	mov	r4, r2
 8009c62:	460e      	mov	r6, r1
 8009c64:	b921      	cbnz	r1, 8009c70 <_realloc_r+0x16>
 8009c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	f7fd bc66 	b.w	800753c <_malloc_r>
 8009c70:	b92a      	cbnz	r2, 8009c7e <_realloc_r+0x24>
 8009c72:	f7fd fbef 	bl	8007454 <_free_r>
 8009c76:	4625      	mov	r5, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7e:	f000 f842 	bl	8009d06 <_malloc_usable_size_r>
 8009c82:	4284      	cmp	r4, r0
 8009c84:	4607      	mov	r7, r0
 8009c86:	d802      	bhi.n	8009c8e <_realloc_r+0x34>
 8009c88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c8c:	d812      	bhi.n	8009cb4 <_realloc_r+0x5a>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4640      	mov	r0, r8
 8009c92:	f7fd fc53 	bl	800753c <_malloc_r>
 8009c96:	4605      	mov	r5, r0
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d0ed      	beq.n	8009c78 <_realloc_r+0x1e>
 8009c9c:	42bc      	cmp	r4, r7
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	bf28      	it	cs
 8009ca4:	463a      	movcs	r2, r7
 8009ca6:	f7ff fc23 	bl	80094f0 <memcpy>
 8009caa:	4631      	mov	r1, r6
 8009cac:	4640      	mov	r0, r8
 8009cae:	f7fd fbd1 	bl	8007454 <_free_r>
 8009cb2:	e7e1      	b.n	8009c78 <_realloc_r+0x1e>
 8009cb4:	4635      	mov	r5, r6
 8009cb6:	e7df      	b.n	8009c78 <_realloc_r+0x1e>

08009cb8 <__ascii_wctomb>:
 8009cb8:	b149      	cbz	r1, 8009cce <__ascii_wctomb+0x16>
 8009cba:	2aff      	cmp	r2, #255	; 0xff
 8009cbc:	bf85      	ittet	hi
 8009cbe:	238a      	movhi	r3, #138	; 0x8a
 8009cc0:	6003      	strhi	r3, [r0, #0]
 8009cc2:	700a      	strbls	r2, [r1, #0]
 8009cc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cc8:	bf98      	it	ls
 8009cca:	2001      	movls	r0, #1
 8009ccc:	4770      	bx	lr
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4770      	bx	lr
	...

08009cd4 <fiprintf>:
 8009cd4:	b40e      	push	{r1, r2, r3}
 8009cd6:	b503      	push	{r0, r1, lr}
 8009cd8:	4601      	mov	r1, r0
 8009cda:	ab03      	add	r3, sp, #12
 8009cdc:	4805      	ldr	r0, [pc, #20]	; (8009cf4 <fiprintf+0x20>)
 8009cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce2:	6800      	ldr	r0, [r0, #0]
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	f7ff f97b 	bl	8008fe0 <_vfiprintf_r>
 8009cea:	b002      	add	sp, #8
 8009cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cf0:	b003      	add	sp, #12
 8009cf2:	4770      	bx	lr
 8009cf4:	2000007c 	.word	0x2000007c

08009cf8 <abort>:
 8009cf8:	b508      	push	{r3, lr}
 8009cfa:	2006      	movs	r0, #6
 8009cfc:	f000 f834 	bl	8009d68 <raise>
 8009d00:	2001      	movs	r0, #1
 8009d02:	f7f8 fd01 	bl	8002708 <_exit>

08009d06 <_malloc_usable_size_r>:
 8009d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d0a:	1f18      	subs	r0, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfbc      	itt	lt
 8009d10:	580b      	ldrlt	r3, [r1, r0]
 8009d12:	18c0      	addlt	r0, r0, r3
 8009d14:	4770      	bx	lr

08009d16 <_raise_r>:
 8009d16:	291f      	cmp	r1, #31
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	d904      	bls.n	8009d2a <_raise_r+0x14>
 8009d20:	2316      	movs	r3, #22
 8009d22:	6003      	str	r3, [r0, #0]
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d2c:	b112      	cbz	r2, 8009d34 <_raise_r+0x1e>
 8009d2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d32:	b94b      	cbnz	r3, 8009d48 <_raise_r+0x32>
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 f831 	bl	8009d9c <_getpid_r>
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	4620      	mov	r0, r4
 8009d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d44:	f000 b818 	b.w	8009d78 <_kill_r>
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d00a      	beq.n	8009d62 <_raise_r+0x4c>
 8009d4c:	1c59      	adds	r1, r3, #1
 8009d4e:	d103      	bne.n	8009d58 <_raise_r+0x42>
 8009d50:	2316      	movs	r3, #22
 8009d52:	6003      	str	r3, [r0, #0]
 8009d54:	2001      	movs	r0, #1
 8009d56:	e7e7      	b.n	8009d28 <_raise_r+0x12>
 8009d58:	2400      	movs	r4, #0
 8009d5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d5e:	4628      	mov	r0, r5
 8009d60:	4798      	blx	r3
 8009d62:	2000      	movs	r0, #0
 8009d64:	e7e0      	b.n	8009d28 <_raise_r+0x12>
	...

08009d68 <raise>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	; (8009d74 <raise+0xc>)
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f7ff bfd2 	b.w	8009d16 <_raise_r>
 8009d72:	bf00      	nop
 8009d74:	2000007c 	.word	0x2000007c

08009d78 <_kill_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d07      	ldr	r5, [pc, #28]	; (8009d98 <_kill_r+0x20>)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f7f8 fcaf 	bl	80026e8 <_kill>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d102      	bne.n	8009d94 <_kill_r+0x1c>
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	b103      	cbz	r3, 8009d94 <_kill_r+0x1c>
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	bd38      	pop	{r3, r4, r5, pc}
 8009d96:	bf00      	nop
 8009d98:	2000055c 	.word	0x2000055c

08009d9c <_getpid_r>:
 8009d9c:	f7f8 bc9c 	b.w	80026d8 <_getpid>

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
