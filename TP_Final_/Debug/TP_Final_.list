
TP_Final_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08009ba0  08009ba0  00019ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a350  0800a350  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a350  0800a350  0001a350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a358  0800a358  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000374  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000560  20000560  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e7bc  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bfe  00000000  00000000  0002ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d50  00000000  00000000  00031620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a21  00000000  00000000  00032370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028a2d  00000000  00000000  00032d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018530  00000000  00000000  0005b7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e699e  00000000  00000000  00073cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048e0  00000000  00000000  0015a68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0015ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b88 	.word	0x08009b88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08009b88 	.word	0x08009b88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <Error_Handler>:
HAL_StatusTypeDef returnValue1;

static void Error_Handler(void);

static void Error_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001014:	2001      	movs	r0, #1
 8001016:	f001 fa01 	bl	800241c <BSP_LED_On>
  while (1)
 800101a:	e7fe      	b.n	800101a <Error_Handler+0xa>

0800101c <AHT10_Temp>:

	HAL_Delay(100); // Delay must be > 75 ms
	HAL_I2C_Master_Receive(&hi2c2, AHT10_ADRESS, (uint8_t*)DATA_RX, 6,time);
}*/

float AHT10_Temp(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8

	/* Convert to Temperature in °C */
	returnValue1=HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADRESS, (uint8_t*)AHT10_Config,3, time);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2303      	movs	r3, #3
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <AHT10_Temp+0xb0>)
 800102a:	2170      	movs	r1, #112	; 0x70
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <AHT10_Temp+0xb4>)
 800102e:	f002 f8ab 	bl	8003188 <HAL_I2C_Master_Transmit>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <AHT10_Temp+0xb8>)
 8001038:	701a      	strb	r2, [r3, #0]
		if(returnValue1 != HAL_OK){
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <AHT10_Temp+0xb8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <AHT10_Temp+0x2a>
				Error_Handler();
 8001042:	f7ff ffe5 	bl	8001010 <Error_Handler>
			}

		HAL_Delay(100); // Delay must be > 75 ms
 8001046:	2064      	movs	r0, #100	; 0x64
 8001048:	f001 fc22 	bl	8002890 <HAL_Delay>
	    HAL_I2C_Master_Receive(&hi2c2, AHT10_ADRESS, (uint8_t*)DATA_RX, 6,time);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2306      	movs	r3, #6
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <AHT10_Temp+0xbc>)
 8001054:	2170      	movs	r1, #112	; 0x70
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <AHT10_Temp+0xb4>)
 8001058:	f002 f994 	bl	8003384 <HAL_I2C_Master_Receive>

		AHT10_ADC = (((uint32_t) DATA_RX[3] & 15) << 16) | ((uint32_t) DATA_RX[4] << 8) | DATA_RX[5];
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <AHT10_Temp+0xbc>)
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <AHT10_Temp+0xbc>)
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4313      	orrs	r3, r2
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <AHT10_Temp+0xbc>)
 8001070:	7952      	ldrb	r2, [r2, #5]
 8001072:	4313      	orrs	r3, r2
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <AHT10_Temp+0xc0>)
 8001076:	6013      	str	r3, [r2, #0]
		Temperature = (float) (AHT10_ADC * 200.00 / 1048576.00) - 50;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <AHT10_Temp+0xc0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa51 	bl	8000524 <__aeabi_ui2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <AHT10_Temp+0xc4>)
 8001088:	f7ff fac6 	bl	8000618 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <AHT10_Temp+0xc8>)
 800109a:	f7ff fbe7 	bl	800086c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fdaf 	bl	8000c08 <__aeabi_d2f>
 80010aa:	ee07 0a10 	vmov	s14, r0
 80010ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80010e8 <AHT10_Temp+0xcc>
 80010b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <AHT10_Temp+0xd0>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]

		return Temperature;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <AHT10_Temp+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	ee07 3a90 	vmov	s15, r3
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000374 	.word	0x20000374
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000208 	.word	0x20000208
 80010dc:	20000210 	.word	0x20000210
 80010e0:	40690000 	.word	0x40690000
 80010e4:	41300000 	.word	0x41300000
 80010e8:	42480000 	.word	0x42480000
 80010ec:	20000214 	.word	0x20000214

080010f0 <Error_Handler>:
	TEMP_INICIAL, TEMP_BAJA, TEMP_NORMAL, TEMP_ALTA, DEFAULT,
} TEMPState_t;

static void Error_Handler(void);

static void Error_Handler(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 f991 	bl	800241c <BSP_LED_On>
	while (1) {
 80010fa:	e7fe      	b.n	80010fa <Error_Handler+0xa>

080010fc <TEMPFSM_init>:
static TEMPState_t EstadoActual;
//static bool_t btnPres; //boton presionado
//static bool_t btnPres1; //boton presionado
//static bool_t btnPres2; //boton presionado

void TEMPFSM_init(conf_temp *conf_T) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	if (conf_T == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <TEMPFSM_init+0x12>
		Error_Handler();
 800110a:	f7ff fff1 	bl	80010f0 <Error_Handler>

	EstadoActual = TEMP_INICIAL;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <TEMPFSM_init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	//EstadoActual=DEFAULT;
	//printf("\033[2Jinicio\n");
	//printf("Temp_Init:%0.1f\n\r",AHT10_Temp() );
	temp_N_min = (conf_T->temp_normal - conf_T->temp_min);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a01 	vldr	s14, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <TEMPFSM_init+0x5c>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
	temp_N_max = (conf_T->temp_max - conf_T->temp_normal);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a01 	vldr	s15, [r3, #4]
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <TEMPFSM_init+0x60>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
	delayInit(&t5, Time_SENSOR);
 8001140:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <TEMPFSM_init+0x64>)
 8001146:	f000 ffaf 	bl	80020a8 <delayInit>

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002ac 	.word	0x200002ac
 8001158:	20000220 	.word	0x20000220
 800115c:	2000021c 	.word	0x2000021c
 8001160:	20000228 	.word	0x20000228

08001164 <TEMPFSM_update>:

void TEMPFSM_update(conf_temp *conf_T) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]




	switch (EstadoActual) {
 800116c:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <TEMPFSM_update+0x270>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	f200 81b5 	bhi.w	80014e0 <TEMPFSM_update+0x37c>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <TEMPFSM_update+0x18>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001235 	.word	0x08001235
 8001184:	0800130b 	.word	0x0800130b
 8001188:	0800140d 	.word	0x0800140d

	case TEMP_INICIAL:
		//printf("\033[2Jinicio\n");
		delayRead(&t5);
 800118c:	4892      	ldr	r0, [pc, #584]	; (80013d8 <TEMPFSM_update+0x274>)
 800118e:	f000 ffa2 	bl	80020d6 <delayRead>
		if (AHT10_Temp() < conf_T->temp_min) { //&& AHT10_Temp() < conf_T->temp_normal)
 8001192:	f7ff ff43 	bl	800101c <AHT10_Temp>
 8001196:	eeb0 7a40 	vmov.f32	s14, s0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	d505      	bpl.n	80011b6 <TEMPFSM_update+0x52>
			EstadoActual = TEMP_BAJA;
 80011aa:	4b8a      	ldr	r3, [pc, #552]	; (80013d4 <TEMPFSM_update+0x270>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
			temp_low_flag = true;
 80011b0:	4b8a      	ldr	r3, [pc, #552]	; (80013dc <TEMPFSM_update+0x278>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
			 printf("Temp2:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp3:%0.1f\n\r", conf_T->temp_min);*/
			//printf("Temp:%0.1f\n\r", conf_T->temp_min);
		}

		if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max)
 80011b6:	f7ff ff31 	bl	800101c <AHT10_Temp>
 80011ba:	eef0 6a40 	vmov.f32	s13, s0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011c4:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <TEMPFSM_update+0x27c>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d819      	bhi.n	800120c <TEMPFSM_update+0xa8>
				&& AHT10_Temp() >= (conf_T->temp_normal - temp_N_min)) {
 80011d8:	f7ff ff20 	bl	800101c <AHT10_Temp>
 80011dc:	eef0 6a40 	vmov.f32	s13, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <TEMPFSM_update+0x280>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	db08      	blt.n	800120c <TEMPFSM_update+0xa8>
			EstadoActual = TEMP_NORMAL;
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <TEMPFSM_update+0x270>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	701a      	strb	r2, [r3, #0]
			temp_high_flag = false;
 8001200:	4b79      	ldr	r3, [pc, #484]	; (80013e8 <TEMPFSM_update+0x284>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
			temp_low_flag = false;
 8001206:	4b75      	ldr	r3, [pc, #468]	; (80013dc <TEMPFSM_update+0x278>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
			/*printf("Temp4:%0.1f\n\r", conf_T->temp_max);
			 printf("Temp5:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp6:%0.1f\n\r", conf_T->temp_min);*/
		}
		if (AHT10_Temp() > conf_T->temp_max) { //|| AHT10_Temp() > (conf_T->temp_normal + 1)
 800120c:	f7ff ff06 	bl	800101c <AHT10_Temp>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a02 	vldr	s15, [r3, #8]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dc00      	bgt.n	8001226 <TEMPFSM_update+0xc2>
			 printf("Temp8:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp9:%0.1f\n\r", conf_T->temp_min);*/

		}

		break;
 8001224:	e165      	b.n	80014f2 <TEMPFSM_update+0x38e>
			EstadoActual = TEMP_ALTA;
 8001226:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <TEMPFSM_update+0x270>)
 8001228:	2203      	movs	r2, #3
 800122a:	701a      	strb	r2, [r3, #0]
			temp_high_flag = true;
 800122c:	4b6e      	ldr	r3, [pc, #440]	; (80013e8 <TEMPFSM_update+0x284>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
		break;
 8001232:	e15e      	b.n	80014f2 <TEMPFSM_update+0x38e>

	case TEMP_BAJA:

		if (delayRead(&t5)) { // se cumplio los 200 ms
 8001234:	4868      	ldr	r0, [pc, #416]	; (80013d8 <TEMPFSM_update+0x274>)
 8001236:	f000 ff4e 	bl	80020d6 <delayRead>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8153 	beq.w	80014e8 <TEMPFSM_update+0x384>

			//temp_state = AHT10_Temp();
			printf("\033[2JTemp Baja\n"
					"Temp:%0.1f\n", AHT10_Temp());
 8001242:	f7ff feeb 	bl	800101c <AHT10_Temp>
 8001246:	ee10 3a10 	vmov	r3, s0
			printf("\033[2JTemp Baja\n"
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f98c 	bl	8000568 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4865      	ldr	r0, [pc, #404]	; (80013ec <TEMPFSM_update+0x288>)
 8001256:	f004 ff8b 	bl	8006170 <iprintf>
			//	Lcd_Clear();

			sprintf(cadena4, "T:%0.1f", AHT10_Temp());
 800125a:	f7ff fedf 	bl	800101c <AHT10_Temp>
 800125e:	ee10 3a10 	vmov	r3, s0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f980 	bl	8000568 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4960      	ldr	r1, [pc, #384]	; (80013f0 <TEMPFSM_update+0x28c>)
 800126e:	4861      	ldr	r0, [pc, #388]	; (80013f4 <TEMPFSM_update+0x290>)
 8001270:	f004 ffec 	bl	800624c <siprintf>
			Lcd_Write_String(cadena4, 2, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2102      	movs	r1, #2
 8001278:	485e      	ldr	r0, [pc, #376]	; (80013f4 <TEMPFSM_update+0x290>)
 800127a:	f000 fa77 	bl	800176c <Lcd_Write_String>
			Lcd_Write_String("Temp Baja  ", 3, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2103      	movs	r1, #3
 8001282:	485d      	ldr	r0, [pc, #372]	; (80013f8 <TEMPFSM_update+0x294>)
 8001284:	f000 fa72 	bl	800176c <Lcd_Write_String>
			//delayRead(&t5); //comienza de nuevo el timer

			//buttonPressed1(); //se activa para calefaccionar el ambiente
			if (AHT10_Temp() < conf_T->temp_min) {
 8001288:	f7ff fec8 	bl	800101c <AHT10_Temp>
 800128c:	eeb0 7a40 	vmov.f32	s14, s0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d50c      	bpl.n	80012ba <TEMPFSM_update+0x156>
				EstadoActual = TEMP_BAJA;
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <TEMPFSM_update+0x270>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
				if (temp_low_flag) {
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <TEMPFSM_update+0x278>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <TEMPFSM_update+0x156>

					temp_low_flag = false;
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <TEMPFSM_update+0x278>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
					temp_low = true;
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <TEMPFSM_update+0x298>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
				}
			}
				if (AHT10_Temp() >= (conf_T->temp_normal - temp_N_min)) {
 80012ba:	f7ff feaf 	bl	800101c <AHT10_Temp>
 80012be:	eef0 6a40 	vmov.f32	s13, s0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <TEMPFSM_update+0x280>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	db0f      	blt.n	80012fc <TEMPFSM_update+0x198>

					EstadoActual = TEMP_NORMAL;
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <TEMPFSM_update+0x270>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
					if (!temp_low_flag) {
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <TEMPFSM_update+0x278>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <TEMPFSM_update+0x198>

						temp_low_flag = true;
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <TEMPFSM_update+0x278>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
						temp_low = true;
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <TEMPFSM_update+0x298>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]

				}

				//BSP_LED_On(LED2);
				//BSP_LED_Off(LED3);
				BSP_LED_Off(LED1);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f001 f8a7 	bl	8002450 <BSP_LED_Off>

				delayRead(&t5);
 8001302:	4835      	ldr	r0, [pc, #212]	; (80013d8 <TEMPFSM_update+0x274>)
 8001304:	f000 fee7 	bl	80020d6 <delayRead>
			}
			break;
 8001308:	e0ee      	b.n	80014e8 <TEMPFSM_update+0x384>

			case TEMP_NORMAL:

			if (delayRead(&t5)) { // se cumplio los 40 ms
 800130a:	4833      	ldr	r0, [pc, #204]	; (80013d8 <TEMPFSM_update+0x274>)
 800130c:	f000 fee3 	bl	80020d6 <delayRead>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80ea 	beq.w	80014ec <TEMPFSM_update+0x388>
				printf("\033[2J  Temp Normal\n Temp:%0.1f\n", AHT10_Temp());
 8001318:	f7ff fe80 	bl	800101c <AHT10_Temp>
 800131c:	ee10 3a10 	vmov	r3, s0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f921 	bl	8000568 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <TEMPFSM_update+0x29c>)
 800132c:	f004 ff20 	bl	8006170 <iprintf>
				sprintf(cadena7,"T:%0.1f",AHT10_Temp());
 8001330:	f7ff fe74 	bl	800101c <AHT10_Temp>
 8001334:	ee10 3a10 	vmov	r3, s0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f915 	bl	8000568 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	492b      	ldr	r1, [pc, #172]	; (80013f0 <TEMPFSM_update+0x28c>)
 8001344:	482f      	ldr	r0, [pc, #188]	; (8001404 <TEMPFSM_update+0x2a0>)
 8001346:	f004 ff81 	bl	800624c <siprintf>
				Lcd_Write_String(cadena7,2,1);
 800134a:	2201      	movs	r2, #1
 800134c:	2102      	movs	r1, #2
 800134e:	482d      	ldr	r0, [pc, #180]	; (8001404 <TEMPFSM_update+0x2a0>)
 8001350:	f000 fa0c 	bl	800176c <Lcd_Write_String>
				Lcd_Write_String("Temp Normal",3,1);
 8001354:	2201      	movs	r2, #1
 8001356:	2103      	movs	r1, #3
 8001358:	482b      	ldr	r0, [pc, #172]	; (8001408 <TEMPFSM_update+0x2a4>)
 800135a:	f000 fa07 	bl	800176c <Lcd_Write_String>
				if (AHT10_Temp() > (conf_T->temp_normal + temp_N_max)) {
 800135e:	f7ff fe5d 	bl	800101c <AHT10_Temp>
 8001362:	eef0 6a40 	vmov.f32	s13, s0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a01 	vldr	s14, [r3, #4]
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <TEMPFSM_update+0x27c>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001376:	eef4 6ae7 	vcmpe.f32	s13, s15
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	dd05      	ble.n	800138c <TEMPFSM_update+0x228>
					EstadoActual = TEMP_ALTA;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <TEMPFSM_update+0x270>)
 8001382:	2203      	movs	r2, #3
 8001384:	701a      	strb	r2, [r3, #0]
					temp_high_flag = true;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <TEMPFSM_update+0x284>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
				}

				if (AHT10_Temp() < (conf_T->temp_normal - temp_N_min)) {
 800138c:	f7ff fe46 	bl	800101c <AHT10_Temp>
 8001390:	eef0 6a40 	vmov.f32	s13, s0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a01 	vldr	s14, [r3, #4]
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <TEMPFSM_update+0x280>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d505      	bpl.n	80013ba <TEMPFSM_update+0x256>
					EstadoActual = TEMP_BAJA;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <TEMPFSM_update+0x270>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
					temp_low_flag = true;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <TEMPFSM_update+0x278>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]

				//if (AHT10_Temp() < (conf_T->temp_normal + 1) )//&& AHT10_Temp() > (conf_T->temp_normal - 1)
				//	EstadoActual = TEMP_NORMAL;
				//buttonPressed1(); //se desactiva para calefaccionar el ambiente
				//BSP_LED_On(LED2);
				BSP_LED_Off(LED3);
 80013ba:	2002      	movs	r0, #2
 80013bc:	f001 f848 	bl	8002450 <BSP_LED_Off>
				BSP_LED_On(LED1);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f001 f82b 	bl	800241c <BSP_LED_On>
				BSP_LED_Off(LED2);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f001 f842 	bl	8002450 <BSP_LED_Off>

				delayRead(&t5);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TEMPFSM_update+0x274>)
 80013ce:	f000 fe82 	bl	80020d6 <delayRead>
			}

			//BSP_LED_On(LED2);

			//delayWrite(&t1, Time_AntiRebote);
			break;
 80013d2:	e08b      	b.n	80014ec <TEMPFSM_update+0x388>
 80013d4:	200002ac 	.word	0x200002ac
 80013d8:	20000228 	.word	0x20000228
 80013dc:	20000227 	.word	0x20000227
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	20000220 	.word	0x20000220
 80013e8:	20000226 	.word	0x20000226
 80013ec:	08009ba0 	.word	0x08009ba0
 80013f0:	08009bbc 	.word	0x08009bbc
 80013f4:	20000234 	.word	0x20000234
 80013f8:	08009bc4 	.word	0x08009bc4
 80013fc:	20000225 	.word	0x20000225
 8001400:	08009bd0 	.word	0x08009bd0
 8001404:	2000025c 	.word	0x2000025c
 8001408:	08009bf0 	.word	0x08009bf0
			case TEMP_ALTA:

			if (delayRead(&t5)) {
 800140c:	483b      	ldr	r0, [pc, #236]	; (80014fc <TEMPFSM_update+0x398>)
 800140e:	f000 fe62 	bl	80020d6 <delayRead>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06b      	beq.n	80014f0 <TEMPFSM_update+0x38c>
				printf("\033[2JTemp Alta\n"
						"Temp:%0.1f\n", AHT10_Temp());
 8001418:	f7ff fe00 	bl	800101c <AHT10_Temp>
 800141c:	ee10 3a10 	vmov	r3, s0
				printf("\033[2JTemp Alta\n"
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f8a1 	bl	8000568 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4835      	ldr	r0, [pc, #212]	; (8001500 <TEMPFSM_update+0x39c>)
 800142c:	f004 fea0 	bl	8006170 <iprintf>
				sprintf(cadena8,"T:%0.1f",AHT10_Temp());
 8001430:	f7ff fdf4 	bl	800101c <AHT10_Temp>
 8001434:	ee10 3a10 	vmov	r3, s0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f895 	bl	8000568 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4930      	ldr	r1, [pc, #192]	; (8001504 <TEMPFSM_update+0x3a0>)
 8001444:	4830      	ldr	r0, [pc, #192]	; (8001508 <TEMPFSM_update+0x3a4>)
 8001446:	f004 ff01 	bl	800624c <siprintf>
				Lcd_Write_String(cadena8,2,1);
 800144a:	2201      	movs	r2, #1
 800144c:	2102      	movs	r1, #2
 800144e:	482e      	ldr	r0, [pc, #184]	; (8001508 <TEMPFSM_update+0x3a4>)
 8001450:	f000 f98c 	bl	800176c <Lcd_Write_String>
				Lcd_Write_String("Temp Alta  ",3,1);
 8001454:	2201      	movs	r2, #1
 8001456:	2103      	movs	r1, #3
 8001458:	482c      	ldr	r0, [pc, #176]	; (800150c <TEMPFSM_update+0x3a8>)
 800145a:	f000 f987 	bl	800176c <Lcd_Write_String>
				//	temp_state = AHT10_Temp();

				//comienza de nuevo el timer

				if (AHT10_Temp() > conf_T->temp_max) {
 800145e:	f7ff fddd 	bl	800101c <AHT10_Temp>
 8001462:	eeb0 7a40 	vmov.f32	s14, s0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a02 	vldr	s15, [r3, #8]
 800146c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	dd0c      	ble.n	8001490 <TEMPFSM_update+0x32c>
					EstadoActual = TEMP_ALTA;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <TEMPFSM_update+0x3ac>)
 8001478:	2203      	movs	r2, #3
 800147a:	701a      	strb	r2, [r3, #0]
					if (temp_high_flag) {
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <TEMPFSM_update+0x3b0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <TEMPFSM_update+0x32c>

						temp_high_flag = false;
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <TEMPFSM_update+0x3b0>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
						temp_high = true;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <TEMPFSM_update+0x3b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
					}
				}

				if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max)) {
 8001490:	f7ff fdc4 	bl	800101c <AHT10_Temp>
 8001494:	eef0 6a40 	vmov.f32	s13, s0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a01 	vldr	s14, [r3, #4]
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <TEMPFSM_update+0x3b8>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d80f      	bhi.n	80014d2 <TEMPFSM_update+0x36e>
					EstadoActual = TEMP_NORMAL;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <TEMPFSM_update+0x3ac>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	701a      	strb	r2, [r3, #0]
					if (!temp_high_flag) {
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <TEMPFSM_update+0x3b0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <TEMPFSM_update+0x36e>

						temp_high_flag = true;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <TEMPFSM_update+0x3b0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
						temp_high = true;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <TEMPFSM_update+0x3b4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
					}
				}

				//BSP_LED_Off(LED2);
				//buttonReleased1();
				BSP_LED_Off(LED1); //
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 ffbc 	bl	8002450 <BSP_LED_Off>
				//BSP_LED_On(LED3); //Enfriamos el ambiente para llevarlo a la temperatura normal
				delayRead(&t5); //tiempo de muestro para obtener datos del AHT10
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <TEMPFSM_update+0x398>)
 80014da:	f000 fdfc 	bl	80020d6 <delayRead>
			}

			break;
 80014de:	e007      	b.n	80014f0 <TEMPFSM_update+0x38c>
			default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			TEMPFSM_init(conf_T);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe0b 	bl	80010fc <TEMPFSM_init>

			break;
 80014e6:	e004      	b.n	80014f2 <TEMPFSM_update+0x38e>
			break;
 80014e8:	bf00      	nop
 80014ea:	e002      	b.n	80014f2 <TEMPFSM_update+0x38e>
			break;
 80014ec:	bf00      	nop
 80014ee:	e000      	b.n	80014f2 <TEMPFSM_update+0x38e>
			break;
 80014f0:	bf00      	nop



		}
	}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000228 	.word	0x20000228
 8001500:	08009bfc 	.word	0x08009bfc
 8001504:	08009bbc 	.word	0x08009bbc
 8001508:	20000284 	.word	0x20000284
 800150c:	08009c18 	.word	0x08009c18
 8001510:	200002ac 	.word	0x200002ac
 8001514:	20000226 	.word	0x20000226
 8001518:	20000224 	.word	0x20000224
 800151c:	2000021c 	.word	0x2000021c

08001520 <Detecto_TempHigh>:

void buttonReleased1() {
	BSP_LED_Off(LED2);
}

bool_t Detecto_TempHigh() {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

	if (temp_high) {
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <Detecto_TempHigh+0x24>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <Detecto_TempHigh+0x16>
		temp_high = false;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <Detecto_TempHigh+0x24>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
		return true;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <Detecto_TempHigh+0x18>
	}

	else
		return false;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000224 	.word	0x20000224

08001548 <Detecto_TempLow>:

bool_t Detecto_TempLow() {
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

	if (temp_low) {
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <Detecto_TempLow+0x24>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <Detecto_TempLow+0x16>
		temp_low = false;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <Detecto_TempLow+0x24>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
		return true;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <Detecto_TempLow+0x18>
	} else
		return false;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000225 	.word	0x20000225

08001570 <GPIO_Init>:
#define GPIOB_CLK_EN    __HAL_RCC_GPIOB_CLK_ENABLE()
#define GPIOE_CLK_EN    __HAL_RCC_GPIOE_CLK_ENABLE()


void GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStructE = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
 // __HAL_RCC_GPIOD_CLK_ENABLE();
 // __HAL_RCC_GPIOB_CLK_ENABLE();
 // __HAL_RCC_GPIOE_CLK_ENABLE();
	GPIOD_CLK_EN;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <GPIO_Init+0x90>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <GPIO_Init+0x90>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <GPIO_Init+0x90>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
	GPIOB_CLK_EN;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <GPIO_Init+0x90>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <GPIO_Init+0x90>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <GPIO_Init+0x90>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
	GPIOE_CLK_EN;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <GPIO_Init+0x90>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <GPIO_Init+0x90>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <GPIO_Init+0x90>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
    GPIO_InitStructE.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;;
 80015da:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80015de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructE.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructE.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PORT_E , &GPIO_InitStructE);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <GPIO_Init+0x94>)
 80015f4:	f001 fa82 	bl	8002afc <HAL_GPIO_Init>

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40021000 	.word	0x40021000

08001608 <ButtonGet_1>:

bool_t ButtonGet_1(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)){
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_10 )){
 800160c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <ButtonGet_1+0x20>)
 8001612:	f001 fc1f 	bl	8002e54 <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <ButtonGet_1+0x18>
		return true;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <ButtonGet_1+0x1a>
	}


	return false;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <ButtonGet_2>:

bool_t ButtonGet_2(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_12 )){
 8001630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <ButtonGet_2+0x20>)
 8001636:	f001 fc0d 	bl	8002e54 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <ButtonGet_2+0x18>
		return true;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <ButtonGet_2+0x1a>
	}


	return false;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <ButtonGet_3>:

bool_t ButtonGet_3(){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_14 )){
 8001654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <ButtonGet_3+0x20>)
 800165a:	f001 fbfb 	bl	8002e54 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <ButtonGet_3+0x18>
		return true;
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <ButtonGet_3+0x1a>
	}


	return false;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <ButtonGet_4>:

bool_t ButtonGet_4(){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_15))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_15 )){
 8001678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <ButtonGet_4+0x20>)
 800167e:	f001 fbe9 	bl	8002e54 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <ButtonGet_4+0x18>
		return true;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <ButtonGet_4+0x1a>
	}


	return false;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <Lcd_Cmd>:




static void Lcd_Cmd(char cmd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]


        comando=true;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <Lcd_Cmd+0x28>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
		Enviar4bitWrite(cmd,comando);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <Lcd_Cmd+0x28>)
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f89b 	bl	80017ec <Enviar4bitWrite>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000003 	.word	0x20000003

080016c4 <Lcd_Char>:

static void Lcd_Char(char data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]

			comando=false;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <Lcd_Char+0x28>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			Enviar4bitWrite(data,comando);
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <Lcd_Char+0x28>)
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f885 	bl	80017ec <Enviar4bitWrite>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000003 	.word	0x20000003

080016f0 <Lcd_Init>:

void Lcd_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	//HAL_Delay(60);


	for(unsigned char i=0; i<3; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e008      	b.n	800170e <Lcd_Init+0x1e>
		Lcd_Cmd(0x03);         //Inicializa
 80016fc:	2003      	movs	r0, #3
 80016fe:	f7ff ffcb 	bl	8001698 <Lcd_Cmd>
		HAL_Delay(5);
 8001702:	2005      	movs	r0, #5
 8001704:	f001 f8c4 	bl	8002890 <HAL_Delay>
	for(unsigned char i=0; i<3; i++){
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	3301      	adds	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d9f3      	bls.n	80016fc <Lcd_Init+0xc>
		}


	        HAL_Delay(60);
 8001714:	203c      	movs	r0, #60	; 0x3c
 8001716:	f001 f8bb 	bl	8002890 <HAL_Delay>
			Lcd_Cmd(0x02); //return home
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff ffbc 	bl	8001698 <Lcd_Cmd>
			HAL_Delay(5);
 8001720:	2005      	movs	r0, #5
 8001722:	f001 f8b5 	bl	8002890 <HAL_Delay>
			Lcd_Cmd(0x28);  //Configura el LCD a 4 Bits, 2 Lineas Y Fuente de 5*7
 8001726:	2028      	movs	r0, #40	; 0x28
 8001728:	f7ff ffb6 	bl	8001698 <Lcd_Cmd>
		    HAL_Delay(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f001 f8af 	bl	8002890 <HAL_Delay>
			Lcd_Cmd(0x0C); //display ON cursor OFF
 8001732:	200c      	movs	r0, #12
 8001734:	f7ff ffb0 	bl	8001698 <Lcd_Cmd>
			HAL_Delay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f001 f8a9 	bl	8002890 <HAL_Delay>
			Lcd_Cmd(0x80); //cursor a primera linea
 800173e:	2080      	movs	r0, #128	; 0x80
 8001740:	f7ff ffaa 	bl	8001698 <Lcd_Cmd>
		    HAL_Delay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 f8a3 	bl	8002890 <HAL_Delay>
			Lcd_Cmd(0x01); //clear display
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff ffa4 	bl	8001698 <Lcd_Cmd>



}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <Lcd_Clear>:

void Lcd_Clear(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	Lcd_Cmd(0x01);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff ff9b 	bl	8001698 <Lcd_Cmd>
	HAL_Delay(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f001 f894 	bl	8002890 <HAL_Delay>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <Lcd_Write_String>:
	Lcd_Send_Cmd(0x80 | address); //0x80  es del comando set DDRAM bit7=1

}*/

void Lcd_Write_String(char *str,int fila, int col)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]

	uint8_t address;
	uint8_t vectorf[4]={0x00,0x40,0x14,0x54}; //posiciones memoria para cada fila
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <Lcd_Write_String+0x70>)
 800177a:	613b      	str	r3, [r7, #16]

	for(uint8_t i=0; i<fila;i++){
 800177c:	2300      	movs	r3, #0
 800177e:	75bb      	strb	r3, [r7, #22]
 8001780:	e008      	b.n	8001794 <Lcd_Write_String+0x28>

		address=vectorf[i];
 8001782:	7dbb      	ldrb	r3, [r7, #22]
 8001784:	3318      	adds	r3, #24
 8001786:	443b      	add	r3, r7
 8001788:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800178c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<fila;i++){
 800178e:	7dbb      	ldrb	r3, [r7, #22]
 8001790:	3301      	adds	r3, #1
 8001792:	75bb      	strb	r3, [r7, #22]
 8001794:	7dbb      	ldrb	r3, [r7, #22]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	dcf2      	bgt.n	8001782 <Lcd_Write_String+0x16>

	}


		address = address+(col - 1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	4413      	add	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
		Lcd_Cmd(0x80 | address); //0x80  es del comando set DDRAM bit7=1
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff70 	bl	8001698 <Lcd_Cmd>

	while(*str) Lcd_Char(*str++);
 80017b8:	e006      	b.n	80017c8 <Lcd_Write_String+0x5c>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff7e 	bl	80016c4 <Lcd_Char>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f4      	bne.n	80017ba <Lcd_Write_String+0x4e>
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	54144000 	.word	0x54144000

080017e0 <Error_Handler>:


static void Error_Handler(void);

static void Error_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED3);
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 fe19 	bl	800241c <BSP_LED_On>
  while (1)
 80017ea:	e7fe      	b.n	80017ea <Error_Handler+0xa>

080017ec <Enviar4bitWrite>:
  {
  }
}

void Enviar4bitWrite(char data1,bool comando){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71bb      	strb	r3, [r7, #6]
	uint8_t data_t[4];
	char cmd=data1;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	73fb      	strb	r3, [r7, #15]
	char data=data1;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	73bb      	strb	r3, [r7, #14]
	if(comando){
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <Enviar4bitWrite+0x52>
		 data_t[0] =(cmd & 0xF0)+EN+BL; //EN=1 Bl=1    |0x0C 1
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	f023 030f 	bic.w	r3, r3, #15
 8001810:	b2db      	uxtb	r3, r3
 8001812:	330c      	adds	r3, #12
 8001814:	b2db      	uxtb	r3, r3
 8001816:	723b      	strb	r3, [r7, #8]
				data_t[1] = (cmd & 0xF0)+BL;  //EN=0 Bl=1
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	f023 030f 	bic.w	r3, r3, #15
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3308      	adds	r3, #8
 8001822:	b2db      	uxtb	r3, r3
 8001824:	727b      	strb	r3, [r7, #9]
				data_t[2] = ((cmd<<4) & 0xF0)+EN+BL; //EN=1 Bl=1 control=0    |0x0C 1
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	b2db      	uxtb	r3, r3
 800182c:	330c      	adds	r3, #12
 800182e:	b2db      	uxtb	r3, r3
 8001830:	72bb      	strb	r3, [r7, #10]
				data_t[3] = ((cmd<<4) & 0xF0)+BL; //EN=1 Bl=1 control=0    |0x0C 1
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3308      	adds	r3, #8
 800183a:	b2db      	uxtb	r3, r3
 800183c:	72fb      	strb	r3, [r7, #11]
	}

	if(!comando){
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <Enviar4bitWrite+0x92>
		        data_t[0] =(data & 0xF0)+EN+BL+W; //EN=1 Bl=1
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	f023 030f 	bic.w	r3, r3, #15
 8001850:	b2db      	uxtb	r3, r3
 8001852:	330d      	adds	r3, #13
 8001854:	b2db      	uxtb	r3, r3
 8001856:	723b      	strb	r3, [r7, #8]
				data_t[1] = (data& 0xF0)+BL+W;  //EN=0 Bl=1
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	f023 030f 	bic.w	r3, r3, #15
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3309      	adds	r3, #9
 8001862:	b2db      	uxtb	r3, r3
 8001864:	727b      	strb	r3, [r7, #9]
				data_t[2] = ((data<<4) & 0xF0)+EN+BL+W; //EN=1 Bl=1 W=1 datos
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	b2db      	uxtb	r3, r3
 800186c:	330d      	adds	r3, #13
 800186e:	b2db      	uxtb	r3, r3
 8001870:	72bb      	strb	r3, [r7, #10]
				data_t[3] = ((data<<4) & 0xF0)+BL+W; //EN=1 Bl=1
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3309      	adds	r3, #9
 800187a:	b2db      	uxtb	r3, r3
 800187c:	72fb      	strb	r3, [r7, #11]
	}


	returnValue=HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS,(uint8_t*) data_t, 4, 100);
 800187e:	f107 0208 	add.w	r2, r7, #8
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2304      	movs	r3, #4
 8001888:	214e      	movs	r1, #78	; 0x4e
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <Enviar4bitWrite+0xc0>)
 800188c:	f001 fc7c 	bl	8003188 <HAL_I2C_Master_Transmit>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <Enviar4bitWrite+0xc4>)
 8001896:	701a      	strb	r2, [r3, #0]
	if(returnValue != HAL_OK){
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <Enviar4bitWrite+0xc4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <Enviar4bitWrite+0xb8>
		Error_Handler();
 80018a0:	f7ff ff9e 	bl	80017e0 <Error_Handler>

}
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000320 	.word	0x20000320
 80018b0:	200002ad 	.word	0x200002ad

080018b4 <Conf_update>:

		}
	} while (data1 == 1);
}

void Conf_update() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

	uint8_t flag_next = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71fb      	strb	r3, [r7, #7]
	printf("\033[2J");
 80018be:	483f      	ldr	r0, [pc, #252]	; (80019bc <Conf_update+0x108>)
 80018c0:	f004 fc56 	bl	8006170 <iprintf>
	printf("\033[2J Temp Min:\n"
 80018c4:	483e      	ldr	r0, [pc, #248]	; (80019c0 <Conf_update+0x10c>)
 80018c6:	f004 fcb9 	bl	800623c <puts>
			"Temp Normal:\n"
			"Temp Max:\n");
	Lcd_Clear();
 80018ca:	f7ff ff45 	bl	8001758 <Lcd_Clear>
	Lcd_Write_String("Sensor AHT10",1,3);
 80018ce:	2203      	movs	r2, #3
 80018d0:	2101      	movs	r1, #1
 80018d2:	483c      	ldr	r0, [pc, #240]	; (80019c4 <Conf_update+0x110>)
 80018d4:	f7ff ff4a 	bl	800176c <Lcd_Write_String>
	Lcd_Write_String("Temp Min:",2,1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2102      	movs	r1, #2
 80018dc:	483a      	ldr	r0, [pc, #232]	; (80019c8 <Conf_update+0x114>)
 80018de:	f7ff ff45 	bl	800176c <Lcd_Write_String>
	Lcd_Write_String("Temp Normal:",3,1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2103      	movs	r1, #3
 80018e6:	4839      	ldr	r0, [pc, #228]	; (80019cc <Conf_update+0x118>)
 80018e8:	f7ff ff40 	bl	800176c <Lcd_Write_String>
	Lcd_Write_String("Temp Max:",4,1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2104      	movs	r1, #4
 80018f0:	4837      	ldr	r0, [pc, #220]	; (80019d0 <Conf_update+0x11c>)
 80018f2:	f7ff ff3b 	bl	800176c <Lcd_Write_String>

	do {

		switch (ESTADO) {
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <Conf_update+0x120>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d850      	bhi.n	80019a0 <Conf_update+0xec>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <Conf_update+0x50>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	0800192d 	.word	0x0800192d
 800190c:	08001941 	.word	0x08001941
 8001910:	08001951 	.word	0x08001951

		case CONF_TEMPMIN:
			flag_next = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	71fb      	strb	r3, [r7, #7]

			conf_temperatura(flag_next);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f862 	bl	80019e4 <conf_temperatura>

			flag_next = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	71fb      	strb	r3, [r7, #7]

			ESTADO = CONF_TEMPNORMAL;
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <Conf_update+0x120>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]

			break;
 800192a:	e03d      	b.n	80019a8 <Conf_update+0xf4>

		case CONF_TEMPNORMAL:

			conf_temperatura(flag_next);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f858 	bl	80019e4 <conf_temperatura>

			flag_next = 3;
 8001934:	2303      	movs	r3, #3
 8001936:	71fb      	strb	r3, [r7, #7]

			ESTADO = CONF_TEMPMAX;
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <Conf_update+0x120>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]

			break;
 800193e:	e033      	b.n	80019a8 <Conf_update+0xf4>

		case CONF_TEMPMAX:
			conf_temperatura(flag_next);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f84e 	bl	80019e4 <conf_temperatura>

			ESTADO = SALIDA;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <Conf_update+0x120>)
 800194a:	2203      	movs	r2, #3
 800194c:	701a      	strb	r2, [r3, #0]

			break;
 800194e:	e02b      	b.n	80019a8 <Conf_update+0xf4>

		case SALIDA:
			if (conf_T.temp_normal > conf_T.temp_min
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <Conf_update+0x124>)
 8001952:	ed93 7a01 	vldr	s14, [r3, #4]
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <Conf_update+0x124>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	dd15      	ble.n	8001992 <Conf_update+0xde>
					&& conf_T.temp_normal < conf_T.temp_max){
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <Conf_update+0x124>)
 8001968:	ed93 7a01 	vldr	s14, [r3, #4]
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <Conf_update+0x124>)
 800196e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d50a      	bpl.n	8001992 <Conf_update+0xde>
				flag = false;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <Conf_update+0x128>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			Lcd_Clear();
 8001982:	f7ff fee9 	bl	8001758 <Lcd_Clear>
			Lcd_Write_String("Sensor AHT10",1,3);
 8001986:	2203      	movs	r2, #3
 8001988:	2101      	movs	r1, #1
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <Conf_update+0x110>)
 800198c:	f7ff feee 	bl	800176c <Lcd_Write_String>
			else {
				printf(
						"\033[2J Error!! vuelva a ingresar los datos nuevamente Temp Min < Temp Normal < Temp Max\n");
				ESTADO = CONF_TEMPMIN;
			}
			break;
 8001990:	e00a      	b.n	80019a8 <Conf_update+0xf4>
				printf(
 8001992:	4813      	ldr	r0, [pc, #76]	; (80019e0 <Conf_update+0x12c>)
 8001994:	f004 fc52 	bl	800623c <puts>
				ESTADO = CONF_TEMPMIN;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <Conf_update+0x120>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
			break;
 800199e:	e003      	b.n	80019a8 <Conf_update+0xf4>
		default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			ESTADO = CONF_TEMPMIN;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <Conf_update+0x120>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

			break;
 80019a6:	bf00      	nop

		}

	}

	while (flag == true);
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <Conf_update+0x128>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1a2      	bne.n	80018f6 <Conf_update+0x42>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	08009d10 	.word	0x08009d10
 80019c0:	08009d18 	.word	0x08009d18
 80019c4:	08009d40 	.word	0x08009d40
 80019c8:	08009d50 	.word	0x08009d50
 80019cc:	08009d5c 	.word	0x08009d5c
 80019d0:	08009d6c 	.word	0x08009d6c
 80019d4:	200002ae 	.word	0x200002ae
 80019d8:	200002b0 	.word	0x200002b0
 80019dc:	20000004 	.word	0x20000004
 80019e0:	08009d78 	.word	0x08009d78

080019e4 <conf_temperatura>:

static void conf_temperatura(uint8_t flag1) {
 80019e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af04      	add	r7, sp, #16
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]

	do {
		debounceFSM_update();
 80019f0:	f000 fa34 	bl	8001e5c <debounceFSM_update>

		if (readKey_Up()) {
 80019f4:	f000 fb16 	bl	8002024 <readKey_Up>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80f0 	beq.w	8001be0 <conf_temperatura+0x1fc>

			if (flag1 == 1) {
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d14c      	bne.n	8001aa0 <conf_temperatura+0xbc>

				if (conf_T.temp_min >= tempmin && conf_T.temp_min < tempmax) {
 8001a06:	4bb6      	ldr	r3, [pc, #728]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	db44      	blt.n	8001aa0 <conf_temperatura+0xbc>
 8001a16:	4bb2      	ldr	r3, [pc, #712]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d53a      	bpl.n	8001aa0 <conf_temperatura+0xbc>
					conf_T.temp_min = conf_T.temp_min + res_temp;
 8001a2a:	4bad      	ldr	r3, [pc, #692]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a38:	4ba9      	ldr	r3, [pc, #676]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
					printf("\033[2J");
 8001a3e:	48a9      	ldr	r0, [pc, #676]	; (8001ce4 <conf_temperatura+0x300>)
 8001a40:	f004 fb96 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f <--\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f\n", conf_T.temp_min,
 8001a44:	4ba6      	ldr	r3, [pc, #664]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd8d 	bl	8000568 <__aeabi_f2d>
 8001a4e:	4680      	mov	r8, r0
 8001a50:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001a52:	4ba3      	ldr	r3, [pc, #652]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a54:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd86 	bl	8000568 <__aeabi_f2d>
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001a60:	4b9f      	ldr	r3, [pc, #636]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd7f 	bl	8000568 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a72:	e9cd 4500 	strd	r4, r5, [sp]
 8001a76:	4642      	mov	r2, r8
 8001a78:	464b      	mov	r3, r9
 8001a7a:	489b      	ldr	r0, [pc, #620]	; (8001ce8 <conf_temperatura+0x304>)
 8001a7c:	f004 fb78 	bl	8006170 <iprintf>
					 sprintf(cadena1,"Temp Min:%0.1f",conf_T.temp_min);
 8001a80:	4b97      	ldr	r3, [pc, #604]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd6f 	bl	8000568 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4997      	ldr	r1, [pc, #604]	; (8001cec <conf_temperatura+0x308>)
 8001a90:	4897      	ldr	r0, [pc, #604]	; (8001cf0 <conf_temperatura+0x30c>)
 8001a92:	f004 fbdb 	bl	800624c <siprintf>
					// sprintf(cadena2,"Temp Normal:%0.1f",conf_T.temp_normal);
					// sprintf(cadena3,"Temp Max:%0.1f",conf_T.temp_max);
					 Lcd_Write_String(cadena1,2,1);
 8001a96:	2201      	movs	r2, #1
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4895      	ldr	r0, [pc, #596]	; (8001cf0 <conf_temperatura+0x30c>)
 8001a9c:	f7ff fe66 	bl	800176c <Lcd_Write_String>

				}

			}

			if (flag1 == 2) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d14c      	bne.n	8001b40 <conf_temperatura+0x15c>
				if (conf_T.temp_normal >= tempmin
 8001aa6:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	db44      	blt.n	8001b40 <conf_temperatura+0x15c>
						&& conf_T.temp_normal < tempmax) {
 8001ab6:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001ab8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001abc:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	d53a      	bpl.n	8001b40 <conf_temperatura+0x15c>
					conf_T.temp_normal = conf_T.temp_normal + res_temp;
 8001aca:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001acc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ad0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001ada:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 8001ade:	4881      	ldr	r0, [pc, #516]	; (8001ce4 <conf_temperatura+0x300>)
 8001ae0:	f004 fb46 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f \n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f \n"
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd3d 	bl	8000568 <__aeabi_f2d>
 8001aee:	4680      	mov	r8, r0
 8001af0:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001af2:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001af4:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f \n"
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd36 	bl	8000568 <__aeabi_f2d>
 8001afc:	4604      	mov	r4, r0
 8001afe:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001b00:	4b77      	ldr	r3, [pc, #476]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f \n"
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd2f 	bl	8000568 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b12:	e9cd 4500 	strd	r4, r5, [sp]
 8001b16:	4642      	mov	r2, r8
 8001b18:	464b      	mov	r3, r9
 8001b1a:	4876      	ldr	r0, [pc, #472]	; (8001cf4 <conf_temperatura+0x310>)
 8001b1c:	f004 fb28 	bl	8006170 <iprintf>
					 sprintf(cadena2,"Temp Normal:%0.1f",conf_T.temp_normal);
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd1f 	bl	8000568 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4972      	ldr	r1, [pc, #456]	; (8001cf8 <conf_temperatura+0x314>)
 8001b30:	4872      	ldr	r0, [pc, #456]	; (8001cfc <conf_temperatura+0x318>)
 8001b32:	f004 fb8b 	bl	800624c <siprintf>
					 Lcd_Write_String(cadena2,3,1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2103      	movs	r1, #3
 8001b3a:	4870      	ldr	r0, [pc, #448]	; (8001cfc <conf_temperatura+0x318>)
 8001b3c:	f7ff fe16 	bl	800176c <Lcd_Write_String>

				}
			}

			if (flag1 == 3) {
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d14c      	bne.n	8001be0 <conf_temperatura+0x1fc>
				if (conf_T.temp_max >= tempmin && conf_T.temp_max < tempmax) {
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	db44      	blt.n	8001be0 <conf_temperatura+0x1fc>
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b5c:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d53a      	bpl.n	8001be0 <conf_temperatura+0x1fc>
					conf_T.temp_max = conf_T.temp_max + res_temp;
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b7a:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 8001b7e:	4859      	ldr	r0, [pc, #356]	; (8001ce4 <conf_temperatura+0x300>)
 8001b80:	f004 faf6 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 8001b84:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fced 	bl	8000568 <__aeabi_f2d>
 8001b8e:	4680      	mov	r8, r0
 8001b90:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001b92:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001b94:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fce6 	bl	8000568 <__aeabi_f2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcdf 	bl	8000568 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bb2:	e9cd 4500 	strd	r4, r5, [sp]
 8001bb6:	4642      	mov	r2, r8
 8001bb8:	464b      	mov	r3, r9
 8001bba:	4851      	ldr	r0, [pc, #324]	; (8001d00 <conf_temperatura+0x31c>)
 8001bbc:	f004 fad8 	bl	8006170 <iprintf>
					sprintf(cadena3,"Temp Max:%0.1f",conf_T.temp_max);
 8001bc0:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fccf 	bl	8000568 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	494d      	ldr	r1, [pc, #308]	; (8001d04 <conf_temperatura+0x320>)
 8001bd0:	484d      	ldr	r0, [pc, #308]	; (8001d08 <conf_temperatura+0x324>)
 8001bd2:	f004 fb3b 	bl	800624c <siprintf>
					 Lcd_Write_String(cadena3,4,1);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2104      	movs	r1, #4
 8001bda:	484b      	ldr	r0, [pc, #300]	; (8001d08 <conf_temperatura+0x324>)
 8001bdc:	f7ff fdc6 	bl	800176c <Lcd_Write_String>
				}
			}

		}

		if (readKey_Down()) {
 8001be0:	f000 fa34 	bl	800204c <readKey_Down>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8109 	beq.w	8001dfe <conf_temperatura+0x41a>
			//Lcd_Set_Cursor(4, 2);
			//Lcd_Send_String("button_2");
			if (flag1 == 1) {
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d14c      	bne.n	8001c8c <conf_temperatura+0x2a8>
				if (conf_T.temp_min > tempmin && conf_T.temp_min <= tempmax) {
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd44      	ble.n	8001c8c <conf_temperatura+0x2a8>
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d83a      	bhi.n	8001c8c <conf_temperatura+0x2a8>
					conf_T.temp_min = conf_T.temp_min - res_temp;
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
					printf("\033[2J");
 8001c2a:	482e      	ldr	r0, [pc, #184]	; (8001ce4 <conf_temperatura+0x300>)
 8001c2c:	f004 faa0 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f <--\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc97 	bl	8000568 <__aeabi_f2d>
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c40:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc90 	bl	8000568 <__aeabi_f2d>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc89 	bl	8000568 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c62:	4642      	mov	r2, r8
 8001c64:	464b      	mov	r3, r9
 8001c66:	4829      	ldr	r0, [pc, #164]	; (8001d0c <conf_temperatura+0x328>)
 8001c68:	f004 fa82 	bl	8006170 <iprintf>
					 sprintf(cadena1,"Temp Min:%0.1f",conf_T.temp_min);
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc79 	bl	8000568 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	491c      	ldr	r1, [pc, #112]	; (8001cec <conf_temperatura+0x308>)
 8001c7c:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <conf_temperatura+0x30c>)
 8001c7e:	f004 fae5 	bl	800624c <siprintf>
					 Lcd_Write_String(cadena1,2,1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2102      	movs	r1, #2
 8001c86:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <conf_temperatura+0x30c>)
 8001c88:	f7ff fd70 	bl	800176c <Lcd_Write_String>

				}
			}

			if (flag1 == 2) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d165      	bne.n	8001d5e <conf_temperatura+0x37a>
				if (conf_T.temp_normal > tempmin
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	dd5d      	ble.n	8001d5e <conf_temperatura+0x37a>
						&& conf_T.temp_normal <= tempmax) {
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	d853      	bhi.n	8001d5e <conf_temperatura+0x37a>
					conf_T.temp_normal = conf_T.temp_normal - res_temp;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001cb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001cc6:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <conf_temperatura+0x300>)
 8001ccc:	f004 fa50 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <conf_temperatura+0x2fc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc47 	bl	8000568 <__aeabi_f2d>
 8001cda:	4680      	mov	r8, r0
 8001cdc:	4689      	mov	r9, r1
 8001cde:	e017      	b.n	8001d10 <conf_temperatura+0x32c>
 8001ce0:	200002b0 	.word	0x200002b0
 8001ce4:	08009d10 	.word	0x08009d10
 8001ce8:	08009dd0 	.word	0x08009dd0
 8001cec:	08009cdc 	.word	0x08009cdc
 8001cf0:	200002bc 	.word	0x200002bc
 8001cf4:	08009e0c 	.word	0x08009e0c
 8001cf8:	08009cec 	.word	0x08009cec
 8001cfc:	200002dc 	.word	0x200002dc
 8001d00:	08009e48 	.word	0x08009e48
 8001d04:	08009d00 	.word	0x08009d00
 8001d08:	200002fc 	.word	0x200002fc
 8001d0c:	08009e80 	.word	0x08009e80
							conf_T.temp_normal, conf_T.temp_max);
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <conf_temperatura+0x438>)
 8001d12:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc27 	bl	8000568 <__aeabi_f2d>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <conf_temperatura+0x438>)
 8001d20:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc20 	bl	8000568 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d30:	e9cd 4500 	strd	r4, r5, [sp]
 8001d34:	4642      	mov	r2, r8
 8001d36:	464b      	mov	r3, r9
 8001d38:	4839      	ldr	r0, [pc, #228]	; (8001e20 <conf_temperatura+0x43c>)
 8001d3a:	f004 fa19 	bl	8006170 <iprintf>
					 sprintf(cadena2,"Temp Normal:%0.1f",conf_T.temp_normal);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <conf_temperatura+0x438>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc10 	bl	8000568 <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <conf_temperatura+0x440>)
 8001d4e:	4836      	ldr	r0, [pc, #216]	; (8001e28 <conf_temperatura+0x444>)
 8001d50:	f004 fa7c 	bl	800624c <siprintf>
					 Lcd_Write_String(cadena2,3,1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2103      	movs	r1, #3
 8001d58:	4833      	ldr	r0, [pc, #204]	; (8001e28 <conf_temperatura+0x444>)
 8001d5a:	f7ff fd07 	bl	800176c <Lcd_Write_String>
				}
			}

			if (flag1 == 3) {
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d14c      	bne.n	8001dfe <conf_temperatura+0x41a>
				if (conf_T.temp_max > tempmin && conf_T.temp_max <= tempmax) {
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <conf_temperatura+0x438>)
 8001d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd44      	ble.n	8001dfe <conf_temperatura+0x41a>
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <conf_temperatura+0x438>)
 8001d76:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d7a:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d83a      	bhi.n	8001dfe <conf_temperatura+0x41a>
					conf_T.temp_max = conf_T.temp_max - res_temp;
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <conf_temperatura+0x438>)
 8001d8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <conf_temperatura+0x438>)
 8001d98:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 8001d9c:	4823      	ldr	r0, [pc, #140]	; (8001e2c <conf_temperatura+0x448>)
 8001d9e:	f004 f9e7 	bl	8006170 <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <conf_temperatura+0x438>)
 8001da4:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbde 	bl	8000568 <__aeabi_f2d>
 8001dac:	4680      	mov	r8, r0
 8001dae:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <conf_temperatura+0x438>)
 8001db2:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbd7 	bl	8000568 <__aeabi_f2d>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <conf_temperatura+0x438>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbd0 	bl	8000568 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dd0:	e9cd 4500 	strd	r4, r5, [sp]
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	4815      	ldr	r0, [pc, #84]	; (8001e30 <conf_temperatura+0x44c>)
 8001dda:	f004 f9c9 	bl	8006170 <iprintf>
					sprintf(cadena3,"Temp Max:%0.1f",conf_T.temp_max);
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <conf_temperatura+0x438>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbc0 	bl	8000568 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4911      	ldr	r1, [pc, #68]	; (8001e34 <conf_temperatura+0x450>)
 8001dee:	4812      	ldr	r0, [pc, #72]	; (8001e38 <conf_temperatura+0x454>)
 8001df0:	f004 fa2c 	bl	800624c <siprintf>
					Lcd_Write_String(cadena3,4,1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2104      	movs	r1, #4
 8001df8:	480f      	ldr	r0, [pc, #60]	; (8001e38 <conf_temperatura+0x454>)
 8001dfa:	f7ff fcb7 	bl	800176c <Lcd_Write_String>
				}
			}

		}

	} while (!readKey_enter());
 8001dfe:	f000 f939 	bl	8002074 <readKey_enter>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f47f adf0 	bne.w	80019f0 <conf_temperatura+0xc>

}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e1c:	200002b0 	.word	0x200002b0
 8001e20:	08009ebc 	.word	0x08009ebc
 8001e24:	08009cec 	.word	0x08009cec
 8001e28:	200002dc 	.word	0x200002dc
 8001e2c:	08009d10 	.word	0x08009d10
 8001e30:	08009e48 	.word	0x08009e48
 8001e34:	08009d00 	.word	0x08009d00
 8001e38:	200002fc 	.word	0x200002fc

08001e3c <debounceFSM_init>:
static debounceState_t EstadoActual;
static bool_t btnPress; //boton presionado
static bool_t btnPress1; //boton presionado
static bool_t btnPress2; //boton presionado

void debounceFSM_init() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	EstadoActual = BUTTON_UP;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <debounceFSM_init+0x18>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
	delayInit(&t1, Time_AntiRebote);
 8001e46:	210a      	movs	r1, #10
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <debounceFSM_init+0x1c>)
 8001e4a:	f000 f92d 	bl	80020a8 <delayInit>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000031c 	.word	0x2000031c
 8001e58:	20000310 	.word	0x20000310

08001e5c <debounceFSM_update>:

void debounceFSM_update() {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0

	switch (EstadoActual) {
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <debounceFSM_update+0x198>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	f200 80bb 	bhi.w	8001fe0 <debounceFSM_update+0x184>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <debounceFSM_update+0x14>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001eb9 	.word	0x08001eb9
 8001e78:	08001f33 	.word	0x08001f33
 8001e7c:	08001f81 	.word	0x08001f81

	case BUTTON_UP:

		if ((ButtonGet_1() || ButtonGet_2() || ButtonGet_3() || ButtonGet_4())) { //presiono el boton
 8001e80:	f7ff fbc2 	bl	8001608 <ButtonGet_1>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <debounceFSM_update+0x4e>
 8001e8a:	f7ff fbcf 	bl	800162c <ButtonGet_2>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <debounceFSM_update+0x4e>
 8001e94:	f7ff fbdc 	bl	8001650 <ButtonGet_3>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <debounceFSM_update+0x4e>
 8001e9e:	f7ff fbe9 	bl	8001674 <ButtonGet_4>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 809e 	beq.w	8001fe6 <debounceFSM_update+0x18a>
			//if ( button_1()) {  //presiono el boton
			delayRead(&t1);
 8001eaa:	4853      	ldr	r0, [pc, #332]	; (8001ff8 <debounceFSM_update+0x19c>)
 8001eac:	f000 f913 	bl	80020d6 <delayRead>
			EstadoActual = BUTTON_FALLING;
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <debounceFSM_update+0x198>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001eb6:	e096      	b.n	8001fe6 <debounceFSM_update+0x18a>

	case BUTTON_FALLING:

		if (delayRead(&t1)) { // se cumplio los 40 ms
 8001eb8:	484f      	ldr	r0, [pc, #316]	; (8001ff8 <debounceFSM_update+0x19c>)
 8001eba:	f000 f90c 	bl	80020d6 <delayRead>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8092 	beq.w	8001fea <debounceFSM_update+0x18e>
			if ((ButtonGet_1() || ButtonGet_2()
 8001ec6:	f7ff fb9f 	bl	8001608 <ButtonGet_1>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10e      	bne.n	8001eee <debounceFSM_update+0x92>
 8001ed0:	f7ff fbac 	bl	800162c <ButtonGet_2>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <debounceFSM_update+0x92>
					|| ButtonGet_3() || ButtonGet_4())) { //SI ESTA PRESIONADO PRENDO EL LED
 8001eda:	f7ff fbb9 	bl	8001650 <ButtonGet_3>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <debounceFSM_update+0x92>
 8001ee4:	f7ff fbc6 	bl	8001674 <ButtonGet_4>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01d      	beq.n	8001f2a <debounceFSM_update+0xce>
				//if (button_1()) {  //SI ESTA PRESIONADO PRENDO EL LED
				//delayRead(&t1);
				//BSP_LED_On(LED1);

				buttonPressed();
 8001eee:	f000 f88b 	bl	8002008 <buttonPressed>
				if (ButtonGet_1()) {
 8001ef2:	f7ff fb89 	bl	8001608 <ButtonGet_1>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <debounceFSM_update+0xa6>
					btnPress = true;
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <debounceFSM_update+0x1a0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_2()) {
 8001f02:	f7ff fb93 	bl	800162c <ButtonGet_2>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <debounceFSM_update+0xb6>
					btnPress1 = true;
 8001f0c:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <debounceFSM_update+0x1a4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_3()) {
 8001f12:	f7ff fb9d 	bl	8001650 <ButtonGet_3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <debounceFSM_update+0xc6>
					btnPress2 = true;
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <debounceFSM_update+0x1a8>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
				}

				EstadoActual = BUTTON_DOWN;
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <debounceFSM_update+0x198>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	701a      	strb	r2, [r3, #0]
			} else {
				EstadoActual = BUTTON_UP;

			}
		}
		break;
 8001f28:	e05f      	b.n	8001fea <debounceFSM_update+0x18e>
				EstadoActual = BUTTON_UP;
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <debounceFSM_update+0x198>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
		break;
 8001f30:	e05b      	b.n	8001fea <debounceFSM_update+0x18e>

	case BUTTON_DOWN:
		if (!(  ButtonGet_1() || ButtonGet_2()
 8001f32:	f7ff fb69 	bl	8001608 <ButtonGet_1>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d055      	beq.n	8001fee <debounceFSM_update+0x192>
 8001f42:	f7ff fb73 	bl	800162c <ButtonGet_2>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04d      	beq.n	8001fee <debounceFSM_update+0x192>
				|| ButtonGet_3() || ButtonGet_4())) { // el pulsador esta en estado bajo
 8001f52:	f7ff fb7d 	bl	8001650 <ButtonGet_3>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d045      	beq.n	8001fee <debounceFSM_update+0x192>
 8001f62:	f7ff fb87 	bl	8001674 <ButtonGet_4>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
		if (!(  ButtonGet_1() || ButtonGet_2()
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03d      	beq.n	8001fee <debounceFSM_update+0x192>
			//if ( !button_1()) { // el pulsador esta en estado bajo
			delayRead(&t1); //comienza el timer
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <debounceFSM_update+0x19c>)
 8001f74:	f000 f8af 	bl	80020d6 <delayRead>

			EstadoActual = BUTTON_RAISING;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <debounceFSM_update+0x198>)
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	701a      	strb	r2, [r3, #0]
		}

		//delayWrite(&t1, Time_AntiRebote);
		break;
 8001f7e:	e036      	b.n	8001fee <debounceFSM_update+0x192>
	case BUTTON_RAISING:

		if (delayRead(&t1)) {
 8001f80:	481d      	ldr	r0, [pc, #116]	; (8001ff8 <debounceFSM_update+0x19c>)
 8001f82:	f000 f8a8 	bl	80020d6 <delayRead>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d031      	beq.n	8001ff0 <debounceFSM_update+0x194>
			if (!(ButtonGet_1() || ButtonGet_2()
 8001f8c:	f7ff fb3c 	bl	8001608 <ButtonGet_1>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01d      	beq.n	8001fd8 <debounceFSM_update+0x17c>
 8001f9c:	f7ff fb46 	bl	800162c <ButtonGet_2>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <debounceFSM_update+0x17c>
					|| ButtonGet_3() || ButtonGet_4())) {
 8001fac:	f7ff fb50 	bl	8001650 <ButtonGet_3>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <debounceFSM_update+0x17c>
 8001fbc:	f7ff fb5a 	bl	8001674 <ButtonGet_4>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
			if (!(ButtonGet_1() || ButtonGet_2()
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <debounceFSM_update+0x17c>
				//	if ( !button_1()) {
				//delayRead(&t1);
				//BSP_LED_Off(LED1);
				buttonReleased();
 8001fcc:	f000 f823 	bl	8002016 <buttonReleased>

				EstadoActual = BUTTON_UP;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <debounceFSM_update+0x198>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
			} else
				EstadoActual = BUTTON_DOWN;

			break;
 8001fd6:	e00b      	b.n	8001ff0 <debounceFSM_update+0x194>
				EstadoActual = BUTTON_DOWN;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <debounceFSM_update+0x198>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	701a      	strb	r2, [r3, #0]
			break;
 8001fde:	e007      	b.n	8001ff0 <debounceFSM_update+0x194>
			default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			debounceFSM_init();
 8001fe0:	f7ff ff2c 	bl	8001e3c <debounceFSM_init>

			break;
 8001fe4:	e004      	b.n	8001ff0 <debounceFSM_update+0x194>
		break;
 8001fe6:	bf00      	nop
 8001fe8:	e002      	b.n	8001ff0 <debounceFSM_update+0x194>
		break;
 8001fea:	bf00      	nop
 8001fec:	e000      	b.n	8001ff0 <debounceFSM_update+0x194>
		break;
 8001fee:	bf00      	nop

		}
	}

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000031c 	.word	0x2000031c
 8001ff8:	20000310 	.word	0x20000310
 8001ffc:	2000031d 	.word	0x2000031d
 8002000:	2000031e 	.word	0x2000031e
 8002004:	2000031f 	.word	0x2000031f

08002008 <buttonPressed>:

void buttonPressed() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

	BSP_LED_On(LED1);
 800200c:	2000      	movs	r0, #0
 800200e:	f000 fa05 	bl	800241c <BSP_LED_On>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}

08002016 <buttonReleased>:

void buttonReleased() {
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 800201a:	2000      	movs	r0, #0
 800201c:	f000 fa18 	bl	8002450 <BSP_LED_Off>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <readKey_Up>:

bool_t readKey_Up() {
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

	if (btnPress) {
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <readKey_Up+0x24>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <readKey_Up+0x16>
		btnPress = false;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <readKey_Up+0x24>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
		return true;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <readKey_Up+0x18>
	} else
		return false;
 800203a:	2300      	movs	r3, #0

}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000031d 	.word	0x2000031d

0800204c <readKey_Down>:

bool_t readKey_Down() {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

	if (btnPress1) {
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <readKey_Down+0x24>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <readKey_Down+0x16>
		btnPress1 = false;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <readKey_Down+0x24>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
		return true;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <readKey_Down+0x18>
	} else
		return false;
 8002062:	2300      	movs	r3, #0

}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2000031e 	.word	0x2000031e

08002074 <readKey_enter>:

bool_t readKey_enter() {
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

	if (btnPress2) {
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <readKey_enter+0x24>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <readKey_enter+0x16>
		btnPress2 = false;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <readKey_enter+0x24>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
		return true;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <readKey_enter+0x18>
	} else
		return false;
 800208a:	2300      	movs	r3, #0

}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000031f 	.word	0x2000031f

0800209c <Error_Handler>:
#include <API_delay.h>

static void Error_Handler(void);

static void Error_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED1);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f000 f9bb 	bl	800241c <BSP_LED_On>
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <Error_Handler+0xa>

080020a8 <delayInit>:
  }
}



void delayInit(delay_t *delay, tick_t duration) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

	/* Initializatio ERROR*/
	if(delay==NULL || duration==0)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <delayInit+0x16>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <delayInit+0x1a>
		Error_Handler();
 80020be:	f7ff ffed 	bl	800209c <Error_Handler>

	delay->duration = duration;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	721a      	strb	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <delayRead>:

 bool_t delayRead( delay_t * delay ){
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]

	 tick_t diff=0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]

	 /* Initializatio ERROR*/
	 if(delay==NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <delayRead+0x16>
	 		Error_Handler();
 80020e8:	f7ff ffd8 	bl	800209c <Error_Handler>


	 if(!delay->running){
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7a1b      	ldrb	r3, [r3, #8]
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <delayRead+0x34>

		  delay->startTime=HAL_GetTick(); //se asigna el valor cada 1mms
 80020fa:	f000 fbbd 	bl	8002878 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	601a      	str	r2, [r3, #0]
		  delay->running = true;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	721a      	strb	r2, [r3, #8]

		 // return false;
	  }

	 diff=(HAL_GetTick() - delay->startTime);
 800210a:	f000 fbb5 	bl	8002878 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	60fb      	str	r3, [r7, #12]

	 if (diff>= delay->duration) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	429a      	cmp	r2, r3
 8002120:	d304      	bcc.n	800212c <delayRead+0x56>

			delay->running = false;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	721a      	strb	r2, [r3, #8]

			return true;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <delayRead+0x58>
		}
		  else
			return false;
 800212c:	2300      	movs	r3, #0
	  }
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <Error_Handler>:
I2C_HandleTypeDef hi2c2;

static void Error_Handler(void);

static void Error_Handler(void)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 f96e 	bl	800241c <BSP_LED_On>
  while (1)
 8002140:	e7fe      	b.n	8002140 <Error_Handler+0xa>
	...

08002144 <I2C_Init>:
}


/* I2C1 init function */
void I2C_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
	 GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
    /* I2C1 clock enable */
   __HAL_RCC_I2C1_CLK_ENABLE(); //IMPORTANTE
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <I2C_Init+0x164>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a4d      	ldr	r2, [pc, #308]	; (80022a8 <I2C_Init+0x164>)
 8002174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <I2C_Init+0x164>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_I2C2_CLK_ENABLE(); //IMPORTANTE
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <I2C_Init+0x164>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <I2C_Init+0x164>)
 8002190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <I2C_Init+0x164>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

   __HAL_RCC_GPIOB_CLK_ENABLE();//IMPORTANTE
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <I2C_Init+0x164>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <I2C_Init+0x164>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <I2C_Init+0x164>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <I2C_Init+0x168>)
 80021c0:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <I2C_Init+0x16c>)
 80021c2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <I2C_Init+0x168>)
 80021c6:	4a3b      	ldr	r2, [pc, #236]	; (80022b4 <I2C_Init+0x170>)
 80021c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <I2C_Init+0x168>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <I2C_Init+0x168>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <I2C_Init+0x168>)
 80021d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021dc:	611a      	str	r2, [r3, #16]

  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021de:	4b33      	ldr	r3, [pc, #204]	; (80022ac <I2C_Init+0x168>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <I2C_Init+0x168>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <I2C_Init+0x168>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <I2C_Init+0x168>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 80021f6:	482d      	ldr	r0, [pc, #180]	; (80022ac <I2C_Init+0x168>)
 80021f8:	f000 fe78 	bl	8002eec <HAL_I2C_Init>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021fc:	482b      	ldr	r0, [pc, #172]	; (80022ac <I2C_Init+0x168>)
 80021fe:	f000 fe75 	bl	8002eec <HAL_I2C_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <I2C_Init+0xc8>
  {
    Error_Handler();
 8002208:	f7ff ff95 	bl	8002136 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

     GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800220c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
     GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221e:	2304      	movs	r3, #4
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4823      	ldr	r0, [pc, #140]	; (80022b8 <I2C_Init+0x174>)
 800222a:	f000 fc67 	bl	8002afc <HAL_GPIO_Init>




     /* USER CODE END I2C1_Init 1 */
      hi2c2.Instance = I2C2;
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <I2C_Init+0x178>)
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <I2C_Init+0x17c>)
 8002232:	601a      	str	r2, [r3, #0]
      hi2c2.Init.ClockSpeed = 100000;
 8002234:	4b21      	ldr	r3, [pc, #132]	; (80022bc <I2C_Init+0x178>)
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <I2C_Init+0x170>)
 8002238:	605a      	str	r2, [r3, #4]
      hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <I2C_Init+0x178>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
      hi2c2.Init.OwnAddress1 = 0;
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <I2C_Init+0x178>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
      hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <I2C_Init+0x178>)
 8002248:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224c:	611a      	str	r2, [r3, #16]
      hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <I2C_Init+0x178>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
      hi2c2.Init.OwnAddress2 = 0;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <I2C_Init+0x178>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
      hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <I2C_Init+0x178>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
      hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <I2C_Init+0x178>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
      HAL_I2C_Init(&hi2c2);
 8002266:	4815      	ldr	r0, [pc, #84]	; (80022bc <I2C_Init+0x178>)
 8002268:	f000 fe40 	bl	8002eec <HAL_I2C_Init>
      if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800226c:	4813      	ldr	r0, [pc, #76]	; (80022bc <I2C_Init+0x178>)
 800226e:	f000 fe3d 	bl	8002eec <HAL_I2C_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_Init+0x138>
      {
        Error_Handler();
 8002278:	f7ff ff5d 	bl	8002136 <Error_Handler>
      }
      /* USER CODE BEGIN I2C1_Init 2 */

      /* USER CODE END I2C1_Init 2 */

         GPIO_InitStruct2.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800227c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002280:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct2.Mode = GPIO_MODE_AF_OD;
 8002282:	2312      	movs	r3, #18
 8002284:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
         GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
         GPIO_InitStruct2.Alternate = GPIO_AF4_I2C2;
 800228e:	2304      	movs	r3, #4
 8002290:	623b      	str	r3, [r7, #32]
         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <I2C_Init+0x174>)
 800229a:	f000 fc2f 	bl	8002afc <HAL_GPIO_Init>

}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	20000320 	.word	0x20000320
 80022b0:	40005400 	.word	0x40005400
 80022b4:	000186a0 	.word	0x000186a0
 80022b8:	40020400 	.word	0x40020400
 80022bc:	20000374 	.word	0x20000374
 80022c0:	40005800 	.word	0x40005800

080022c4 <uartInit>:



/* Inicializa la uart, devuelve un true si fue exitoso o un false si hubo un error */
bool_t uartInit()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <uartInit+0x50>)
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <uartInit+0x54>)
 80022cc:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate     = BAUDRATE;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <uartInit+0x50>)
 80022d0:	f242 3228 	movw	r2, #9000	; 0x2328
 80022d4:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <uartInit+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <uartInit+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_ODD;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <uartInit+0x50>)
 80022e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80022e8:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <uartInit+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <uartInit+0x50>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <uartInit+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <uartInit+0x50>)
 80022fe:	f002 fad7 	bl	80048b0 <HAL_UART_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <uartInit+0x48>
	{
		/* Initialization Error */
		return false;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <uartInit+0x4a>
	}



	return true;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200003c8 	.word	0x200003c8
 8002318:	40004800 	.word	0x40004800

0800231c <__io_putchar>:
{
	HAL_UART_Receive(&UartHandle, pstring, size, 0xFFFF);
}

PUTCHAR_PROTOTYPE
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t*)&ch, 1, 0xFFFF);
 8002324:	1d39      	adds	r1, r7, #4
 8002326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232a:	2201      	movs	r2, #1
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <__io_putchar+0x20>)
 800232e:	f002 fb0c 	bl	800494a <HAL_UART_Transmit>

	return ch;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200003c8 	.word	0x200003c8

08002340 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
    uint8_t cha = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
    __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <__io_getchar+0x38>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <__io_getchar+0x38>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
    HAL_UART_Receive(&UartHandle, (uint8_t *)&cha, 1, 0xFFFF);
 8002360:	1df9      	adds	r1, r7, #7
 8002362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002366:	2201      	movs	r2, #1
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <__io_getchar+0x38>)
 800236a:	f002 fb80 	bl	8004a6e <HAL_UART_Receive>
    return cha;
 800236e:	79fb      	ldrb	r3, [r7, #7]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200003c8 	.word	0x200003c8

0800237c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10e      	bne.n	80023aa <BSP_LED_Init+0x2e>
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <BSP_LED_Init+0x94>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <BSP_LED_Init+0x94>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <BSP_LED_Init+0x94>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	e00d      	b.n	80023c6 <BSP_LED_Init+0x4a>
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <BSP_LED_Init+0x94>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <BSP_LED_Init+0x94>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <BSP_LED_Init+0x94>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <BSP_LED_Init+0x98>)
 80023ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80023d8:	2302      	movs	r3, #2
 80023da:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <BSP_LED_Init+0x9c>)
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	f107 0214 	add.w	r2, r7, #20
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fb86 	bl	8002afc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <BSP_LED_Init+0x9c>)
 80023f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4a06      	ldr	r2, [pc, #24]	; (8002414 <BSP_LED_Init+0x98>)
 80023fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002400:	2200      	movs	r2, #0
 8002402:	4619      	mov	r1, r3
 8002404:	f000 fd3e 	bl	8002e84 <HAL_GPIO_WritePin>
}
 8002408:	bf00      	nop
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	08009f08 	.word	0x08009f08
 8002418:	20000008 	.word	0x20000008

0800241c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <BSP_LED_On+0x2c>)
 800242a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <BSP_LED_On+0x30>)
 8002432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002436:	2201      	movs	r2, #1
 8002438:	4619      	mov	r1, r3
 800243a:	f000 fd23 	bl	8002e84 <HAL_GPIO_WritePin>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008
 800244c:	08009f08 	.word	0x08009f08

08002450 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <BSP_LED_Off+0x2c>)
 800245e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <BSP_LED_Off+0x30>)
 8002466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	f000 fd09 	bl	8002e84 <HAL_GPIO_WritePin>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008
 8002480:	08009f08 	.word	0x08009f08

08002484 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <BSP_LED_Toggle+0x2c>)
 8002492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <BSP_LED_Toggle+0x30>)
 800249a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f000 fd08 	bl	8002eb6 <HAL_GPIO_TogglePin>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	08009f08 	.word	0x08009f08

080024b8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	460a      	mov	r2, r1
 80024c2:	71fb      	strb	r3, [r7, #7]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <BSP_PB_Init+0xa4>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <BSP_PB_Init+0xa4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <BSP_PB_Init+0xa4>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d112      	bne.n	8002510 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80024ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024f4:	2302      	movs	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <BSP_PB_Init+0xa8>)
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	f107 020c 	add.w	r2, r7, #12
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f000 faf6 	bl	8002afc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d11d      	bne.n	8002552 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8002520:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002524:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <BSP_PB_Init+0xa8>)
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	f107 020c 	add.w	r2, r7, #12
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fae1 	bl	8002afc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800253a:	2328      	movs	r3, #40	; 0x28
 800253c:	b25b      	sxtb	r3, r3
 800253e:	2200      	movs	r2, #0
 8002540:	210f      	movs	r1, #15
 8002542:	4618      	mov	r0, r3
 8002544:	f000 faa3 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002548:	2328      	movs	r3, #40	; 0x28
 800254a:	b25b      	sxtb	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	f000 faba 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
  }
}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	20000014 	.word	0x20000014

08002564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <SystemInit+0x60>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <SystemInit+0x60>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <SystemInit+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <SystemInit+0x64>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <SystemInit+0x64>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <SystemInit+0x64>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <SystemInit+0x64>)
 8002590:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <SystemInit+0x64>)
 800259c:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <SystemInit+0x68>)
 800259e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <SystemInit+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <SystemInit+0x64>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <SystemInit+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SystemInit+0x60>)
 80025b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b8:	609a      	str	r2, [r3, #8]
#endif
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	24003010 	.word	0x24003010

080025d0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002624:	f000 f914 	bl	8002850 <HAL_IncTick>
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	return 1;
 8002630:	2301      	movs	r3, #1
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_kill>:

int _kill(int pid, int sig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002646:	f003 ff4b 	bl	80064e0 <__errno>
 800264a:	4603      	mov	r3, r0
 800264c:	2216      	movs	r2, #22
 800264e:	601a      	str	r2, [r3, #0]
	return -1;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_exit>:

void _exit (int status)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffe7 	bl	800263c <_kill>
	while (1) {}		/* Make sure we hang here */
 800266e:	e7fe      	b.n	800266e <_exit+0x12>

08002670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e00a      	b.n	8002698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002682:	f7ff fe5d 	bl	8002340 <__io_getchar>
 8002686:	4601      	mov	r1, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf0      	blt.n	8002682 <_read+0x12>
	}

return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e009      	b.n	80026d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe29 	bl	800231c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf1      	blt.n	80026bc <_write+0x12>
	}
	return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_close>:

int _close(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800270a:	605a      	str	r2, [r3, #4]
	return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_isatty>:

int _isatty(int file)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	return 1;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
	return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f003 feb0 	bl	80064e0 <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20030000 	.word	0x20030000
 80027ac:	00000400 	.word	0x00000400
 80027b0:	2000040c 	.word	0x2000040c
 80027b4:	20000560 	.word	0x20000560

080027b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x34>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x34>)
 80027c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c6:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x34>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x34>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f94f 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f001 fb76 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f967 	bl	8002ae2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282c:	f000 f92f 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000018 	.word	0x20000018
 8002848:	20000020 	.word	0x20000020
 800284c:	2000001c 	.word	0x2000001c

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000020 	.word	0x20000020
 8002874:	20000410 	.word	0x20000410

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000410 	.word	0x20000410

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000020 	.word	0x20000020

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e177      	b.n	8002e08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 8166 	bne.w	8002e02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80c0 	beq.w	8002e02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9e:	4a61      	ldr	r2, [pc, #388]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d037      	beq.n	8002d3a <HAL_GPIO_Init+0x23e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_GPIO_Init+0x23a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x334>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02b      	beq.n	8002d32 <HAL_GPIO_Init+0x236>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_GPIO_Init+0x338>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x232>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_GPIO_Init+0x33c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_GPIO_Init+0x340>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x344>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x348>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x34c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x350>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002d12:	2309      	movs	r3, #9
 8002d14:	e012      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d16:	230a      	movs	r3, #10
 8002d18:	e010      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x240>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae84 	bls.w	8002b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022400 	.word	0x40022400
 8002e50:	40013c00 	.word	0x40013c00

08002e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	887b      	ldrh	r3, [r7, #2]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e001      	b.n	8002e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea0:	e003      	b.n	8002eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	041a      	lsls	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	041a      	lsls	r2, r3, #16
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e12b      	b.n	8003156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f92e 	bl	8003174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f50:	f001 fc86 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a81      	ldr	r2, [pc, #516]	; (8003160 <HAL_I2C_Init+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d807      	bhi.n	8002f70 <HAL_I2C_Init+0x84>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_I2C_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x92>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_I2C_Init+0x27c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e7      	b.n	8003156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a78      	ldr	r2, [pc, #480]	; (800316c <HAL_I2C_Init+0x280>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0c9b      	lsrs	r3, r3, #18
 8002f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a6a      	ldr	r2, [pc, #424]	; (8003160 <HAL_I2C_Init+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d802      	bhi.n	8002fc0 <HAL_I2C_Init+0xd4>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e009      	b.n	8002fd4 <HAL_I2C_Init+0xe8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a69      	ldr	r2, [pc, #420]	; (8003170 <HAL_I2C_Init+0x284>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	495c      	ldr	r1, [pc, #368]	; (8003160 <HAL_I2C_Init+0x274>)
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	d819      	bhi.n	8003028 <HAL_I2C_Init+0x13c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003002:	1c59      	adds	r1, r3, #1
 8003004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003008:	400b      	ands	r3, r1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_I2C_Init+0x138>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e59      	subs	r1, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fbb1 f3f3 	udiv	r3, r1, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	e051      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003024:	2304      	movs	r3, #4
 8003026:	e04f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_I2C_Init+0x168>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e012      	b.n	800307a <HAL_I2C_Init+0x18e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x196>
 800307e:	2301      	movs	r3, #1
 8003080:	e022      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_I2C_Init+0x1bc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e58      	subs	r0, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	fbb0 f3f3 	udiv	r3, r0, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	e00f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6809      	ldr	r1, [r1, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6911      	ldr	r1, [r2, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	000186a0 	.word	0x000186a0
 8003164:	001e847f 	.word	0x001e847f
 8003168:	003d08ff 	.word	0x003d08ff
 800316c:	431bde83 	.word	0x431bde83
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
 8003198:	4613      	mov	r3, r2
 800319a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fb6c 	bl	8002878 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	f040 80e0 	bne.w	8003370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	4970      	ldr	r1, [pc, #448]	; (800337c <HAL_I2C_Master_Transmit+0x1f4>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fc58 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0d3      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2C_Master_Transmit+0x50>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0cc      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d007      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2210      	movs	r2, #16
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_I2C_Master_Transmit+0x1f8>)
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fac2 	bl	80037d0 <I2C_MasterRequestWrite>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e08d      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800326c:	e066      	b.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fcd2 	bl	8003c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11b      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x188>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fcc2 	bl	8003c9e <I2C_WaitOnBTFFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01a      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d194      	bne.n	800326e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff fa6e 	bl	8002878 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 820b 	bne.w	80037c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2319      	movs	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	497c      	ldr	r1, [pc, #496]	; (80035a8 <HAL_I2C_Master_Receive+0x224>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fb5a 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e1fe      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_Master_Receive+0x50>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e1f7      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2222      	movs	r2, #34	; 0x22
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2210      	movs	r2, #16
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_I2C_Master_Receive+0x228>)
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa46 	bl	80038d4 <I2C_MasterRequestRead>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1b8      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e18c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	2b01      	cmp	r3, #1
 8003488:	d11b      	bne.n	80034c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e16c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d11b      	bne.n	8003502 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	e14c      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003528:	e138      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b03      	cmp	r3, #3
 8003530:	f200 80f1 	bhi.w	8003716 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b01      	cmp	r3, #1
 800353a:	d123      	bne.n	8003584 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fbed 	bl	8003d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e139      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003582:	e10b      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	2b02      	cmp	r3, #2
 800358a:	d14e      	bne.n	800362a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	2200      	movs	r2, #0
 8003594:	4906      	ldr	r1, [pc, #24]	; (80035b0 <HAL_I2C_Master_Receive+0x22c>)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa6a 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e10e      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
 80035a6:	bf00      	nop
 80035a8:	00100002 	.word	0x00100002
 80035ac:	ffff0000 	.word	0xffff0000
 80035b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003628:	e0b8      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	4966      	ldr	r1, [pc, #408]	; (80037cc <HAL_I2C_Master_Receive+0x448>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fa1b 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0bf      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2200      	movs	r2, #0
 800368e:	494f      	ldr	r1, [pc, #316]	; (80037cc <HAL_I2C_Master_Receive+0x448>)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f9ed 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e091      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003714:	e042      	b.n	800379c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb00 	bl	8003d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e04c      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d118      	bne.n	800379c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f aec2 	bne.w	800352a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010004 	.word	0x00010004

080037d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	460b      	mov	r3, r1
 80037de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d006      	beq.n	80037fa <I2C_MasterRequestWrite+0x2a>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d003      	beq.n	80037fa <I2C_MasterRequestWrite+0x2a>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f8:	d108      	bne.n	800380c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00b      	b.n	8003824 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b12      	cmp	r3, #18
 8003812:	d107      	bne.n	8003824 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f91d 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	d103      	bne.n	8003854 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e035      	b.n	80038c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003860:	d108      	bne.n	8003874 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	e01b      	b.n	80038ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	11db      	asrs	r3, r3, #7
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f063 030f 	orn	r3, r3, #15
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <I2C_MasterRequestWrite+0xfc>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f943 	bl	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e010      	b.n	80038c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <I2C_MasterRequestWrite+0x100>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f933 	bl	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	00010008 	.word	0x00010008
 80038d0:	00010002 	.word	0x00010002

080038d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	460b      	mov	r3, r1
 80038e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d006      	beq.n	800390e <I2C_MasterRequestRead+0x3a>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d003      	beq.n	800390e <I2C_MasterRequestRead+0x3a>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800390c:	d108      	bne.n	8003920 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e00b      	b.n	8003938 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	2b11      	cmp	r3, #17
 8003926:	d107      	bne.n	8003938 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f893 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	d103      	bne.n	8003968 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e079      	b.n	8003a60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003974:	d108      	bne.n	8003988 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	e05f      	b.n	8003a48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	11db      	asrs	r3, r3, #7
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0306 	and.w	r3, r3, #6
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f063 030f 	orn	r3, r3, #15
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4930      	ldr	r1, [pc, #192]	; (8003a68 <I2C_MasterRequestRead+0x194>)
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f8b9 	bl	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e054      	b.n	8003a60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4929      	ldr	r1, [pc, #164]	; (8003a6c <I2C_MasterRequestRead+0x198>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f8a9 	bl	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e044      	b.n	8003a60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f831 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d103      	bne.n	8003a2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e017      	b.n	8003a60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a30:	897b      	ldrh	r3, [r7, #10]
 8003a32:	11db      	asrs	r3, r3, #7
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 0306 	and.w	r3, r3, #6
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f063 030e 	orn	r3, r3, #14
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <I2C_MasterRequestRead+0x198>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f865 	bl	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	00010008 	.word	0x00010008
 8003a6c:	00010002 	.word	0x00010002

08003a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a80:	e025      	b.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a88:	d021      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe fef5 	bl	8002878 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d116      	bne.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e023      	b.n	8003b16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10d      	bne.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	e00c      	b.n	8003b0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d0b6      	beq.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b2c:	e051      	b.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d123      	bne.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e046      	b.n	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b8c:	d021      	beq.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe fe73 	bl	8002878 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d116      	bne.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e020      	b.n	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10c      	bne.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e00b      	b.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d18d      	bne.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c28:	e02d      	b.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f8ce 	bl	8003dcc <I2C_IsAcknowledgeFailed>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e02d      	b.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c40:	d021      	beq.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe fe19 	bl	8002878 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d116      	bne.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0220 	orr.w	r2, r3, #32
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b80      	cmp	r3, #128	; 0x80
 8003c92:	d1ca      	bne.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003caa:	e02d      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f88d 	bl	8003dcc <I2C_IsAcknowledgeFailed>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e02d      	b.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc2:	d021      	beq.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fe fdd8 	bl	8002878 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e007      	b.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d1ca      	bne.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d2c:	e042      	b.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d119      	bne.n	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0210 	mvn.w	r2, #16
 8003d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e029      	b.n	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d70:	f7fe fd82 	bl	8002878 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d302      	bcc.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e007      	b.n	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d1b5      	bne.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d11b      	bne.n	8003e1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e3e:	f043 0308 	orr.w	r3, r3, #8
 8003e42:	6313      	str	r3, [r2, #48]	; 0x30
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e5a:	f043 0308 	orr.w	r3, r3, #8
 8003e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_UART_MspInit+0x9c>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8003e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003e9a:	2307      	movs	r3, #7
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <HAL_UART_MspInit+0xa0>)
 8003ea6:	f7fe fe29 	bl	8002afc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003eb0:	2307      	movs	r3, #7
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4804      	ldr	r0, [pc, #16]	; (8003ecc <HAL_UART_MspInit+0xa0>)
 8003ebc:	f7fe fe1e 	bl	8002afc <HAL_GPIO_Init>
}
 8003ec0:	bf00      	nop
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40020c00 	.word	0x40020c00

08003ed0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x90>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0c:	f7fe fcb4 	bl	8002878 <HAL_GetTick>
 8003f10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f12:	e009      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f14:	f7fe fcb0 	bl	8002878 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f22:	d901      	bls.n	8003f28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e01f      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d1ee      	bne.n	8003f14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3c:	f7fe fc9c 	bl	8002878 <HAL_GetTick>
 8003f40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f42:	e009      	b.n	8003f58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f44:	f7fe fc98 	bl	8002878 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f52:	d901      	bls.n	8003f58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e007      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f64:	d1ee      	bne.n	8003f44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	420e0040 	.word	0x420e0040
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	420e0044 	.word	0x420e0044

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e267      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b82      	ldr	r3, [pc, #520]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e242      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6f      	ldr	r2, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6c      	ldr	r2, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fe fc1e 	bl	8002878 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fe fc1a 	bl	8002878 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e207      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fc0a 	bl	8002878 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe fc06 	bl	8002878 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1f3      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d063      	beq.n	800415e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1c7      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4937      	ldr	r1, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fe fbbf 	bl	8002878 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fe fbbb 	bl	8002878 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1a8      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fb9e 	bl	8002878 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fe fb9a 	bl	8002878 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e187      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d036      	beq.n	80041d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe fb7e 	bl	8002878 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe fb7a 	bl	8002878 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e167      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
 800419e:	e01b      	b.n	80041d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fb67 	bl	8002878 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e00e      	b.n	80041cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fe fb63 	bl	8002878 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d907      	bls.n	80041cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e150      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ea      	bne.n	80041ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8097 	beq.w	8004314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a7c      	ldr	r2, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b7a      	ldr	r3, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b77      	ldr	r3, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b74      	ldr	r3, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422e:	f7fe fb23 	bl	8002878 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fe fb1f 	bl	8002878 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e10c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x2ea>
 800425c:	4b64      	ldr	r3, [pc, #400]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a63      	ldr	r2, [pc, #396]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x30c>
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5e      	ldr	r2, [pc, #376]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a5b      	ldr	r2, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800428c:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a54      	ldr	r2, [pc, #336]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe fae4 	bl	8002878 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fe fae0 	bl	8002878 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0cb      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCC_OscConfig+0x334>
 80042d6:	e014      	b.n	8004302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fe face 	bl	8002878 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe faca 	bl	8002878 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0b5      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a1 	beq.w	8004460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d05c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d141      	bne.n	80043b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fa9e 	bl	8002878 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fa9a 	bl	8002878 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e087      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	491b      	ldr	r1, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe fa73 	bl	8002878 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004396:	f7fe fa6f 	bl	8002878 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e05c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x416>
 80043b4:	e054      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fa5c 	bl	8002878 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe fa58 	bl	8002878 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e045      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x444>
 80043e2:	e03d      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e038      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x4ec>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d028      	beq.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d121      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d11a      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004434:	4293      	cmp	r3, r2
 8004436:	d111      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0cc      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d90c      	bls.n	80044ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0b8      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	494d      	ldr	r1, [pc, #308]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d044      	beq.n	8004590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d119      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d003      	beq.n	800452e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452a:	2b03      	cmp	r3, #3
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e06f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e067      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4934      	ldr	r1, [pc, #208]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	4313      	orrs	r3, r2
 800455e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004560:	f7fe f98a 	bl	8002878 <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	e00a      	b.n	800457e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004568:	f7fe f986 	bl	8002878 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e04f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 020c 	and.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d1eb      	bne.n	8004568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20c      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e032      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	f000 f821 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	490a      	ldr	r1, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	5ccb      	ldrb	r3, [r1, r3]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f8ea 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023c00 	.word	0x40023c00
 800462c:	40023800 	.word	0x40023800
 8004630:	08009f10 	.word	0x08009f10
 8004634:	20000018 	.word	0x20000018
 8004638:	2000001c 	.word	0x2000001c

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b094      	sub	sp, #80	; 0x50
 8004642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
 8004648:	2300      	movs	r3, #0
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	2300      	movs	r3, #0
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004654:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d00d      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x40>
 8004660:	2b08      	cmp	r3, #8
 8004662:	f200 80e1 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x34>
 800466a:	2b04      	cmp	r3, #4
 800466c:	d003      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x3a>
 800466e:	e0db      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCC_GetSysClockFreq+0x204>)
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004674:	e0db      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004676:	4b73      	ldr	r3, [pc, #460]	; (8004844 <HAL_RCC_GetSysClockFreq+0x208>)
 8004678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800467a:	e0d8      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d063      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004692:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	2200      	movs	r2, #0
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
 800469c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	2300      	movs	r3, #0
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f04f 0100 	mov.w	r1, #0
 80046ba:	0159      	lsls	r1, r3, #5
 80046bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c0:	0150      	lsls	r0, r2, #5
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4621      	mov	r1, r4
 80046c8:	1a51      	subs	r1, r2, r1
 80046ca:	6139      	str	r1, [r7, #16]
 80046cc:	4629      	mov	r1, r5
 80046ce:	eb63 0301 	sbc.w	r3, r3, r1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e0:	4659      	mov	r1, fp
 80046e2:	018b      	lsls	r3, r1, #6
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ea:	4651      	mov	r1, sl
 80046ec:	018a      	lsls	r2, r1, #6
 80046ee:	4651      	mov	r1, sl
 80046f0:	ebb2 0801 	subs.w	r8, r2, r1
 80046f4:	4659      	mov	r1, fp
 80046f6:	eb63 0901 	sbc.w	r9, r3, r1
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800470a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800470e:	4690      	mov	r8, r2
 8004710:	4699      	mov	r9, r3
 8004712:	4623      	mov	r3, r4
 8004714:	eb18 0303 	adds.w	r3, r8, r3
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	462b      	mov	r3, r5
 800471c:	eb49 0303 	adc.w	r3, r9, r3
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800472e:	4629      	mov	r1, r5
 8004730:	024b      	lsls	r3, r1, #9
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004738:	4621      	mov	r1, r4
 800473a:	024a      	lsls	r2, r1, #9
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004742:	2200      	movs	r2, #0
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
 8004746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800474c:	f7fc faac 	bl	8000ca8 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	e058      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	2200      	movs	r2, #0
 8004762:	4618      	mov	r0, r3
 8004764:	4611      	mov	r1, r2
 8004766:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0159      	lsls	r1, r3, #5
 8004782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004786:	0150      	lsls	r0, r2, #5
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4641      	mov	r1, r8
 800478e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb63 0b01 	sbc.w	fp, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047ac:	ebb2 040a 	subs.w	r4, r2, sl
 80047b0:	eb63 050b 	sbc.w	r5, r3, fp
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	00eb      	lsls	r3, r5, #3
 80047be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c2:	00e2      	lsls	r2, r4, #3
 80047c4:	4614      	mov	r4, r2
 80047c6:	461d      	mov	r5, r3
 80047c8:	4643      	mov	r3, r8
 80047ca:	18e3      	adds	r3, r4, r3
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	464b      	mov	r3, r9
 80047d0:	eb45 0303 	adc.w	r3, r5, r3
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047e2:	4629      	mov	r1, r5
 80047e4:	028b      	lsls	r3, r1, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ec:	4621      	mov	r1, r4
 80047ee:	028a      	lsls	r2, r1, #10
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004800:	f7fc fa52 	bl	8000ca8 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800481c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800481e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetSysClockFreq+0x204>)
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004830:	4618      	mov	r0, r3
 8004832:	3750      	adds	r7, #80	; 0x50
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	00f42400 	.word	0x00f42400
 8004844:	007a1200 	.word	0x007a1200

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000018 	.word	0x20000018

08004860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004864:	f7ff fff0 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08009f20 	.word	0x08009f20

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800488c:	f7ff ffdc 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0b5b      	lsrs	r3, r3, #13
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4903      	ldr	r1, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08009f20 	.word	0x08009f20

080048b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e03f      	b.n	8004942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff faa8 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	; 0x24
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9cb 	bl	8004c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b08a      	sub	sp, #40	; 0x28
 800494e:	af02      	add	r7, sp, #8
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b20      	cmp	r3, #32
 8004968:	d17c      	bne.n	8004a64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_UART_Transmit+0x2c>
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e075      	b.n	8004a66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UART_Transmit+0x3e>
 8004984:	2302      	movs	r3, #2
 8004986:	e06e      	b.n	8004a66 <HAL_UART_Transmit+0x11c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2221      	movs	r2, #33	; 0x21
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499e:	f7fd ff6b 	bl	8002878 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d108      	bne.n	80049cc <HAL_UART_Transmit+0x82>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e003      	b.n	80049d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049dc:	e02a      	b.n	8004a34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2180      	movs	r1, #128	; 0x80
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f8e2 	bl	8004bb2 <UART_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e036      	b.n	8004a66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3302      	adds	r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e007      	b.n	8004a26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1cf      	bne.n	80049de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2140      	movs	r1, #64	; 0x40
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f8b2 	bl	8004bb2 <UART_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e006      	b.n	8004a66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e000      	b.n	8004a66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	f040 808c 	bne.w	8004ba8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_UART_Receive+0x2e>
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e084      	b.n	8004baa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Receive+0x40>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e07d      	b.n	8004baa <HAL_UART_Receive+0x13c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2222      	movs	r2, #34	; 0x22
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aca:	f7fd fed5 	bl	8002878 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d108      	bne.n	8004af8 <HAL_UART_Receive+0x8a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e003      	b.n	8004b00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b08:	e043      	b.n	8004b92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2120      	movs	r1, #32
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f84c 	bl	8004bb2 <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e042      	b.n	8004baa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	3302      	adds	r3, #2
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e01f      	b.n	8004b84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d007      	beq.n	8004b5e <HAL_UART_Receive+0xf0>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <HAL_UART_Receive+0xfe>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e008      	b.n	8004b7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1b6      	bne.n	8004b0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b090      	sub	sp, #64	; 0x40
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc2:	e050      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bca:	d04c      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd2:	f7fd fe51 	bl	8002878 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d241      	bcs.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c02:	637a      	str	r2, [r7, #52]	; 0x34
 8004c04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e5      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	613b      	str	r3, [r7, #16]
   return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c36:	623a      	str	r2, [r7, #32]
 8004c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e5      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e00f      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d09f      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3740      	adds	r7, #64	; 0x40
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b0c0      	sub	sp, #256	; 0x100
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	68d9      	ldr	r1, [r3, #12]
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	ea40 0301 	orr.w	r3, r0, r1
 8004cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce8:	f021 010c 	bic.w	r1, r1, #12
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	6999      	ldr	r1, [r3, #24]
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	ea40 0301 	orr.w	r3, r0, r1
 8004d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b8f      	ldr	r3, [pc, #572]	; (8004f5c <UART_SetConfig+0x2cc>)
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d005      	beq.n	8004d30 <UART_SetConfig+0xa0>
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <UART_SetConfig+0x2d0>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d104      	bne.n	8004d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7ff fdaa 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8004d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d38:	e003      	b.n	8004d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3a:	f7ff fd91 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8004d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	f040 810c 	bne.w	8004f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d62:	4622      	mov	r2, r4
 8004d64:	462b      	mov	r3, r5
 8004d66:	1891      	adds	r1, r2, r2
 8004d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d72:	4621      	mov	r1, r4
 8004d74:	eb12 0801 	adds.w	r8, r2, r1
 8004d78:	4629      	mov	r1, r5
 8004d7a:	eb43 0901 	adc.w	r9, r3, r1
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d92:	4690      	mov	r8, r2
 8004d94:	4699      	mov	r9, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	eb18 0303 	adds.w	r3, r8, r3
 8004d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004da0:	462b      	mov	r3, r5
 8004da2:	eb49 0303 	adc.w	r3, r9, r3
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	18db      	adds	r3, r3, r3
 8004dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	eb42 0303 	adc.w	r3, r2, r3
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
 8004dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd4:	f7fb ff68 	bl	8000ca8 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004dde:	fba3 2302 	umull	r2, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	011c      	lsls	r4, r3, #4
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e00:	415b      	adcs	r3, r3
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e08:	4641      	mov	r1, r8
 8004e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e0e:	4649      	mov	r1, r9
 8004e10:	eb43 0b01 	adc.w	fp, r3, r1
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e28:	4692      	mov	sl, r2
 8004e2a:	469b      	mov	fp, r3
 8004e2c:	4643      	mov	r3, r8
 8004e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e36:	464b      	mov	r3, r9
 8004e38:	eb4b 0303 	adc.w	r3, fp, r3
 8004e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e54:	460b      	mov	r3, r1
 8004e56:	18db      	adds	r3, r3, r3
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	647b      	str	r3, [r7, #68]	; 0x44
 8004e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e6a:	f7fb ff1d 	bl	8000ca8 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004e76:	fba3 2301 	umull	r2, r3, r3, r1
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2264      	movs	r2, #100	; 0x64
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	1acb      	subs	r3, r1, r3
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e8a:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e98:	441c      	add	r4, r3
 8004e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	1851      	adds	r1, r2, r1
 8004ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	414b      	adcs	r3, r1
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	00cb      	lsls	r3, r1, #3
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ede:	4651      	mov	r1, sl
 8004ee0:	00ca      	lsls	r2, r1, #3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4642      	mov	r2, r8
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f10:	460b      	mov	r3, r1
 8004f12:	18db      	adds	r3, r3, r3
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f16:	4613      	mov	r3, r2
 8004f18:	eb42 0303 	adc.w	r3, r2, r3
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f26:	f7fb febf 	bl	8000ca8 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <UART_SetConfig+0x2d4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 0207 	and.w	r2, r3, #7
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4422      	add	r2, r4
 8004f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f58:	e106      	b.n	8005168 <UART_SetConfig+0x4d8>
 8004f5a:	bf00      	nop
 8004f5c:	40011000 	.word	0x40011000
 8004f60:	40011400 	.word	0x40011400
 8004f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	6239      	str	r1, [r7, #32]
 8004f82:	415b      	adcs	r3, r3
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	1854      	adds	r4, r2, r1
 8004f8e:	4649      	mov	r1, r9
 8004f90:	eb43 0501 	adc.w	r5, r3, r1
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	00eb      	lsls	r3, r5, #3
 8004f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa2:	00e2      	lsls	r2, r4, #3
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	4643      	mov	r3, r8
 8004faa:	18e3      	adds	r3, r4, r3
 8004fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	eb45 0303 	adc.w	r3, r5, r3
 8004fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	4621      	mov	r1, r4
 8004fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	008a      	lsls	r2, r1, #2
 8004fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fe8:	f7fb fe5e 	bl	8000ca8 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b60      	ldr	r3, [pc, #384]	; (8005174 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	011c      	lsls	r4, r3, #4
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	61b9      	str	r1, [r7, #24]
 8005014:	415b      	adcs	r3, r3
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6139      	str	r1, [r7, #16]
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005050:	464b      	mov	r3, r9
 8005052:	460a      	mov	r2, r1
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	67bb      	str	r3, [r7, #120]	; 0x78
 8005066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005074:	4649      	mov	r1, r9
 8005076:	008b      	lsls	r3, r1, #2
 8005078:	4641      	mov	r1, r8
 800507a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507e:	4641      	mov	r1, r8
 8005080:	008a      	lsls	r2, r1, #2
 8005082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005086:	f7fb fe0f 	bl	8000ca8 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4611      	mov	r1, r2
 8005090:	4b38      	ldr	r3, [pc, #224]	; (8005174 <UART_SetConfig+0x4e4>)
 8005092:	fba3 2301 	umull	r2, r3, r3, r1
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2264      	movs	r2, #100	; 0x64
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	1acb      	subs	r3, r1, r3
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	3332      	adds	r3, #50	; 0x32
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <UART_SetConfig+0x4e4>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b0:	441c      	add	r4, r3
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	673b      	str	r3, [r7, #112]	; 0x70
 80050ba:	677a      	str	r2, [r7, #116]	; 0x74
 80050bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	415b      	adcs	r3, r3
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d0:	4641      	mov	r1, r8
 80050d2:	1851      	adds	r1, r2, r1
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	4649      	mov	r1, r9
 80050d8:	414b      	adcs	r3, r1
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050e8:	4659      	mov	r1, fp
 80050ea:	00cb      	lsls	r3, r1, #3
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f2:	4651      	mov	r1, sl
 80050f4:	00ca      	lsls	r2, r1, #3
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	4642      	mov	r2, r8
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	66bb      	str	r3, [r7, #104]	; 0x68
 8005102:	464b      	mov	r3, r9
 8005104:	460a      	mov	r2, r1
 8005106:	eb42 0303 	adc.w	r3, r2, r3
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
 8005116:	667a      	str	r2, [r7, #100]	; 0x64
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005124:	4649      	mov	r1, r9
 8005126:	008b      	lsls	r3, r1, #2
 8005128:	4641      	mov	r1, r8
 800512a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512e:	4641      	mov	r1, r8
 8005130:	008a      	lsls	r2, r1, #2
 8005132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005136:	f7fb fdb7 	bl	8000ca8 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <UART_SetConfig+0x4e4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2164      	movs	r1, #100	; 0x64
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	3332      	adds	r3, #50	; 0x32
 8005152:	4a08      	ldr	r2, [pc, #32]	; (8005174 <UART_SetConfig+0x4e4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4422      	add	r2, r4
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005174:	51eb851f 	.word	0x51eb851f

08005178 <main>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void) {
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */

	HAL_Init();
 800517c:	f7fd fb1c 	bl	80027b8 <HAL_Init>
	//setvbuf(stdin, NULL, _IONBF, 0); //svcanf para la uart

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8005180:	f000 f83c 	bl	80051fc <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8005184:	2000      	movs	r0, #0
 8005186:	f7fd f8f9 	bl	800237c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800518a:	2001      	movs	r0, #1
 800518c:	f7fd f8f6 	bl	800237c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8005190:	2002      	movs	r0, #2
 8005192:	f7fd f8f3 	bl	800237c <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8005196:	2100      	movs	r1, #0
 8005198:	2000      	movs	r0, #0
 800519a:	f7fd f98d 	bl	80024b8 <BSP_PB_Init>

	debounceFSM_init(); // Inicializa la máquina de estados
 800519e:	f7fc fe4d 	bl	8001e3c <debounceFSM_init>


	GPIO_Init();
 80051a2:	f7fc f9e5 	bl	8001570 <GPIO_Init>
	I2C_Init();
 80051a6:	f7fc ffcd 	bl	8002144 <I2C_Init>
	uartInit();
 80051aa:	f7fd f88b 	bl	80022c4 <uartInit>
	Lcd_Init();
 80051ae:	f7fc fa9f 	bl	80016f0 <Lcd_Init>

	Lcd_Clear();
 80051b2:	f7fc fad1 	bl	8001758 <Lcd_Clear>
		//Lcd_Set_Cursor(2, 4);
		// Lcd_Set_Cursor(1,1);
		Lcd_Write_String(" TP Final PCSE",1,1);
 80051b6:	2201      	movs	r2, #1
 80051b8:	2101      	movs	r1, #1
 80051ba:	480e      	ldr	r0, [pc, #56]	; (80051f4 <main+0x7c>)
 80051bc:	f7fc fad6 	bl	800176c <Lcd_Write_String>
	//	Lcd_Set_Cursor(2, 2);
		//Lcd_Write_String("Sensor AHT10",2,3);
		//HAL_Delay(2000);

	//Conf_update_Uart();
	Conf_update(); //CONFIGURO LA TEMPERATURA
 80051c0:	f7fc fb78 	bl	80018b4 <Conf_update>


	TEMPFSM_init(&conf_T);
 80051c4:	480c      	ldr	r0, [pc, #48]	; (80051f8 <main+0x80>)
 80051c6:	f7fb ff99 	bl	80010fc <TEMPFSM_init>


	while (1) {

		//debounceFSM_update();
		TEMPFSM_update(&conf_T);
 80051ca:	480b      	ldr	r0, [pc, #44]	; (80051f8 <main+0x80>)
 80051cc:	f7fb ffca 	bl	8001164 <TEMPFSM_update>

		if(Detecto_TempHigh())
 80051d0:	f7fc f9a6 	bl	8001520 <Detecto_TempHigh>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <main+0x68>
			BSP_LED_Toggle(LED3);//se activa para enfria
 80051da:	2002      	movs	r0, #2
 80051dc:	f7fd f952 	bl	8002484 <BSP_LED_Toggle>

		if( Detecto_TempLow())
 80051e0:	f7fc f9b2 	bl	8001548 <Detecto_TempLow>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ef      	beq.n	80051ca <main+0x52>
			BSP_LED_Toggle(LED2);//se activa para calentar
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fd f94a 	bl	8002484 <BSP_LED_Toggle>
		TEMPFSM_update(&conf_T);
 80051f0:	e7eb      	b.n	80051ca <main+0x52>
 80051f2:	bf00      	nop
 80051f4:	08009ef8 	.word	0x08009ef8
 80051f8:	200002b0 	.word	0x200002b0

080051fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b092      	sub	sp, #72	; 0x48
 8005200:	af00      	add	r7, sp, #0
 /* __HAL_RCC_PWR_CLK_ENABLE();*/

  /* The voltage scaling allows optimizing the power consumption when the device is*/
    /* clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005202:	2300      	movs	r3, #0
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4b25      	ldr	r3, [pc, #148]	; (800529c <SystemClock_Config+0xa0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <SystemClock_Config+0xa0>)
 800520c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <SystemClock_Config+0xa0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800521e:	2301      	movs	r3, #1
 8005220:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005222:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005226:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005228:	2302      	movs	r3, #2
 800522a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800522c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005230:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005232:	2308      	movs	r3, #8
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 360;
 8005236:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800523c:	2302      	movs	r3, #2
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005240:	2307      	movs	r3, #7
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe9a 	bl	8003f80 <HAL_RCC_OscConfig>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <SystemClock_Config+0x5a>
  {
    /* Initialization Error */
    Error_Handler();
 8005252:	f000 f825 	bl	80052a0 <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005256:	f7fe fe43 	bl	8003ee0 <HAL_PWREx_EnableOverDrive>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <SystemClock_Config+0x68>
  {
    /* Initialization Error */
    Error_Handler();
 8005260:	f000 f81e 	bl	80052a0 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005264:	230f      	movs	r3, #15
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005268:	2302      	movs	r3, #2
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800527a:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800527c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005280:	2105      	movs	r1, #5
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f8f4 	bl	8004470 <HAL_RCC_ClockConfig>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <SystemClock_Config+0x96>
  {
    /* Initialization Error */
    Error_Handler();
 800528e:	f000 f807 	bl	80052a0 <Error_Handler>
  }
}
 8005292:	bf00      	nop
 8005294:	3748      	adds	r7, #72	; 0x48
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40007000 	.word	0x40007000

080052a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  // Turn LED2 on
  BSP_LED_On(LED2);
 80052a4:	2001      	movs	r0, #1
 80052a6:	f7fd f8b9 	bl	800241c <BSP_LED_On>
  while (1)
 80052aa:	e7fe      	b.n	80052aa <Error_Handler+0xa>

080052ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80052ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052e4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052b2:	e003      	b.n	80052bc <LoopCopyDataInit>

080052b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052ba:	3104      	adds	r1, #4

080052bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052c4:	d3f6      	bcc.n	80052b4 <CopyDataInit>
  ldr  r2, =_sbss
 80052c6:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052c8:	e002      	b.n	80052d0 <LoopFillZerobss>

080052ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052cc:	f842 3b04 	str.w	r3, [r2], #4

080052d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052d4:	d3f9      	bcc.n	80052ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052d6:	f7fd f945 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052da:	f001 f907 	bl	80064ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052de:	f7ff ff4b 	bl	8005178 <main>
  bx  lr    
 80052e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80052e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80052e8:	0800a360 	.word	0x0800a360
  ldr  r0, =_sdata
 80052ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052f0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80052f4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80052f8:	20000560 	.word	0x20000560

080052fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052fc:	e7fe      	b.n	80052fc <ADC_IRQHandler>

080052fe <__cvt>:
 80052fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005302:	ec55 4b10 	vmov	r4, r5, d0
 8005306:	2d00      	cmp	r5, #0
 8005308:	460e      	mov	r6, r1
 800530a:	4619      	mov	r1, r3
 800530c:	462b      	mov	r3, r5
 800530e:	bfbb      	ittet	lt
 8005310:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005314:	461d      	movlt	r5, r3
 8005316:	2300      	movge	r3, #0
 8005318:	232d      	movlt	r3, #45	; 0x2d
 800531a:	700b      	strb	r3, [r1, #0]
 800531c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800531e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005322:	4691      	mov	r9, r2
 8005324:	f023 0820 	bic.w	r8, r3, #32
 8005328:	bfbc      	itt	lt
 800532a:	4622      	movlt	r2, r4
 800532c:	4614      	movlt	r4, r2
 800532e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005332:	d005      	beq.n	8005340 <__cvt+0x42>
 8005334:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005338:	d100      	bne.n	800533c <__cvt+0x3e>
 800533a:	3601      	adds	r6, #1
 800533c:	2102      	movs	r1, #2
 800533e:	e000      	b.n	8005342 <__cvt+0x44>
 8005340:	2103      	movs	r1, #3
 8005342:	ab03      	add	r3, sp, #12
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	ab02      	add	r3, sp, #8
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	ec45 4b10 	vmov	d0, r4, r5
 800534e:	4653      	mov	r3, sl
 8005350:	4632      	mov	r2, r6
 8005352:	f001 f981 	bl	8006658 <_dtoa_r>
 8005356:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800535a:	4607      	mov	r7, r0
 800535c:	d102      	bne.n	8005364 <__cvt+0x66>
 800535e:	f019 0f01 	tst.w	r9, #1
 8005362:	d022      	beq.n	80053aa <__cvt+0xac>
 8005364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005368:	eb07 0906 	add.w	r9, r7, r6
 800536c:	d110      	bne.n	8005390 <__cvt+0x92>
 800536e:	783b      	ldrb	r3, [r7, #0]
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d10a      	bne.n	800538a <__cvt+0x8c>
 8005374:	2200      	movs	r2, #0
 8005376:	2300      	movs	r3, #0
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fb fbb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005380:	b918      	cbnz	r0, 800538a <__cvt+0x8c>
 8005382:	f1c6 0601 	rsb	r6, r6, #1
 8005386:	f8ca 6000 	str.w	r6, [sl]
 800538a:	f8da 3000 	ldr.w	r3, [sl]
 800538e:	4499      	add	r9, r3
 8005390:	2200      	movs	r2, #0
 8005392:	2300      	movs	r3, #0
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fb fba6 	bl	8000ae8 <__aeabi_dcmpeq>
 800539c:	b108      	cbz	r0, 80053a2 <__cvt+0xa4>
 800539e:	f8cd 900c 	str.w	r9, [sp, #12]
 80053a2:	2230      	movs	r2, #48	; 0x30
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	454b      	cmp	r3, r9
 80053a8:	d307      	bcc.n	80053ba <__cvt+0xbc>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053ae:	1bdb      	subs	r3, r3, r7
 80053b0:	4638      	mov	r0, r7
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	b004      	add	sp, #16
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	9103      	str	r1, [sp, #12]
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e7f0      	b.n	80053a4 <__cvt+0xa6>

080053c2 <__exponent>:
 80053c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053c4:	4603      	mov	r3, r0
 80053c6:	2900      	cmp	r1, #0
 80053c8:	bfb8      	it	lt
 80053ca:	4249      	neglt	r1, r1
 80053cc:	f803 2b02 	strb.w	r2, [r3], #2
 80053d0:	bfb4      	ite	lt
 80053d2:	222d      	movlt	r2, #45	; 0x2d
 80053d4:	222b      	movge	r2, #43	; 0x2b
 80053d6:	2909      	cmp	r1, #9
 80053d8:	7042      	strb	r2, [r0, #1]
 80053da:	dd2a      	ble.n	8005432 <__exponent+0x70>
 80053dc:	f10d 0207 	add.w	r2, sp, #7
 80053e0:	4617      	mov	r7, r2
 80053e2:	260a      	movs	r6, #10
 80053e4:	4694      	mov	ip, r2
 80053e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80053ea:	fb06 1415 	mls	r4, r6, r5, r1
 80053ee:	3430      	adds	r4, #48	; 0x30
 80053f0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80053f4:	460c      	mov	r4, r1
 80053f6:	2c63      	cmp	r4, #99	; 0x63
 80053f8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80053fc:	4629      	mov	r1, r5
 80053fe:	dcf1      	bgt.n	80053e4 <__exponent+0x22>
 8005400:	3130      	adds	r1, #48	; 0x30
 8005402:	f1ac 0402 	sub.w	r4, ip, #2
 8005406:	f802 1c01 	strb.w	r1, [r2, #-1]
 800540a:	1c41      	adds	r1, r0, #1
 800540c:	4622      	mov	r2, r4
 800540e:	42ba      	cmp	r2, r7
 8005410:	d30a      	bcc.n	8005428 <__exponent+0x66>
 8005412:	f10d 0209 	add.w	r2, sp, #9
 8005416:	eba2 020c 	sub.w	r2, r2, ip
 800541a:	42bc      	cmp	r4, r7
 800541c:	bf88      	it	hi
 800541e:	2200      	movhi	r2, #0
 8005420:	4413      	add	r3, r2
 8005422:	1a18      	subs	r0, r3, r0
 8005424:	b003      	add	sp, #12
 8005426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005428:	f812 5b01 	ldrb.w	r5, [r2], #1
 800542c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005430:	e7ed      	b.n	800540e <__exponent+0x4c>
 8005432:	2330      	movs	r3, #48	; 0x30
 8005434:	3130      	adds	r1, #48	; 0x30
 8005436:	7083      	strb	r3, [r0, #2]
 8005438:	70c1      	strb	r1, [r0, #3]
 800543a:	1d03      	adds	r3, r0, #4
 800543c:	e7f1      	b.n	8005422 <__exponent+0x60>
	...

08005440 <_printf_float>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	ed2d 8b02 	vpush	{d8}
 8005448:	b08d      	sub	sp, #52	; 0x34
 800544a:	460c      	mov	r4, r1
 800544c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005450:	4616      	mov	r6, r2
 8005452:	461f      	mov	r7, r3
 8005454:	4605      	mov	r5, r0
 8005456:	f000 fff9 	bl	800644c <_localeconv_r>
 800545a:	f8d0 a000 	ldr.w	sl, [r0]
 800545e:	4650      	mov	r0, sl
 8005460:	f7fa ff16 	bl	8000290 <strlen>
 8005464:	2300      	movs	r3, #0
 8005466:	930a      	str	r3, [sp, #40]	; 0x28
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	f8d8 3000 	ldr.w	r3, [r8]
 8005470:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005474:	3307      	adds	r3, #7
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	f103 0208 	add.w	r2, r3, #8
 800547e:	f8c8 2000 	str.w	r2, [r8]
 8005482:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800548a:	9307      	str	r3, [sp, #28]
 800548c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005490:	ee08 0a10 	vmov	s16, r0
 8005494:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800549c:	4b9e      	ldr	r3, [pc, #632]	; (8005718 <_printf_float+0x2d8>)
 800549e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a2:	f7fb fb53 	bl	8000b4c <__aeabi_dcmpun>
 80054a6:	bb88      	cbnz	r0, 800550c <_printf_float+0xcc>
 80054a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ac:	4b9a      	ldr	r3, [pc, #616]	; (8005718 <_printf_float+0x2d8>)
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b2:	f7fb fb2d 	bl	8000b10 <__aeabi_dcmple>
 80054b6:	bb48      	cbnz	r0, 800550c <_printf_float+0xcc>
 80054b8:	2200      	movs	r2, #0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4640      	mov	r0, r8
 80054be:	4649      	mov	r1, r9
 80054c0:	f7fb fb1c 	bl	8000afc <__aeabi_dcmplt>
 80054c4:	b110      	cbz	r0, 80054cc <_printf_float+0x8c>
 80054c6:	232d      	movs	r3, #45	; 0x2d
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054cc:	4a93      	ldr	r2, [pc, #588]	; (800571c <_printf_float+0x2dc>)
 80054ce:	4b94      	ldr	r3, [pc, #592]	; (8005720 <_printf_float+0x2e0>)
 80054d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054d4:	bf94      	ite	ls
 80054d6:	4690      	movls	r8, r2
 80054d8:	4698      	movhi	r8, r3
 80054da:	2303      	movs	r3, #3
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	9b05      	ldr	r3, [sp, #20]
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	f04f 0900 	mov.w	r9, #0
 80054ea:	9700      	str	r7, [sp, #0]
 80054ec:	4633      	mov	r3, r6
 80054ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f9da 	bl	80058ac <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	f040 8090 	bne.w	800561e <_printf_float+0x1de>
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005502:	b00d      	add	sp, #52	; 0x34
 8005504:	ecbd 8b02 	vpop	{d8}
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	4642      	mov	r2, r8
 800550e:	464b      	mov	r3, r9
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fb fb1a 	bl	8000b4c <__aeabi_dcmpun>
 8005518:	b140      	cbz	r0, 800552c <_printf_float+0xec>
 800551a:	464b      	mov	r3, r9
 800551c:	2b00      	cmp	r3, #0
 800551e:	bfbc      	itt	lt
 8005520:	232d      	movlt	r3, #45	; 0x2d
 8005522:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005526:	4a7f      	ldr	r2, [pc, #508]	; (8005724 <_printf_float+0x2e4>)
 8005528:	4b7f      	ldr	r3, [pc, #508]	; (8005728 <_printf_float+0x2e8>)
 800552a:	e7d1      	b.n	80054d0 <_printf_float+0x90>
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005532:	9206      	str	r2, [sp, #24]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	d13f      	bne.n	80055b8 <_printf_float+0x178>
 8005538:	2306      	movs	r3, #6
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	9b05      	ldr	r3, [sp, #20]
 800553e:	6861      	ldr	r1, [r4, #4]
 8005540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005544:	2300      	movs	r3, #0
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	ab0a      	add	r3, sp, #40	; 0x28
 800554a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800554e:	ab09      	add	r3, sp, #36	; 0x24
 8005550:	ec49 8b10 	vmov	d0, r8, r9
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff fece 	bl	80052fe <__cvt>
 8005562:	9b06      	ldr	r3, [sp, #24]
 8005564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005566:	2b47      	cmp	r3, #71	; 0x47
 8005568:	4680      	mov	r8, r0
 800556a:	d108      	bne.n	800557e <_printf_float+0x13e>
 800556c:	1cc8      	adds	r0, r1, #3
 800556e:	db02      	blt.n	8005576 <_printf_float+0x136>
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	4299      	cmp	r1, r3
 8005574:	dd41      	ble.n	80055fa <_printf_float+0x1ba>
 8005576:	f1ab 0302 	sub.w	r3, fp, #2
 800557a:	fa5f fb83 	uxtb.w	fp, r3
 800557e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005582:	d820      	bhi.n	80055c6 <_printf_float+0x186>
 8005584:	3901      	subs	r1, #1
 8005586:	465a      	mov	r2, fp
 8005588:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800558c:	9109      	str	r1, [sp, #36]	; 0x24
 800558e:	f7ff ff18 	bl	80053c2 <__exponent>
 8005592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005594:	1813      	adds	r3, r2, r0
 8005596:	2a01      	cmp	r2, #1
 8005598:	4681      	mov	r9, r0
 800559a:	6123      	str	r3, [r4, #16]
 800559c:	dc02      	bgt.n	80055a4 <_printf_float+0x164>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	07d2      	lsls	r2, r2, #31
 80055a2:	d501      	bpl.n	80055a8 <_printf_float+0x168>
 80055a4:	3301      	adds	r3, #1
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d09c      	beq.n	80054ea <_printf_float+0xaa>
 80055b0:	232d      	movs	r3, #45	; 0x2d
 80055b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b6:	e798      	b.n	80054ea <_printf_float+0xaa>
 80055b8:	9a06      	ldr	r2, [sp, #24]
 80055ba:	2a47      	cmp	r2, #71	; 0x47
 80055bc:	d1be      	bne.n	800553c <_printf_float+0xfc>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1bc      	bne.n	800553c <_printf_float+0xfc>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e7b9      	b.n	800553a <_printf_float+0xfa>
 80055c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055ca:	d118      	bne.n	80055fe <_printf_float+0x1be>
 80055cc:	2900      	cmp	r1, #0
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	dd0b      	ble.n	80055ea <_printf_float+0x1aa>
 80055d2:	6121      	str	r1, [r4, #16]
 80055d4:	b913      	cbnz	r3, 80055dc <_printf_float+0x19c>
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	07d0      	lsls	r0, r2, #31
 80055da:	d502      	bpl.n	80055e2 <_printf_float+0x1a2>
 80055dc:	3301      	adds	r3, #1
 80055de:	440b      	add	r3, r1
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055e4:	f04f 0900 	mov.w	r9, #0
 80055e8:	e7de      	b.n	80055a8 <_printf_float+0x168>
 80055ea:	b913      	cbnz	r3, 80055f2 <_printf_float+0x1b2>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	07d2      	lsls	r2, r2, #31
 80055f0:	d501      	bpl.n	80055f6 <_printf_float+0x1b6>
 80055f2:	3302      	adds	r3, #2
 80055f4:	e7f4      	b.n	80055e0 <_printf_float+0x1a0>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7f2      	b.n	80055e0 <_printf_float+0x1a0>
 80055fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005600:	4299      	cmp	r1, r3
 8005602:	db05      	blt.n	8005610 <_printf_float+0x1d0>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	6121      	str	r1, [r4, #16]
 8005608:	07d8      	lsls	r0, r3, #31
 800560a:	d5ea      	bpl.n	80055e2 <_printf_float+0x1a2>
 800560c:	1c4b      	adds	r3, r1, #1
 800560e:	e7e7      	b.n	80055e0 <_printf_float+0x1a0>
 8005610:	2900      	cmp	r1, #0
 8005612:	bfd4      	ite	le
 8005614:	f1c1 0202 	rsble	r2, r1, #2
 8005618:	2201      	movgt	r2, #1
 800561a:	4413      	add	r3, r2
 800561c:	e7e0      	b.n	80055e0 <_printf_float+0x1a0>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	055a      	lsls	r2, r3, #21
 8005622:	d407      	bmi.n	8005634 <_printf_float+0x1f4>
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	4642      	mov	r2, r8
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	d12c      	bne.n	800568c <_printf_float+0x24c>
 8005632:	e764      	b.n	80054fe <_printf_float+0xbe>
 8005634:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005638:	f240 80e0 	bls.w	80057fc <_printf_float+0x3bc>
 800563c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005640:	2200      	movs	r2, #0
 8005642:	2300      	movs	r3, #0
 8005644:	f7fb fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8005648:	2800      	cmp	r0, #0
 800564a:	d034      	beq.n	80056b6 <_printf_float+0x276>
 800564c:	4a37      	ldr	r2, [pc, #220]	; (800572c <_printf_float+0x2ec>)
 800564e:	2301      	movs	r3, #1
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f af51 	beq.w	80054fe <_printf_float+0xbe>
 800565c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005660:	429a      	cmp	r2, r3
 8005662:	db02      	blt.n	800566a <_printf_float+0x22a>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	07d8      	lsls	r0, r3, #31
 8005668:	d510      	bpl.n	800568c <_printf_float+0x24c>
 800566a:	ee18 3a10 	vmov	r3, s16
 800566e:	4652      	mov	r2, sl
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af41 	beq.w	80054fe <_printf_float+0xbe>
 800567c:	f04f 0800 	mov.w	r8, #0
 8005680:	f104 091a 	add.w	r9, r4, #26
 8005684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	4543      	cmp	r3, r8
 800568a:	dc09      	bgt.n	80056a0 <_printf_float+0x260>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	079b      	lsls	r3, r3, #30
 8005690:	f100 8107 	bmi.w	80058a2 <_printf_float+0x462>
 8005694:	68e0      	ldr	r0, [r4, #12]
 8005696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005698:	4298      	cmp	r0, r3
 800569a:	bfb8      	it	lt
 800569c:	4618      	movlt	r0, r3
 800569e:	e730      	b.n	8005502 <_printf_float+0xc2>
 80056a0:	2301      	movs	r3, #1
 80056a2:	464a      	mov	r2, r9
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af27 	beq.w	80054fe <_printf_float+0xbe>
 80056b0:	f108 0801 	add.w	r8, r8, #1
 80056b4:	e7e6      	b.n	8005684 <_printf_float+0x244>
 80056b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dc39      	bgt.n	8005730 <_printf_float+0x2f0>
 80056bc:	4a1b      	ldr	r2, [pc, #108]	; (800572c <_printf_float+0x2ec>)
 80056be:	2301      	movs	r3, #1
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f af19 	beq.w	80054fe <_printf_float+0xbe>
 80056cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d102      	bne.n	80056da <_printf_float+0x29a>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	d5d8      	bpl.n	800568c <_printf_float+0x24c>
 80056da:	ee18 3a10 	vmov	r3, s16
 80056de:	4652      	mov	r2, sl
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f af09 	beq.w	80054fe <_printf_float+0xbe>
 80056ec:	f04f 0900 	mov.w	r9, #0
 80056f0:	f104 0a1a 	add.w	sl, r4, #26
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	425b      	negs	r3, r3
 80056f8:	454b      	cmp	r3, r9
 80056fa:	dc01      	bgt.n	8005700 <_printf_float+0x2c0>
 80056fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fe:	e792      	b.n	8005626 <_printf_float+0x1e6>
 8005700:	2301      	movs	r3, #1
 8005702:	4652      	mov	r2, sl
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f aef7 	beq.w	80054fe <_printf_float+0xbe>
 8005710:	f109 0901 	add.w	r9, r9, #1
 8005714:	e7ee      	b.n	80056f4 <_printf_float+0x2b4>
 8005716:	bf00      	nop
 8005718:	7fefffff 	.word	0x7fefffff
 800571c:	08009f28 	.word	0x08009f28
 8005720:	08009f2c 	.word	0x08009f2c
 8005724:	08009f30 	.word	0x08009f30
 8005728:	08009f34 	.word	0x08009f34
 800572c:	08009f38 	.word	0x08009f38
 8005730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005734:	429a      	cmp	r2, r3
 8005736:	bfa8      	it	ge
 8005738:	461a      	movge	r2, r3
 800573a:	2a00      	cmp	r2, #0
 800573c:	4691      	mov	r9, r2
 800573e:	dc37      	bgt.n	80057b0 <_printf_float+0x370>
 8005740:	f04f 0b00 	mov.w	fp, #0
 8005744:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005748:	f104 021a 	add.w	r2, r4, #26
 800574c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800574e:	9305      	str	r3, [sp, #20]
 8005750:	eba3 0309 	sub.w	r3, r3, r9
 8005754:	455b      	cmp	r3, fp
 8005756:	dc33      	bgt.n	80057c0 <_printf_float+0x380>
 8005758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800575c:	429a      	cmp	r2, r3
 800575e:	db3b      	blt.n	80057d8 <_printf_float+0x398>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d438      	bmi.n	80057d8 <_printf_float+0x398>
 8005766:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800576a:	eba2 0903 	sub.w	r9, r2, r3
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	4591      	cmp	r9, r2
 8005774:	bfa8      	it	ge
 8005776:	4691      	movge	r9, r2
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	dc35      	bgt.n	80057ea <_printf_float+0x3aa>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005786:	f104 0a1a 	add.w	sl, r4, #26
 800578a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	eba3 0309 	sub.w	r3, r3, r9
 8005794:	4543      	cmp	r3, r8
 8005796:	f77f af79 	ble.w	800568c <_printf_float+0x24c>
 800579a:	2301      	movs	r3, #1
 800579c:	4652      	mov	r2, sl
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f aeaa 	beq.w	80054fe <_printf_float+0xbe>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	e7ec      	b.n	800578a <_printf_float+0x34a>
 80057b0:	4613      	mov	r3, r2
 80057b2:	4631      	mov	r1, r6
 80057b4:	4642      	mov	r2, r8
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	d1c0      	bne.n	8005740 <_printf_float+0x300>
 80057be:	e69e      	b.n	80054fe <_printf_float+0xbe>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	9205      	str	r2, [sp, #20]
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f ae97 	beq.w	80054fe <_printf_float+0xbe>
 80057d0:	9a05      	ldr	r2, [sp, #20]
 80057d2:	f10b 0b01 	add.w	fp, fp, #1
 80057d6:	e7b9      	b.n	800574c <_printf_float+0x30c>
 80057d8:	ee18 3a10 	vmov	r3, s16
 80057dc:	4652      	mov	r2, sl
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	d1be      	bne.n	8005766 <_printf_float+0x326>
 80057e8:	e689      	b.n	80054fe <_printf_float+0xbe>
 80057ea:	9a05      	ldr	r2, [sp, #20]
 80057ec:	464b      	mov	r3, r9
 80057ee:	4442      	add	r2, r8
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	d1c1      	bne.n	800577e <_printf_float+0x33e>
 80057fa:	e680      	b.n	80054fe <_printf_float+0xbe>
 80057fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057fe:	2a01      	cmp	r2, #1
 8005800:	dc01      	bgt.n	8005806 <_printf_float+0x3c6>
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d53a      	bpl.n	800587c <_printf_float+0x43c>
 8005806:	2301      	movs	r3, #1
 8005808:	4642      	mov	r2, r8
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae74 	beq.w	80054fe <_printf_float+0xbe>
 8005816:	ee18 3a10 	vmov	r3, s16
 800581a:	4652      	mov	r2, sl
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f ae6b 	beq.w	80054fe <_printf_float+0xbe>
 8005828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005834:	f7fb f958 	bl	8000ae8 <__aeabi_dcmpeq>
 8005838:	b9d8      	cbnz	r0, 8005872 <_printf_float+0x432>
 800583a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800583e:	f108 0201 	add.w	r2, r8, #1
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	d10e      	bne.n	800586a <_printf_float+0x42a>
 800584c:	e657      	b.n	80054fe <_printf_float+0xbe>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae50 	beq.w	80054fe <_printf_float+0xbe>
 800585e:	f108 0801 	add.w	r8, r8, #1
 8005862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005864:	3b01      	subs	r3, #1
 8005866:	4543      	cmp	r3, r8
 8005868:	dcf1      	bgt.n	800584e <_printf_float+0x40e>
 800586a:	464b      	mov	r3, r9
 800586c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005870:	e6da      	b.n	8005628 <_printf_float+0x1e8>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	f104 0a1a 	add.w	sl, r4, #26
 800587a:	e7f2      	b.n	8005862 <_printf_float+0x422>
 800587c:	2301      	movs	r3, #1
 800587e:	4642      	mov	r2, r8
 8005880:	e7df      	b.n	8005842 <_printf_float+0x402>
 8005882:	2301      	movs	r3, #1
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae36 	beq.w	80054fe <_printf_float+0xbe>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	4543      	cmp	r3, r8
 800589e:	dcf0      	bgt.n	8005882 <_printf_float+0x442>
 80058a0:	e6f8      	b.n	8005694 <_printf_float+0x254>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0919 	add.w	r9, r4, #25
 80058aa:	e7f4      	b.n	8005896 <_printf_float+0x456>

080058ac <_printf_common>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4616      	mov	r6, r2
 80058b2:	4699      	mov	r9, r3
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058bc:	4293      	cmp	r3, r2
 80058be:	bfb8      	it	lt
 80058c0:	4613      	movlt	r3, r2
 80058c2:	6033      	str	r3, [r6, #0]
 80058c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c8:	4607      	mov	r7, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	b10a      	cbz	r2, 80058d2 <_printf_common+0x26>
 80058ce:	3301      	adds	r3, #1
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	0699      	lsls	r1, r3, #26
 80058d6:	bf42      	ittt	mi
 80058d8:	6833      	ldrmi	r3, [r6, #0]
 80058da:	3302      	addmi	r3, #2
 80058dc:	6033      	strmi	r3, [r6, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	f015 0506 	ands.w	r5, r5, #6
 80058e4:	d106      	bne.n	80058f4 <_printf_common+0x48>
 80058e6:	f104 0a19 	add.w	sl, r4, #25
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	6832      	ldr	r2, [r6, #0]
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	dc26      	bgt.n	8005942 <_printf_common+0x96>
 80058f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f8:	1e13      	subs	r3, r2, #0
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	bf18      	it	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	0692      	lsls	r2, r2, #26
 8005902:	d42b      	bmi.n	800595c <_printf_common+0xb0>
 8005904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005908:	4649      	mov	r1, r9
 800590a:	4638      	mov	r0, r7
 800590c:	47c0      	blx	r8
 800590e:	3001      	adds	r0, #1
 8005910:	d01e      	beq.n	8005950 <_printf_common+0xa4>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b04      	cmp	r3, #4
 800591c:	bf02      	ittt	eq
 800591e:	68e5      	ldreq	r5, [r4, #12]
 8005920:	6833      	ldreq	r3, [r6, #0]
 8005922:	1aed      	subeq	r5, r5, r3
 8005924:	68a3      	ldr	r3, [r4, #8]
 8005926:	bf0c      	ite	eq
 8005928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800592c:	2500      	movne	r5, #0
 800592e:	4293      	cmp	r3, r2
 8005930:	bfc4      	itt	gt
 8005932:	1a9b      	subgt	r3, r3, r2
 8005934:	18ed      	addgt	r5, r5, r3
 8005936:	2600      	movs	r6, #0
 8005938:	341a      	adds	r4, #26
 800593a:	42b5      	cmp	r5, r6
 800593c:	d11a      	bne.n	8005974 <_printf_common+0xc8>
 800593e:	2000      	movs	r0, #0
 8005940:	e008      	b.n	8005954 <_printf_common+0xa8>
 8005942:	2301      	movs	r3, #1
 8005944:	4652      	mov	r2, sl
 8005946:	4649      	mov	r1, r9
 8005948:	4638      	mov	r0, r7
 800594a:	47c0      	blx	r8
 800594c:	3001      	adds	r0, #1
 800594e:	d103      	bne.n	8005958 <_printf_common+0xac>
 8005950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005958:	3501      	adds	r5, #1
 800595a:	e7c6      	b.n	80058ea <_printf_common+0x3e>
 800595c:	18e1      	adds	r1, r4, r3
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	2030      	movs	r0, #48	; 0x30
 8005962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005966:	4422      	add	r2, r4
 8005968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800596c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005970:	3302      	adds	r3, #2
 8005972:	e7c7      	b.n	8005904 <_printf_common+0x58>
 8005974:	2301      	movs	r3, #1
 8005976:	4622      	mov	r2, r4
 8005978:	4649      	mov	r1, r9
 800597a:	4638      	mov	r0, r7
 800597c:	47c0      	blx	r8
 800597e:	3001      	adds	r0, #1
 8005980:	d0e6      	beq.n	8005950 <_printf_common+0xa4>
 8005982:	3601      	adds	r6, #1
 8005984:	e7d9      	b.n	800593a <_printf_common+0x8e>
	...

08005988 <_printf_i>:
 8005988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	7e0f      	ldrb	r7, [r1, #24]
 800598e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005990:	2f78      	cmp	r7, #120	; 0x78
 8005992:	4691      	mov	r9, r2
 8005994:	4680      	mov	r8, r0
 8005996:	460c      	mov	r4, r1
 8005998:	469a      	mov	sl, r3
 800599a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800599e:	d807      	bhi.n	80059b0 <_printf_i+0x28>
 80059a0:	2f62      	cmp	r7, #98	; 0x62
 80059a2:	d80a      	bhi.n	80059ba <_printf_i+0x32>
 80059a4:	2f00      	cmp	r7, #0
 80059a6:	f000 80d4 	beq.w	8005b52 <_printf_i+0x1ca>
 80059aa:	2f58      	cmp	r7, #88	; 0x58
 80059ac:	f000 80c0 	beq.w	8005b30 <_printf_i+0x1a8>
 80059b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b8:	e03a      	b.n	8005a30 <_printf_i+0xa8>
 80059ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059be:	2b15      	cmp	r3, #21
 80059c0:	d8f6      	bhi.n	80059b0 <_printf_i+0x28>
 80059c2:	a101      	add	r1, pc, #4	; (adr r1, 80059c8 <_printf_i+0x40>)
 80059c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a35 	.word	0x08005a35
 80059d0:	080059b1 	.word	0x080059b1
 80059d4:	080059b1 	.word	0x080059b1
 80059d8:	080059b1 	.word	0x080059b1
 80059dc:	080059b1 	.word	0x080059b1
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	080059b1 	.word	0x080059b1
 80059e8:	080059b1 	.word	0x080059b1
 80059ec:	080059b1 	.word	0x080059b1
 80059f0:	080059b1 	.word	0x080059b1
 80059f4:	08005b39 	.word	0x08005b39
 80059f8:	08005a61 	.word	0x08005a61
 80059fc:	08005af3 	.word	0x08005af3
 8005a00:	080059b1 	.word	0x080059b1
 8005a04:	080059b1 	.word	0x080059b1
 8005a08:	08005b5b 	.word	0x08005b5b
 8005a0c:	080059b1 	.word	0x080059b1
 8005a10:	08005a61 	.word	0x08005a61
 8005a14:	080059b1 	.word	0x080059b1
 8005a18:	080059b1 	.word	0x080059b1
 8005a1c:	08005afb 	.word	0x08005afb
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	1d1a      	adds	r2, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	602a      	str	r2, [r5, #0]
 8005a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a30:	2301      	movs	r3, #1
 8005a32:	e09f      	b.n	8005b74 <_printf_i+0x1ec>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	0607      	lsls	r7, r0, #24
 8005a3a:	f103 0104 	add.w	r1, r3, #4
 8005a3e:	6029      	str	r1, [r5, #0]
 8005a40:	d501      	bpl.n	8005a46 <_printf_i+0xbe>
 8005a42:	681e      	ldr	r6, [r3, #0]
 8005a44:	e003      	b.n	8005a4e <_printf_i+0xc6>
 8005a46:	0646      	lsls	r6, r0, #25
 8005a48:	d5fb      	bpl.n	8005a42 <_printf_i+0xba>
 8005a4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	da03      	bge.n	8005a5a <_printf_i+0xd2>
 8005a52:	232d      	movs	r3, #45	; 0x2d
 8005a54:	4276      	negs	r6, r6
 8005a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5a:	485a      	ldr	r0, [pc, #360]	; (8005bc4 <_printf_i+0x23c>)
 8005a5c:	230a      	movs	r3, #10
 8005a5e:	e012      	b.n	8005a86 <_printf_i+0xfe>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1d19      	adds	r1, r3, #4
 8005a66:	6029      	str	r1, [r5, #0]
 8005a68:	0605      	lsls	r5, r0, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xe8>
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xee>
 8005a70:	0641      	lsls	r1, r0, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe4>
 8005a74:	881e      	ldrh	r6, [r3, #0]
 8005a76:	4853      	ldr	r0, [pc, #332]	; (8005bc4 <_printf_i+0x23c>)
 8005a78:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2308      	moveq	r3, #8
 8005a7e:	230a      	movne	r3, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6865      	ldr	r5, [r4, #4]
 8005a88:	60a5      	str	r5, [r4, #8]
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	bfa2      	ittt	ge
 8005a8e:	6821      	ldrge	r1, [r4, #0]
 8005a90:	f021 0104 	bicge.w	r1, r1, #4
 8005a94:	6021      	strge	r1, [r4, #0]
 8005a96:	b90e      	cbnz	r6, 8005a9c <_printf_i+0x114>
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	d04b      	beq.n	8005b34 <_printf_i+0x1ac>
 8005a9c:	4615      	mov	r5, r2
 8005a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8005aa6:	5dc7      	ldrb	r7, [r0, r7]
 8005aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005aac:	4637      	mov	r7, r6
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	d9f4      	bls.n	8005a9e <_printf_i+0x116>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d10b      	bne.n	8005ad0 <_printf_i+0x148>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07de      	lsls	r6, r3, #31
 8005abc:	d508      	bpl.n	8005ad0 <_printf_i+0x148>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	bfde      	ittt	le
 8005ac6:	2330      	movle	r3, #48	; 0x30
 8005ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005acc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ad0:	1b52      	subs	r2, r2, r5
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	f8cd a000 	str.w	sl, [sp]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fee4 	bl	80058ac <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14a      	bne.n	8005b7e <_printf_i+0x1f6>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aec:	b004      	add	sp, #16
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	f043 0320 	orr.w	r3, r3, #32
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	4833      	ldr	r0, [pc, #204]	; (8005bc8 <_printf_i+0x240>)
 8005afc:	2778      	movs	r7, #120	; 0x78
 8005afe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	6829      	ldr	r1, [r5, #0]
 8005b06:	061f      	lsls	r7, r3, #24
 8005b08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b0c:	d402      	bmi.n	8005b14 <_printf_i+0x18c>
 8005b0e:	065f      	lsls	r7, r3, #25
 8005b10:	bf48      	it	mi
 8005b12:	b2b6      	uxthmi	r6, r6
 8005b14:	07df      	lsls	r7, r3, #31
 8005b16:	bf48      	it	mi
 8005b18:	f043 0320 	orrmi.w	r3, r3, #32
 8005b1c:	6029      	str	r1, [r5, #0]
 8005b1e:	bf48      	it	mi
 8005b20:	6023      	strmi	r3, [r4, #0]
 8005b22:	b91e      	cbnz	r6, 8005b2c <_printf_i+0x1a4>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	f023 0320 	bic.w	r3, r3, #32
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	e7a7      	b.n	8005a80 <_printf_i+0xf8>
 8005b30:	4824      	ldr	r0, [pc, #144]	; (8005bc4 <_printf_i+0x23c>)
 8005b32:	e7e4      	b.n	8005afe <_printf_i+0x176>
 8005b34:	4615      	mov	r5, r2
 8005b36:	e7bd      	b.n	8005ab4 <_printf_i+0x12c>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	6826      	ldr	r6, [r4, #0]
 8005b3c:	6961      	ldr	r1, [r4, #20]
 8005b3e:	1d18      	adds	r0, r3, #4
 8005b40:	6028      	str	r0, [r5, #0]
 8005b42:	0635      	lsls	r5, r6, #24
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	d501      	bpl.n	8005b4c <_printf_i+0x1c4>
 8005b48:	6019      	str	r1, [r3, #0]
 8005b4a:	e002      	b.n	8005b52 <_printf_i+0x1ca>
 8005b4c:	0670      	lsls	r0, r6, #25
 8005b4e:	d5fb      	bpl.n	8005b48 <_printf_i+0x1c0>
 8005b50:	8019      	strh	r1, [r3, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	4615      	mov	r5, r2
 8005b58:	e7bc      	b.n	8005ad4 <_printf_i+0x14c>
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	681d      	ldr	r5, [r3, #0]
 8005b62:	6862      	ldr	r2, [r4, #4]
 8005b64:	2100      	movs	r1, #0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f7fa fb42 	bl	80001f0 <memchr>
 8005b6c:	b108      	cbz	r0, 8005b72 <_printf_i+0x1ea>
 8005b6e:	1b40      	subs	r0, r0, r5
 8005b70:	6060      	str	r0, [r4, #4]
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	6123      	str	r3, [r4, #16]
 8005b76:	2300      	movs	r3, #0
 8005b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7c:	e7aa      	b.n	8005ad4 <_printf_i+0x14c>
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	462a      	mov	r2, r5
 8005b82:	4649      	mov	r1, r9
 8005b84:	4640      	mov	r0, r8
 8005b86:	47d0      	blx	sl
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d0ad      	beq.n	8005ae8 <_printf_i+0x160>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	079b      	lsls	r3, r3, #30
 8005b90:	d413      	bmi.n	8005bba <_printf_i+0x232>
 8005b92:	68e0      	ldr	r0, [r4, #12]
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	4298      	cmp	r0, r3
 8005b98:	bfb8      	it	lt
 8005b9a:	4618      	movlt	r0, r3
 8005b9c:	e7a6      	b.n	8005aec <_printf_i+0x164>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	47d0      	blx	sl
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d09d      	beq.n	8005ae8 <_printf_i+0x160>
 8005bac:	3501      	adds	r5, #1
 8005bae:	68e3      	ldr	r3, [r4, #12]
 8005bb0:	9903      	ldr	r1, [sp, #12]
 8005bb2:	1a5b      	subs	r3, r3, r1
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	dcf2      	bgt.n	8005b9e <_printf_i+0x216>
 8005bb8:	e7eb      	b.n	8005b92 <_printf_i+0x20a>
 8005bba:	2500      	movs	r5, #0
 8005bbc:	f104 0619 	add.w	r6, r4, #25
 8005bc0:	e7f5      	b.n	8005bae <_printf_i+0x226>
 8005bc2:	bf00      	nop
 8005bc4:	08009f3a 	.word	0x08009f3a
 8005bc8:	08009f4b 	.word	0x08009f4b

08005bcc <_scanf_float>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	4617      	mov	r7, r2
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	688b      	ldr	r3, [r1, #8]
 8005bd8:	1e5a      	subs	r2, r3, #1
 8005bda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005bde:	bf83      	ittte	hi
 8005be0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005be4:	195b      	addhi	r3, r3, r5
 8005be6:	9302      	strhi	r3, [sp, #8]
 8005be8:	2300      	movls	r3, #0
 8005bea:	bf86      	itte	hi
 8005bec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005bf0:	608b      	strhi	r3, [r1, #8]
 8005bf2:	9302      	strls	r3, [sp, #8]
 8005bf4:	680b      	ldr	r3, [r1, #0]
 8005bf6:	468b      	mov	fp, r1
 8005bf8:	2500      	movs	r5, #0
 8005bfa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005bfe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c06:	4680      	mov	r8, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	465e      	mov	r6, fp
 8005c0c:	46aa      	mov	sl, r5
 8005c0e:	46a9      	mov	r9, r5
 8005c10:	9501      	str	r5, [sp, #4]
 8005c12:	68a2      	ldr	r2, [r4, #8]
 8005c14:	b152      	cbz	r2, 8005c2c <_scanf_float+0x60>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b4e      	cmp	r3, #78	; 0x4e
 8005c1c:	d864      	bhi.n	8005ce8 <_scanf_float+0x11c>
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d83c      	bhi.n	8005c9c <_scanf_float+0xd0>
 8005c22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c26:	b2c8      	uxtb	r0, r1
 8005c28:	280e      	cmp	r0, #14
 8005c2a:	d93a      	bls.n	8005ca2 <_scanf_float+0xd6>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	d003      	beq.n	8005c3a <_scanf_float+0x6e>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c3e:	f1ba 0f01 	cmp.w	sl, #1
 8005c42:	f200 8113 	bhi.w	8005e6c <_scanf_float+0x2a0>
 8005c46:	455e      	cmp	r6, fp
 8005c48:	f200 8105 	bhi.w	8005e56 <_scanf_float+0x28a>
 8005c4c:	2501      	movs	r5, #1
 8005c4e:	4628      	mov	r0, r5
 8005c50:	b007      	add	sp, #28
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c5a:	2a0d      	cmp	r2, #13
 8005c5c:	d8e6      	bhi.n	8005c2c <_scanf_float+0x60>
 8005c5e:	a101      	add	r1, pc, #4	; (adr r1, 8005c64 <_scanf_float+0x98>)
 8005c60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c64:	08005da3 	.word	0x08005da3
 8005c68:	08005c2d 	.word	0x08005c2d
 8005c6c:	08005c2d 	.word	0x08005c2d
 8005c70:	08005c2d 	.word	0x08005c2d
 8005c74:	08005e03 	.word	0x08005e03
 8005c78:	08005ddb 	.word	0x08005ddb
 8005c7c:	08005c2d 	.word	0x08005c2d
 8005c80:	08005c2d 	.word	0x08005c2d
 8005c84:	08005db1 	.word	0x08005db1
 8005c88:	08005c2d 	.word	0x08005c2d
 8005c8c:	08005c2d 	.word	0x08005c2d
 8005c90:	08005c2d 	.word	0x08005c2d
 8005c94:	08005c2d 	.word	0x08005c2d
 8005c98:	08005d69 	.word	0x08005d69
 8005c9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005ca0:	e7db      	b.n	8005c5a <_scanf_float+0x8e>
 8005ca2:	290e      	cmp	r1, #14
 8005ca4:	d8c2      	bhi.n	8005c2c <_scanf_float+0x60>
 8005ca6:	a001      	add	r0, pc, #4	; (adr r0, 8005cac <_scanf_float+0xe0>)
 8005ca8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005cac:	08005d5b 	.word	0x08005d5b
 8005cb0:	08005c2d 	.word	0x08005c2d
 8005cb4:	08005d5b 	.word	0x08005d5b
 8005cb8:	08005def 	.word	0x08005def
 8005cbc:	08005c2d 	.word	0x08005c2d
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d45 	.word	0x08005d45
 8005cc8:	08005d45 	.word	0x08005d45
 8005ccc:	08005d45 	.word	0x08005d45
 8005cd0:	08005d45 	.word	0x08005d45
 8005cd4:	08005d45 	.word	0x08005d45
 8005cd8:	08005d45 	.word	0x08005d45
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005d45 	.word	0x08005d45
 8005ce4:	08005d45 	.word	0x08005d45
 8005ce8:	2b6e      	cmp	r3, #110	; 0x6e
 8005cea:	d809      	bhi.n	8005d00 <_scanf_float+0x134>
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d8b2      	bhi.n	8005c56 <_scanf_float+0x8a>
 8005cf0:	2b54      	cmp	r3, #84	; 0x54
 8005cf2:	d077      	beq.n	8005de4 <_scanf_float+0x218>
 8005cf4:	2b59      	cmp	r3, #89	; 0x59
 8005cf6:	d199      	bne.n	8005c2c <_scanf_float+0x60>
 8005cf8:	2d07      	cmp	r5, #7
 8005cfa:	d197      	bne.n	8005c2c <_scanf_float+0x60>
 8005cfc:	2508      	movs	r5, #8
 8005cfe:	e029      	b.n	8005d54 <_scanf_float+0x188>
 8005d00:	2b74      	cmp	r3, #116	; 0x74
 8005d02:	d06f      	beq.n	8005de4 <_scanf_float+0x218>
 8005d04:	2b79      	cmp	r3, #121	; 0x79
 8005d06:	e7f6      	b.n	8005cf6 <_scanf_float+0x12a>
 8005d08:	6821      	ldr	r1, [r4, #0]
 8005d0a:	05c8      	lsls	r0, r1, #23
 8005d0c:	d51a      	bpl.n	8005d44 <_scanf_float+0x178>
 8005d0e:	9b02      	ldr	r3, [sp, #8]
 8005d10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d14:	6021      	str	r1, [r4, #0]
 8005d16:	f109 0901 	add.w	r9, r9, #1
 8005d1a:	b11b      	cbz	r3, 8005d24 <_scanf_float+0x158>
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	3201      	adds	r2, #1
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	60a2      	str	r2, [r4, #8]
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	f340 8084 	ble.w	8005e44 <_scanf_float+0x278>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	e766      	b.n	8005c12 <_scanf_float+0x46>
 8005d44:	eb1a 0f05 	cmn.w	sl, r5
 8005d48:	f47f af70 	bne.w	8005c2c <_scanf_float+0x60>
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d52:	6022      	str	r2, [r4, #0]
 8005d54:	f806 3b01 	strb.w	r3, [r6], #1
 8005d58:	e7e4      	b.n	8005d24 <_scanf_float+0x158>
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	0610      	lsls	r0, r2, #24
 8005d5e:	f57f af65 	bpl.w	8005c2c <_scanf_float+0x60>
 8005d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d66:	e7f4      	b.n	8005d52 <_scanf_float+0x186>
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d10e      	bne.n	8005d8c <_scanf_float+0x1c0>
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	d10e      	bne.n	8005d92 <_scanf_float+0x1c6>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d7e:	d108      	bne.n	8005d92 <_scanf_float+0x1c6>
 8005d80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d84:	6022      	str	r2, [r4, #0]
 8005d86:	f04f 0a01 	mov.w	sl, #1
 8005d8a:	e7e3      	b.n	8005d54 <_scanf_float+0x188>
 8005d8c:	f1ba 0f02 	cmp.w	sl, #2
 8005d90:	d055      	beq.n	8005e3e <_scanf_float+0x272>
 8005d92:	2d01      	cmp	r5, #1
 8005d94:	d002      	beq.n	8005d9c <_scanf_float+0x1d0>
 8005d96:	2d04      	cmp	r5, #4
 8005d98:	f47f af48 	bne.w	8005c2c <_scanf_float+0x60>
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	b2ed      	uxtb	r5, r5
 8005da0:	e7d8      	b.n	8005d54 <_scanf_float+0x188>
 8005da2:	f1ba 0f01 	cmp.w	sl, #1
 8005da6:	f47f af41 	bne.w	8005c2c <_scanf_float+0x60>
 8005daa:	f04f 0a02 	mov.w	sl, #2
 8005dae:	e7d1      	b.n	8005d54 <_scanf_float+0x188>
 8005db0:	b97d      	cbnz	r5, 8005dd2 <_scanf_float+0x206>
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	f47f af3c 	bne.w	8005c32 <_scanf_float+0x66>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005dc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005dc4:	f47f af39 	bne.w	8005c3a <_scanf_float+0x6e>
 8005dc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dcc:	6022      	str	r2, [r4, #0]
 8005dce:	2501      	movs	r5, #1
 8005dd0:	e7c0      	b.n	8005d54 <_scanf_float+0x188>
 8005dd2:	2d03      	cmp	r5, #3
 8005dd4:	d0e2      	beq.n	8005d9c <_scanf_float+0x1d0>
 8005dd6:	2d05      	cmp	r5, #5
 8005dd8:	e7de      	b.n	8005d98 <_scanf_float+0x1cc>
 8005dda:	2d02      	cmp	r5, #2
 8005ddc:	f47f af26 	bne.w	8005c2c <_scanf_float+0x60>
 8005de0:	2503      	movs	r5, #3
 8005de2:	e7b7      	b.n	8005d54 <_scanf_float+0x188>
 8005de4:	2d06      	cmp	r5, #6
 8005de6:	f47f af21 	bne.w	8005c2c <_scanf_float+0x60>
 8005dea:	2507      	movs	r5, #7
 8005dec:	e7b2      	b.n	8005d54 <_scanf_float+0x188>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	0591      	lsls	r1, r2, #22
 8005df2:	f57f af1b 	bpl.w	8005c2c <_scanf_float+0x60>
 8005df6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e00:	e7a8      	b.n	8005d54 <_scanf_float+0x188>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e0c:	d006      	beq.n	8005e1c <_scanf_float+0x250>
 8005e0e:	0550      	lsls	r0, r2, #21
 8005e10:	f57f af0c 	bpl.w	8005c2c <_scanf_float+0x60>
 8005e14:	f1b9 0f00 	cmp.w	r9, #0
 8005e18:	f43f af0f 	beq.w	8005c3a <_scanf_float+0x6e>
 8005e1c:	0591      	lsls	r1, r2, #22
 8005e1e:	bf58      	it	pl
 8005e20:	9901      	ldrpl	r1, [sp, #4]
 8005e22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e26:	bf58      	it	pl
 8005e28:	eba9 0101 	subpl.w	r1, r9, r1
 8005e2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005e30:	bf58      	it	pl
 8005e32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	f04f 0900 	mov.w	r9, #0
 8005e3c:	e78a      	b.n	8005d54 <_scanf_float+0x188>
 8005e3e:	f04f 0a03 	mov.w	sl, #3
 8005e42:	e787      	b.n	8005d54 <_scanf_float+0x188>
 8005e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4798      	blx	r3
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f aedf 	beq.w	8005c12 <_scanf_float+0x46>
 8005e54:	e6ea      	b.n	8005c2c <_scanf_float+0x60>
 8005e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e5e:	463a      	mov	r2, r7
 8005e60:	4640      	mov	r0, r8
 8005e62:	4798      	blx	r3
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	e6ec      	b.n	8005c46 <_scanf_float+0x7a>
 8005e6c:	1e6b      	subs	r3, r5, #1
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d825      	bhi.n	8005ebe <_scanf_float+0x2f2>
 8005e72:	2d02      	cmp	r5, #2
 8005e74:	d836      	bhi.n	8005ee4 <_scanf_float+0x318>
 8005e76:	455e      	cmp	r6, fp
 8005e78:	f67f aee8 	bls.w	8005c4c <_scanf_float+0x80>
 8005e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e84:	463a      	mov	r2, r7
 8005e86:	4640      	mov	r0, r8
 8005e88:	4798      	blx	r3
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	e7f1      	b.n	8005e76 <_scanf_float+0x2aa>
 8005e92:	9802      	ldr	r0, [sp, #8]
 8005e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e9c:	9002      	str	r0, [sp, #8]
 8005e9e:	463a      	mov	r2, r7
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4798      	blx	r3
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005eae:	fa5f fa8a 	uxtb.w	sl, sl
 8005eb2:	f1ba 0f02 	cmp.w	sl, #2
 8005eb6:	d1ec      	bne.n	8005e92 <_scanf_float+0x2c6>
 8005eb8:	3d03      	subs	r5, #3
 8005eba:	b2ed      	uxtb	r5, r5
 8005ebc:	1b76      	subs	r6, r6, r5
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	05da      	lsls	r2, r3, #23
 8005ec2:	d52f      	bpl.n	8005f24 <_scanf_float+0x358>
 8005ec4:	055b      	lsls	r3, r3, #21
 8005ec6:	d510      	bpl.n	8005eea <_scanf_float+0x31e>
 8005ec8:	455e      	cmp	r6, fp
 8005eca:	f67f aebf 	bls.w	8005c4c <_scanf_float+0x80>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4798      	blx	r3
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e7f1      	b.n	8005ec8 <_scanf_float+0x2fc>
 8005ee4:	46aa      	mov	sl, r5
 8005ee6:	9602      	str	r6, [sp, #8]
 8005ee8:	e7df      	b.n	8005eaa <_scanf_float+0x2de>
 8005eea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	2965      	cmp	r1, #101	; 0x65
 8005ef2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005ef6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	d00c      	beq.n	8005f18 <_scanf_float+0x34c>
 8005efe:	2945      	cmp	r1, #69	; 0x45
 8005f00:	d00a      	beq.n	8005f18 <_scanf_float+0x34c>
 8005f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f06:	463a      	mov	r2, r7
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4798      	blx	r3
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	1eb5      	subs	r5, r6, #2
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f1c:	463a      	mov	r2, r7
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4798      	blx	r3
 8005f22:	462e      	mov	r6, r5
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	f015 0510 	ands.w	r5, r5, #16
 8005f2a:	d158      	bne.n	8005fde <_scanf_float+0x412>
 8005f2c:	7035      	strb	r5, [r6, #0]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d11c      	bne.n	8005f74 <_scanf_float+0x3a8>
 8005f3a:	9b01      	ldr	r3, [sp, #4]
 8005f3c:	454b      	cmp	r3, r9
 8005f3e:	eba3 0209 	sub.w	r2, r3, r9
 8005f42:	d124      	bne.n	8005f8e <_scanf_float+0x3c2>
 8005f44:	2200      	movs	r2, #0
 8005f46:	4659      	mov	r1, fp
 8005f48:	4640      	mov	r0, r8
 8005f4a:	f002 fd31 	bl	80089b0 <_strtod_r>
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	6821      	ldr	r1, [r4, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f011 0f02 	tst.w	r1, #2
 8005f58:	ec57 6b10 	vmov	r6, r7, d0
 8005f5c:	f103 0204 	add.w	r2, r3, #4
 8005f60:	d020      	beq.n	8005fa4 <_scanf_float+0x3d8>
 8005f62:	9903      	ldr	r1, [sp, #12]
 8005f64:	600a      	str	r2, [r1, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	e9c3 6700 	strd	r6, r7, [r3]
 8005f6c:	68e3      	ldr	r3, [r4, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60e3      	str	r3, [r4, #12]
 8005f72:	e66c      	b.n	8005c4e <_scanf_float+0x82>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0e4      	beq.n	8005f44 <_scanf_float+0x378>
 8005f7a:	9905      	ldr	r1, [sp, #20]
 8005f7c:	230a      	movs	r3, #10
 8005f7e:	462a      	mov	r2, r5
 8005f80:	3101      	adds	r1, #1
 8005f82:	4640      	mov	r0, r8
 8005f84:	f002 fd9c 	bl	8008ac0 <_strtol_r>
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	9e05      	ldr	r6, [sp, #20]
 8005f8c:	1ac2      	subs	r2, r0, r3
 8005f8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005f92:	429e      	cmp	r6, r3
 8005f94:	bf28      	it	cs
 8005f96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f9a:	4912      	ldr	r1, [pc, #72]	; (8005fe4 <_scanf_float+0x418>)
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f955 	bl	800624c <siprintf>
 8005fa2:	e7cf      	b.n	8005f44 <_scanf_float+0x378>
 8005fa4:	f011 0f04 	tst.w	r1, #4
 8005fa8:	9903      	ldr	r1, [sp, #12]
 8005faa:	600a      	str	r2, [r1, #0]
 8005fac:	d1db      	bne.n	8005f66 <_scanf_float+0x39a>
 8005fae:	f8d3 8000 	ldr.w	r8, [r3]
 8005fb2:	ee10 2a10 	vmov	r2, s0
 8005fb6:	ee10 0a10 	vmov	r0, s0
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa fdc5 	bl	8000b4c <__aeabi_dcmpun>
 8005fc2:	b128      	cbz	r0, 8005fd0 <_scanf_float+0x404>
 8005fc4:	4808      	ldr	r0, [pc, #32]	; (8005fe8 <_scanf_float+0x41c>)
 8005fc6:	f000 fab9 	bl	800653c <nanf>
 8005fca:	ed88 0a00 	vstr	s0, [r8]
 8005fce:	e7cd      	b.n	8005f6c <_scanf_float+0x3a0>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa fe18 	bl	8000c08 <__aeabi_d2f>
 8005fd8:	f8c8 0000 	str.w	r0, [r8]
 8005fdc:	e7c6      	b.n	8005f6c <_scanf_float+0x3a0>
 8005fde:	2500      	movs	r5, #0
 8005fe0:	e635      	b.n	8005c4e <_scanf_float+0x82>
 8005fe2:	bf00      	nop
 8005fe4:	08009f5c 	.word	0x08009f5c
 8005fe8:	0800a2ed 	.word	0x0800a2ed

08005fec <std>:
 8005fec:	2300      	movs	r3, #0
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ffa:	6083      	str	r3, [r0, #8]
 8005ffc:	8181      	strh	r1, [r0, #12]
 8005ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8006000:	81c2      	strh	r2, [r0, #14]
 8006002:	6183      	str	r3, [r0, #24]
 8006004:	4619      	mov	r1, r3
 8006006:	2208      	movs	r2, #8
 8006008:	305c      	adds	r0, #92	; 0x5c
 800600a:	f000 fa17 	bl	800643c <memset>
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <std+0x58>)
 8006010:	6263      	str	r3, [r4, #36]	; 0x24
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <std+0x5c>)
 8006014:	62a3      	str	r3, [r4, #40]	; 0x28
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <std+0x60>)
 8006018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <std+0x64>)
 800601c:	6323      	str	r3, [r4, #48]	; 0x30
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <std+0x68>)
 8006020:	6224      	str	r4, [r4, #32]
 8006022:	429c      	cmp	r4, r3
 8006024:	d006      	beq.n	8006034 <std+0x48>
 8006026:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800602a:	4294      	cmp	r4, r2
 800602c:	d002      	beq.n	8006034 <std+0x48>
 800602e:	33d0      	adds	r3, #208	; 0xd0
 8006030:	429c      	cmp	r4, r3
 8006032:	d105      	bne.n	8006040 <std+0x54>
 8006034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800603c:	f000 ba7a 	b.w	8006534 <__retarget_lock_init_recursive>
 8006040:	bd10      	pop	{r4, pc}
 8006042:	bf00      	nop
 8006044:	0800628d 	.word	0x0800628d
 8006048:	080062af 	.word	0x080062af
 800604c:	080062e7 	.word	0x080062e7
 8006050:	0800630b 	.word	0x0800630b
 8006054:	20000414 	.word	0x20000414

08006058 <stdio_exit_handler>:
 8006058:	4a02      	ldr	r2, [pc, #8]	; (8006064 <stdio_exit_handler+0xc>)
 800605a:	4903      	ldr	r1, [pc, #12]	; (8006068 <stdio_exit_handler+0x10>)
 800605c:	4803      	ldr	r0, [pc, #12]	; (800606c <stdio_exit_handler+0x14>)
 800605e:	f000 b869 	b.w	8006134 <_fwalk_sglue>
 8006062:	bf00      	nop
 8006064:	20000024 	.word	0x20000024
 8006068:	08009109 	.word	0x08009109
 800606c:	20000030 	.word	0x20000030

08006070 <cleanup_stdio>:
 8006070:	6841      	ldr	r1, [r0, #4]
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <cleanup_stdio+0x34>)
 8006074:	4299      	cmp	r1, r3
 8006076:	b510      	push	{r4, lr}
 8006078:	4604      	mov	r4, r0
 800607a:	d001      	beq.n	8006080 <cleanup_stdio+0x10>
 800607c:	f003 f844 	bl	8009108 <_fflush_r>
 8006080:	68a1      	ldr	r1, [r4, #8]
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <cleanup_stdio+0x38>)
 8006084:	4299      	cmp	r1, r3
 8006086:	d002      	beq.n	800608e <cleanup_stdio+0x1e>
 8006088:	4620      	mov	r0, r4
 800608a:	f003 f83d 	bl	8009108 <_fflush_r>
 800608e:	68e1      	ldr	r1, [r4, #12]
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <cleanup_stdio+0x3c>)
 8006092:	4299      	cmp	r1, r3
 8006094:	d004      	beq.n	80060a0 <cleanup_stdio+0x30>
 8006096:	4620      	mov	r0, r4
 8006098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800609c:	f003 b834 	b.w	8009108 <_fflush_r>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	bf00      	nop
 80060a4:	20000414 	.word	0x20000414
 80060a8:	2000047c 	.word	0x2000047c
 80060ac:	200004e4 	.word	0x200004e4

080060b0 <global_stdio_init.part.0>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <global_stdio_init.part.0+0x30>)
 80060b4:	4c0b      	ldr	r4, [pc, #44]	; (80060e4 <global_stdio_init.part.0+0x34>)
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <global_stdio_init.part.0+0x38>)
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	4620      	mov	r0, r4
 80060bc:	2200      	movs	r2, #0
 80060be:	2104      	movs	r1, #4
 80060c0:	f7ff ff94 	bl	8005fec <std>
 80060c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060c8:	2201      	movs	r2, #1
 80060ca:	2109      	movs	r1, #9
 80060cc:	f7ff ff8e 	bl	8005fec <std>
 80060d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060d4:	2202      	movs	r2, #2
 80060d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060da:	2112      	movs	r1, #18
 80060dc:	f7ff bf86 	b.w	8005fec <std>
 80060e0:	2000054c 	.word	0x2000054c
 80060e4:	20000414 	.word	0x20000414
 80060e8:	08006059 	.word	0x08006059

080060ec <__sfp_lock_acquire>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__sfp_lock_acquire+0x8>)
 80060ee:	f000 ba22 	b.w	8006536 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000555 	.word	0x20000555

080060f8 <__sfp_lock_release>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__sfp_lock_release+0x8>)
 80060fa:	f000 ba1d 	b.w	8006538 <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	20000555 	.word	0x20000555

08006104 <__sinit>:
 8006104:	b510      	push	{r4, lr}
 8006106:	4604      	mov	r4, r0
 8006108:	f7ff fff0 	bl	80060ec <__sfp_lock_acquire>
 800610c:	6a23      	ldr	r3, [r4, #32]
 800610e:	b11b      	cbz	r3, 8006118 <__sinit+0x14>
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	f7ff bff0 	b.w	80060f8 <__sfp_lock_release>
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <__sinit+0x28>)
 800611a:	6223      	str	r3, [r4, #32]
 800611c:	4b04      	ldr	r3, [pc, #16]	; (8006130 <__sinit+0x2c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f5      	bne.n	8006110 <__sinit+0xc>
 8006124:	f7ff ffc4 	bl	80060b0 <global_stdio_init.part.0>
 8006128:	e7f2      	b.n	8006110 <__sinit+0xc>
 800612a:	bf00      	nop
 800612c:	08006071 	.word	0x08006071
 8006130:	2000054c 	.word	0x2000054c

08006134 <_fwalk_sglue>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	4607      	mov	r7, r0
 800613a:	4688      	mov	r8, r1
 800613c:	4614      	mov	r4, r2
 800613e:	2600      	movs	r6, #0
 8006140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006144:	f1b9 0901 	subs.w	r9, r9, #1
 8006148:	d505      	bpl.n	8006156 <_fwalk_sglue+0x22>
 800614a:	6824      	ldr	r4, [r4, #0]
 800614c:	2c00      	cmp	r4, #0
 800614e:	d1f7      	bne.n	8006140 <_fwalk_sglue+0xc>
 8006150:	4630      	mov	r0, r6
 8006152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006156:	89ab      	ldrh	r3, [r5, #12]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d907      	bls.n	800616c <_fwalk_sglue+0x38>
 800615c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006160:	3301      	adds	r3, #1
 8006162:	d003      	beq.n	800616c <_fwalk_sglue+0x38>
 8006164:	4629      	mov	r1, r5
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	4306      	orrs	r6, r0
 800616c:	3568      	adds	r5, #104	; 0x68
 800616e:	e7e9      	b.n	8006144 <_fwalk_sglue+0x10>

08006170 <iprintf>:
 8006170:	b40f      	push	{r0, r1, r2, r3}
 8006172:	b507      	push	{r0, r1, r2, lr}
 8006174:	4906      	ldr	r1, [pc, #24]	; (8006190 <iprintf+0x20>)
 8006176:	ab04      	add	r3, sp, #16
 8006178:	6808      	ldr	r0, [r1, #0]
 800617a:	f853 2b04 	ldr.w	r2, [r3], #4
 800617e:	6881      	ldr	r1, [r0, #8]
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	f002 fe21 	bl	8008dc8 <_vfiprintf_r>
 8006186:	b003      	add	sp, #12
 8006188:	f85d eb04 	ldr.w	lr, [sp], #4
 800618c:	b004      	add	sp, #16
 800618e:	4770      	bx	lr
 8006190:	2000007c 	.word	0x2000007c

08006194 <_puts_r>:
 8006194:	6a03      	ldr	r3, [r0, #32]
 8006196:	b570      	push	{r4, r5, r6, lr}
 8006198:	6884      	ldr	r4, [r0, #8]
 800619a:	4605      	mov	r5, r0
 800619c:	460e      	mov	r6, r1
 800619e:	b90b      	cbnz	r3, 80061a4 <_puts_r+0x10>
 80061a0:	f7ff ffb0 	bl	8006104 <__sinit>
 80061a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a6:	07db      	lsls	r3, r3, #31
 80061a8:	d405      	bmi.n	80061b6 <_puts_r+0x22>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	0598      	lsls	r0, r3, #22
 80061ae:	d402      	bmi.n	80061b6 <_puts_r+0x22>
 80061b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b2:	f000 f9c0 	bl	8006536 <__retarget_lock_acquire_recursive>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	0719      	lsls	r1, r3, #28
 80061ba:	d513      	bpl.n	80061e4 <_puts_r+0x50>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	b18b      	cbz	r3, 80061e4 <_puts_r+0x50>
 80061c0:	3e01      	subs	r6, #1
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061c8:	3b01      	subs	r3, #1
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	b9e9      	cbnz	r1, 800620a <_puts_r+0x76>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da2e      	bge.n	8006230 <_puts_r+0x9c>
 80061d2:	4622      	mov	r2, r4
 80061d4:	210a      	movs	r1, #10
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 f89b 	bl	8006312 <__swbuf_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	d007      	beq.n	80061f0 <_puts_r+0x5c>
 80061e0:	250a      	movs	r5, #10
 80061e2:	e007      	b.n	80061f4 <_puts_r+0x60>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 f8d0 	bl	800638c <__swsetup_r>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d0e7      	beq.n	80061c0 <_puts_r+0x2c>
 80061f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80061f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061f6:	07da      	lsls	r2, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_puts_r+0x72>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	059b      	lsls	r3, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_puts_r+0x72>
 8006200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006202:	f000 f999 	bl	8006538 <__retarget_lock_release_recursive>
 8006206:	4628      	mov	r0, r5
 8006208:	bd70      	pop	{r4, r5, r6, pc}
 800620a:	2b00      	cmp	r3, #0
 800620c:	da04      	bge.n	8006218 <_puts_r+0x84>
 800620e:	69a2      	ldr	r2, [r4, #24]
 8006210:	429a      	cmp	r2, r3
 8006212:	dc06      	bgt.n	8006222 <_puts_r+0x8e>
 8006214:	290a      	cmp	r1, #10
 8006216:	d004      	beq.n	8006222 <_puts_r+0x8e>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	6022      	str	r2, [r4, #0]
 800621e:	7019      	strb	r1, [r3, #0]
 8006220:	e7cf      	b.n	80061c2 <_puts_r+0x2e>
 8006222:	4622      	mov	r2, r4
 8006224:	4628      	mov	r0, r5
 8006226:	f000 f874 	bl	8006312 <__swbuf_r>
 800622a:	3001      	adds	r0, #1
 800622c:	d1c9      	bne.n	80061c2 <_puts_r+0x2e>
 800622e:	e7df      	b.n	80061f0 <_puts_r+0x5c>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	250a      	movs	r5, #10
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	6022      	str	r2, [r4, #0]
 8006238:	701d      	strb	r5, [r3, #0]
 800623a:	e7db      	b.n	80061f4 <_puts_r+0x60>

0800623c <puts>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <puts+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f7ff bfa7 	b.w	8006194 <_puts_r>
 8006246:	bf00      	nop
 8006248:	2000007c 	.word	0x2000007c

0800624c <siprintf>:
 800624c:	b40e      	push	{r1, r2, r3}
 800624e:	b500      	push	{lr}
 8006250:	b09c      	sub	sp, #112	; 0x70
 8006252:	ab1d      	add	r3, sp, #116	; 0x74
 8006254:	9002      	str	r0, [sp, #8]
 8006256:	9006      	str	r0, [sp, #24]
 8006258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800625c:	4809      	ldr	r0, [pc, #36]	; (8006284 <siprintf+0x38>)
 800625e:	9107      	str	r1, [sp, #28]
 8006260:	9104      	str	r1, [sp, #16]
 8006262:	4909      	ldr	r1, [pc, #36]	; (8006288 <siprintf+0x3c>)
 8006264:	f853 2b04 	ldr.w	r2, [r3], #4
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	a902      	add	r1, sp, #8
 8006270:	f002 fc82 	bl	8008b78 <_svfiprintf_r>
 8006274:	9b02      	ldr	r3, [sp, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	b01c      	add	sp, #112	; 0x70
 800627c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006280:	b003      	add	sp, #12
 8006282:	4770      	bx	lr
 8006284:	2000007c 	.word	0x2000007c
 8006288:	ffff0208 	.word	0xffff0208

0800628c <__sread>:
 800628c:	b510      	push	{r4, lr}
 800628e:	460c      	mov	r4, r1
 8006290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006294:	f000 f900 	bl	8006498 <_read_r>
 8006298:	2800      	cmp	r0, #0
 800629a:	bfab      	itete	ge
 800629c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800629e:	89a3      	ldrhlt	r3, [r4, #12]
 80062a0:	181b      	addge	r3, r3, r0
 80062a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062a6:	bfac      	ite	ge
 80062a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80062aa:	81a3      	strhlt	r3, [r4, #12]
 80062ac:	bd10      	pop	{r4, pc}

080062ae <__swrite>:
 80062ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	461f      	mov	r7, r3
 80062b4:	898b      	ldrh	r3, [r1, #12]
 80062b6:	05db      	lsls	r3, r3, #23
 80062b8:	4605      	mov	r5, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	4616      	mov	r6, r2
 80062be:	d505      	bpl.n	80062cc <__swrite+0x1e>
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	2302      	movs	r3, #2
 80062c6:	2200      	movs	r2, #0
 80062c8:	f000 f8d4 	bl	8006474 <_lseek_r>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	4632      	mov	r2, r6
 80062da:	463b      	mov	r3, r7
 80062dc:	4628      	mov	r0, r5
 80062de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e2:	f000 b8eb 	b.w	80064bc <_write_r>

080062e6 <__sseek>:
 80062e6:	b510      	push	{r4, lr}
 80062e8:	460c      	mov	r4, r1
 80062ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ee:	f000 f8c1 	bl	8006474 <_lseek_r>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	bf15      	itete	ne
 80062f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006302:	81a3      	strheq	r3, [r4, #12]
 8006304:	bf18      	it	ne
 8006306:	81a3      	strhne	r3, [r4, #12]
 8006308:	bd10      	pop	{r4, pc}

0800630a <__sclose>:
 800630a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630e:	f000 b8a1 	b.w	8006454 <_close_r>

08006312 <__swbuf_r>:
 8006312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006314:	460e      	mov	r6, r1
 8006316:	4614      	mov	r4, r2
 8006318:	4605      	mov	r5, r0
 800631a:	b118      	cbz	r0, 8006324 <__swbuf_r+0x12>
 800631c:	6a03      	ldr	r3, [r0, #32]
 800631e:	b90b      	cbnz	r3, 8006324 <__swbuf_r+0x12>
 8006320:	f7ff fef0 	bl	8006104 <__sinit>
 8006324:	69a3      	ldr	r3, [r4, #24]
 8006326:	60a3      	str	r3, [r4, #8]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	071a      	lsls	r2, r3, #28
 800632c:	d525      	bpl.n	800637a <__swbuf_r+0x68>
 800632e:	6923      	ldr	r3, [r4, #16]
 8006330:	b31b      	cbz	r3, 800637a <__swbuf_r+0x68>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	1a98      	subs	r0, r3, r2
 8006338:	6963      	ldr	r3, [r4, #20]
 800633a:	b2f6      	uxtb	r6, r6
 800633c:	4283      	cmp	r3, r0
 800633e:	4637      	mov	r7, r6
 8006340:	dc04      	bgt.n	800634c <__swbuf_r+0x3a>
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f002 fedf 	bl	8009108 <_fflush_r>
 800634a:	b9e0      	cbnz	r0, 8006386 <__swbuf_r+0x74>
 800634c:	68a3      	ldr	r3, [r4, #8]
 800634e:	3b01      	subs	r3, #1
 8006350:	60a3      	str	r3, [r4, #8]
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	6022      	str	r2, [r4, #0]
 8006358:	701e      	strb	r6, [r3, #0]
 800635a:	6962      	ldr	r2, [r4, #20]
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	429a      	cmp	r2, r3
 8006360:	d004      	beq.n	800636c <__swbuf_r+0x5a>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	07db      	lsls	r3, r3, #31
 8006366:	d506      	bpl.n	8006376 <__swbuf_r+0x64>
 8006368:	2e0a      	cmp	r6, #10
 800636a:	d104      	bne.n	8006376 <__swbuf_r+0x64>
 800636c:	4621      	mov	r1, r4
 800636e:	4628      	mov	r0, r5
 8006370:	f002 feca 	bl	8009108 <_fflush_r>
 8006374:	b938      	cbnz	r0, 8006386 <__swbuf_r+0x74>
 8006376:	4638      	mov	r0, r7
 8006378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637a:	4621      	mov	r1, r4
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f805 	bl	800638c <__swsetup_r>
 8006382:	2800      	cmp	r0, #0
 8006384:	d0d5      	beq.n	8006332 <__swbuf_r+0x20>
 8006386:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800638a:	e7f4      	b.n	8006376 <__swbuf_r+0x64>

0800638c <__swsetup_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <__swsetup_r+0xac>)
 8006390:	4605      	mov	r5, r0
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	460c      	mov	r4, r1
 8006396:	b118      	cbz	r0, 80063a0 <__swsetup_r+0x14>
 8006398:	6a03      	ldr	r3, [r0, #32]
 800639a:	b90b      	cbnz	r3, 80063a0 <__swsetup_r+0x14>
 800639c:	f7ff feb2 	bl	8006104 <__sinit>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063a6:	0718      	lsls	r0, r3, #28
 80063a8:	d422      	bmi.n	80063f0 <__swsetup_r+0x64>
 80063aa:	06d9      	lsls	r1, r3, #27
 80063ac:	d407      	bmi.n	80063be <__swsetup_r+0x32>
 80063ae:	2309      	movs	r3, #9
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063bc:	e034      	b.n	8006428 <__swsetup_r+0x9c>
 80063be:	0758      	lsls	r0, r3, #29
 80063c0:	d512      	bpl.n	80063e8 <__swsetup_r+0x5c>
 80063c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c4:	b141      	cbz	r1, 80063d8 <__swsetup_r+0x4c>
 80063c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063ca:	4299      	cmp	r1, r3
 80063cc:	d002      	beq.n	80063d4 <__swsetup_r+0x48>
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 ff34 	bl	800723c <_free_r>
 80063d4:	2300      	movs	r3, #0
 80063d6:	6363      	str	r3, [r4, #52]	; 0x34
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	2300      	movs	r3, #0
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f043 0308 	orr.w	r3, r3, #8
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	b94b      	cbnz	r3, 8006408 <__swsetup_r+0x7c>
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fe:	d003      	beq.n	8006408 <__swsetup_r+0x7c>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f002 fece 	bl	80091a4 <__smakebuf_r>
 8006408:	89a0      	ldrh	r0, [r4, #12]
 800640a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640e:	f010 0301 	ands.w	r3, r0, #1
 8006412:	d00a      	beq.n	800642a <__swsetup_r+0x9e>
 8006414:	2300      	movs	r3, #0
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	425b      	negs	r3, r3
 800641c:	61a3      	str	r3, [r4, #24]
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	b943      	cbnz	r3, 8006434 <__swsetup_r+0xa8>
 8006422:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006426:	d1c4      	bne.n	80063b2 <__swsetup_r+0x26>
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	0781      	lsls	r1, r0, #30
 800642c:	bf58      	it	pl
 800642e:	6963      	ldrpl	r3, [r4, #20]
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	e7f4      	b.n	800641e <__swsetup_r+0x92>
 8006434:	2000      	movs	r0, #0
 8006436:	e7f7      	b.n	8006428 <__swsetup_r+0x9c>
 8006438:	2000007c 	.word	0x2000007c

0800643c <memset>:
 800643c:	4402      	add	r2, r0
 800643e:	4603      	mov	r3, r0
 8006440:	4293      	cmp	r3, r2
 8006442:	d100      	bne.n	8006446 <memset+0xa>
 8006444:	4770      	bx	lr
 8006446:	f803 1b01 	strb.w	r1, [r3], #1
 800644a:	e7f9      	b.n	8006440 <memset+0x4>

0800644c <_localeconv_r>:
 800644c:	4800      	ldr	r0, [pc, #0]	; (8006450 <_localeconv_r+0x4>)
 800644e:	4770      	bx	lr
 8006450:	20000170 	.word	0x20000170

08006454 <_close_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_close_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fc f93f 	bl	80026e2 <_close>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_close_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_close_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20000550 	.word	0x20000550

08006474 <_lseek_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d07      	ldr	r5, [pc, #28]	; (8006494 <_lseek_r+0x20>)
 8006478:	4604      	mov	r4, r0
 800647a:	4608      	mov	r0, r1
 800647c:	4611      	mov	r1, r2
 800647e:	2200      	movs	r2, #0
 8006480:	602a      	str	r2, [r5, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	f7fc f954 	bl	8002730 <_lseek>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_lseek_r+0x1e>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_lseek_r+0x1e>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	20000550 	.word	0x20000550

08006498 <_read_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	; (80064b8 <_read_r+0x20>)
 800649c:	4604      	mov	r4, r0
 800649e:	4608      	mov	r0, r1
 80064a0:	4611      	mov	r1, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f7fc f8e2 	bl	8002670 <_read>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_read_r+0x1e>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_read_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20000550 	.word	0x20000550

080064bc <_write_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	; (80064dc <_write_r+0x20>)
 80064c0:	4604      	mov	r4, r0
 80064c2:	4608      	mov	r0, r1
 80064c4:	4611      	mov	r1, r2
 80064c6:	2200      	movs	r2, #0
 80064c8:	602a      	str	r2, [r5, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f7fc f8ed 	bl	80026aa <_write>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_write_r+0x1e>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_write_r+0x1e>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	20000550 	.word	0x20000550

080064e0 <__errno>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <__errno+0x8>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000007c 	.word	0x2000007c

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4d0d      	ldr	r5, [pc, #52]	; (8006524 <__libc_init_array+0x38>)
 80064f0:	4c0d      	ldr	r4, [pc, #52]	; (8006528 <__libc_init_array+0x3c>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	2600      	movs	r6, #0
 80064f8:	42a6      	cmp	r6, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	4d0b      	ldr	r5, [pc, #44]	; (800652c <__libc_init_array+0x40>)
 80064fe:	4c0c      	ldr	r4, [pc, #48]	; (8006530 <__libc_init_array+0x44>)
 8006500:	f003 fb42 	bl	8009b88 <_init>
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	2600      	movs	r6, #0
 800650a:	42a6      	cmp	r6, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f855 3b04 	ldr.w	r3, [r5], #4
 8006514:	4798      	blx	r3
 8006516:	3601      	adds	r6, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f855 3b04 	ldr.w	r3, [r5], #4
 800651e:	4798      	blx	r3
 8006520:	3601      	adds	r6, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	0800a358 	.word	0x0800a358
 8006528:	0800a358 	.word	0x0800a358
 800652c:	0800a358 	.word	0x0800a358
 8006530:	0800a35c 	.word	0x0800a35c

08006534 <__retarget_lock_init_recursive>:
 8006534:	4770      	bx	lr

08006536 <__retarget_lock_acquire_recursive>:
 8006536:	4770      	bx	lr

08006538 <__retarget_lock_release_recursive>:
 8006538:	4770      	bx	lr
	...

0800653c <nanf>:
 800653c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006544 <nanf+0x8>
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	7fc00000 	.word	0x7fc00000

08006548 <quorem>:
 8006548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	6903      	ldr	r3, [r0, #16]
 800654e:	690c      	ldr	r4, [r1, #16]
 8006550:	42a3      	cmp	r3, r4
 8006552:	4607      	mov	r7, r0
 8006554:	db7e      	blt.n	8006654 <quorem+0x10c>
 8006556:	3c01      	subs	r4, #1
 8006558:	f101 0814 	add.w	r8, r1, #20
 800655c:	f100 0514 	add.w	r5, r0, #20
 8006560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800656a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800656e:	3301      	adds	r3, #1
 8006570:	429a      	cmp	r2, r3
 8006572:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006576:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800657a:	fbb2 f6f3 	udiv	r6, r2, r3
 800657e:	d331      	bcc.n	80065e4 <quorem+0x9c>
 8006580:	f04f 0e00 	mov.w	lr, #0
 8006584:	4640      	mov	r0, r8
 8006586:	46ac      	mov	ip, r5
 8006588:	46f2      	mov	sl, lr
 800658a:	f850 2b04 	ldr.w	r2, [r0], #4
 800658e:	b293      	uxth	r3, r2
 8006590:	fb06 e303 	mla	r3, r6, r3, lr
 8006594:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006598:	0c1a      	lsrs	r2, r3, #16
 800659a:	b29b      	uxth	r3, r3
 800659c:	ebaa 0303 	sub.w	r3, sl, r3
 80065a0:	f8dc a000 	ldr.w	sl, [ip]
 80065a4:	fa13 f38a 	uxtah	r3, r3, sl
 80065a8:	fb06 220e 	mla	r2, r6, lr, r2
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065b4:	b292      	uxth	r2, r2
 80065b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065be:	f8bd 3000 	ldrh.w	r3, [sp]
 80065c2:	4581      	cmp	r9, r0
 80065c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065c8:	f84c 3b04 	str.w	r3, [ip], #4
 80065cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065d0:	d2db      	bcs.n	800658a <quorem+0x42>
 80065d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80065d6:	b92b      	cbnz	r3, 80065e4 <quorem+0x9c>
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	3b04      	subs	r3, #4
 80065dc:	429d      	cmp	r5, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	d32c      	bcc.n	800663c <quorem+0xf4>
 80065e2:	613c      	str	r4, [r7, #16]
 80065e4:	4638      	mov	r0, r7
 80065e6:	f001 f9ef 	bl	80079c8 <__mcmp>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	db22      	blt.n	8006634 <quorem+0xec>
 80065ee:	3601      	adds	r6, #1
 80065f0:	4629      	mov	r1, r5
 80065f2:	2000      	movs	r0, #0
 80065f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80065f8:	f8d1 c000 	ldr.w	ip, [r1]
 80065fc:	b293      	uxth	r3, r2
 80065fe:	1ac3      	subs	r3, r0, r3
 8006600:	0c12      	lsrs	r2, r2, #16
 8006602:	fa13 f38c 	uxtah	r3, r3, ip
 8006606:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800660a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800660e:	b29b      	uxth	r3, r3
 8006610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006614:	45c1      	cmp	r9, r8
 8006616:	f841 3b04 	str.w	r3, [r1], #4
 800661a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800661e:	d2e9      	bcs.n	80065f4 <quorem+0xac>
 8006620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006628:	b922      	cbnz	r2, 8006634 <quorem+0xec>
 800662a:	3b04      	subs	r3, #4
 800662c:	429d      	cmp	r5, r3
 800662e:	461a      	mov	r2, r3
 8006630:	d30a      	bcc.n	8006648 <quorem+0x100>
 8006632:	613c      	str	r4, [r7, #16]
 8006634:	4630      	mov	r0, r6
 8006636:	b003      	add	sp, #12
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	3b04      	subs	r3, #4
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1ce      	bne.n	80065e2 <quorem+0x9a>
 8006644:	3c01      	subs	r4, #1
 8006646:	e7c9      	b.n	80065dc <quorem+0x94>
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	3b04      	subs	r3, #4
 800664c:	2a00      	cmp	r2, #0
 800664e:	d1f0      	bne.n	8006632 <quorem+0xea>
 8006650:	3c01      	subs	r4, #1
 8006652:	e7eb      	b.n	800662c <quorem+0xe4>
 8006654:	2000      	movs	r0, #0
 8006656:	e7ee      	b.n	8006636 <quorem+0xee>

08006658 <_dtoa_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	ed2d 8b04 	vpush	{d8-d9}
 8006660:	69c5      	ldr	r5, [r0, #28]
 8006662:	b093      	sub	sp, #76	; 0x4c
 8006664:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006668:	ec57 6b10 	vmov	r6, r7, d0
 800666c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006670:	9107      	str	r1, [sp, #28]
 8006672:	4604      	mov	r4, r0
 8006674:	920a      	str	r2, [sp, #40]	; 0x28
 8006676:	930d      	str	r3, [sp, #52]	; 0x34
 8006678:	b975      	cbnz	r5, 8006698 <_dtoa_r+0x40>
 800667a:	2010      	movs	r0, #16
 800667c:	f000 fe2a 	bl	80072d4 <malloc>
 8006680:	4602      	mov	r2, r0
 8006682:	61e0      	str	r0, [r4, #28]
 8006684:	b920      	cbnz	r0, 8006690 <_dtoa_r+0x38>
 8006686:	4bae      	ldr	r3, [pc, #696]	; (8006940 <_dtoa_r+0x2e8>)
 8006688:	21ef      	movs	r1, #239	; 0xef
 800668a:	48ae      	ldr	r0, [pc, #696]	; (8006944 <_dtoa_r+0x2ec>)
 800668c:	f002 fe3c 	bl	8009308 <__assert_func>
 8006690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006694:	6005      	str	r5, [r0, #0]
 8006696:	60c5      	str	r5, [r0, #12]
 8006698:	69e3      	ldr	r3, [r4, #28]
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	b151      	cbz	r1, 80066b4 <_dtoa_r+0x5c>
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	604a      	str	r2, [r1, #4]
 80066a2:	2301      	movs	r3, #1
 80066a4:	4093      	lsls	r3, r2
 80066a6:	608b      	str	r3, [r1, #8]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 ff07 	bl	80074bc <_Bfree>
 80066ae:	69e3      	ldr	r3, [r4, #28]
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	1e3b      	subs	r3, r7, #0
 80066b6:	bfbb      	ittet	lt
 80066b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	9303      	strlt	r3, [sp, #12]
 80066be:	2300      	movge	r3, #0
 80066c0:	2201      	movlt	r2, #1
 80066c2:	bfac      	ite	ge
 80066c4:	f8c8 3000 	strge.w	r3, [r8]
 80066c8:	f8c8 2000 	strlt.w	r2, [r8]
 80066cc:	4b9e      	ldr	r3, [pc, #632]	; (8006948 <_dtoa_r+0x2f0>)
 80066ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066d2:	ea33 0308 	bics.w	r3, r3, r8
 80066d6:	d11b      	bne.n	8006710 <_dtoa_r+0xb8>
 80066d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066da:	f242 730f 	movw	r3, #9999	; 0x270f
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066e4:	4333      	orrs	r3, r6
 80066e6:	f000 8593 	beq.w	8007210 <_dtoa_r+0xbb8>
 80066ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ec:	b963      	cbnz	r3, 8006708 <_dtoa_r+0xb0>
 80066ee:	4b97      	ldr	r3, [pc, #604]	; (800694c <_dtoa_r+0x2f4>)
 80066f0:	e027      	b.n	8006742 <_dtoa_r+0xea>
 80066f2:	4b97      	ldr	r3, [pc, #604]	; (8006950 <_dtoa_r+0x2f8>)
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	9800      	ldr	r0, [sp, #0]
 80066fe:	b013      	add	sp, #76	; 0x4c
 8006700:	ecbd 8b04 	vpop	{d8-d9}
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006708:	4b90      	ldr	r3, [pc, #576]	; (800694c <_dtoa_r+0x2f4>)
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	3303      	adds	r3, #3
 800670e:	e7f3      	b.n	80066f8 <_dtoa_r+0xa0>
 8006710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	ec51 0b17 	vmov	r0, r1, d7
 800671a:	eeb0 8a47 	vmov.f32	s16, s14
 800671e:	eef0 8a67 	vmov.f32	s17, s15
 8006722:	2300      	movs	r3, #0
 8006724:	f7fa f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006728:	4681      	mov	r9, r0
 800672a:	b160      	cbz	r0, 8006746 <_dtoa_r+0xee>
 800672c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800672e:	2301      	movs	r3, #1
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8568 	beq.w	800720a <_dtoa_r+0xbb2>
 800673a:	4b86      	ldr	r3, [pc, #536]	; (8006954 <_dtoa_r+0x2fc>)
 800673c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	3b01      	subs	r3, #1
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	e7da      	b.n	80066fc <_dtoa_r+0xa4>
 8006746:	aa10      	add	r2, sp, #64	; 0x40
 8006748:	a911      	add	r1, sp, #68	; 0x44
 800674a:	4620      	mov	r0, r4
 800674c:	eeb0 0a48 	vmov.f32	s0, s16
 8006750:	eef0 0a68 	vmov.f32	s1, s17
 8006754:	f001 fa4e 	bl	8007bf4 <__d2b>
 8006758:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800675c:	4682      	mov	sl, r0
 800675e:	2d00      	cmp	r5, #0
 8006760:	d07f      	beq.n	8006862 <_dtoa_r+0x20a>
 8006762:	ee18 3a90 	vmov	r3, s17
 8006766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800676a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800676e:	ec51 0b18 	vmov	r0, r1, d8
 8006772:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800677a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800677e:	4619      	mov	r1, r3
 8006780:	2200      	movs	r2, #0
 8006782:	4b75      	ldr	r3, [pc, #468]	; (8006958 <_dtoa_r+0x300>)
 8006784:	f7f9 fd90 	bl	80002a8 <__aeabi_dsub>
 8006788:	a367      	add	r3, pc, #412	; (adr r3, 8006928 <_dtoa_r+0x2d0>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 ff43 	bl	8000618 <__aeabi_dmul>
 8006792:	a367      	add	r3, pc, #412	; (adr r3, 8006930 <_dtoa_r+0x2d8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 fd88 	bl	80002ac <__adddf3>
 800679c:	4606      	mov	r6, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	460f      	mov	r7, r1
 80067a2:	f7f9 fecf 	bl	8000544 <__aeabi_i2d>
 80067a6:	a364      	add	r3, pc, #400	; (adr r3, 8006938 <_dtoa_r+0x2e0>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 ff34 	bl	8000618 <__aeabi_dmul>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4630      	mov	r0, r6
 80067b6:	4639      	mov	r1, r7
 80067b8:	f7f9 fd78 	bl	80002ac <__adddf3>
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	f7fa f9da 	bl	8000b78 <__aeabi_d2iz>
 80067c4:	2200      	movs	r2, #0
 80067c6:	4683      	mov	fp, r0
 80067c8:	2300      	movs	r3, #0
 80067ca:	4630      	mov	r0, r6
 80067cc:	4639      	mov	r1, r7
 80067ce:	f7fa f995 	bl	8000afc <__aeabi_dcmplt>
 80067d2:	b148      	cbz	r0, 80067e8 <_dtoa_r+0x190>
 80067d4:	4658      	mov	r0, fp
 80067d6:	f7f9 feb5 	bl	8000544 <__aeabi_i2d>
 80067da:	4632      	mov	r2, r6
 80067dc:	463b      	mov	r3, r7
 80067de:	f7fa f983 	bl	8000ae8 <__aeabi_dcmpeq>
 80067e2:	b908      	cbnz	r0, 80067e8 <_dtoa_r+0x190>
 80067e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80067e8:	f1bb 0f16 	cmp.w	fp, #22
 80067ec:	d857      	bhi.n	800689e <_dtoa_r+0x246>
 80067ee:	4b5b      	ldr	r3, [pc, #364]	; (800695c <_dtoa_r+0x304>)
 80067f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	ec51 0b18 	vmov	r0, r1, d8
 80067fc:	f7fa f97e 	bl	8000afc <__aeabi_dcmplt>
 8006800:	2800      	cmp	r0, #0
 8006802:	d04e      	beq.n	80068a2 <_dtoa_r+0x24a>
 8006804:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006808:	2300      	movs	r3, #0
 800680a:	930c      	str	r3, [sp, #48]	; 0x30
 800680c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800680e:	1b5b      	subs	r3, r3, r5
 8006810:	1e5a      	subs	r2, r3, #1
 8006812:	bf45      	ittet	mi
 8006814:	f1c3 0301 	rsbmi	r3, r3, #1
 8006818:	9305      	strmi	r3, [sp, #20]
 800681a:	2300      	movpl	r3, #0
 800681c:	2300      	movmi	r3, #0
 800681e:	9206      	str	r2, [sp, #24]
 8006820:	bf54      	ite	pl
 8006822:	9305      	strpl	r3, [sp, #20]
 8006824:	9306      	strmi	r3, [sp, #24]
 8006826:	f1bb 0f00 	cmp.w	fp, #0
 800682a:	db3c      	blt.n	80068a6 <_dtoa_r+0x24e>
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006832:	445b      	add	r3, fp
 8006834:	9306      	str	r3, [sp, #24]
 8006836:	2300      	movs	r3, #0
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	2b09      	cmp	r3, #9
 800683e:	d868      	bhi.n	8006912 <_dtoa_r+0x2ba>
 8006840:	2b05      	cmp	r3, #5
 8006842:	bfc4      	itt	gt
 8006844:	3b04      	subgt	r3, #4
 8006846:	9307      	strgt	r3, [sp, #28]
 8006848:	9b07      	ldr	r3, [sp, #28]
 800684a:	f1a3 0302 	sub.w	r3, r3, #2
 800684e:	bfcc      	ite	gt
 8006850:	2500      	movgt	r5, #0
 8006852:	2501      	movle	r5, #1
 8006854:	2b03      	cmp	r3, #3
 8006856:	f200 8085 	bhi.w	8006964 <_dtoa_r+0x30c>
 800685a:	e8df f003 	tbb	[pc, r3]
 800685e:	3b2e      	.short	0x3b2e
 8006860:	5839      	.short	0x5839
 8006862:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006866:	441d      	add	r5, r3
 8006868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800686c:	2b20      	cmp	r3, #32
 800686e:	bfc1      	itttt	gt
 8006870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006874:	fa08 f803 	lslgt.w	r8, r8, r3
 8006878:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800687c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006880:	bfd6      	itet	le
 8006882:	f1c3 0320 	rsble	r3, r3, #32
 8006886:	ea48 0003 	orrgt.w	r0, r8, r3
 800688a:	fa06 f003 	lslle.w	r0, r6, r3
 800688e:	f7f9 fe49 	bl	8000524 <__aeabi_ui2d>
 8006892:	2201      	movs	r2, #1
 8006894:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006898:	3d01      	subs	r5, #1
 800689a:	920e      	str	r2, [sp, #56]	; 0x38
 800689c:	e76f      	b.n	800677e <_dtoa_r+0x126>
 800689e:	2301      	movs	r3, #1
 80068a0:	e7b3      	b.n	800680a <_dtoa_r+0x1b2>
 80068a2:	900c      	str	r0, [sp, #48]	; 0x30
 80068a4:	e7b2      	b.n	800680c <_dtoa_r+0x1b4>
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	eba3 030b 	sub.w	r3, r3, fp
 80068ac:	9305      	str	r3, [sp, #20]
 80068ae:	f1cb 0300 	rsb	r3, fp, #0
 80068b2:	9308      	str	r3, [sp, #32]
 80068b4:	2300      	movs	r3, #0
 80068b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b8:	e7bf      	b.n	800683a <_dtoa_r+0x1e2>
 80068ba:	2300      	movs	r3, #0
 80068bc:	9309      	str	r3, [sp, #36]	; 0x24
 80068be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dc52      	bgt.n	800696a <_dtoa_r+0x312>
 80068c4:	2301      	movs	r3, #1
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	461a      	mov	r2, r3
 80068cc:	920a      	str	r2, [sp, #40]	; 0x28
 80068ce:	e00b      	b.n	80068e8 <_dtoa_r+0x290>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7f3      	b.n	80068bc <_dtoa_r+0x264>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	; 0x24
 80068d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068da:	445b      	add	r3, fp
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	3301      	adds	r3, #1
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	bfb8      	it	lt
 80068e6:	2301      	movlt	r3, #1
 80068e8:	69e0      	ldr	r0, [r4, #28]
 80068ea:	2100      	movs	r1, #0
 80068ec:	2204      	movs	r2, #4
 80068ee:	f102 0614 	add.w	r6, r2, #20
 80068f2:	429e      	cmp	r6, r3
 80068f4:	d93d      	bls.n	8006972 <_dtoa_r+0x31a>
 80068f6:	6041      	str	r1, [r0, #4]
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fd9f 	bl	800743c <_Balloc>
 80068fe:	9000      	str	r0, [sp, #0]
 8006900:	2800      	cmp	r0, #0
 8006902:	d139      	bne.n	8006978 <_dtoa_r+0x320>
 8006904:	4b16      	ldr	r3, [pc, #88]	; (8006960 <_dtoa_r+0x308>)
 8006906:	4602      	mov	r2, r0
 8006908:	f240 11af 	movw	r1, #431	; 0x1af
 800690c:	e6bd      	b.n	800668a <_dtoa_r+0x32>
 800690e:	2301      	movs	r3, #1
 8006910:	e7e1      	b.n	80068d6 <_dtoa_r+0x27e>
 8006912:	2501      	movs	r5, #1
 8006914:	2300      	movs	r3, #0
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	9509      	str	r5, [sp, #36]	; 0x24
 800691a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	2200      	movs	r2, #0
 8006924:	2312      	movs	r3, #18
 8006926:	e7d1      	b.n	80068cc <_dtoa_r+0x274>
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	08009f6e 	.word	0x08009f6e
 8006944:	08009f85 	.word	0x08009f85
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	08009f6a 	.word	0x08009f6a
 8006950:	08009f61 	.word	0x08009f61
 8006954:	08009f39 	.word	0x08009f39
 8006958:	3ff80000 	.word	0x3ff80000
 800695c:	0800a070 	.word	0x0800a070
 8006960:	08009fdd 	.word	0x08009fdd
 8006964:	2301      	movs	r3, #1
 8006966:	9309      	str	r3, [sp, #36]	; 0x24
 8006968:	e7d7      	b.n	800691a <_dtoa_r+0x2c2>
 800696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	9304      	str	r3, [sp, #16]
 8006970:	e7ba      	b.n	80068e8 <_dtoa_r+0x290>
 8006972:	3101      	adds	r1, #1
 8006974:	0052      	lsls	r2, r2, #1
 8006976:	e7ba      	b.n	80068ee <_dtoa_r+0x296>
 8006978:	69e3      	ldr	r3, [r4, #28]
 800697a:	9a00      	ldr	r2, [sp, #0]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	2b0e      	cmp	r3, #14
 8006982:	f200 80a8 	bhi.w	8006ad6 <_dtoa_r+0x47e>
 8006986:	2d00      	cmp	r5, #0
 8006988:	f000 80a5 	beq.w	8006ad6 <_dtoa_r+0x47e>
 800698c:	f1bb 0f00 	cmp.w	fp, #0
 8006990:	dd38      	ble.n	8006a04 <_dtoa_r+0x3ac>
 8006992:	4bc0      	ldr	r3, [pc, #768]	; (8006c94 <_dtoa_r+0x63c>)
 8006994:	f00b 020f 	and.w	r2, fp, #15
 8006998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80069a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80069a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80069a8:	d019      	beq.n	80069de <_dtoa_r+0x386>
 80069aa:	4bbb      	ldr	r3, [pc, #748]	; (8006c98 <_dtoa_r+0x640>)
 80069ac:	ec51 0b18 	vmov	r0, r1, d8
 80069b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069b4:	f7f9 ff5a 	bl	800086c <__aeabi_ddiv>
 80069b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069bc:	f008 080f 	and.w	r8, r8, #15
 80069c0:	2503      	movs	r5, #3
 80069c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c98 <_dtoa_r+0x640>
 80069c6:	f1b8 0f00 	cmp.w	r8, #0
 80069ca:	d10a      	bne.n	80069e2 <_dtoa_r+0x38a>
 80069cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d0:	4632      	mov	r2, r6
 80069d2:	463b      	mov	r3, r7
 80069d4:	f7f9 ff4a 	bl	800086c <__aeabi_ddiv>
 80069d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069dc:	e02b      	b.n	8006a36 <_dtoa_r+0x3de>
 80069de:	2502      	movs	r5, #2
 80069e0:	e7ef      	b.n	80069c2 <_dtoa_r+0x36a>
 80069e2:	f018 0f01 	tst.w	r8, #1
 80069e6:	d008      	beq.n	80069fa <_dtoa_r+0x3a2>
 80069e8:	4630      	mov	r0, r6
 80069ea:	4639      	mov	r1, r7
 80069ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069f0:	f7f9 fe12 	bl	8000618 <__aeabi_dmul>
 80069f4:	3501      	adds	r5, #1
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069fe:	f109 0908 	add.w	r9, r9, #8
 8006a02:	e7e0      	b.n	80069c6 <_dtoa_r+0x36e>
 8006a04:	f000 809f 	beq.w	8006b46 <_dtoa_r+0x4ee>
 8006a08:	f1cb 0600 	rsb	r6, fp, #0
 8006a0c:	4ba1      	ldr	r3, [pc, #644]	; (8006c94 <_dtoa_r+0x63c>)
 8006a0e:	4fa2      	ldr	r7, [pc, #648]	; (8006c98 <_dtoa_r+0x640>)
 8006a10:	f006 020f 	and.w	r2, r6, #15
 8006a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	ec51 0b18 	vmov	r0, r1, d8
 8006a20:	f7f9 fdfa 	bl	8000618 <__aeabi_dmul>
 8006a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a28:	1136      	asrs	r6, r6, #4
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2502      	movs	r5, #2
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d17e      	bne.n	8006b30 <_dtoa_r+0x4d8>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1d0      	bne.n	80069d8 <_dtoa_r+0x380>
 8006a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8084 	beq.w	8006b4a <_dtoa_r+0x4f2>
 8006a42:	4b96      	ldr	r3, [pc, #600]	; (8006c9c <_dtoa_r+0x644>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7fa f857 	bl	8000afc <__aeabi_dcmplt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d07b      	beq.n	8006b4a <_dtoa_r+0x4f2>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d078      	beq.n	8006b4a <_dtoa_r+0x4f2>
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dd39      	ble.n	8006ad2 <_dtoa_r+0x47a>
 8006a5e:	4b90      	ldr	r3, [pc, #576]	; (8006ca0 <_dtoa_r+0x648>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fdd7 	bl	8000618 <__aeabi_dmul>
 8006a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a6e:	9e01      	ldr	r6, [sp, #4]
 8006a70:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006a74:	3501      	adds	r5, #1
 8006a76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f7f9 fd62 	bl	8000544 <__aeabi_i2d>
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f7f9 fdc8 	bl	8000618 <__aeabi_dmul>
 8006a88:	4b86      	ldr	r3, [pc, #536]	; (8006ca4 <_dtoa_r+0x64c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f7f9 fc0e 	bl	80002ac <__adddf3>
 8006a90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	d158      	bne.n	8006b50 <_dtoa_r+0x4f8>
 8006a9e:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <_dtoa_r+0x650>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7f9 fbff 	bl	80002a8 <__aeabi_dsub>
 8006aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	f7fa f841 	bl	8000b38 <__aeabi_dcmpgt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f040 8296 	bne.w	8006fe8 <_dtoa_r+0x990>
 8006abc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7fa f818 	bl	8000afc <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 8289 	bne.w	8006fe4 <_dtoa_r+0x98c>
 8006ad2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f2c0 814e 	blt.w	8006d7a <_dtoa_r+0x722>
 8006ade:	f1bb 0f0e 	cmp.w	fp, #14
 8006ae2:	f300 814a 	bgt.w	8006d7a <_dtoa_r+0x722>
 8006ae6:	4b6b      	ldr	r3, [pc, #428]	; (8006c94 <_dtoa_r+0x63c>)
 8006ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f280 80dc 	bge.w	8006cb0 <_dtoa_r+0x658>
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f300 80d8 	bgt.w	8006cb0 <_dtoa_r+0x658>
 8006b00:	f040 826f 	bne.w	8006fe2 <_dtoa_r+0x98a>
 8006b04:	4b68      	ldr	r3, [pc, #416]	; (8006ca8 <_dtoa_r+0x650>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7f9 fd84 	bl	8000618 <__aeabi_dmul>
 8006b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b14:	f7fa f806 	bl	8000b24 <__aeabi_dcmpge>
 8006b18:	9e04      	ldr	r6, [sp, #16]
 8006b1a:	4637      	mov	r7, r6
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f040 8245 	bne.w	8006fac <_dtoa_r+0x954>
 8006b22:	9d00      	ldr	r5, [sp, #0]
 8006b24:	2331      	movs	r3, #49	; 0x31
 8006b26:	f805 3b01 	strb.w	r3, [r5], #1
 8006b2a:	f10b 0b01 	add.w	fp, fp, #1
 8006b2e:	e241      	b.n	8006fb4 <_dtoa_r+0x95c>
 8006b30:	07f2      	lsls	r2, r6, #31
 8006b32:	d505      	bpl.n	8006b40 <_dtoa_r+0x4e8>
 8006b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b38:	f7f9 fd6e 	bl	8000618 <__aeabi_dmul>
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	2301      	movs	r3, #1
 8006b40:	1076      	asrs	r6, r6, #1
 8006b42:	3708      	adds	r7, #8
 8006b44:	e773      	b.n	8006a2e <_dtoa_r+0x3d6>
 8006b46:	2502      	movs	r5, #2
 8006b48:	e775      	b.n	8006a36 <_dtoa_r+0x3de>
 8006b4a:	9e04      	ldr	r6, [sp, #16]
 8006b4c:	465f      	mov	r7, fp
 8006b4e:	e792      	b.n	8006a76 <_dtoa_r+0x41e>
 8006b50:	9900      	ldr	r1, [sp, #0]
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <_dtoa_r+0x63c>)
 8006b54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b58:	4431      	add	r1, r6
 8006b5a:	9102      	str	r1, [sp, #8]
 8006b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b5e:	eeb0 9a47 	vmov.f32	s18, s14
 8006b62:	eef0 9a67 	vmov.f32	s19, s15
 8006b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d044      	beq.n	8006bfc <_dtoa_r+0x5a4>
 8006b72:	494e      	ldr	r1, [pc, #312]	; (8006cac <_dtoa_r+0x654>)
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7f9 fe79 	bl	800086c <__aeabi_ddiv>
 8006b7a:	ec53 2b19 	vmov	r2, r3, d9
 8006b7e:	f7f9 fb93 	bl	80002a8 <__aeabi_dsub>
 8006b82:	9d00      	ldr	r5, [sp, #0]
 8006b84:	ec41 0b19 	vmov	d9, r0, r1
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7f9 fff4 	bl	8000b78 <__aeabi_d2iz>
 8006b90:	4606      	mov	r6, r0
 8006b92:	f7f9 fcd7 	bl	8000544 <__aeabi_i2d>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fb83 	bl	80002a8 <__aeabi_dsub>
 8006ba2:	3630      	adds	r6, #48	; 0x30
 8006ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ba8:	ec53 2b19 	vmov	r2, r3, d9
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	f7f9 ffa4 	bl	8000afc <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d164      	bne.n	8006c82 <_dtoa_r+0x62a>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	4937      	ldr	r1, [pc, #220]	; (8006c9c <_dtoa_r+0x644>)
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7f9 fb72 	bl	80002a8 <__aeabi_dsub>
 8006bc4:	ec53 2b19 	vmov	r2, r3, d9
 8006bc8:	f7f9 ff98 	bl	8000afc <__aeabi_dcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f040 80b6 	bne.w	8006d3e <_dtoa_r+0x6e6>
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	429d      	cmp	r5, r3
 8006bd6:	f43f af7c 	beq.w	8006ad2 <_dtoa_r+0x47a>
 8006bda:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <_dtoa_r+0x648>)
 8006bdc:	ec51 0b19 	vmov	r0, r1, d9
 8006be0:	2200      	movs	r2, #0
 8006be2:	f7f9 fd19 	bl	8000618 <__aeabi_dmul>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <_dtoa_r+0x648>)
 8006be8:	ec41 0b19 	vmov	d9, r0, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 fd11 	bl	8000618 <__aeabi_dmul>
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	e7c5      	b.n	8006b88 <_dtoa_r+0x530>
 8006bfc:	ec51 0b17 	vmov	r0, r1, d7
 8006c00:	f7f9 fd0a 	bl	8000618 <__aeabi_dmul>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	9d00      	ldr	r5, [sp, #0]
 8006c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c0a:	ec41 0b19 	vmov	d9, r0, r1
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	f7f9 ffb1 	bl	8000b78 <__aeabi_d2iz>
 8006c16:	4606      	mov	r6, r0
 8006c18:	f7f9 fc94 	bl	8000544 <__aeabi_i2d>
 8006c1c:	3630      	adds	r6, #48	; 0x30
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fb3f 	bl	80002a8 <__aeabi_dsub>
 8006c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8006c2e:	9b02      	ldr	r3, [sp, #8]
 8006c30:	429d      	cmp	r5, r3
 8006c32:	4680      	mov	r8, r0
 8006c34:	4689      	mov	r9, r1
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	d124      	bne.n	8006c86 <_dtoa_r+0x62e>
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <_dtoa_r+0x654>)
 8006c3e:	ec51 0b19 	vmov	r0, r1, d9
 8006c42:	f7f9 fb33 	bl	80002ac <__adddf3>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7f9 ff73 	bl	8000b38 <__aeabi_dcmpgt>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d173      	bne.n	8006d3e <_dtoa_r+0x6e6>
 8006c56:	ec53 2b19 	vmov	r2, r3, d9
 8006c5a:	4914      	ldr	r1, [pc, #80]	; (8006cac <_dtoa_r+0x654>)
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f7f9 fb23 	bl	80002a8 <__aeabi_dsub>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 ff47 	bl	8000afc <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f af2f 	beq.w	8006ad2 <_dtoa_r+0x47a>
 8006c74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c76:	1e6b      	subs	r3, r5, #1
 8006c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c7e:	2b30      	cmp	r3, #48	; 0x30
 8006c80:	d0f8      	beq.n	8006c74 <_dtoa_r+0x61c>
 8006c82:	46bb      	mov	fp, r7
 8006c84:	e04a      	b.n	8006d1c <_dtoa_r+0x6c4>
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <_dtoa_r+0x648>)
 8006c88:	f7f9 fcc6 	bl	8000618 <__aeabi_dmul>
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	e7bd      	b.n	8006c0e <_dtoa_r+0x5b6>
 8006c92:	bf00      	nop
 8006c94:	0800a070 	.word	0x0800a070
 8006c98:	0800a048 	.word	0x0800a048
 8006c9c:	3ff00000 	.word	0x3ff00000
 8006ca0:	40240000 	.word	0x40240000
 8006ca4:	401c0000 	.word	0x401c0000
 8006ca8:	40140000 	.word	0x40140000
 8006cac:	3fe00000 	.word	0x3fe00000
 8006cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cb4:	9d00      	ldr	r5, [sp, #0]
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 fdd5 	bl	800086c <__aeabi_ddiv>
 8006cc2:	f7f9 ff59 	bl	8000b78 <__aeabi_d2iz>
 8006cc6:	9001      	str	r0, [sp, #4]
 8006cc8:	f7f9 fc3c 	bl	8000544 <__aeabi_i2d>
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	f7f9 fca2 	bl	8000618 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4630      	mov	r0, r6
 8006cda:	4639      	mov	r1, r7
 8006cdc:	f7f9 fae4 	bl	80002a8 <__aeabi_dsub>
 8006ce0:	9e01      	ldr	r6, [sp, #4]
 8006ce2:	9f04      	ldr	r7, [sp, #16]
 8006ce4:	3630      	adds	r6, #48	; 0x30
 8006ce6:	f805 6b01 	strb.w	r6, [r5], #1
 8006cea:	9e00      	ldr	r6, [sp, #0]
 8006cec:	1bae      	subs	r6, r5, r6
 8006cee:	42b7      	cmp	r7, r6
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	d134      	bne.n	8006d60 <_dtoa_r+0x708>
 8006cf6:	f7f9 fad9 	bl	80002ac <__adddf3>
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	f7f9 ff19 	bl	8000b38 <__aeabi_dcmpgt>
 8006d06:	b9c8      	cbnz	r0, 8006d3c <_dtoa_r+0x6e4>
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 feea 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d14:	b110      	cbz	r0, 8006d1c <_dtoa_r+0x6c4>
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	07db      	lsls	r3, r3, #31
 8006d1a:	d40f      	bmi.n	8006d3c <_dtoa_r+0x6e4>
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fbcc 	bl	80074bc <_Bfree>
 8006d24:	2300      	movs	r3, #0
 8006d26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d28:	702b      	strb	r3, [r5, #0]
 8006d2a:	f10b 0301 	add.w	r3, fp, #1
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f43f ace2 	beq.w	80066fc <_dtoa_r+0xa4>
 8006d38:	601d      	str	r5, [r3, #0]
 8006d3a:	e4df      	b.n	80066fc <_dtoa_r+0xa4>
 8006d3c:	465f      	mov	r7, fp
 8006d3e:	462b      	mov	r3, r5
 8006d40:	461d      	mov	r5, r3
 8006d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d46:	2a39      	cmp	r2, #57	; 0x39
 8006d48:	d106      	bne.n	8006d58 <_dtoa_r+0x700>
 8006d4a:	9a00      	ldr	r2, [sp, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d1f7      	bne.n	8006d40 <_dtoa_r+0x6e8>
 8006d50:	9900      	ldr	r1, [sp, #0]
 8006d52:	2230      	movs	r2, #48	; 0x30
 8006d54:	3701      	adds	r7, #1
 8006d56:	700a      	strb	r2, [r1, #0]
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	e790      	b.n	8006c82 <_dtoa_r+0x62a>
 8006d60:	4ba3      	ldr	r3, [pc, #652]	; (8006ff0 <_dtoa_r+0x998>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7f9 fc58 	bl	8000618 <__aeabi_dmul>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	f7f9 feba 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d09e      	beq.n	8006cb6 <_dtoa_r+0x65e>
 8006d78:	e7d0      	b.n	8006d1c <_dtoa_r+0x6c4>
 8006d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	f000 80ca 	beq.w	8006f16 <_dtoa_r+0x8be>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	2a01      	cmp	r2, #1
 8006d86:	f300 80ad 	bgt.w	8006ee4 <_dtoa_r+0x88c>
 8006d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	f000 80a5 	beq.w	8006edc <_dtoa_r+0x884>
 8006d92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d96:	9e08      	ldr	r6, [sp, #32]
 8006d98:	9d05      	ldr	r5, [sp, #20]
 8006d9a:	9a05      	ldr	r2, [sp, #20]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	9205      	str	r2, [sp, #20]
 8006da0:	9a06      	ldr	r2, [sp, #24]
 8006da2:	2101      	movs	r1, #1
 8006da4:	441a      	add	r2, r3
 8006da6:	4620      	mov	r0, r4
 8006da8:	9206      	str	r2, [sp, #24]
 8006daa:	f000 fc87 	bl	80076bc <__i2b>
 8006dae:	4607      	mov	r7, r0
 8006db0:	b165      	cbz	r5, 8006dcc <_dtoa_r+0x774>
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd09      	ble.n	8006dcc <_dtoa_r+0x774>
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	9a05      	ldr	r2, [sp, #20]
 8006dbc:	bfa8      	it	ge
 8006dbe:	462b      	movge	r3, r5
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	9205      	str	r2, [sp, #20]
 8006dc4:	9a06      	ldr	r2, [sp, #24]
 8006dc6:	1aed      	subs	r5, r5, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	9306      	str	r3, [sp, #24]
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	b1f3      	cbz	r3, 8006e0e <_dtoa_r+0x7b6>
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80a3 	beq.w	8006f1e <_dtoa_r+0x8c6>
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	dd10      	ble.n	8006dfe <_dtoa_r+0x7a6>
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4632      	mov	r2, r6
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fd2b 	bl	800783c <__pow5mult>
 8006de6:	4652      	mov	r2, sl
 8006de8:	4601      	mov	r1, r0
 8006dea:	4607      	mov	r7, r0
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fc7b 	bl	80076e8 <__multiply>
 8006df2:	4651      	mov	r1, sl
 8006df4:	4680      	mov	r8, r0
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fb60 	bl	80074bc <_Bfree>
 8006dfc:	46c2      	mov	sl, r8
 8006dfe:	9b08      	ldr	r3, [sp, #32]
 8006e00:	1b9a      	subs	r2, r3, r6
 8006e02:	d004      	beq.n	8006e0e <_dtoa_r+0x7b6>
 8006e04:	4651      	mov	r1, sl
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fd18 	bl	800783c <__pow5mult>
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fc53 	bl	80076bc <__i2b>
 8006e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	f340 8081 	ble.w	8006f22 <_dtoa_r+0x8ca>
 8006e20:	461a      	mov	r2, r3
 8006e22:	4601      	mov	r1, r0
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fd09 	bl	800783c <__pow5mult>
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	4606      	mov	r6, r0
 8006e30:	dd7a      	ble.n	8006f28 <_dtoa_r+0x8d0>
 8006e32:	f04f 0800 	mov.w	r8, #0
 8006e36:	6933      	ldr	r3, [r6, #16]
 8006e38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e3c:	6918      	ldr	r0, [r3, #16]
 8006e3e:	f000 fbef 	bl	8007620 <__hi0bits>
 8006e42:	f1c0 0020 	rsb	r0, r0, #32
 8006e46:	9b06      	ldr	r3, [sp, #24]
 8006e48:	4418      	add	r0, r3
 8006e4a:	f010 001f 	ands.w	r0, r0, #31
 8006e4e:	f000 8094 	beq.w	8006f7a <_dtoa_r+0x922>
 8006e52:	f1c0 0320 	rsb	r3, r0, #32
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	f340 8085 	ble.w	8006f66 <_dtoa_r+0x90e>
 8006e5c:	9b05      	ldr	r3, [sp, #20]
 8006e5e:	f1c0 001c 	rsb	r0, r0, #28
 8006e62:	4403      	add	r3, r0
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	9b06      	ldr	r3, [sp, #24]
 8006e68:	4403      	add	r3, r0
 8006e6a:	4405      	add	r5, r0
 8006e6c:	9306      	str	r3, [sp, #24]
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dd05      	ble.n	8006e80 <_dtoa_r+0x828>
 8006e74:	4651      	mov	r1, sl
 8006e76:	461a      	mov	r2, r3
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fd39 	bl	80078f0 <__lshift>
 8006e7e:	4682      	mov	sl, r0
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	dd05      	ble.n	8006e92 <_dtoa_r+0x83a>
 8006e86:	4631      	mov	r1, r6
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fd30 	bl	80078f0 <__lshift>
 8006e90:	4606      	mov	r6, r0
 8006e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d072      	beq.n	8006f7e <_dtoa_r+0x926>
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f000 fd94 	bl	80079c8 <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	da6c      	bge.n	8006f7e <_dtoa_r+0x926>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4651      	mov	r1, sl
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 fb28 	bl	8007500 <__multadd>
 8006eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 81b0 	beq.w	800721e <_dtoa_r+0xbc6>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fb1b 	bl	8007500 <__multadd>
 8006eca:	9b01      	ldr	r3, [sp, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	4607      	mov	r7, r0
 8006ed0:	f300 8096 	bgt.w	8007000 <_dtoa_r+0x9a8>
 8006ed4:	9b07      	ldr	r3, [sp, #28]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	dc59      	bgt.n	8006f8e <_dtoa_r+0x936>
 8006eda:	e091      	b.n	8007000 <_dtoa_r+0x9a8>
 8006edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ee2:	e758      	b.n	8006d96 <_dtoa_r+0x73e>
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	1e5e      	subs	r6, r3, #1
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	42b3      	cmp	r3, r6
 8006eec:	bfbf      	itttt	lt
 8006eee:	9b08      	ldrlt	r3, [sp, #32]
 8006ef0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ef2:	9608      	strlt	r6, [sp, #32]
 8006ef4:	1af3      	sublt	r3, r6, r3
 8006ef6:	bfb4      	ite	lt
 8006ef8:	18d2      	addlt	r2, r2, r3
 8006efa:	1b9e      	subge	r6, r3, r6
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	bfbc      	itt	lt
 8006f00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006f02:	2600      	movlt	r6, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bfb7      	itett	lt
 8006f08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006f0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006f10:	1a9d      	sublt	r5, r3, r2
 8006f12:	2300      	movlt	r3, #0
 8006f14:	e741      	b.n	8006d9a <_dtoa_r+0x742>
 8006f16:	9e08      	ldr	r6, [sp, #32]
 8006f18:	9d05      	ldr	r5, [sp, #20]
 8006f1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f1c:	e748      	b.n	8006db0 <_dtoa_r+0x758>
 8006f1e:	9a08      	ldr	r2, [sp, #32]
 8006f20:	e770      	b.n	8006e04 <_dtoa_r+0x7ac>
 8006f22:	9b07      	ldr	r3, [sp, #28]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	dc19      	bgt.n	8006f5c <_dtoa_r+0x904>
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	b9bb      	cbnz	r3, 8006f5c <_dtoa_r+0x904>
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f32:	b99b      	cbnz	r3, 8006f5c <_dtoa_r+0x904>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f3a:	0d1b      	lsrs	r3, r3, #20
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	b183      	cbz	r3, 8006f62 <_dtoa_r+0x90a>
 8006f40:	9b05      	ldr	r3, [sp, #20]
 8006f42:	3301      	adds	r3, #1
 8006f44:	9305      	str	r3, [sp, #20]
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9306      	str	r3, [sp, #24]
 8006f4c:	f04f 0801 	mov.w	r8, #1
 8006f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f47f af6f 	bne.w	8006e36 <_dtoa_r+0x7de>
 8006f58:	2001      	movs	r0, #1
 8006f5a:	e774      	b.n	8006e46 <_dtoa_r+0x7ee>
 8006f5c:	f04f 0800 	mov.w	r8, #0
 8006f60:	e7f6      	b.n	8006f50 <_dtoa_r+0x8f8>
 8006f62:	4698      	mov	r8, r3
 8006f64:	e7f4      	b.n	8006f50 <_dtoa_r+0x8f8>
 8006f66:	d082      	beq.n	8006e6e <_dtoa_r+0x816>
 8006f68:	9a05      	ldr	r2, [sp, #20]
 8006f6a:	331c      	adds	r3, #28
 8006f6c:	441a      	add	r2, r3
 8006f6e:	9205      	str	r2, [sp, #20]
 8006f70:	9a06      	ldr	r2, [sp, #24]
 8006f72:	441a      	add	r2, r3
 8006f74:	441d      	add	r5, r3
 8006f76:	9206      	str	r2, [sp, #24]
 8006f78:	e779      	b.n	8006e6e <_dtoa_r+0x816>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	e7f4      	b.n	8006f68 <_dtoa_r+0x910>
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dc37      	bgt.n	8006ff4 <_dtoa_r+0x99c>
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dd34      	ble.n	8006ff4 <_dtoa_r+0x99c>
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	b963      	cbnz	r3, 8006fac <_dtoa_r+0x954>
 8006f92:	4631      	mov	r1, r6
 8006f94:	2205      	movs	r2, #5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fab2 	bl	8007500 <__multadd>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	f000 fd11 	bl	80079c8 <__mcmp>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f73f adbb 	bgt.w	8006b22 <_dtoa_r+0x4ca>
 8006fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fae:	9d00      	ldr	r5, [sp, #0]
 8006fb0:	ea6f 0b03 	mvn.w	fp, r3
 8006fb4:	f04f 0800 	mov.w	r8, #0
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fa7e 	bl	80074bc <_Bfree>
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	f43f aeab 	beq.w	8006d1c <_dtoa_r+0x6c4>
 8006fc6:	f1b8 0f00 	cmp.w	r8, #0
 8006fca:	d005      	beq.n	8006fd8 <_dtoa_r+0x980>
 8006fcc:	45b8      	cmp	r8, r7
 8006fce:	d003      	beq.n	8006fd8 <_dtoa_r+0x980>
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 fa72 	bl	80074bc <_Bfree>
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 fa6e 	bl	80074bc <_Bfree>
 8006fe0:	e69c      	b.n	8006d1c <_dtoa_r+0x6c4>
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	4637      	mov	r7, r6
 8006fe6:	e7e1      	b.n	8006fac <_dtoa_r+0x954>
 8006fe8:	46bb      	mov	fp, r7
 8006fea:	4637      	mov	r7, r6
 8006fec:	e599      	b.n	8006b22 <_dtoa_r+0x4ca>
 8006fee:	bf00      	nop
 8006ff0:	40240000 	.word	0x40240000
 8006ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80c8 	beq.w	800718c <_dtoa_r+0xb34>
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	2d00      	cmp	r5, #0
 8007002:	dd05      	ble.n	8007010 <_dtoa_r+0x9b8>
 8007004:	4639      	mov	r1, r7
 8007006:	462a      	mov	r2, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fc71 	bl	80078f0 <__lshift>
 800700e:	4607      	mov	r7, r0
 8007010:	f1b8 0f00 	cmp.w	r8, #0
 8007014:	d05b      	beq.n	80070ce <_dtoa_r+0xa76>
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fa0f 	bl	800743c <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b928      	cbnz	r0, 800702e <_dtoa_r+0x9d6>
 8007022:	4b83      	ldr	r3, [pc, #524]	; (8007230 <_dtoa_r+0xbd8>)
 8007024:	4602      	mov	r2, r0
 8007026:	f240 21ef 	movw	r1, #751	; 0x2ef
 800702a:	f7ff bb2e 	b.w	800668a <_dtoa_r+0x32>
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	3202      	adds	r2, #2
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	f107 010c 	add.w	r1, r7, #12
 8007038:	300c      	adds	r0, #12
 800703a:	f002 f94d 	bl	80092d8 <memcpy>
 800703e:	2201      	movs	r2, #1
 8007040:	4629      	mov	r1, r5
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fc54 	bl	80078f0 <__lshift>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007052:	4413      	add	r3, r2
 8007054:	9308      	str	r3, [sp, #32]
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	46b8      	mov	r8, r7
 800705e:	9306      	str	r3, [sp, #24]
 8007060:	4607      	mov	r7, r0
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	4631      	mov	r1, r6
 8007066:	3b01      	subs	r3, #1
 8007068:	4650      	mov	r0, sl
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	f7ff fa6c 	bl	8006548 <quorem>
 8007070:	4641      	mov	r1, r8
 8007072:	9002      	str	r0, [sp, #8]
 8007074:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007078:	4650      	mov	r0, sl
 800707a:	f000 fca5 	bl	80079c8 <__mcmp>
 800707e:	463a      	mov	r2, r7
 8007080:	9005      	str	r0, [sp, #20]
 8007082:	4631      	mov	r1, r6
 8007084:	4620      	mov	r0, r4
 8007086:	f000 fcbb 	bl	8007a00 <__mdiff>
 800708a:	68c2      	ldr	r2, [r0, #12]
 800708c:	4605      	mov	r5, r0
 800708e:	bb02      	cbnz	r2, 80070d2 <_dtoa_r+0xa7a>
 8007090:	4601      	mov	r1, r0
 8007092:	4650      	mov	r0, sl
 8007094:	f000 fc98 	bl	80079c8 <__mcmp>
 8007098:	4602      	mov	r2, r0
 800709a:	4629      	mov	r1, r5
 800709c:	4620      	mov	r0, r4
 800709e:	9209      	str	r2, [sp, #36]	; 0x24
 80070a0:	f000 fa0c 	bl	80074bc <_Bfree>
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	9d04      	ldr	r5, [sp, #16]
 80070aa:	ea43 0102 	orr.w	r1, r3, r2
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	4319      	orrs	r1, r3
 80070b2:	d110      	bne.n	80070d6 <_dtoa_r+0xa7e>
 80070b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070b8:	d029      	beq.n	800710e <_dtoa_r+0xab6>
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd02      	ble.n	80070c6 <_dtoa_r+0xa6e>
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	f883 9000 	strb.w	r9, [r3]
 80070cc:	e774      	b.n	8006fb8 <_dtoa_r+0x960>
 80070ce:	4638      	mov	r0, r7
 80070d0:	e7ba      	b.n	8007048 <_dtoa_r+0x9f0>
 80070d2:	2201      	movs	r2, #1
 80070d4:	e7e1      	b.n	800709a <_dtoa_r+0xa42>
 80070d6:	9b05      	ldr	r3, [sp, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db04      	blt.n	80070e6 <_dtoa_r+0xa8e>
 80070dc:	9907      	ldr	r1, [sp, #28]
 80070de:	430b      	orrs	r3, r1
 80070e0:	9906      	ldr	r1, [sp, #24]
 80070e2:	430b      	orrs	r3, r1
 80070e4:	d120      	bne.n	8007128 <_dtoa_r+0xad0>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	dded      	ble.n	80070c6 <_dtoa_r+0xa6e>
 80070ea:	4651      	mov	r1, sl
 80070ec:	2201      	movs	r2, #1
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fbfe 	bl	80078f0 <__lshift>
 80070f4:	4631      	mov	r1, r6
 80070f6:	4682      	mov	sl, r0
 80070f8:	f000 fc66 	bl	80079c8 <__mcmp>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	dc03      	bgt.n	8007108 <_dtoa_r+0xab0>
 8007100:	d1e1      	bne.n	80070c6 <_dtoa_r+0xa6e>
 8007102:	f019 0f01 	tst.w	r9, #1
 8007106:	d0de      	beq.n	80070c6 <_dtoa_r+0xa6e>
 8007108:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800710c:	d1d8      	bne.n	80070c0 <_dtoa_r+0xa68>
 800710e:	9a01      	ldr	r2, [sp, #4]
 8007110:	2339      	movs	r3, #57	; 0x39
 8007112:	7013      	strb	r3, [r2, #0]
 8007114:	462b      	mov	r3, r5
 8007116:	461d      	mov	r5, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800711e:	2a39      	cmp	r2, #57	; 0x39
 8007120:	d06c      	beq.n	80071fc <_dtoa_r+0xba4>
 8007122:	3201      	adds	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e747      	b.n	8006fb8 <_dtoa_r+0x960>
 8007128:	2a00      	cmp	r2, #0
 800712a:	dd07      	ble.n	800713c <_dtoa_r+0xae4>
 800712c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007130:	d0ed      	beq.n	800710e <_dtoa_r+0xab6>
 8007132:	9a01      	ldr	r2, [sp, #4]
 8007134:	f109 0301 	add.w	r3, r9, #1
 8007138:	7013      	strb	r3, [r2, #0]
 800713a:	e73d      	b.n	8006fb8 <_dtoa_r+0x960>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	9a08      	ldr	r2, [sp, #32]
 8007140:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007144:	4293      	cmp	r3, r2
 8007146:	d043      	beq.n	80071d0 <_dtoa_r+0xb78>
 8007148:	4651      	mov	r1, sl
 800714a:	2300      	movs	r3, #0
 800714c:	220a      	movs	r2, #10
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f9d6 	bl	8007500 <__multadd>
 8007154:	45b8      	cmp	r8, r7
 8007156:	4682      	mov	sl, r0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	f04f 020a 	mov.w	r2, #10
 8007160:	4641      	mov	r1, r8
 8007162:	4620      	mov	r0, r4
 8007164:	d107      	bne.n	8007176 <_dtoa_r+0xb1e>
 8007166:	f000 f9cb 	bl	8007500 <__multadd>
 800716a:	4680      	mov	r8, r0
 800716c:	4607      	mov	r7, r0
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	3301      	adds	r3, #1
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	e775      	b.n	8007062 <_dtoa_r+0xa0a>
 8007176:	f000 f9c3 	bl	8007500 <__multadd>
 800717a:	4639      	mov	r1, r7
 800717c:	4680      	mov	r8, r0
 800717e:	2300      	movs	r3, #0
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f9bc 	bl	8007500 <__multadd>
 8007188:	4607      	mov	r7, r0
 800718a:	e7f0      	b.n	800716e <_dtoa_r+0xb16>
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	9d00      	ldr	r5, [sp, #0]
 8007192:	4631      	mov	r1, r6
 8007194:	4650      	mov	r0, sl
 8007196:	f7ff f9d7 	bl	8006548 <quorem>
 800719a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	f805 9b01 	strb.w	r9, [r5], #1
 80071a4:	1aea      	subs	r2, r5, r3
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	4293      	cmp	r3, r2
 80071aa:	dd07      	ble.n	80071bc <_dtoa_r+0xb64>
 80071ac:	4651      	mov	r1, sl
 80071ae:	2300      	movs	r3, #0
 80071b0:	220a      	movs	r2, #10
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f9a4 	bl	8007500 <__multadd>
 80071b8:	4682      	mov	sl, r0
 80071ba:	e7ea      	b.n	8007192 <_dtoa_r+0xb3a>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfc8      	it	gt
 80071c2:	461d      	movgt	r5, r3
 80071c4:	9b00      	ldr	r3, [sp, #0]
 80071c6:	bfd8      	it	le
 80071c8:	2501      	movle	r5, #1
 80071ca:	441d      	add	r5, r3
 80071cc:	f04f 0800 	mov.w	r8, #0
 80071d0:	4651      	mov	r1, sl
 80071d2:	2201      	movs	r2, #1
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fb8b 	bl	80078f0 <__lshift>
 80071da:	4631      	mov	r1, r6
 80071dc:	4682      	mov	sl, r0
 80071de:	f000 fbf3 	bl	80079c8 <__mcmp>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	dc96      	bgt.n	8007114 <_dtoa_r+0xabc>
 80071e6:	d102      	bne.n	80071ee <_dtoa_r+0xb96>
 80071e8:	f019 0f01 	tst.w	r9, #1
 80071ec:	d192      	bne.n	8007114 <_dtoa_r+0xabc>
 80071ee:	462b      	mov	r3, r5
 80071f0:	461d      	mov	r5, r3
 80071f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f6:	2a30      	cmp	r2, #48	; 0x30
 80071f8:	d0fa      	beq.n	80071f0 <_dtoa_r+0xb98>
 80071fa:	e6dd      	b.n	8006fb8 <_dtoa_r+0x960>
 80071fc:	9a00      	ldr	r2, [sp, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d189      	bne.n	8007116 <_dtoa_r+0xabe>
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	2331      	movs	r3, #49	; 0x31
 8007208:	e796      	b.n	8007138 <_dtoa_r+0xae0>
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <_dtoa_r+0xbdc>)
 800720c:	f7ff ba99 	b.w	8006742 <_dtoa_r+0xea>
 8007210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007212:	2b00      	cmp	r3, #0
 8007214:	f47f aa6d 	bne.w	80066f2 <_dtoa_r+0x9a>
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <_dtoa_r+0xbe0>)
 800721a:	f7ff ba92 	b.w	8006742 <_dtoa_r+0xea>
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	dcb5      	bgt.n	8007190 <_dtoa_r+0xb38>
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	2b02      	cmp	r3, #2
 8007228:	f73f aeb1 	bgt.w	8006f8e <_dtoa_r+0x936>
 800722c:	e7b0      	b.n	8007190 <_dtoa_r+0xb38>
 800722e:	bf00      	nop
 8007230:	08009fdd 	.word	0x08009fdd
 8007234:	08009f38 	.word	0x08009f38
 8007238:	08009f61 	.word	0x08009f61

0800723c <_free_r>:
 800723c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800723e:	2900      	cmp	r1, #0
 8007240:	d044      	beq.n	80072cc <_free_r+0x90>
 8007242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007246:	9001      	str	r0, [sp, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f1a1 0404 	sub.w	r4, r1, #4
 800724e:	bfb8      	it	lt
 8007250:	18e4      	addlt	r4, r4, r3
 8007252:	f000 f8e7 	bl	8007424 <__malloc_lock>
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <_free_r+0x94>)
 8007258:	9801      	ldr	r0, [sp, #4]
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	b933      	cbnz	r3, 800726c <_free_r+0x30>
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	6014      	str	r4, [r2, #0]
 8007262:	b003      	add	sp, #12
 8007264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007268:	f000 b8e2 	b.w	8007430 <__malloc_unlock>
 800726c:	42a3      	cmp	r3, r4
 800726e:	d908      	bls.n	8007282 <_free_r+0x46>
 8007270:	6825      	ldr	r5, [r4, #0]
 8007272:	1961      	adds	r1, r4, r5
 8007274:	428b      	cmp	r3, r1
 8007276:	bf01      	itttt	eq
 8007278:	6819      	ldreq	r1, [r3, #0]
 800727a:	685b      	ldreq	r3, [r3, #4]
 800727c:	1949      	addeq	r1, r1, r5
 800727e:	6021      	streq	r1, [r4, #0]
 8007280:	e7ed      	b.n	800725e <_free_r+0x22>
 8007282:	461a      	mov	r2, r3
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b10b      	cbz	r3, 800728c <_free_r+0x50>
 8007288:	42a3      	cmp	r3, r4
 800728a:	d9fa      	bls.n	8007282 <_free_r+0x46>
 800728c:	6811      	ldr	r1, [r2, #0]
 800728e:	1855      	adds	r5, r2, r1
 8007290:	42a5      	cmp	r5, r4
 8007292:	d10b      	bne.n	80072ac <_free_r+0x70>
 8007294:	6824      	ldr	r4, [r4, #0]
 8007296:	4421      	add	r1, r4
 8007298:	1854      	adds	r4, r2, r1
 800729a:	42a3      	cmp	r3, r4
 800729c:	6011      	str	r1, [r2, #0]
 800729e:	d1e0      	bne.n	8007262 <_free_r+0x26>
 80072a0:	681c      	ldr	r4, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	440c      	add	r4, r1
 80072a8:	6014      	str	r4, [r2, #0]
 80072aa:	e7da      	b.n	8007262 <_free_r+0x26>
 80072ac:	d902      	bls.n	80072b4 <_free_r+0x78>
 80072ae:	230c      	movs	r3, #12
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	e7d6      	b.n	8007262 <_free_r+0x26>
 80072b4:	6825      	ldr	r5, [r4, #0]
 80072b6:	1961      	adds	r1, r4, r5
 80072b8:	428b      	cmp	r3, r1
 80072ba:	bf04      	itt	eq
 80072bc:	6819      	ldreq	r1, [r3, #0]
 80072be:	685b      	ldreq	r3, [r3, #4]
 80072c0:	6063      	str	r3, [r4, #4]
 80072c2:	bf04      	itt	eq
 80072c4:	1949      	addeq	r1, r1, r5
 80072c6:	6021      	streq	r1, [r4, #0]
 80072c8:	6054      	str	r4, [r2, #4]
 80072ca:	e7ca      	b.n	8007262 <_free_r+0x26>
 80072cc:	b003      	add	sp, #12
 80072ce:	bd30      	pop	{r4, r5, pc}
 80072d0:	20000558 	.word	0x20000558

080072d4 <malloc>:
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <malloc+0xc>)
 80072d6:	4601      	mov	r1, r0
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	f000 b823 	b.w	8007324 <_malloc_r>
 80072de:	bf00      	nop
 80072e0:	2000007c 	.word	0x2000007c

080072e4 <sbrk_aligned>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4e0e      	ldr	r6, [pc, #56]	; (8007320 <sbrk_aligned+0x3c>)
 80072e8:	460c      	mov	r4, r1
 80072ea:	6831      	ldr	r1, [r6, #0]
 80072ec:	4605      	mov	r5, r0
 80072ee:	b911      	cbnz	r1, 80072f6 <sbrk_aligned+0x12>
 80072f0:	f001 ffe2 	bl	80092b8 <_sbrk_r>
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f001 ffdd 	bl	80092b8 <_sbrk_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d00a      	beq.n	8007318 <sbrk_aligned+0x34>
 8007302:	1cc4      	adds	r4, r0, #3
 8007304:	f024 0403 	bic.w	r4, r4, #3
 8007308:	42a0      	cmp	r0, r4
 800730a:	d007      	beq.n	800731c <sbrk_aligned+0x38>
 800730c:	1a21      	subs	r1, r4, r0
 800730e:	4628      	mov	r0, r5
 8007310:	f001 ffd2 	bl	80092b8 <_sbrk_r>
 8007314:	3001      	adds	r0, #1
 8007316:	d101      	bne.n	800731c <sbrk_aligned+0x38>
 8007318:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800731c:	4620      	mov	r0, r4
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	2000055c 	.word	0x2000055c

08007324 <_malloc_r>:
 8007324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007328:	1ccd      	adds	r5, r1, #3
 800732a:	f025 0503 	bic.w	r5, r5, #3
 800732e:	3508      	adds	r5, #8
 8007330:	2d0c      	cmp	r5, #12
 8007332:	bf38      	it	cc
 8007334:	250c      	movcc	r5, #12
 8007336:	2d00      	cmp	r5, #0
 8007338:	4607      	mov	r7, r0
 800733a:	db01      	blt.n	8007340 <_malloc_r+0x1c>
 800733c:	42a9      	cmp	r1, r5
 800733e:	d905      	bls.n	800734c <_malloc_r+0x28>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	2600      	movs	r6, #0
 8007346:	4630      	mov	r0, r6
 8007348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007420 <_malloc_r+0xfc>
 8007350:	f000 f868 	bl	8007424 <__malloc_lock>
 8007354:	f8d8 3000 	ldr.w	r3, [r8]
 8007358:	461c      	mov	r4, r3
 800735a:	bb5c      	cbnz	r4, 80073b4 <_malloc_r+0x90>
 800735c:	4629      	mov	r1, r5
 800735e:	4638      	mov	r0, r7
 8007360:	f7ff ffc0 	bl	80072e4 <sbrk_aligned>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	4604      	mov	r4, r0
 8007368:	d155      	bne.n	8007416 <_malloc_r+0xf2>
 800736a:	f8d8 4000 	ldr.w	r4, [r8]
 800736e:	4626      	mov	r6, r4
 8007370:	2e00      	cmp	r6, #0
 8007372:	d145      	bne.n	8007400 <_malloc_r+0xdc>
 8007374:	2c00      	cmp	r4, #0
 8007376:	d048      	beq.n	800740a <_malloc_r+0xe6>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	4631      	mov	r1, r6
 800737c:	4638      	mov	r0, r7
 800737e:	eb04 0903 	add.w	r9, r4, r3
 8007382:	f001 ff99 	bl	80092b8 <_sbrk_r>
 8007386:	4581      	cmp	r9, r0
 8007388:	d13f      	bne.n	800740a <_malloc_r+0xe6>
 800738a:	6821      	ldr	r1, [r4, #0]
 800738c:	1a6d      	subs	r5, r5, r1
 800738e:	4629      	mov	r1, r5
 8007390:	4638      	mov	r0, r7
 8007392:	f7ff ffa7 	bl	80072e4 <sbrk_aligned>
 8007396:	3001      	adds	r0, #1
 8007398:	d037      	beq.n	800740a <_malloc_r+0xe6>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	442b      	add	r3, r5
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	f8d8 3000 	ldr.w	r3, [r8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d038      	beq.n	800741a <_malloc_r+0xf6>
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	42a2      	cmp	r2, r4
 80073ac:	d12b      	bne.n	8007406 <_malloc_r+0xe2>
 80073ae:	2200      	movs	r2, #0
 80073b0:	605a      	str	r2, [r3, #4]
 80073b2:	e00f      	b.n	80073d4 <_malloc_r+0xb0>
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	1b52      	subs	r2, r2, r5
 80073b8:	d41f      	bmi.n	80073fa <_malloc_r+0xd6>
 80073ba:	2a0b      	cmp	r2, #11
 80073bc:	d917      	bls.n	80073ee <_malloc_r+0xca>
 80073be:	1961      	adds	r1, r4, r5
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	6025      	str	r5, [r4, #0]
 80073c4:	bf18      	it	ne
 80073c6:	6059      	strne	r1, [r3, #4]
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	bf08      	it	eq
 80073cc:	f8c8 1000 	streq.w	r1, [r8]
 80073d0:	5162      	str	r2, [r4, r5]
 80073d2:	604b      	str	r3, [r1, #4]
 80073d4:	4638      	mov	r0, r7
 80073d6:	f104 060b 	add.w	r6, r4, #11
 80073da:	f000 f829 	bl	8007430 <__malloc_unlock>
 80073de:	f026 0607 	bic.w	r6, r6, #7
 80073e2:	1d23      	adds	r3, r4, #4
 80073e4:	1af2      	subs	r2, r6, r3
 80073e6:	d0ae      	beq.n	8007346 <_malloc_r+0x22>
 80073e8:	1b9b      	subs	r3, r3, r6
 80073ea:	50a3      	str	r3, [r4, r2]
 80073ec:	e7ab      	b.n	8007346 <_malloc_r+0x22>
 80073ee:	42a3      	cmp	r3, r4
 80073f0:	6862      	ldr	r2, [r4, #4]
 80073f2:	d1dd      	bne.n	80073b0 <_malloc_r+0x8c>
 80073f4:	f8c8 2000 	str.w	r2, [r8]
 80073f8:	e7ec      	b.n	80073d4 <_malloc_r+0xb0>
 80073fa:	4623      	mov	r3, r4
 80073fc:	6864      	ldr	r4, [r4, #4]
 80073fe:	e7ac      	b.n	800735a <_malloc_r+0x36>
 8007400:	4634      	mov	r4, r6
 8007402:	6876      	ldr	r6, [r6, #4]
 8007404:	e7b4      	b.n	8007370 <_malloc_r+0x4c>
 8007406:	4613      	mov	r3, r2
 8007408:	e7cc      	b.n	80073a4 <_malloc_r+0x80>
 800740a:	230c      	movs	r3, #12
 800740c:	603b      	str	r3, [r7, #0]
 800740e:	4638      	mov	r0, r7
 8007410:	f000 f80e 	bl	8007430 <__malloc_unlock>
 8007414:	e797      	b.n	8007346 <_malloc_r+0x22>
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	e7dc      	b.n	80073d4 <_malloc_r+0xb0>
 800741a:	605b      	str	r3, [r3, #4]
 800741c:	deff      	udf	#255	; 0xff
 800741e:	bf00      	nop
 8007420:	20000558 	.word	0x20000558

08007424 <__malloc_lock>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__malloc_lock+0x8>)
 8007426:	f7ff b886 	b.w	8006536 <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	20000554 	.word	0x20000554

08007430 <__malloc_unlock>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__malloc_unlock+0x8>)
 8007432:	f7ff b881 	b.w	8006538 <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	20000554 	.word	0x20000554

0800743c <_Balloc>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	69c6      	ldr	r6, [r0, #28]
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	b976      	cbnz	r6, 8007464 <_Balloc+0x28>
 8007446:	2010      	movs	r0, #16
 8007448:	f7ff ff44 	bl	80072d4 <malloc>
 800744c:	4602      	mov	r2, r0
 800744e:	61e0      	str	r0, [r4, #28]
 8007450:	b920      	cbnz	r0, 800745c <_Balloc+0x20>
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <_Balloc+0x78>)
 8007454:	4818      	ldr	r0, [pc, #96]	; (80074b8 <_Balloc+0x7c>)
 8007456:	216b      	movs	r1, #107	; 0x6b
 8007458:	f001 ff56 	bl	8009308 <__assert_func>
 800745c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007460:	6006      	str	r6, [r0, #0]
 8007462:	60c6      	str	r6, [r0, #12]
 8007464:	69e6      	ldr	r6, [r4, #28]
 8007466:	68f3      	ldr	r3, [r6, #12]
 8007468:	b183      	cbz	r3, 800748c <_Balloc+0x50>
 800746a:	69e3      	ldr	r3, [r4, #28]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007472:	b9b8      	cbnz	r0, 80074a4 <_Balloc+0x68>
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f605 	lsl.w	r6, r1, r5
 800747a:	1d72      	adds	r2, r6, #5
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	4620      	mov	r0, r4
 8007480:	f001 ff60 	bl	8009344 <_calloc_r>
 8007484:	b160      	cbz	r0, 80074a0 <_Balloc+0x64>
 8007486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800748a:	e00e      	b.n	80074aa <_Balloc+0x6e>
 800748c:	2221      	movs	r2, #33	; 0x21
 800748e:	2104      	movs	r1, #4
 8007490:	4620      	mov	r0, r4
 8007492:	f001 ff57 	bl	8009344 <_calloc_r>
 8007496:	69e3      	ldr	r3, [r4, #28]
 8007498:	60f0      	str	r0, [r6, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e4      	bne.n	800746a <_Balloc+0x2e>
 80074a0:	2000      	movs	r0, #0
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	6802      	ldr	r2, [r0, #0]
 80074a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074aa:	2300      	movs	r3, #0
 80074ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074b0:	e7f7      	b.n	80074a2 <_Balloc+0x66>
 80074b2:	bf00      	nop
 80074b4:	08009f6e 	.word	0x08009f6e
 80074b8:	08009fee 	.word	0x08009fee

080074bc <_Bfree>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	69c6      	ldr	r6, [r0, #28]
 80074c0:	4605      	mov	r5, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	b976      	cbnz	r6, 80074e4 <_Bfree+0x28>
 80074c6:	2010      	movs	r0, #16
 80074c8:	f7ff ff04 	bl	80072d4 <malloc>
 80074cc:	4602      	mov	r2, r0
 80074ce:	61e8      	str	r0, [r5, #28]
 80074d0:	b920      	cbnz	r0, 80074dc <_Bfree+0x20>
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <_Bfree+0x3c>)
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <_Bfree+0x40>)
 80074d6:	218f      	movs	r1, #143	; 0x8f
 80074d8:	f001 ff16 	bl	8009308 <__assert_func>
 80074dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074e0:	6006      	str	r6, [r0, #0]
 80074e2:	60c6      	str	r6, [r0, #12]
 80074e4:	b13c      	cbz	r4, 80074f6 <_Bfree+0x3a>
 80074e6:	69eb      	ldr	r3, [r5, #28]
 80074e8:	6862      	ldr	r2, [r4, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074f0:	6021      	str	r1, [r4, #0]
 80074f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	08009f6e 	.word	0x08009f6e
 80074fc:	08009fee 	.word	0x08009fee

08007500 <__multadd>:
 8007500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007504:	690d      	ldr	r5, [r1, #16]
 8007506:	4607      	mov	r7, r0
 8007508:	460c      	mov	r4, r1
 800750a:	461e      	mov	r6, r3
 800750c:	f101 0c14 	add.w	ip, r1, #20
 8007510:	2000      	movs	r0, #0
 8007512:	f8dc 3000 	ldr.w	r3, [ip]
 8007516:	b299      	uxth	r1, r3
 8007518:	fb02 6101 	mla	r1, r2, r1, r6
 800751c:	0c1e      	lsrs	r6, r3, #16
 800751e:	0c0b      	lsrs	r3, r1, #16
 8007520:	fb02 3306 	mla	r3, r2, r6, r3
 8007524:	b289      	uxth	r1, r1
 8007526:	3001      	adds	r0, #1
 8007528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800752c:	4285      	cmp	r5, r0
 800752e:	f84c 1b04 	str.w	r1, [ip], #4
 8007532:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007536:	dcec      	bgt.n	8007512 <__multadd+0x12>
 8007538:	b30e      	cbz	r6, 800757e <__multadd+0x7e>
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc19      	bgt.n	8007574 <__multadd+0x74>
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4638      	mov	r0, r7
 8007544:	3101      	adds	r1, #1
 8007546:	f7ff ff79 	bl	800743c <_Balloc>
 800754a:	4680      	mov	r8, r0
 800754c:	b928      	cbnz	r0, 800755a <__multadd+0x5a>
 800754e:	4602      	mov	r2, r0
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <__multadd+0x84>)
 8007552:	480d      	ldr	r0, [pc, #52]	; (8007588 <__multadd+0x88>)
 8007554:	21ba      	movs	r1, #186	; 0xba
 8007556:	f001 fed7 	bl	8009308 <__assert_func>
 800755a:	6922      	ldr	r2, [r4, #16]
 800755c:	3202      	adds	r2, #2
 800755e:	f104 010c 	add.w	r1, r4, #12
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	300c      	adds	r0, #12
 8007566:	f001 feb7 	bl	80092d8 <memcpy>
 800756a:	4621      	mov	r1, r4
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff ffa5 	bl	80074bc <_Bfree>
 8007572:	4644      	mov	r4, r8
 8007574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007578:	3501      	adds	r5, #1
 800757a:	615e      	str	r6, [r3, #20]
 800757c:	6125      	str	r5, [r4, #16]
 800757e:	4620      	mov	r0, r4
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	08009fdd 	.word	0x08009fdd
 8007588:	08009fee 	.word	0x08009fee

0800758c <__s2b>:
 800758c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	4615      	mov	r5, r2
 8007594:	461f      	mov	r7, r3
 8007596:	2209      	movs	r2, #9
 8007598:	3308      	adds	r3, #8
 800759a:	4606      	mov	r6, r0
 800759c:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a0:	2100      	movs	r1, #0
 80075a2:	2201      	movs	r2, #1
 80075a4:	429a      	cmp	r2, r3
 80075a6:	db09      	blt.n	80075bc <__s2b+0x30>
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ff47 	bl	800743c <_Balloc>
 80075ae:	b940      	cbnz	r0, 80075c2 <__s2b+0x36>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4b19      	ldr	r3, [pc, #100]	; (8007618 <__s2b+0x8c>)
 80075b4:	4819      	ldr	r0, [pc, #100]	; (800761c <__s2b+0x90>)
 80075b6:	21d3      	movs	r1, #211	; 0xd3
 80075b8:	f001 fea6 	bl	8009308 <__assert_func>
 80075bc:	0052      	lsls	r2, r2, #1
 80075be:	3101      	adds	r1, #1
 80075c0:	e7f0      	b.n	80075a4 <__s2b+0x18>
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	6143      	str	r3, [r0, #20]
 80075c6:	2d09      	cmp	r5, #9
 80075c8:	f04f 0301 	mov.w	r3, #1
 80075cc:	6103      	str	r3, [r0, #16]
 80075ce:	dd16      	ble.n	80075fe <__s2b+0x72>
 80075d0:	f104 0909 	add.w	r9, r4, #9
 80075d4:	46c8      	mov	r8, r9
 80075d6:	442c      	add	r4, r5
 80075d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075dc:	4601      	mov	r1, r0
 80075de:	3b30      	subs	r3, #48	; 0x30
 80075e0:	220a      	movs	r2, #10
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7ff ff8c 	bl	8007500 <__multadd>
 80075e8:	45a0      	cmp	r8, r4
 80075ea:	d1f5      	bne.n	80075d8 <__s2b+0x4c>
 80075ec:	f1a5 0408 	sub.w	r4, r5, #8
 80075f0:	444c      	add	r4, r9
 80075f2:	1b2d      	subs	r5, r5, r4
 80075f4:	1963      	adds	r3, r4, r5
 80075f6:	42bb      	cmp	r3, r7
 80075f8:	db04      	blt.n	8007604 <__s2b+0x78>
 80075fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fe:	340a      	adds	r4, #10
 8007600:	2509      	movs	r5, #9
 8007602:	e7f6      	b.n	80075f2 <__s2b+0x66>
 8007604:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007608:	4601      	mov	r1, r0
 800760a:	3b30      	subs	r3, #48	; 0x30
 800760c:	220a      	movs	r2, #10
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ff76 	bl	8007500 <__multadd>
 8007614:	e7ee      	b.n	80075f4 <__s2b+0x68>
 8007616:	bf00      	nop
 8007618:	08009fdd 	.word	0x08009fdd
 800761c:	08009fee 	.word	0x08009fee

08007620 <__hi0bits>:
 8007620:	0c03      	lsrs	r3, r0, #16
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	b9d3      	cbnz	r3, 800765c <__hi0bits+0x3c>
 8007626:	0400      	lsls	r0, r0, #16
 8007628:	2310      	movs	r3, #16
 800762a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800762e:	bf04      	itt	eq
 8007630:	0200      	lsleq	r0, r0, #8
 8007632:	3308      	addeq	r3, #8
 8007634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007638:	bf04      	itt	eq
 800763a:	0100      	lsleq	r0, r0, #4
 800763c:	3304      	addeq	r3, #4
 800763e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007642:	bf04      	itt	eq
 8007644:	0080      	lsleq	r0, r0, #2
 8007646:	3302      	addeq	r3, #2
 8007648:	2800      	cmp	r0, #0
 800764a:	db05      	blt.n	8007658 <__hi0bits+0x38>
 800764c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007650:	f103 0301 	add.w	r3, r3, #1
 8007654:	bf08      	it	eq
 8007656:	2320      	moveq	r3, #32
 8007658:	4618      	mov	r0, r3
 800765a:	4770      	bx	lr
 800765c:	2300      	movs	r3, #0
 800765e:	e7e4      	b.n	800762a <__hi0bits+0xa>

08007660 <__lo0bits>:
 8007660:	6803      	ldr	r3, [r0, #0]
 8007662:	f013 0207 	ands.w	r2, r3, #7
 8007666:	d00c      	beq.n	8007682 <__lo0bits+0x22>
 8007668:	07d9      	lsls	r1, r3, #31
 800766a:	d422      	bmi.n	80076b2 <__lo0bits+0x52>
 800766c:	079a      	lsls	r2, r3, #30
 800766e:	bf49      	itett	mi
 8007670:	085b      	lsrmi	r3, r3, #1
 8007672:	089b      	lsrpl	r3, r3, #2
 8007674:	6003      	strmi	r3, [r0, #0]
 8007676:	2201      	movmi	r2, #1
 8007678:	bf5c      	itt	pl
 800767a:	6003      	strpl	r3, [r0, #0]
 800767c:	2202      	movpl	r2, #2
 800767e:	4610      	mov	r0, r2
 8007680:	4770      	bx	lr
 8007682:	b299      	uxth	r1, r3
 8007684:	b909      	cbnz	r1, 800768a <__lo0bits+0x2a>
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	2210      	movs	r2, #16
 800768a:	b2d9      	uxtb	r1, r3
 800768c:	b909      	cbnz	r1, 8007692 <__lo0bits+0x32>
 800768e:	3208      	adds	r2, #8
 8007690:	0a1b      	lsrs	r3, r3, #8
 8007692:	0719      	lsls	r1, r3, #28
 8007694:	bf04      	itt	eq
 8007696:	091b      	lsreq	r3, r3, #4
 8007698:	3204      	addeq	r2, #4
 800769a:	0799      	lsls	r1, r3, #30
 800769c:	bf04      	itt	eq
 800769e:	089b      	lsreq	r3, r3, #2
 80076a0:	3202      	addeq	r2, #2
 80076a2:	07d9      	lsls	r1, r3, #31
 80076a4:	d403      	bmi.n	80076ae <__lo0bits+0x4e>
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	f102 0201 	add.w	r2, r2, #1
 80076ac:	d003      	beq.n	80076b6 <__lo0bits+0x56>
 80076ae:	6003      	str	r3, [r0, #0]
 80076b0:	e7e5      	b.n	800767e <__lo0bits+0x1e>
 80076b2:	2200      	movs	r2, #0
 80076b4:	e7e3      	b.n	800767e <__lo0bits+0x1e>
 80076b6:	2220      	movs	r2, #32
 80076b8:	e7e1      	b.n	800767e <__lo0bits+0x1e>
	...

080076bc <__i2b>:
 80076bc:	b510      	push	{r4, lr}
 80076be:	460c      	mov	r4, r1
 80076c0:	2101      	movs	r1, #1
 80076c2:	f7ff febb 	bl	800743c <_Balloc>
 80076c6:	4602      	mov	r2, r0
 80076c8:	b928      	cbnz	r0, 80076d6 <__i2b+0x1a>
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <__i2b+0x24>)
 80076cc:	4805      	ldr	r0, [pc, #20]	; (80076e4 <__i2b+0x28>)
 80076ce:	f240 1145 	movw	r1, #325	; 0x145
 80076d2:	f001 fe19 	bl	8009308 <__assert_func>
 80076d6:	2301      	movs	r3, #1
 80076d8:	6144      	str	r4, [r0, #20]
 80076da:	6103      	str	r3, [r0, #16]
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	bf00      	nop
 80076e0:	08009fdd 	.word	0x08009fdd
 80076e4:	08009fee 	.word	0x08009fee

080076e8 <__multiply>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	4691      	mov	r9, r2
 80076ee:	690a      	ldr	r2, [r1, #16]
 80076f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	bfb8      	it	lt
 80076f8:	460b      	movlt	r3, r1
 80076fa:	460c      	mov	r4, r1
 80076fc:	bfbc      	itt	lt
 80076fe:	464c      	movlt	r4, r9
 8007700:	4699      	movlt	r9, r3
 8007702:	6927      	ldr	r7, [r4, #16]
 8007704:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007708:	68a3      	ldr	r3, [r4, #8]
 800770a:	6861      	ldr	r1, [r4, #4]
 800770c:	eb07 060a 	add.w	r6, r7, sl
 8007710:	42b3      	cmp	r3, r6
 8007712:	b085      	sub	sp, #20
 8007714:	bfb8      	it	lt
 8007716:	3101      	addlt	r1, #1
 8007718:	f7ff fe90 	bl	800743c <_Balloc>
 800771c:	b930      	cbnz	r0, 800772c <__multiply+0x44>
 800771e:	4602      	mov	r2, r0
 8007720:	4b44      	ldr	r3, [pc, #272]	; (8007834 <__multiply+0x14c>)
 8007722:	4845      	ldr	r0, [pc, #276]	; (8007838 <__multiply+0x150>)
 8007724:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007728:	f001 fdee 	bl	8009308 <__assert_func>
 800772c:	f100 0514 	add.w	r5, r0, #20
 8007730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007734:	462b      	mov	r3, r5
 8007736:	2200      	movs	r2, #0
 8007738:	4543      	cmp	r3, r8
 800773a:	d321      	bcc.n	8007780 <__multiply+0x98>
 800773c:	f104 0314 	add.w	r3, r4, #20
 8007740:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007744:	f109 0314 	add.w	r3, r9, #20
 8007748:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800774c:	9202      	str	r2, [sp, #8]
 800774e:	1b3a      	subs	r2, r7, r4
 8007750:	3a15      	subs	r2, #21
 8007752:	f022 0203 	bic.w	r2, r2, #3
 8007756:	3204      	adds	r2, #4
 8007758:	f104 0115 	add.w	r1, r4, #21
 800775c:	428f      	cmp	r7, r1
 800775e:	bf38      	it	cc
 8007760:	2204      	movcc	r2, #4
 8007762:	9201      	str	r2, [sp, #4]
 8007764:	9a02      	ldr	r2, [sp, #8]
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	429a      	cmp	r2, r3
 800776a:	d80c      	bhi.n	8007786 <__multiply+0x9e>
 800776c:	2e00      	cmp	r6, #0
 800776e:	dd03      	ble.n	8007778 <__multiply+0x90>
 8007770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007774:	2b00      	cmp	r3, #0
 8007776:	d05b      	beq.n	8007830 <__multiply+0x148>
 8007778:	6106      	str	r6, [r0, #16]
 800777a:	b005      	add	sp, #20
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	f843 2b04 	str.w	r2, [r3], #4
 8007784:	e7d8      	b.n	8007738 <__multiply+0x50>
 8007786:	f8b3 a000 	ldrh.w	sl, [r3]
 800778a:	f1ba 0f00 	cmp.w	sl, #0
 800778e:	d024      	beq.n	80077da <__multiply+0xf2>
 8007790:	f104 0e14 	add.w	lr, r4, #20
 8007794:	46a9      	mov	r9, r5
 8007796:	f04f 0c00 	mov.w	ip, #0
 800779a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800779e:	f8d9 1000 	ldr.w	r1, [r9]
 80077a2:	fa1f fb82 	uxth.w	fp, r2
 80077a6:	b289      	uxth	r1, r1
 80077a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80077ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077b0:	f8d9 2000 	ldr.w	r2, [r9]
 80077b4:	4461      	add	r1, ip
 80077b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80077be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077c2:	b289      	uxth	r1, r1
 80077c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077c8:	4577      	cmp	r7, lr
 80077ca:	f849 1b04 	str.w	r1, [r9], #4
 80077ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077d2:	d8e2      	bhi.n	800779a <__multiply+0xb2>
 80077d4:	9a01      	ldr	r2, [sp, #4]
 80077d6:	f845 c002 	str.w	ip, [r5, r2]
 80077da:	9a03      	ldr	r2, [sp, #12]
 80077dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077e0:	3304      	adds	r3, #4
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	d021      	beq.n	800782c <__multiply+0x144>
 80077e8:	6829      	ldr	r1, [r5, #0]
 80077ea:	f104 0c14 	add.w	ip, r4, #20
 80077ee:	46ae      	mov	lr, r5
 80077f0:	f04f 0a00 	mov.w	sl, #0
 80077f4:	f8bc b000 	ldrh.w	fp, [ip]
 80077f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077fc:	fb09 220b 	mla	r2, r9, fp, r2
 8007800:	4452      	add	r2, sl
 8007802:	b289      	uxth	r1, r1
 8007804:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007808:	f84e 1b04 	str.w	r1, [lr], #4
 800780c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007814:	f8be 1000 	ldrh.w	r1, [lr]
 8007818:	fb09 110a 	mla	r1, r9, sl, r1
 800781c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007820:	4567      	cmp	r7, ip
 8007822:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007826:	d8e5      	bhi.n	80077f4 <__multiply+0x10c>
 8007828:	9a01      	ldr	r2, [sp, #4]
 800782a:	50a9      	str	r1, [r5, r2]
 800782c:	3504      	adds	r5, #4
 800782e:	e799      	b.n	8007764 <__multiply+0x7c>
 8007830:	3e01      	subs	r6, #1
 8007832:	e79b      	b.n	800776c <__multiply+0x84>
 8007834:	08009fdd 	.word	0x08009fdd
 8007838:	08009fee 	.word	0x08009fee

0800783c <__pow5mult>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	4615      	mov	r5, r2
 8007842:	f012 0203 	ands.w	r2, r2, #3
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	d007      	beq.n	800785c <__pow5mult+0x20>
 800784c:	4c25      	ldr	r4, [pc, #148]	; (80078e4 <__pow5mult+0xa8>)
 800784e:	3a01      	subs	r2, #1
 8007850:	2300      	movs	r3, #0
 8007852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007856:	f7ff fe53 	bl	8007500 <__multadd>
 800785a:	4607      	mov	r7, r0
 800785c:	10ad      	asrs	r5, r5, #2
 800785e:	d03d      	beq.n	80078dc <__pow5mult+0xa0>
 8007860:	69f4      	ldr	r4, [r6, #28]
 8007862:	b97c      	cbnz	r4, 8007884 <__pow5mult+0x48>
 8007864:	2010      	movs	r0, #16
 8007866:	f7ff fd35 	bl	80072d4 <malloc>
 800786a:	4602      	mov	r2, r0
 800786c:	61f0      	str	r0, [r6, #28]
 800786e:	b928      	cbnz	r0, 800787c <__pow5mult+0x40>
 8007870:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <__pow5mult+0xac>)
 8007872:	481e      	ldr	r0, [pc, #120]	; (80078ec <__pow5mult+0xb0>)
 8007874:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007878:	f001 fd46 	bl	8009308 <__assert_func>
 800787c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007880:	6004      	str	r4, [r0, #0]
 8007882:	60c4      	str	r4, [r0, #12]
 8007884:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800788c:	b94c      	cbnz	r4, 80078a2 <__pow5mult+0x66>
 800788e:	f240 2171 	movw	r1, #625	; 0x271
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff ff12 	bl	80076bc <__i2b>
 8007898:	2300      	movs	r3, #0
 800789a:	f8c8 0008 	str.w	r0, [r8, #8]
 800789e:	4604      	mov	r4, r0
 80078a0:	6003      	str	r3, [r0, #0]
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	07eb      	lsls	r3, r5, #31
 80078a8:	d50a      	bpl.n	80078c0 <__pow5mult+0x84>
 80078aa:	4639      	mov	r1, r7
 80078ac:	4622      	mov	r2, r4
 80078ae:	4630      	mov	r0, r6
 80078b0:	f7ff ff1a 	bl	80076e8 <__multiply>
 80078b4:	4639      	mov	r1, r7
 80078b6:	4680      	mov	r8, r0
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff fdff 	bl	80074bc <_Bfree>
 80078be:	4647      	mov	r7, r8
 80078c0:	106d      	asrs	r5, r5, #1
 80078c2:	d00b      	beq.n	80078dc <__pow5mult+0xa0>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	b938      	cbnz	r0, 80078d8 <__pow5mult+0x9c>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4621      	mov	r1, r4
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff ff0b 	bl	80076e8 <__multiply>
 80078d2:	6020      	str	r0, [r4, #0]
 80078d4:	f8c0 9000 	str.w	r9, [r0]
 80078d8:	4604      	mov	r4, r0
 80078da:	e7e4      	b.n	80078a6 <__pow5mult+0x6a>
 80078dc:	4638      	mov	r0, r7
 80078de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e2:	bf00      	nop
 80078e4:	0800a138 	.word	0x0800a138
 80078e8:	08009f6e 	.word	0x08009f6e
 80078ec:	08009fee 	.word	0x08009fee

080078f0 <__lshift>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	6849      	ldr	r1, [r1, #4]
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078fe:	68a3      	ldr	r3, [r4, #8]
 8007900:	4607      	mov	r7, r0
 8007902:	4691      	mov	r9, r2
 8007904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007908:	f108 0601 	add.w	r6, r8, #1
 800790c:	42b3      	cmp	r3, r6
 800790e:	db0b      	blt.n	8007928 <__lshift+0x38>
 8007910:	4638      	mov	r0, r7
 8007912:	f7ff fd93 	bl	800743c <_Balloc>
 8007916:	4605      	mov	r5, r0
 8007918:	b948      	cbnz	r0, 800792e <__lshift+0x3e>
 800791a:	4602      	mov	r2, r0
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <__lshift+0xd0>)
 800791e:	4829      	ldr	r0, [pc, #164]	; (80079c4 <__lshift+0xd4>)
 8007920:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007924:	f001 fcf0 	bl	8009308 <__assert_func>
 8007928:	3101      	adds	r1, #1
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	e7ee      	b.n	800790c <__lshift+0x1c>
 800792e:	2300      	movs	r3, #0
 8007930:	f100 0114 	add.w	r1, r0, #20
 8007934:	f100 0210 	add.w	r2, r0, #16
 8007938:	4618      	mov	r0, r3
 800793a:	4553      	cmp	r3, sl
 800793c:	db33      	blt.n	80079a6 <__lshift+0xb6>
 800793e:	6920      	ldr	r0, [r4, #16]
 8007940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007944:	f104 0314 	add.w	r3, r4, #20
 8007948:	f019 091f 	ands.w	r9, r9, #31
 800794c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007954:	d02b      	beq.n	80079ae <__lshift+0xbe>
 8007956:	f1c9 0e20 	rsb	lr, r9, #32
 800795a:	468a      	mov	sl, r1
 800795c:	2200      	movs	r2, #0
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	fa00 f009 	lsl.w	r0, r0, r9
 8007964:	4310      	orrs	r0, r2
 8007966:	f84a 0b04 	str.w	r0, [sl], #4
 800796a:	f853 2b04 	ldr.w	r2, [r3], #4
 800796e:	459c      	cmp	ip, r3
 8007970:	fa22 f20e 	lsr.w	r2, r2, lr
 8007974:	d8f3      	bhi.n	800795e <__lshift+0x6e>
 8007976:	ebac 0304 	sub.w	r3, ip, r4
 800797a:	3b15      	subs	r3, #21
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	3304      	adds	r3, #4
 8007982:	f104 0015 	add.w	r0, r4, #21
 8007986:	4584      	cmp	ip, r0
 8007988:	bf38      	it	cc
 800798a:	2304      	movcc	r3, #4
 800798c:	50ca      	str	r2, [r1, r3]
 800798e:	b10a      	cbz	r2, 8007994 <__lshift+0xa4>
 8007990:	f108 0602 	add.w	r6, r8, #2
 8007994:	3e01      	subs	r6, #1
 8007996:	4638      	mov	r0, r7
 8007998:	612e      	str	r6, [r5, #16]
 800799a:	4621      	mov	r1, r4
 800799c:	f7ff fd8e 	bl	80074bc <_Bfree>
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079aa:	3301      	adds	r3, #1
 80079ac:	e7c5      	b.n	800793a <__lshift+0x4a>
 80079ae:	3904      	subs	r1, #4
 80079b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80079b8:	459c      	cmp	ip, r3
 80079ba:	d8f9      	bhi.n	80079b0 <__lshift+0xc0>
 80079bc:	e7ea      	b.n	8007994 <__lshift+0xa4>
 80079be:	bf00      	nop
 80079c0:	08009fdd 	.word	0x08009fdd
 80079c4:	08009fee 	.word	0x08009fee

080079c8 <__mcmp>:
 80079c8:	b530      	push	{r4, r5, lr}
 80079ca:	6902      	ldr	r2, [r0, #16]
 80079cc:	690c      	ldr	r4, [r1, #16]
 80079ce:	1b12      	subs	r2, r2, r4
 80079d0:	d10e      	bne.n	80079f0 <__mcmp+0x28>
 80079d2:	f100 0314 	add.w	r3, r0, #20
 80079d6:	3114      	adds	r1, #20
 80079d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079e8:	42a5      	cmp	r5, r4
 80079ea:	d003      	beq.n	80079f4 <__mcmp+0x2c>
 80079ec:	d305      	bcc.n	80079fa <__mcmp+0x32>
 80079ee:	2201      	movs	r2, #1
 80079f0:	4610      	mov	r0, r2
 80079f2:	bd30      	pop	{r4, r5, pc}
 80079f4:	4283      	cmp	r3, r0
 80079f6:	d3f3      	bcc.n	80079e0 <__mcmp+0x18>
 80079f8:	e7fa      	b.n	80079f0 <__mcmp+0x28>
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fe:	e7f7      	b.n	80079f0 <__mcmp+0x28>

08007a00 <__mdiff>:
 8007a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	460c      	mov	r4, r1
 8007a06:	4606      	mov	r6, r0
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	f7ff ffdb 	bl	80079c8 <__mcmp>
 8007a12:	1e05      	subs	r5, r0, #0
 8007a14:	d110      	bne.n	8007a38 <__mdiff+0x38>
 8007a16:	4629      	mov	r1, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff fd0f 	bl	800743c <_Balloc>
 8007a1e:	b930      	cbnz	r0, 8007a2e <__mdiff+0x2e>
 8007a20:	4b3a      	ldr	r3, [pc, #232]	; (8007b0c <__mdiff+0x10c>)
 8007a22:	4602      	mov	r2, r0
 8007a24:	f240 2137 	movw	r1, #567	; 0x237
 8007a28:	4839      	ldr	r0, [pc, #228]	; (8007b10 <__mdiff+0x110>)
 8007a2a:	f001 fc6d 	bl	8009308 <__assert_func>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	bfa4      	itt	ge
 8007a3a:	4643      	movge	r3, r8
 8007a3c:	46a0      	movge	r8, r4
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a44:	bfa6      	itte	ge
 8007a46:	461c      	movge	r4, r3
 8007a48:	2500      	movge	r5, #0
 8007a4a:	2501      	movlt	r5, #1
 8007a4c:	f7ff fcf6 	bl	800743c <_Balloc>
 8007a50:	b920      	cbnz	r0, 8007a5c <__mdiff+0x5c>
 8007a52:	4b2e      	ldr	r3, [pc, #184]	; (8007b0c <__mdiff+0x10c>)
 8007a54:	4602      	mov	r2, r0
 8007a56:	f240 2145 	movw	r1, #581	; 0x245
 8007a5a:	e7e5      	b.n	8007a28 <__mdiff+0x28>
 8007a5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a60:	6926      	ldr	r6, [r4, #16]
 8007a62:	60c5      	str	r5, [r0, #12]
 8007a64:	f104 0914 	add.w	r9, r4, #20
 8007a68:	f108 0514 	add.w	r5, r8, #20
 8007a6c:	f100 0e14 	add.w	lr, r0, #20
 8007a70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a78:	f108 0210 	add.w	r2, r8, #16
 8007a7c:	46f2      	mov	sl, lr
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a88:	fa11 f88b 	uxtah	r8, r1, fp
 8007a8c:	b299      	uxth	r1, r3
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	eba8 0801 	sub.w	r8, r8, r1
 8007a94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a9c:	fa1f f888 	uxth.w	r8, r8
 8007aa0:	1419      	asrs	r1, r3, #16
 8007aa2:	454e      	cmp	r6, r9
 8007aa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007aa8:	f84a 3b04 	str.w	r3, [sl], #4
 8007aac:	d8e8      	bhi.n	8007a80 <__mdiff+0x80>
 8007aae:	1b33      	subs	r3, r6, r4
 8007ab0:	3b15      	subs	r3, #21
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	3415      	adds	r4, #21
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	bf38      	it	cc
 8007abe:	2304      	movcc	r3, #4
 8007ac0:	441d      	add	r5, r3
 8007ac2:	4473      	add	r3, lr
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	462e      	mov	r6, r5
 8007ac8:	4566      	cmp	r6, ip
 8007aca:	d30e      	bcc.n	8007aea <__mdiff+0xea>
 8007acc:	f10c 0203 	add.w	r2, ip, #3
 8007ad0:	1b52      	subs	r2, r2, r5
 8007ad2:	f022 0203 	bic.w	r2, r2, #3
 8007ad6:	3d03      	subs	r5, #3
 8007ad8:	45ac      	cmp	ip, r5
 8007ada:	bf38      	it	cc
 8007adc:	2200      	movcc	r2, #0
 8007ade:	4413      	add	r3, r2
 8007ae0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ae4:	b17a      	cbz	r2, 8007b06 <__mdiff+0x106>
 8007ae6:	6107      	str	r7, [r0, #16]
 8007ae8:	e7a4      	b.n	8007a34 <__mdiff+0x34>
 8007aea:	f856 8b04 	ldr.w	r8, [r6], #4
 8007aee:	fa11 f288 	uxtah	r2, r1, r8
 8007af2:	1414      	asrs	r4, r2, #16
 8007af4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007af8:	b292      	uxth	r2, r2
 8007afa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007afe:	f84e 2b04 	str.w	r2, [lr], #4
 8007b02:	1421      	asrs	r1, r4, #16
 8007b04:	e7e0      	b.n	8007ac8 <__mdiff+0xc8>
 8007b06:	3f01      	subs	r7, #1
 8007b08:	e7ea      	b.n	8007ae0 <__mdiff+0xe0>
 8007b0a:	bf00      	nop
 8007b0c:	08009fdd 	.word	0x08009fdd
 8007b10:	08009fee 	.word	0x08009fee

08007b14 <__ulp>:
 8007b14:	b082      	sub	sp, #8
 8007b16:	ed8d 0b00 	vstr	d0, [sp]
 8007b1a:	9a01      	ldr	r2, [sp, #4]
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <__ulp+0x48>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dc08      	bgt.n	8007b3a <__ulp+0x26>
 8007b28:	425b      	negs	r3, r3
 8007b2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007b2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b32:	da04      	bge.n	8007b3e <__ulp+0x2a>
 8007b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b38:	4113      	asrs	r3, r2
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	e008      	b.n	8007b50 <__ulp+0x3c>
 8007b3e:	f1a2 0314 	sub.w	r3, r2, #20
 8007b42:	2b1e      	cmp	r3, #30
 8007b44:	bfda      	itte	le
 8007b46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007b4a:	40da      	lsrle	r2, r3
 8007b4c:	2201      	movgt	r2, #1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	ec41 0b10 	vmov	d0, r0, r1
 8007b58:	b002      	add	sp, #8
 8007b5a:	4770      	bx	lr
 8007b5c:	7ff00000 	.word	0x7ff00000

08007b60 <__b2d>:
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	6906      	ldr	r6, [r0, #16]
 8007b66:	f100 0814 	add.w	r8, r0, #20
 8007b6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007b6e:	1f37      	subs	r7, r6, #4
 8007b70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7ff fd53 	bl	8007620 <__hi0bits>
 8007b7a:	f1c0 0320 	rsb	r3, r0, #32
 8007b7e:	280a      	cmp	r0, #10
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	491b      	ldr	r1, [pc, #108]	; (8007bf0 <__b2d+0x90>)
 8007b84:	dc15      	bgt.n	8007bb2 <__b2d+0x52>
 8007b86:	f1c0 0c0b 	rsb	ip, r0, #11
 8007b8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007b8e:	45b8      	cmp	r8, r7
 8007b90:	ea43 0501 	orr.w	r5, r3, r1
 8007b94:	bf34      	ite	cc
 8007b96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007b9a:	2300      	movcs	r3, #0
 8007b9c:	3015      	adds	r0, #21
 8007b9e:	fa02 f000 	lsl.w	r0, r2, r0
 8007ba2:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ba6:	4303      	orrs	r3, r0
 8007ba8:	461c      	mov	r4, r3
 8007baa:	ec45 4b10 	vmov	d0, r4, r5
 8007bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb2:	45b8      	cmp	r8, r7
 8007bb4:	bf3a      	itte	cc
 8007bb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007bba:	f1a6 0708 	subcc.w	r7, r6, #8
 8007bbe:	2300      	movcs	r3, #0
 8007bc0:	380b      	subs	r0, #11
 8007bc2:	d012      	beq.n	8007bea <__b2d+0x8a>
 8007bc4:	f1c0 0120 	rsb	r1, r0, #32
 8007bc8:	fa23 f401 	lsr.w	r4, r3, r1
 8007bcc:	4082      	lsls	r2, r0
 8007bce:	4322      	orrs	r2, r4
 8007bd0:	4547      	cmp	r7, r8
 8007bd2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007bd6:	bf8c      	ite	hi
 8007bd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007bdc:	2200      	movls	r2, #0
 8007bde:	4083      	lsls	r3, r0
 8007be0:	40ca      	lsrs	r2, r1
 8007be2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007be6:	4313      	orrs	r3, r2
 8007be8:	e7de      	b.n	8007ba8 <__b2d+0x48>
 8007bea:	ea42 0501 	orr.w	r5, r2, r1
 8007bee:	e7db      	b.n	8007ba8 <__b2d+0x48>
 8007bf0:	3ff00000 	.word	0x3ff00000

08007bf4 <__d2b>:
 8007bf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	ec59 8b10 	vmov	r8, r9, d0
 8007c00:	4616      	mov	r6, r2
 8007c02:	f7ff fc1b 	bl	800743c <_Balloc>
 8007c06:	4604      	mov	r4, r0
 8007c08:	b930      	cbnz	r0, 8007c18 <__d2b+0x24>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <__d2b+0xac>)
 8007c0e:	4825      	ldr	r0, [pc, #148]	; (8007ca4 <__d2b+0xb0>)
 8007c10:	f240 310f 	movw	r1, #783	; 0x30f
 8007c14:	f001 fb78 	bl	8009308 <__assert_func>
 8007c18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c20:	bb2d      	cbnz	r5, 8007c6e <__d2b+0x7a>
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	f1b8 0300 	subs.w	r3, r8, #0
 8007c28:	d026      	beq.n	8007c78 <__d2b+0x84>
 8007c2a:	4668      	mov	r0, sp
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	f7ff fd17 	bl	8007660 <__lo0bits>
 8007c32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c36:	b1e8      	cbz	r0, 8007c74 <__d2b+0x80>
 8007c38:	f1c0 0320 	rsb	r3, r0, #32
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	430b      	orrs	r3, r1
 8007c42:	40c2      	lsrs	r2, r0
 8007c44:	6163      	str	r3, [r4, #20]
 8007c46:	9201      	str	r2, [sp, #4]
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	61a3      	str	r3, [r4, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2202      	movne	r2, #2
 8007c52:	2201      	moveq	r2, #1
 8007c54:	6122      	str	r2, [r4, #16]
 8007c56:	b1bd      	cbz	r5, 8007c88 <__d2b+0x94>
 8007c58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c5c:	4405      	add	r5, r0
 8007c5e:	603d      	str	r5, [r7, #0]
 8007c60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4620      	mov	r0, r4
 8007c68:	b003      	add	sp, #12
 8007c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c72:	e7d6      	b.n	8007c22 <__d2b+0x2e>
 8007c74:	6161      	str	r1, [r4, #20]
 8007c76:	e7e7      	b.n	8007c48 <__d2b+0x54>
 8007c78:	a801      	add	r0, sp, #4
 8007c7a:	f7ff fcf1 	bl	8007660 <__lo0bits>
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	6163      	str	r3, [r4, #20]
 8007c82:	3020      	adds	r0, #32
 8007c84:	2201      	movs	r2, #1
 8007c86:	e7e5      	b.n	8007c54 <__d2b+0x60>
 8007c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c90:	6038      	str	r0, [r7, #0]
 8007c92:	6918      	ldr	r0, [r3, #16]
 8007c94:	f7ff fcc4 	bl	8007620 <__hi0bits>
 8007c98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c9c:	e7e2      	b.n	8007c64 <__d2b+0x70>
 8007c9e:	bf00      	nop
 8007ca0:	08009fdd 	.word	0x08009fdd
 8007ca4:	08009fee 	.word	0x08009fee

08007ca8 <__ratio>:
 8007ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	4688      	mov	r8, r1
 8007cae:	4669      	mov	r1, sp
 8007cb0:	4681      	mov	r9, r0
 8007cb2:	f7ff ff55 	bl	8007b60 <__b2d>
 8007cb6:	a901      	add	r1, sp, #4
 8007cb8:	4640      	mov	r0, r8
 8007cba:	ec55 4b10 	vmov	r4, r5, d0
 8007cbe:	f7ff ff4f 	bl	8007b60 <__b2d>
 8007cc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cca:	eba3 0c02 	sub.w	ip, r3, r2
 8007cce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007cd8:	ec51 0b10 	vmov	r0, r1, d0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfd6      	itet	le
 8007ce0:	460a      	movle	r2, r1
 8007ce2:	462a      	movgt	r2, r5
 8007ce4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ce8:	468b      	mov	fp, r1
 8007cea:	462f      	mov	r7, r5
 8007cec:	bfd4      	ite	le
 8007cee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	ee10 2a10 	vmov	r2, s0
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fdb4 	bl	800086c <__aeabi_ddiv>
 8007d04:	ec41 0b10 	vmov	d0, r0, r1
 8007d08:	b003      	add	sp, #12
 8007d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d0e <__copybits>:
 8007d0e:	3901      	subs	r1, #1
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	1149      	asrs	r1, r1, #5
 8007d14:	6914      	ldr	r4, [r2, #16]
 8007d16:	3101      	adds	r1, #1
 8007d18:	f102 0314 	add.w	r3, r2, #20
 8007d1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d24:	1f05      	subs	r5, r0, #4
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	d30c      	bcc.n	8007d44 <__copybits+0x36>
 8007d2a:	1aa3      	subs	r3, r4, r2
 8007d2c:	3b11      	subs	r3, #17
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	3211      	adds	r2, #17
 8007d34:	42a2      	cmp	r2, r4
 8007d36:	bf88      	it	hi
 8007d38:	2300      	movhi	r3, #0
 8007d3a:	4418      	add	r0, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4288      	cmp	r0, r1
 8007d40:	d305      	bcc.n	8007d4e <__copybits+0x40>
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d48:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d4c:	e7eb      	b.n	8007d26 <__copybits+0x18>
 8007d4e:	f840 3b04 	str.w	r3, [r0], #4
 8007d52:	e7f4      	b.n	8007d3e <__copybits+0x30>

08007d54 <__any_on>:
 8007d54:	f100 0214 	add.w	r2, r0, #20
 8007d58:	6900      	ldr	r0, [r0, #16]
 8007d5a:	114b      	asrs	r3, r1, #5
 8007d5c:	4298      	cmp	r0, r3
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	db11      	blt.n	8007d86 <__any_on+0x32>
 8007d62:	dd0a      	ble.n	8007d7a <__any_on+0x26>
 8007d64:	f011 011f 	ands.w	r1, r1, #31
 8007d68:	d007      	beq.n	8007d7a <__any_on+0x26>
 8007d6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d6e:	fa24 f001 	lsr.w	r0, r4, r1
 8007d72:	fa00 f101 	lsl.w	r1, r0, r1
 8007d76:	428c      	cmp	r4, r1
 8007d78:	d10b      	bne.n	8007d92 <__any_on+0x3e>
 8007d7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d803      	bhi.n	8007d8a <__any_on+0x36>
 8007d82:	2000      	movs	r0, #0
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	4603      	mov	r3, r0
 8007d88:	e7f7      	b.n	8007d7a <__any_on+0x26>
 8007d8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d0f5      	beq.n	8007d7e <__any_on+0x2a>
 8007d92:	2001      	movs	r0, #1
 8007d94:	e7f6      	b.n	8007d84 <__any_on+0x30>

08007d96 <sulp>:
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	4604      	mov	r4, r0
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	ec45 4b10 	vmov	d0, r4, r5
 8007da0:	4616      	mov	r6, r2
 8007da2:	f7ff feb7 	bl	8007b14 <__ulp>
 8007da6:	ec51 0b10 	vmov	r0, r1, d0
 8007daa:	b17e      	cbz	r6, 8007dcc <sulp+0x36>
 8007dac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007db0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dd09      	ble.n	8007dcc <sulp+0x36>
 8007db8:	051b      	lsls	r3, r3, #20
 8007dba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007dbe:	2400      	movs	r4, #0
 8007dc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	f7f8 fc26 	bl	8000618 <__aeabi_dmul>
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dd0 <_strtod_l>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	ed2d 8b02 	vpush	{d8}
 8007dd8:	b09b      	sub	sp, #108	; 0x6c
 8007dda:	4604      	mov	r4, r0
 8007ddc:	9213      	str	r2, [sp, #76]	; 0x4c
 8007dde:	2200      	movs	r2, #0
 8007de0:	9216      	str	r2, [sp, #88]	; 0x58
 8007de2:	460d      	mov	r5, r1
 8007de4:	f04f 0800 	mov.w	r8, #0
 8007de8:	f04f 0900 	mov.w	r9, #0
 8007dec:	460a      	mov	r2, r1
 8007dee:	9215      	str	r2, [sp, #84]	; 0x54
 8007df0:	7811      	ldrb	r1, [r2, #0]
 8007df2:	292b      	cmp	r1, #43	; 0x2b
 8007df4:	d04c      	beq.n	8007e90 <_strtod_l+0xc0>
 8007df6:	d83a      	bhi.n	8007e6e <_strtod_l+0x9e>
 8007df8:	290d      	cmp	r1, #13
 8007dfa:	d834      	bhi.n	8007e66 <_strtod_l+0x96>
 8007dfc:	2908      	cmp	r1, #8
 8007dfe:	d834      	bhi.n	8007e6a <_strtod_l+0x9a>
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d03d      	beq.n	8007e80 <_strtod_l+0xb0>
 8007e04:	2200      	movs	r2, #0
 8007e06:	920a      	str	r2, [sp, #40]	; 0x28
 8007e08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007e0a:	7832      	ldrb	r2, [r6, #0]
 8007e0c:	2a30      	cmp	r2, #48	; 0x30
 8007e0e:	f040 80b4 	bne.w	8007f7a <_strtod_l+0x1aa>
 8007e12:	7872      	ldrb	r2, [r6, #1]
 8007e14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e18:	2a58      	cmp	r2, #88	; 0x58
 8007e1a:	d170      	bne.n	8007efe <_strtod_l+0x12e>
 8007e1c:	9302      	str	r3, [sp, #8]
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	ab16      	add	r3, sp, #88	; 0x58
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4a8e      	ldr	r2, [pc, #568]	; (8008060 <_strtod_l+0x290>)
 8007e28:	ab17      	add	r3, sp, #92	; 0x5c
 8007e2a:	a915      	add	r1, sp, #84	; 0x54
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f001 fb07 	bl	8009440 <__gethex>
 8007e32:	f010 070f 	ands.w	r7, r0, #15
 8007e36:	4605      	mov	r5, r0
 8007e38:	d005      	beq.n	8007e46 <_strtod_l+0x76>
 8007e3a:	2f06      	cmp	r7, #6
 8007e3c:	d12a      	bne.n	8007e94 <_strtod_l+0xc4>
 8007e3e:	3601      	adds	r6, #1
 8007e40:	2300      	movs	r3, #0
 8007e42:	9615      	str	r6, [sp, #84]	; 0x54
 8007e44:	930a      	str	r3, [sp, #40]	; 0x28
 8007e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 857f 	bne.w	800894c <_strtod_l+0xb7c>
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	b1db      	cbz	r3, 8007e8a <_strtod_l+0xba>
 8007e52:	4642      	mov	r2, r8
 8007e54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e58:	ec43 2b10 	vmov	d0, r2, r3
 8007e5c:	b01b      	add	sp, #108	; 0x6c
 8007e5e:	ecbd 8b02 	vpop	{d8}
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	2920      	cmp	r1, #32
 8007e68:	d1cc      	bne.n	8007e04 <_strtod_l+0x34>
 8007e6a:	3201      	adds	r2, #1
 8007e6c:	e7bf      	b.n	8007dee <_strtod_l+0x1e>
 8007e6e:	292d      	cmp	r1, #45	; 0x2d
 8007e70:	d1c8      	bne.n	8007e04 <_strtod_l+0x34>
 8007e72:	2101      	movs	r1, #1
 8007e74:	910a      	str	r1, [sp, #40]	; 0x28
 8007e76:	1c51      	adds	r1, r2, #1
 8007e78:	9115      	str	r1, [sp, #84]	; 0x54
 8007e7a:	7852      	ldrb	r2, [r2, #1]
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	d1c3      	bne.n	8007e08 <_strtod_l+0x38>
 8007e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e82:	9515      	str	r5, [sp, #84]	; 0x54
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 855f 	bne.w	8008948 <_strtod_l+0xb78>
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	e7e3      	b.n	8007e58 <_strtod_l+0x88>
 8007e90:	2100      	movs	r1, #0
 8007e92:	e7ef      	b.n	8007e74 <_strtod_l+0xa4>
 8007e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e96:	b13a      	cbz	r2, 8007ea8 <_strtod_l+0xd8>
 8007e98:	2135      	movs	r1, #53	; 0x35
 8007e9a:	a818      	add	r0, sp, #96	; 0x60
 8007e9c:	f7ff ff37 	bl	8007d0e <__copybits>
 8007ea0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff fb0a 	bl	80074bc <_Bfree>
 8007ea8:	3f01      	subs	r7, #1
 8007eaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007eac:	2f04      	cmp	r7, #4
 8007eae:	d806      	bhi.n	8007ebe <_strtod_l+0xee>
 8007eb0:	e8df f007 	tbb	[pc, r7]
 8007eb4:	201d0314 	.word	0x201d0314
 8007eb8:	14          	.byte	0x14
 8007eb9:	00          	.byte	0x00
 8007eba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007ebe:	05e9      	lsls	r1, r5, #23
 8007ec0:	bf48      	it	mi
 8007ec2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eca:	0d1b      	lsrs	r3, r3, #20
 8007ecc:	051b      	lsls	r3, r3, #20
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1b9      	bne.n	8007e46 <_strtod_l+0x76>
 8007ed2:	f7fe fb05 	bl	80064e0 <__errno>
 8007ed6:	2322      	movs	r3, #34	; 0x22
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	e7b4      	b.n	8007e46 <_strtod_l+0x76>
 8007edc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ee0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ee8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007eec:	e7e7      	b.n	8007ebe <_strtod_l+0xee>
 8007eee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008068 <_strtod_l+0x298>
 8007ef2:	e7e4      	b.n	8007ebe <_strtod_l+0xee>
 8007ef4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007ef8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007efc:	e7df      	b.n	8007ebe <_strtod_l+0xee>
 8007efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	9215      	str	r2, [sp, #84]	; 0x54
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b30      	cmp	r3, #48	; 0x30
 8007f08:	d0f9      	beq.n	8007efe <_strtod_l+0x12e>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d09b      	beq.n	8007e46 <_strtod_l+0x76>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f1e:	46d3      	mov	fp, sl
 8007f20:	220a      	movs	r2, #10
 8007f22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f24:	7806      	ldrb	r6, [r0, #0]
 8007f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f2a:	b2d9      	uxtb	r1, r3
 8007f2c:	2909      	cmp	r1, #9
 8007f2e:	d926      	bls.n	8007f7e <_strtod_l+0x1ae>
 8007f30:	494c      	ldr	r1, [pc, #304]	; (8008064 <_strtod_l+0x294>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	f001 f98c 	bl	8009250 <strncmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d030      	beq.n	8007f9e <_strtod_l+0x1ce>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4632      	mov	r2, r6
 8007f40:	9005      	str	r0, [sp, #20]
 8007f42:	465e      	mov	r6, fp
 8007f44:	4603      	mov	r3, r0
 8007f46:	2a65      	cmp	r2, #101	; 0x65
 8007f48:	d001      	beq.n	8007f4e <_strtod_l+0x17e>
 8007f4a:	2a45      	cmp	r2, #69	; 0x45
 8007f4c:	d113      	bne.n	8007f76 <_strtod_l+0x1a6>
 8007f4e:	b91e      	cbnz	r6, 8007f58 <_strtod_l+0x188>
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	4302      	orrs	r2, r0
 8007f54:	d094      	beq.n	8007e80 <_strtod_l+0xb0>
 8007f56:	2600      	movs	r6, #0
 8007f58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007f5a:	1c6a      	adds	r2, r5, #1
 8007f5c:	9215      	str	r2, [sp, #84]	; 0x54
 8007f5e:	786a      	ldrb	r2, [r5, #1]
 8007f60:	2a2b      	cmp	r2, #43	; 0x2b
 8007f62:	d074      	beq.n	800804e <_strtod_l+0x27e>
 8007f64:	2a2d      	cmp	r2, #45	; 0x2d
 8007f66:	d078      	beq.n	800805a <_strtod_l+0x28a>
 8007f68:	f04f 0c00 	mov.w	ip, #0
 8007f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f70:	2909      	cmp	r1, #9
 8007f72:	d97f      	bls.n	8008074 <_strtod_l+0x2a4>
 8007f74:	9515      	str	r5, [sp, #84]	; 0x54
 8007f76:	2700      	movs	r7, #0
 8007f78:	e09e      	b.n	80080b8 <_strtod_l+0x2e8>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e7c8      	b.n	8007f10 <_strtod_l+0x140>
 8007f7e:	f1bb 0f08 	cmp.w	fp, #8
 8007f82:	bfd8      	it	le
 8007f84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007f86:	f100 0001 	add.w	r0, r0, #1
 8007f8a:	bfda      	itte	le
 8007f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f90:	9309      	strle	r3, [sp, #36]	; 0x24
 8007f92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007f96:	f10b 0b01 	add.w	fp, fp, #1
 8007f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8007f9c:	e7c1      	b.n	8007f22 <_strtod_l+0x152>
 8007f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	9215      	str	r2, [sp, #84]	; 0x54
 8007fa4:	785a      	ldrb	r2, [r3, #1]
 8007fa6:	f1bb 0f00 	cmp.w	fp, #0
 8007faa:	d037      	beq.n	800801c <_strtod_l+0x24c>
 8007fac:	9005      	str	r0, [sp, #20]
 8007fae:	465e      	mov	r6, fp
 8007fb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007fb4:	2b09      	cmp	r3, #9
 8007fb6:	d912      	bls.n	8007fde <_strtod_l+0x20e>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e7c4      	b.n	8007f46 <_strtod_l+0x176>
 8007fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	9215      	str	r2, [sp, #84]	; 0x54
 8007fc2:	785a      	ldrb	r2, [r3, #1]
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	2a30      	cmp	r2, #48	; 0x30
 8007fc8:	d0f8      	beq.n	8007fbc <_strtod_l+0x1ec>
 8007fca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	f200 84c1 	bhi.w	8008956 <_strtod_l+0xb86>
 8007fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fd6:	9005      	str	r0, [sp, #20]
 8007fd8:	2000      	movs	r0, #0
 8007fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fdc:	4606      	mov	r6, r0
 8007fde:	3a30      	subs	r2, #48	; 0x30
 8007fe0:	f100 0301 	add.w	r3, r0, #1
 8007fe4:	d014      	beq.n	8008010 <_strtod_l+0x240>
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	4419      	add	r1, r3
 8007fea:	9105      	str	r1, [sp, #20]
 8007fec:	4633      	mov	r3, r6
 8007fee:	eb00 0c06 	add.w	ip, r0, r6
 8007ff2:	210a      	movs	r1, #10
 8007ff4:	4563      	cmp	r3, ip
 8007ff6:	d113      	bne.n	8008020 <_strtod_l+0x250>
 8007ff8:	1833      	adds	r3, r6, r0
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	f106 0601 	add.w	r6, r6, #1
 8008000:	4406      	add	r6, r0
 8008002:	dc1a      	bgt.n	800803a <_strtod_l+0x26a>
 8008004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008006:	230a      	movs	r3, #10
 8008008:	fb03 2301 	mla	r3, r3, r1, r2
 800800c:	9309      	str	r3, [sp, #36]	; 0x24
 800800e:	2300      	movs	r3, #0
 8008010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008012:	1c51      	adds	r1, r2, #1
 8008014:	9115      	str	r1, [sp, #84]	; 0x54
 8008016:	7852      	ldrb	r2, [r2, #1]
 8008018:	4618      	mov	r0, r3
 800801a:	e7c9      	b.n	8007fb0 <_strtod_l+0x1e0>
 800801c:	4658      	mov	r0, fp
 800801e:	e7d2      	b.n	8007fc6 <_strtod_l+0x1f6>
 8008020:	2b08      	cmp	r3, #8
 8008022:	f103 0301 	add.w	r3, r3, #1
 8008026:	dc03      	bgt.n	8008030 <_strtod_l+0x260>
 8008028:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800802a:	434f      	muls	r7, r1
 800802c:	9709      	str	r7, [sp, #36]	; 0x24
 800802e:	e7e1      	b.n	8007ff4 <_strtod_l+0x224>
 8008030:	2b10      	cmp	r3, #16
 8008032:	bfd8      	it	le
 8008034:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008038:	e7dc      	b.n	8007ff4 <_strtod_l+0x224>
 800803a:	2e10      	cmp	r6, #16
 800803c:	bfdc      	itt	le
 800803e:	230a      	movle	r3, #10
 8008040:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008044:	e7e3      	b.n	800800e <_strtod_l+0x23e>
 8008046:	2300      	movs	r3, #0
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	2301      	movs	r3, #1
 800804c:	e780      	b.n	8007f50 <_strtod_l+0x180>
 800804e:	f04f 0c00 	mov.w	ip, #0
 8008052:	1caa      	adds	r2, r5, #2
 8008054:	9215      	str	r2, [sp, #84]	; 0x54
 8008056:	78aa      	ldrb	r2, [r5, #2]
 8008058:	e788      	b.n	8007f6c <_strtod_l+0x19c>
 800805a:	f04f 0c01 	mov.w	ip, #1
 800805e:	e7f8      	b.n	8008052 <_strtod_l+0x282>
 8008060:	0800a148 	.word	0x0800a148
 8008064:	0800a144 	.word	0x0800a144
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800806e:	1c51      	adds	r1, r2, #1
 8008070:	9115      	str	r1, [sp, #84]	; 0x54
 8008072:	7852      	ldrb	r2, [r2, #1]
 8008074:	2a30      	cmp	r2, #48	; 0x30
 8008076:	d0f9      	beq.n	800806c <_strtod_l+0x29c>
 8008078:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800807c:	2908      	cmp	r1, #8
 800807e:	f63f af7a 	bhi.w	8007f76 <_strtod_l+0x1a6>
 8008082:	3a30      	subs	r2, #48	; 0x30
 8008084:	9208      	str	r2, [sp, #32]
 8008086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008088:	920c      	str	r2, [sp, #48]	; 0x30
 800808a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800808c:	1c57      	adds	r7, r2, #1
 800808e:	9715      	str	r7, [sp, #84]	; 0x54
 8008090:	7852      	ldrb	r2, [r2, #1]
 8008092:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008096:	f1be 0f09 	cmp.w	lr, #9
 800809a:	d938      	bls.n	800810e <_strtod_l+0x33e>
 800809c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800809e:	1a7f      	subs	r7, r7, r1
 80080a0:	2f08      	cmp	r7, #8
 80080a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80080a6:	dc03      	bgt.n	80080b0 <_strtod_l+0x2e0>
 80080a8:	9908      	ldr	r1, [sp, #32]
 80080aa:	428f      	cmp	r7, r1
 80080ac:	bfa8      	it	ge
 80080ae:	460f      	movge	r7, r1
 80080b0:	f1bc 0f00 	cmp.w	ip, #0
 80080b4:	d000      	beq.n	80080b8 <_strtod_l+0x2e8>
 80080b6:	427f      	negs	r7, r7
 80080b8:	2e00      	cmp	r6, #0
 80080ba:	d14f      	bne.n	800815c <_strtod_l+0x38c>
 80080bc:	9904      	ldr	r1, [sp, #16]
 80080be:	4301      	orrs	r1, r0
 80080c0:	f47f aec1 	bne.w	8007e46 <_strtod_l+0x76>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f47f aedb 	bne.w	8007e80 <_strtod_l+0xb0>
 80080ca:	2a69      	cmp	r2, #105	; 0x69
 80080cc:	d029      	beq.n	8008122 <_strtod_l+0x352>
 80080ce:	dc26      	bgt.n	800811e <_strtod_l+0x34e>
 80080d0:	2a49      	cmp	r2, #73	; 0x49
 80080d2:	d026      	beq.n	8008122 <_strtod_l+0x352>
 80080d4:	2a4e      	cmp	r2, #78	; 0x4e
 80080d6:	f47f aed3 	bne.w	8007e80 <_strtod_l+0xb0>
 80080da:	499b      	ldr	r1, [pc, #620]	; (8008348 <_strtod_l+0x578>)
 80080dc:	a815      	add	r0, sp, #84	; 0x54
 80080de:	f001 fbef 	bl	80098c0 <__match>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f43f aecc 	beq.w	8007e80 <_strtod_l+0xb0>
 80080e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b28      	cmp	r3, #40	; 0x28
 80080ee:	d12f      	bne.n	8008150 <_strtod_l+0x380>
 80080f0:	4996      	ldr	r1, [pc, #600]	; (800834c <_strtod_l+0x57c>)
 80080f2:	aa18      	add	r2, sp, #96	; 0x60
 80080f4:	a815      	add	r0, sp, #84	; 0x54
 80080f6:	f001 fbf7 	bl	80098e8 <__hexnan>
 80080fa:	2805      	cmp	r0, #5
 80080fc:	d128      	bne.n	8008150 <_strtod_l+0x380>
 80080fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008104:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008108:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800810c:	e69b      	b.n	8007e46 <_strtod_l+0x76>
 800810e:	9f08      	ldr	r7, [sp, #32]
 8008110:	210a      	movs	r1, #10
 8008112:	fb01 2107 	mla	r1, r1, r7, r2
 8008116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800811a:	9208      	str	r2, [sp, #32]
 800811c:	e7b5      	b.n	800808a <_strtod_l+0x2ba>
 800811e:	2a6e      	cmp	r2, #110	; 0x6e
 8008120:	e7d9      	b.n	80080d6 <_strtod_l+0x306>
 8008122:	498b      	ldr	r1, [pc, #556]	; (8008350 <_strtod_l+0x580>)
 8008124:	a815      	add	r0, sp, #84	; 0x54
 8008126:	f001 fbcb 	bl	80098c0 <__match>
 800812a:	2800      	cmp	r0, #0
 800812c:	f43f aea8 	beq.w	8007e80 <_strtod_l+0xb0>
 8008130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008132:	4988      	ldr	r1, [pc, #544]	; (8008354 <_strtod_l+0x584>)
 8008134:	3b01      	subs	r3, #1
 8008136:	a815      	add	r0, sp, #84	; 0x54
 8008138:	9315      	str	r3, [sp, #84]	; 0x54
 800813a:	f001 fbc1 	bl	80098c0 <__match>
 800813e:	b910      	cbnz	r0, 8008146 <_strtod_l+0x376>
 8008140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008142:	3301      	adds	r3, #1
 8008144:	9315      	str	r3, [sp, #84]	; 0x54
 8008146:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008364 <_strtod_l+0x594>
 800814a:	f04f 0800 	mov.w	r8, #0
 800814e:	e67a      	b.n	8007e46 <_strtod_l+0x76>
 8008150:	4881      	ldr	r0, [pc, #516]	; (8008358 <_strtod_l+0x588>)
 8008152:	f001 f8d1 	bl	80092f8 <nan>
 8008156:	ec59 8b10 	vmov	r8, r9, d0
 800815a:	e674      	b.n	8007e46 <_strtod_l+0x76>
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008160:	1afb      	subs	r3, r7, r3
 8008162:	f1bb 0f00 	cmp.w	fp, #0
 8008166:	bf08      	it	eq
 8008168:	46b3      	moveq	fp, r6
 800816a:	2e10      	cmp	r6, #16
 800816c:	9308      	str	r3, [sp, #32]
 800816e:	4635      	mov	r5, r6
 8008170:	bfa8      	it	ge
 8008172:	2510      	movge	r5, #16
 8008174:	f7f8 f9d6 	bl	8000524 <__aeabi_ui2d>
 8008178:	2e09      	cmp	r6, #9
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	dd13      	ble.n	80081a8 <_strtod_l+0x3d8>
 8008180:	4b76      	ldr	r3, [pc, #472]	; (800835c <_strtod_l+0x58c>)
 8008182:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800818a:	f7f8 fa45 	bl	8000618 <__aeabi_dmul>
 800818e:	4680      	mov	r8, r0
 8008190:	4650      	mov	r0, sl
 8008192:	4689      	mov	r9, r1
 8008194:	f7f8 f9c6 	bl	8000524 <__aeabi_ui2d>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 f884 	bl	80002ac <__adddf3>
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	2e0f      	cmp	r6, #15
 80081aa:	dc38      	bgt.n	800821e <_strtod_l+0x44e>
 80081ac:	9b08      	ldr	r3, [sp, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f43f ae49 	beq.w	8007e46 <_strtod_l+0x76>
 80081b4:	dd24      	ble.n	8008200 <_strtod_l+0x430>
 80081b6:	2b16      	cmp	r3, #22
 80081b8:	dc0b      	bgt.n	80081d2 <_strtod_l+0x402>
 80081ba:	4968      	ldr	r1, [pc, #416]	; (800835c <_strtod_l+0x58c>)
 80081bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	f7f8 fa26 	bl	8000618 <__aeabi_dmul>
 80081cc:	4680      	mov	r8, r0
 80081ce:	4689      	mov	r9, r1
 80081d0:	e639      	b.n	8007e46 <_strtod_l+0x76>
 80081d2:	9a08      	ldr	r2, [sp, #32]
 80081d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80081d8:	4293      	cmp	r3, r2
 80081da:	db20      	blt.n	800821e <_strtod_l+0x44e>
 80081dc:	4c5f      	ldr	r4, [pc, #380]	; (800835c <_strtod_l+0x58c>)
 80081de:	f1c6 060f 	rsb	r6, r6, #15
 80081e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ee:	f7f8 fa13 	bl	8000618 <__aeabi_dmul>
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	1b9e      	subs	r6, r3, r6
 80081f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80081fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081fe:	e7e3      	b.n	80081c8 <_strtod_l+0x3f8>
 8008200:	9b08      	ldr	r3, [sp, #32]
 8008202:	3316      	adds	r3, #22
 8008204:	db0b      	blt.n	800821e <_strtod_l+0x44e>
 8008206:	9b05      	ldr	r3, [sp, #20]
 8008208:	1bdf      	subs	r7, r3, r7
 800820a:	4b54      	ldr	r3, [pc, #336]	; (800835c <_strtod_l+0x58c>)
 800820c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 fb28 	bl	800086c <__aeabi_ddiv>
 800821c:	e7d6      	b.n	80081cc <_strtod_l+0x3fc>
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	1b75      	subs	r5, r6, r5
 8008222:	441d      	add	r5, r3
 8008224:	2d00      	cmp	r5, #0
 8008226:	dd70      	ble.n	800830a <_strtod_l+0x53a>
 8008228:	f015 030f 	ands.w	r3, r5, #15
 800822c:	d00a      	beq.n	8008244 <_strtod_l+0x474>
 800822e:	494b      	ldr	r1, [pc, #300]	; (800835c <_strtod_l+0x58c>)
 8008230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823c:	f7f8 f9ec 	bl	8000618 <__aeabi_dmul>
 8008240:	4680      	mov	r8, r0
 8008242:	4689      	mov	r9, r1
 8008244:	f035 050f 	bics.w	r5, r5, #15
 8008248:	d04d      	beq.n	80082e6 <_strtod_l+0x516>
 800824a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800824e:	dd22      	ble.n	8008296 <_strtod_l+0x4c6>
 8008250:	2500      	movs	r5, #0
 8008252:	46ab      	mov	fp, r5
 8008254:	9509      	str	r5, [sp, #36]	; 0x24
 8008256:	9505      	str	r5, [sp, #20]
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008364 <_strtod_l+0x594>
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	f43f aded 	beq.w	8007e46 <_strtod_l+0x76>
 800826c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800826e:	4620      	mov	r0, r4
 8008270:	f7ff f924 	bl	80074bc <_Bfree>
 8008274:	9905      	ldr	r1, [sp, #20]
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff f920 	bl	80074bc <_Bfree>
 800827c:	4659      	mov	r1, fp
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff f91c 	bl	80074bc <_Bfree>
 8008284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff f918 	bl	80074bc <_Bfree>
 800828c:	4629      	mov	r1, r5
 800828e:	4620      	mov	r0, r4
 8008290:	f7ff f914 	bl	80074bc <_Bfree>
 8008294:	e5d7      	b.n	8007e46 <_strtod_l+0x76>
 8008296:	4b32      	ldr	r3, [pc, #200]	; (8008360 <_strtod_l+0x590>)
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	2300      	movs	r3, #0
 800829c:	112d      	asrs	r5, r5, #4
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	469a      	mov	sl, r3
 80082a4:	2d01      	cmp	r5, #1
 80082a6:	dc21      	bgt.n	80082ec <_strtod_l+0x51c>
 80082a8:	b10b      	cbz	r3, 80082ae <_strtod_l+0x4de>
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	492c      	ldr	r1, [pc, #176]	; (8008360 <_strtod_l+0x590>)
 80082b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80082b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c0:	f7f8 f9aa 	bl	8000618 <__aeabi_dmul>
 80082c4:	4b27      	ldr	r3, [pc, #156]	; (8008364 <_strtod_l+0x594>)
 80082c6:	460a      	mov	r2, r1
 80082c8:	400b      	ands	r3, r1
 80082ca:	4927      	ldr	r1, [pc, #156]	; (8008368 <_strtod_l+0x598>)
 80082cc:	428b      	cmp	r3, r1
 80082ce:	4680      	mov	r8, r0
 80082d0:	d8be      	bhi.n	8008250 <_strtod_l+0x480>
 80082d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80082d6:	428b      	cmp	r3, r1
 80082d8:	bf86      	itte	hi
 80082da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800836c <_strtod_l+0x59c>
 80082de:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80082e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80082e6:	2300      	movs	r3, #0
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	e07b      	b.n	80083e4 <_strtod_l+0x614>
 80082ec:	07ea      	lsls	r2, r5, #31
 80082ee:	d505      	bpl.n	80082fc <_strtod_l+0x52c>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f8 f98f 	bl	8000618 <__aeabi_dmul>
 80082fa:	2301      	movs	r3, #1
 80082fc:	9a04      	ldr	r2, [sp, #16]
 80082fe:	3208      	adds	r2, #8
 8008300:	f10a 0a01 	add.w	sl, sl, #1
 8008304:	106d      	asrs	r5, r5, #1
 8008306:	9204      	str	r2, [sp, #16]
 8008308:	e7cc      	b.n	80082a4 <_strtod_l+0x4d4>
 800830a:	d0ec      	beq.n	80082e6 <_strtod_l+0x516>
 800830c:	426d      	negs	r5, r5
 800830e:	f015 020f 	ands.w	r2, r5, #15
 8008312:	d00a      	beq.n	800832a <_strtod_l+0x55a>
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <_strtod_l+0x58c>)
 8008316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800831a:	4640      	mov	r0, r8
 800831c:	4649      	mov	r1, r9
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f8 faa3 	bl	800086c <__aeabi_ddiv>
 8008326:	4680      	mov	r8, r0
 8008328:	4689      	mov	r9, r1
 800832a:	112d      	asrs	r5, r5, #4
 800832c:	d0db      	beq.n	80082e6 <_strtod_l+0x516>
 800832e:	2d1f      	cmp	r5, #31
 8008330:	dd1e      	ble.n	8008370 <_strtod_l+0x5a0>
 8008332:	2500      	movs	r5, #0
 8008334:	46ab      	mov	fp, r5
 8008336:	9509      	str	r5, [sp, #36]	; 0x24
 8008338:	9505      	str	r5, [sp, #20]
 800833a:	2322      	movs	r3, #34	; 0x22
 800833c:	f04f 0800 	mov.w	r8, #0
 8008340:	f04f 0900 	mov.w	r9, #0
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	e78d      	b.n	8008264 <_strtod_l+0x494>
 8008348:	08009f35 	.word	0x08009f35
 800834c:	0800a15c 	.word	0x0800a15c
 8008350:	08009f2d 	.word	0x08009f2d
 8008354:	08009f64 	.word	0x08009f64
 8008358:	0800a2ed 	.word	0x0800a2ed
 800835c:	0800a070 	.word	0x0800a070
 8008360:	0800a048 	.word	0x0800a048
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	7ca00000 	.word	0x7ca00000
 800836c:	7fefffff 	.word	0x7fefffff
 8008370:	f015 0310 	ands.w	r3, r5, #16
 8008374:	bf18      	it	ne
 8008376:	236a      	movne	r3, #106	; 0x6a
 8008378:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800871c <_strtod_l+0x94c>
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	2300      	movs	r3, #0
 8008384:	07ea      	lsls	r2, r5, #31
 8008386:	d504      	bpl.n	8008392 <_strtod_l+0x5c2>
 8008388:	e9da 2300 	ldrd	r2, r3, [sl]
 800838c:	f7f8 f944 	bl	8000618 <__aeabi_dmul>
 8008390:	2301      	movs	r3, #1
 8008392:	106d      	asrs	r5, r5, #1
 8008394:	f10a 0a08 	add.w	sl, sl, #8
 8008398:	d1f4      	bne.n	8008384 <_strtod_l+0x5b4>
 800839a:	b10b      	cbz	r3, 80083a0 <_strtod_l+0x5d0>
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	b1bb      	cbz	r3, 80083d4 <_strtod_l+0x604>
 80083a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80083a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	4649      	mov	r1, r9
 80083b0:	dd10      	ble.n	80083d4 <_strtod_l+0x604>
 80083b2:	2b1f      	cmp	r3, #31
 80083b4:	f340 811e 	ble.w	80085f4 <_strtod_l+0x824>
 80083b8:	2b34      	cmp	r3, #52	; 0x34
 80083ba:	bfde      	ittt	le
 80083bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80083c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80083c4:	4093      	lslle	r3, r2
 80083c6:	f04f 0800 	mov.w	r8, #0
 80083ca:	bfcc      	ite	gt
 80083cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80083d0:	ea03 0901 	andle.w	r9, r3, r1
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1a6      	bne.n	8008332 <_strtod_l+0x562>
 80083e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083ea:	4633      	mov	r3, r6
 80083ec:	465a      	mov	r2, fp
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff f8cc 	bl	800758c <__s2b>
 80083f4:	9009      	str	r0, [sp, #36]	; 0x24
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f43f af2a 	beq.w	8008250 <_strtod_l+0x480>
 80083fc:	9a08      	ldr	r2, [sp, #32]
 80083fe:	9b05      	ldr	r3, [sp, #20]
 8008400:	2a00      	cmp	r2, #0
 8008402:	eba3 0307 	sub.w	r3, r3, r7
 8008406:	bfa8      	it	ge
 8008408:	2300      	movge	r3, #0
 800840a:	930c      	str	r3, [sp, #48]	; 0x30
 800840c:	2500      	movs	r5, #0
 800840e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008412:	9312      	str	r3, [sp, #72]	; 0x48
 8008414:	46ab      	mov	fp, r5
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	4620      	mov	r0, r4
 800841a:	6859      	ldr	r1, [r3, #4]
 800841c:	f7ff f80e 	bl	800743c <_Balloc>
 8008420:	9005      	str	r0, [sp, #20]
 8008422:	2800      	cmp	r0, #0
 8008424:	f43f af18 	beq.w	8008258 <_strtod_l+0x488>
 8008428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	3202      	adds	r2, #2
 800842e:	f103 010c 	add.w	r1, r3, #12
 8008432:	0092      	lsls	r2, r2, #2
 8008434:	300c      	adds	r0, #12
 8008436:	f000 ff4f 	bl	80092d8 <memcpy>
 800843a:	ec49 8b10 	vmov	d0, r8, r9
 800843e:	aa18      	add	r2, sp, #96	; 0x60
 8008440:	a917      	add	r1, sp, #92	; 0x5c
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff fbd6 	bl	8007bf4 <__d2b>
 8008448:	ec49 8b18 	vmov	d8, r8, r9
 800844c:	9016      	str	r0, [sp, #88]	; 0x58
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f af02 	beq.w	8008258 <_strtod_l+0x488>
 8008454:	2101      	movs	r1, #1
 8008456:	4620      	mov	r0, r4
 8008458:	f7ff f930 	bl	80076bc <__i2b>
 800845c:	4683      	mov	fp, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f aefa 	beq.w	8008258 <_strtod_l+0x488>
 8008464:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008468:	2e00      	cmp	r6, #0
 800846a:	bfab      	itete	ge
 800846c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800846e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008470:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008472:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008476:	bfac      	ite	ge
 8008478:	eb06 0a03 	addge.w	sl, r6, r3
 800847c:	1b9f      	sublt	r7, r3, r6
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	1af6      	subs	r6, r6, r3
 8008482:	4416      	add	r6, r2
 8008484:	4ba0      	ldr	r3, [pc, #640]	; (8008708 <_strtod_l+0x938>)
 8008486:	3e01      	subs	r6, #1
 8008488:	429e      	cmp	r6, r3
 800848a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800848e:	f280 80c4 	bge.w	800861a <_strtod_l+0x84a>
 8008492:	1b9b      	subs	r3, r3, r6
 8008494:	2b1f      	cmp	r3, #31
 8008496:	eba2 0203 	sub.w	r2, r2, r3
 800849a:	f04f 0101 	mov.w	r1, #1
 800849e:	f300 80b0 	bgt.w	8008602 <_strtod_l+0x832>
 80084a2:	fa01 f303 	lsl.w	r3, r1, r3
 80084a6:	930e      	str	r3, [sp, #56]	; 0x38
 80084a8:	2300      	movs	r3, #0
 80084aa:	930d      	str	r3, [sp, #52]	; 0x34
 80084ac:	eb0a 0602 	add.w	r6, sl, r2
 80084b0:	9b04      	ldr	r3, [sp, #16]
 80084b2:	45b2      	cmp	sl, r6
 80084b4:	4417      	add	r7, r2
 80084b6:	441f      	add	r7, r3
 80084b8:	4653      	mov	r3, sl
 80084ba:	bfa8      	it	ge
 80084bc:	4633      	movge	r3, r6
 80084be:	42bb      	cmp	r3, r7
 80084c0:	bfa8      	it	ge
 80084c2:	463b      	movge	r3, r7
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfc2      	ittt	gt
 80084c8:	1af6      	subgt	r6, r6, r3
 80084ca:	1aff      	subgt	r7, r7, r3
 80084cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80084d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd17      	ble.n	8008506 <_strtod_l+0x736>
 80084d6:	4659      	mov	r1, fp
 80084d8:	461a      	mov	r2, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff f9ae 	bl	800783c <__pow5mult>
 80084e0:	4683      	mov	fp, r0
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f43f aeb8 	beq.w	8008258 <_strtod_l+0x488>
 80084e8:	4601      	mov	r1, r0
 80084ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084ec:	4620      	mov	r0, r4
 80084ee:	f7ff f8fb 	bl	80076e8 <__multiply>
 80084f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43f aeaf 	beq.w	8008258 <_strtod_l+0x488>
 80084fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084fc:	4620      	mov	r0, r4
 80084fe:	f7fe ffdd 	bl	80074bc <_Bfree>
 8008502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008504:	9316      	str	r3, [sp, #88]	; 0x58
 8008506:	2e00      	cmp	r6, #0
 8008508:	f300 808c 	bgt.w	8008624 <_strtod_l+0x854>
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd08      	ble.n	8008524 <_strtod_l+0x754>
 8008512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008514:	9905      	ldr	r1, [sp, #20]
 8008516:	4620      	mov	r0, r4
 8008518:	f7ff f990 	bl	800783c <__pow5mult>
 800851c:	9005      	str	r0, [sp, #20]
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f ae9a 	beq.w	8008258 <_strtod_l+0x488>
 8008524:	2f00      	cmp	r7, #0
 8008526:	dd08      	ble.n	800853a <_strtod_l+0x76a>
 8008528:	9905      	ldr	r1, [sp, #20]
 800852a:	463a      	mov	r2, r7
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff f9df 	bl	80078f0 <__lshift>
 8008532:	9005      	str	r0, [sp, #20]
 8008534:	2800      	cmp	r0, #0
 8008536:	f43f ae8f 	beq.w	8008258 <_strtod_l+0x488>
 800853a:	f1ba 0f00 	cmp.w	sl, #0
 800853e:	dd08      	ble.n	8008552 <_strtod_l+0x782>
 8008540:	4659      	mov	r1, fp
 8008542:	4652      	mov	r2, sl
 8008544:	4620      	mov	r0, r4
 8008546:	f7ff f9d3 	bl	80078f0 <__lshift>
 800854a:	4683      	mov	fp, r0
 800854c:	2800      	cmp	r0, #0
 800854e:	f43f ae83 	beq.w	8008258 <_strtod_l+0x488>
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008556:	4620      	mov	r0, r4
 8008558:	f7ff fa52 	bl	8007a00 <__mdiff>
 800855c:	4605      	mov	r5, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	f43f ae7a 	beq.w	8008258 <_strtod_l+0x488>
 8008564:	68c3      	ldr	r3, [r0, #12]
 8008566:	930b      	str	r3, [sp, #44]	; 0x2c
 8008568:	2300      	movs	r3, #0
 800856a:	60c3      	str	r3, [r0, #12]
 800856c:	4659      	mov	r1, fp
 800856e:	f7ff fa2b 	bl	80079c8 <__mcmp>
 8008572:	2800      	cmp	r0, #0
 8008574:	da60      	bge.n	8008638 <_strtod_l+0x868>
 8008576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008578:	ea53 0308 	orrs.w	r3, r3, r8
 800857c:	f040 8084 	bne.w	8008688 <_strtod_l+0x8b8>
 8008580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008584:	2b00      	cmp	r3, #0
 8008586:	d17f      	bne.n	8008688 <_strtod_l+0x8b8>
 8008588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800858c:	0d1b      	lsrs	r3, r3, #20
 800858e:	051b      	lsls	r3, r3, #20
 8008590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008594:	d978      	bls.n	8008688 <_strtod_l+0x8b8>
 8008596:	696b      	ldr	r3, [r5, #20]
 8008598:	b913      	cbnz	r3, 80085a0 <_strtod_l+0x7d0>
 800859a:	692b      	ldr	r3, [r5, #16]
 800859c:	2b01      	cmp	r3, #1
 800859e:	dd73      	ble.n	8008688 <_strtod_l+0x8b8>
 80085a0:	4629      	mov	r1, r5
 80085a2:	2201      	movs	r2, #1
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff f9a3 	bl	80078f0 <__lshift>
 80085aa:	4659      	mov	r1, fp
 80085ac:	4605      	mov	r5, r0
 80085ae:	f7ff fa0b 	bl	80079c8 <__mcmp>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	dd68      	ble.n	8008688 <_strtod_l+0x8b8>
 80085b6:	9904      	ldr	r1, [sp, #16]
 80085b8:	4a54      	ldr	r2, [pc, #336]	; (800870c <_strtod_l+0x93c>)
 80085ba:	464b      	mov	r3, r9
 80085bc:	2900      	cmp	r1, #0
 80085be:	f000 8084 	beq.w	80086ca <_strtod_l+0x8fa>
 80085c2:	ea02 0109 	and.w	r1, r2, r9
 80085c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80085ca:	dc7e      	bgt.n	80086ca <_strtod_l+0x8fa>
 80085cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80085d0:	f77f aeb3 	ble.w	800833a <_strtod_l+0x56a>
 80085d4:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <_strtod_l+0x940>)
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	2200      	movs	r2, #0
 80085dc:	f7f8 f81c 	bl	8000618 <__aeabi_dmul>
 80085e0:	4b4a      	ldr	r3, [pc, #296]	; (800870c <_strtod_l+0x93c>)
 80085e2:	400b      	ands	r3, r1
 80085e4:	4680      	mov	r8, r0
 80085e6:	4689      	mov	r9, r1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f47f ae3f 	bne.w	800826c <_strtod_l+0x49c>
 80085ee:	2322      	movs	r3, #34	; 0x22
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	e63b      	b.n	800826c <_strtod_l+0x49c>
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	ea03 0808 	and.w	r8, r3, r8
 8008600:	e6e8      	b.n	80083d4 <_strtod_l+0x604>
 8008602:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008606:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800860a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800860e:	36e2      	adds	r6, #226	; 0xe2
 8008610:	fa01 f306 	lsl.w	r3, r1, r6
 8008614:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008618:	e748      	b.n	80084ac <_strtod_l+0x6dc>
 800861a:	2100      	movs	r1, #0
 800861c:	2301      	movs	r3, #1
 800861e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008622:	e743      	b.n	80084ac <_strtod_l+0x6dc>
 8008624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008626:	4632      	mov	r2, r6
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff f961 	bl	80078f0 <__lshift>
 800862e:	9016      	str	r0, [sp, #88]	; 0x58
 8008630:	2800      	cmp	r0, #0
 8008632:	f47f af6b 	bne.w	800850c <_strtod_l+0x73c>
 8008636:	e60f      	b.n	8008258 <_strtod_l+0x488>
 8008638:	46ca      	mov	sl, r9
 800863a:	d171      	bne.n	8008720 <_strtod_l+0x950>
 800863c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800863e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008642:	b352      	cbz	r2, 800869a <_strtod_l+0x8ca>
 8008644:	4a33      	ldr	r2, [pc, #204]	; (8008714 <_strtod_l+0x944>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d12a      	bne.n	80086a0 <_strtod_l+0x8d0>
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	4641      	mov	r1, r8
 800864e:	b1fb      	cbz	r3, 8008690 <_strtod_l+0x8c0>
 8008650:	4b2e      	ldr	r3, [pc, #184]	; (800870c <_strtod_l+0x93c>)
 8008652:	ea09 0303 	and.w	r3, r9, r3
 8008656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800865a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800865e:	d81a      	bhi.n	8008696 <_strtod_l+0x8c6>
 8008660:	0d1b      	lsrs	r3, r3, #20
 8008662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008666:	fa02 f303 	lsl.w	r3, r2, r3
 800866a:	4299      	cmp	r1, r3
 800866c:	d118      	bne.n	80086a0 <_strtod_l+0x8d0>
 800866e:	4b2a      	ldr	r3, [pc, #168]	; (8008718 <_strtod_l+0x948>)
 8008670:	459a      	cmp	sl, r3
 8008672:	d102      	bne.n	800867a <_strtod_l+0x8aa>
 8008674:	3101      	adds	r1, #1
 8008676:	f43f adef 	beq.w	8008258 <_strtod_l+0x488>
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <_strtod_l+0x93c>)
 800867c:	ea0a 0303 	and.w	r3, sl, r3
 8008680:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008684:	f04f 0800 	mov.w	r8, #0
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1a2      	bne.n	80085d4 <_strtod_l+0x804>
 800868e:	e5ed      	b.n	800826c <_strtod_l+0x49c>
 8008690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008694:	e7e9      	b.n	800866a <_strtod_l+0x89a>
 8008696:	4613      	mov	r3, r2
 8008698:	e7e7      	b.n	800866a <_strtod_l+0x89a>
 800869a:	ea53 0308 	orrs.w	r3, r3, r8
 800869e:	d08a      	beq.n	80085b6 <_strtod_l+0x7e6>
 80086a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a2:	b1e3      	cbz	r3, 80086de <_strtod_l+0x90e>
 80086a4:	ea13 0f0a 	tst.w	r3, sl
 80086a8:	d0ee      	beq.n	8008688 <_strtod_l+0x8b8>
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	b1c3      	cbz	r3, 80086e6 <_strtod_l+0x916>
 80086b4:	f7ff fb6f 	bl	8007d96 <sulp>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	ec51 0b18 	vmov	r0, r1, d8
 80086c0:	f7f7 fdf4 	bl	80002ac <__adddf3>
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	e7de      	b.n	8008688 <_strtod_l+0x8b8>
 80086ca:	4013      	ands	r3, r2
 80086cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80086d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80086d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80086d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80086dc:	e7d4      	b.n	8008688 <_strtod_l+0x8b8>
 80086de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e0:	ea13 0f08 	tst.w	r3, r8
 80086e4:	e7e0      	b.n	80086a8 <_strtod_l+0x8d8>
 80086e6:	f7ff fb56 	bl	8007d96 <sulp>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	ec51 0b18 	vmov	r0, r1, d8
 80086f2:	f7f7 fdd9 	bl	80002a8 <__aeabi_dsub>
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	4680      	mov	r8, r0
 80086fc:	4689      	mov	r9, r1
 80086fe:	f7f8 f9f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008702:	2800      	cmp	r0, #0
 8008704:	d0c0      	beq.n	8008688 <_strtod_l+0x8b8>
 8008706:	e618      	b.n	800833a <_strtod_l+0x56a>
 8008708:	fffffc02 	.word	0xfffffc02
 800870c:	7ff00000 	.word	0x7ff00000
 8008710:	39500000 	.word	0x39500000
 8008714:	000fffff 	.word	0x000fffff
 8008718:	7fefffff 	.word	0x7fefffff
 800871c:	0800a170 	.word	0x0800a170
 8008720:	4659      	mov	r1, fp
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff fac0 	bl	8007ca8 <__ratio>
 8008728:	ec57 6b10 	vmov	r6, r7, d0
 800872c:	ee10 0a10 	vmov	r0, s0
 8008730:	2200      	movs	r2, #0
 8008732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008736:	4639      	mov	r1, r7
 8008738:	f7f8 f9ea 	bl	8000b10 <__aeabi_dcmple>
 800873c:	2800      	cmp	r0, #0
 800873e:	d071      	beq.n	8008824 <_strtod_l+0xa54>
 8008740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d17c      	bne.n	8008840 <_strtod_l+0xa70>
 8008746:	f1b8 0f00 	cmp.w	r8, #0
 800874a:	d15a      	bne.n	8008802 <_strtod_l+0xa32>
 800874c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008750:	2b00      	cmp	r3, #0
 8008752:	d15d      	bne.n	8008810 <_strtod_l+0xa40>
 8008754:	4b90      	ldr	r3, [pc, #576]	; (8008998 <_strtod_l+0xbc8>)
 8008756:	2200      	movs	r2, #0
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f8 f9ce 	bl	8000afc <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	d15c      	bne.n	800881e <_strtod_l+0xa4e>
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	4b8c      	ldr	r3, [pc, #560]	; (800899c <_strtod_l+0xbcc>)
 800876a:	2200      	movs	r2, #0
 800876c:	f7f7 ff54 	bl	8000618 <__aeabi_dmul>
 8008770:	4606      	mov	r6, r0
 8008772:	460f      	mov	r7, r1
 8008774:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008778:	9606      	str	r6, [sp, #24]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008780:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008784:	4b86      	ldr	r3, [pc, #536]	; (80089a0 <_strtod_l+0xbd0>)
 8008786:	ea0a 0303 	and.w	r3, sl, r3
 800878a:	930d      	str	r3, [sp, #52]	; 0x34
 800878c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800878e:	4b85      	ldr	r3, [pc, #532]	; (80089a4 <_strtod_l+0xbd4>)
 8008790:	429a      	cmp	r2, r3
 8008792:	f040 8090 	bne.w	80088b6 <_strtod_l+0xae6>
 8008796:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800879a:	ec49 8b10 	vmov	d0, r8, r9
 800879e:	f7ff f9b9 	bl	8007b14 <__ulp>
 80087a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a6:	ec51 0b10 	vmov	r0, r1, d0
 80087aa:	f7f7 ff35 	bl	8000618 <__aeabi_dmul>
 80087ae:	4642      	mov	r2, r8
 80087b0:	464b      	mov	r3, r9
 80087b2:	f7f7 fd7b 	bl	80002ac <__adddf3>
 80087b6:	460b      	mov	r3, r1
 80087b8:	4979      	ldr	r1, [pc, #484]	; (80089a0 <_strtod_l+0xbd0>)
 80087ba:	4a7b      	ldr	r2, [pc, #492]	; (80089a8 <_strtod_l+0xbd8>)
 80087bc:	4019      	ands	r1, r3
 80087be:	4291      	cmp	r1, r2
 80087c0:	4680      	mov	r8, r0
 80087c2:	d944      	bls.n	800884e <_strtod_l+0xa7e>
 80087c4:	ee18 2a90 	vmov	r2, s17
 80087c8:	4b78      	ldr	r3, [pc, #480]	; (80089ac <_strtod_l+0xbdc>)
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d104      	bne.n	80087d8 <_strtod_l+0xa08>
 80087ce:	ee18 3a10 	vmov	r3, s16
 80087d2:	3301      	adds	r3, #1
 80087d4:	f43f ad40 	beq.w	8008258 <_strtod_l+0x488>
 80087d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80089ac <_strtod_l+0xbdc>
 80087dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80087e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7fe fe6a 	bl	80074bc <_Bfree>
 80087e8:	9905      	ldr	r1, [sp, #20]
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7fe fe66 	bl	80074bc <_Bfree>
 80087f0:	4659      	mov	r1, fp
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7fe fe62 	bl	80074bc <_Bfree>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7fe fe5e 	bl	80074bc <_Bfree>
 8008800:	e609      	b.n	8008416 <_strtod_l+0x646>
 8008802:	f1b8 0f01 	cmp.w	r8, #1
 8008806:	d103      	bne.n	8008810 <_strtod_l+0xa40>
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	f43f ad95 	beq.w	800833a <_strtod_l+0x56a>
 8008810:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008968 <_strtod_l+0xb98>
 8008814:	4f60      	ldr	r7, [pc, #384]	; (8008998 <_strtod_l+0xbc8>)
 8008816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800881a:	2600      	movs	r6, #0
 800881c:	e7ae      	b.n	800877c <_strtod_l+0x9ac>
 800881e:	4f5f      	ldr	r7, [pc, #380]	; (800899c <_strtod_l+0xbcc>)
 8008820:	2600      	movs	r6, #0
 8008822:	e7a7      	b.n	8008774 <_strtod_l+0x9a4>
 8008824:	4b5d      	ldr	r3, [pc, #372]	; (800899c <_strtod_l+0xbcc>)
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	2200      	movs	r2, #0
 800882c:	f7f7 fef4 	bl	8000618 <__aeabi_dmul>
 8008830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d09c      	beq.n	8008774 <_strtod_l+0x9a4>
 800883a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800883e:	e79d      	b.n	800877c <_strtod_l+0x9ac>
 8008840:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008970 <_strtod_l+0xba0>
 8008844:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008848:	ec57 6b17 	vmov	r6, r7, d7
 800884c:	e796      	b.n	800877c <_strtod_l+0x9ac>
 800884e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008852:	9b04      	ldr	r3, [sp, #16]
 8008854:	46ca      	mov	sl, r9
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1c2      	bne.n	80087e0 <_strtod_l+0xa10>
 800885a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800885e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	051b      	lsls	r3, r3, #20
 8008864:	429a      	cmp	r2, r3
 8008866:	d1bb      	bne.n	80087e0 <_strtod_l+0xa10>
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 fa34 	bl	8000cd8 <__aeabi_d2lz>
 8008870:	f7f7 fea4 	bl	80005bc <__aeabi_l2d>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f7 fd14 	bl	80002a8 <__aeabi_dsub>
 8008880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008886:	ea43 0308 	orr.w	r3, r3, r8
 800888a:	4313      	orrs	r3, r2
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	d054      	beq.n	800893c <_strtod_l+0xb6c>
 8008892:	a339      	add	r3, pc, #228	; (adr r3, 8008978 <_strtod_l+0xba8>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f8 f930 	bl	8000afc <__aeabi_dcmplt>
 800889c:	2800      	cmp	r0, #0
 800889e:	f47f ace5 	bne.w	800826c <_strtod_l+0x49c>
 80088a2:	a337      	add	r3, pc, #220	; (adr r3, 8008980 <_strtod_l+0xbb0>)
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f944 	bl	8000b38 <__aeabi_dcmpgt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d095      	beq.n	80087e0 <_strtod_l+0xa10>
 80088b4:	e4da      	b.n	800826c <_strtod_l+0x49c>
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	b333      	cbz	r3, 8008908 <_strtod_l+0xb38>
 80088ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088c0:	d822      	bhi.n	8008908 <_strtod_l+0xb38>
 80088c2:	a331      	add	r3, pc, #196	; (adr r3, 8008988 <_strtod_l+0xbb8>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f7f8 f920 	bl	8000b10 <__aeabi_dcmple>
 80088d0:	b1a0      	cbz	r0, 80088fc <_strtod_l+0xb2c>
 80088d2:	4639      	mov	r1, r7
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7f8 f977 	bl	8000bc8 <__aeabi_d2uiz>
 80088da:	2801      	cmp	r0, #1
 80088dc:	bf38      	it	cc
 80088de:	2001      	movcc	r0, #1
 80088e0:	f7f7 fe20 	bl	8000524 <__aeabi_ui2d>
 80088e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	bb23      	cbnz	r3, 8008936 <_strtod_l+0xb66>
 80088ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088f0:	9010      	str	r0, [sp, #64]	; 0x40
 80088f2:	9311      	str	r3, [sp, #68]	; 0x44
 80088f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80088fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	930f      	str	r3, [sp, #60]	; 0x3c
 8008908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800890c:	eeb0 0a48 	vmov.f32	s0, s16
 8008910:	eef0 0a68 	vmov.f32	s1, s17
 8008914:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008918:	f7ff f8fc 	bl	8007b14 <__ulp>
 800891c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008920:	ec53 2b10 	vmov	r2, r3, d0
 8008924:	f7f7 fe78 	bl	8000618 <__aeabi_dmul>
 8008928:	ec53 2b18 	vmov	r2, r3, d8
 800892c:	f7f7 fcbe 	bl	80002ac <__adddf3>
 8008930:	4680      	mov	r8, r0
 8008932:	4689      	mov	r9, r1
 8008934:	e78d      	b.n	8008852 <_strtod_l+0xa82>
 8008936:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800893a:	e7db      	b.n	80088f4 <_strtod_l+0xb24>
 800893c:	a314      	add	r3, pc, #80	; (adr r3, 8008990 <_strtod_l+0xbc0>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f8 f8db 	bl	8000afc <__aeabi_dcmplt>
 8008946:	e7b3      	b.n	80088b0 <_strtod_l+0xae0>
 8008948:	2300      	movs	r3, #0
 800894a:	930a      	str	r3, [sp, #40]	; 0x28
 800894c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800894e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	f7ff ba7c 	b.w	8007e4e <_strtod_l+0x7e>
 8008956:	2a65      	cmp	r2, #101	; 0x65
 8008958:	f43f ab75 	beq.w	8008046 <_strtod_l+0x276>
 800895c:	2a45      	cmp	r2, #69	; 0x45
 800895e:	f43f ab72 	beq.w	8008046 <_strtod_l+0x276>
 8008962:	2301      	movs	r3, #1
 8008964:	f7ff bbaa 	b.w	80080bc <_strtod_l+0x2ec>
 8008968:	00000000 	.word	0x00000000
 800896c:	bff00000 	.word	0xbff00000
 8008970:	00000000 	.word	0x00000000
 8008974:	3ff00000 	.word	0x3ff00000
 8008978:	94a03595 	.word	0x94a03595
 800897c:	3fdfffff 	.word	0x3fdfffff
 8008980:	35afe535 	.word	0x35afe535
 8008984:	3fe00000 	.word	0x3fe00000
 8008988:	ffc00000 	.word	0xffc00000
 800898c:	41dfffff 	.word	0x41dfffff
 8008990:	94a03595 	.word	0x94a03595
 8008994:	3fcfffff 	.word	0x3fcfffff
 8008998:	3ff00000 	.word	0x3ff00000
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	7fe00000 	.word	0x7fe00000
 80089a8:	7c9fffff 	.word	0x7c9fffff
 80089ac:	7fefffff 	.word	0x7fefffff

080089b0 <_strtod_r>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	; (80089b8 <_strtod_r+0x8>)
 80089b2:	f7ff ba0d 	b.w	8007dd0 <_strtod_l>
 80089b6:	bf00      	nop
 80089b8:	20000080 	.word	0x20000080

080089bc <_strtol_l.constprop.0>:
 80089bc:	2b01      	cmp	r3, #1
 80089be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c2:	d001      	beq.n	80089c8 <_strtol_l.constprop.0+0xc>
 80089c4:	2b24      	cmp	r3, #36	; 0x24
 80089c6:	d906      	bls.n	80089d6 <_strtol_l.constprop.0+0x1a>
 80089c8:	f7fd fd8a 	bl	80064e0 <__errno>
 80089cc:	2316      	movs	r3, #22
 80089ce:	6003      	str	r3, [r0, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008abc <_strtol_l.constprop.0+0x100>
 80089da:	460d      	mov	r5, r1
 80089dc:	462e      	mov	r6, r5
 80089de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80089e6:	f017 0708 	ands.w	r7, r7, #8
 80089ea:	d1f7      	bne.n	80089dc <_strtol_l.constprop.0+0x20>
 80089ec:	2c2d      	cmp	r4, #45	; 0x2d
 80089ee:	d132      	bne.n	8008a56 <_strtol_l.constprop.0+0x9a>
 80089f0:	782c      	ldrb	r4, [r5, #0]
 80089f2:	2701      	movs	r7, #1
 80089f4:	1cb5      	adds	r5, r6, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d05b      	beq.n	8008ab2 <_strtol_l.constprop.0+0xf6>
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d109      	bne.n	8008a12 <_strtol_l.constprop.0+0x56>
 80089fe:	2c30      	cmp	r4, #48	; 0x30
 8008a00:	d107      	bne.n	8008a12 <_strtol_l.constprop.0+0x56>
 8008a02:	782c      	ldrb	r4, [r5, #0]
 8008a04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a08:	2c58      	cmp	r4, #88	; 0x58
 8008a0a:	d14d      	bne.n	8008aa8 <_strtol_l.constprop.0+0xec>
 8008a0c:	786c      	ldrb	r4, [r5, #1]
 8008a0e:	2310      	movs	r3, #16
 8008a10:	3502      	adds	r5, #2
 8008a12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a16:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008a1a:	f04f 0e00 	mov.w	lr, #0
 8008a1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a22:	4676      	mov	r6, lr
 8008a24:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a2c:	f1bc 0f09 	cmp.w	ip, #9
 8008a30:	d816      	bhi.n	8008a60 <_strtol_l.constprop.0+0xa4>
 8008a32:	4664      	mov	r4, ip
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	dd24      	ble.n	8008a82 <_strtol_l.constprop.0+0xc6>
 8008a38:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008a3c:	d008      	beq.n	8008a50 <_strtol_l.constprop.0+0x94>
 8008a3e:	45b1      	cmp	r9, r6
 8008a40:	d31c      	bcc.n	8008a7c <_strtol_l.constprop.0+0xc0>
 8008a42:	d101      	bne.n	8008a48 <_strtol_l.constprop.0+0x8c>
 8008a44:	45a2      	cmp	sl, r4
 8008a46:	db19      	blt.n	8008a7c <_strtol_l.constprop.0+0xc0>
 8008a48:	fb06 4603 	mla	r6, r6, r3, r4
 8008a4c:	f04f 0e01 	mov.w	lr, #1
 8008a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a54:	e7e8      	b.n	8008a28 <_strtol_l.constprop.0+0x6c>
 8008a56:	2c2b      	cmp	r4, #43	; 0x2b
 8008a58:	bf04      	itt	eq
 8008a5a:	782c      	ldrbeq	r4, [r5, #0]
 8008a5c:	1cb5      	addeq	r5, r6, #2
 8008a5e:	e7ca      	b.n	80089f6 <_strtol_l.constprop.0+0x3a>
 8008a60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a64:	f1bc 0f19 	cmp.w	ip, #25
 8008a68:	d801      	bhi.n	8008a6e <_strtol_l.constprop.0+0xb2>
 8008a6a:	3c37      	subs	r4, #55	; 0x37
 8008a6c:	e7e2      	b.n	8008a34 <_strtol_l.constprop.0+0x78>
 8008a6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a72:	f1bc 0f19 	cmp.w	ip, #25
 8008a76:	d804      	bhi.n	8008a82 <_strtol_l.constprop.0+0xc6>
 8008a78:	3c57      	subs	r4, #87	; 0x57
 8008a7a:	e7db      	b.n	8008a34 <_strtol_l.constprop.0+0x78>
 8008a7c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008a80:	e7e6      	b.n	8008a50 <_strtol_l.constprop.0+0x94>
 8008a82:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008a86:	d105      	bne.n	8008a94 <_strtol_l.constprop.0+0xd8>
 8008a88:	2322      	movs	r3, #34	; 0x22
 8008a8a:	6003      	str	r3, [r0, #0]
 8008a8c:	4646      	mov	r6, r8
 8008a8e:	b942      	cbnz	r2, 8008aa2 <_strtol_l.constprop.0+0xe6>
 8008a90:	4630      	mov	r0, r6
 8008a92:	e79e      	b.n	80089d2 <_strtol_l.constprop.0+0x16>
 8008a94:	b107      	cbz	r7, 8008a98 <_strtol_l.constprop.0+0xdc>
 8008a96:	4276      	negs	r6, r6
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	d0f9      	beq.n	8008a90 <_strtol_l.constprop.0+0xd4>
 8008a9c:	f1be 0f00 	cmp.w	lr, #0
 8008aa0:	d000      	beq.n	8008aa4 <_strtol_l.constprop.0+0xe8>
 8008aa2:	1e69      	subs	r1, r5, #1
 8008aa4:	6011      	str	r1, [r2, #0]
 8008aa6:	e7f3      	b.n	8008a90 <_strtol_l.constprop.0+0xd4>
 8008aa8:	2430      	movs	r4, #48	; 0x30
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1b1      	bne.n	8008a12 <_strtol_l.constprop.0+0x56>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	e7af      	b.n	8008a12 <_strtol_l.constprop.0+0x56>
 8008ab2:	2c30      	cmp	r4, #48	; 0x30
 8008ab4:	d0a5      	beq.n	8008a02 <_strtol_l.constprop.0+0x46>
 8008ab6:	230a      	movs	r3, #10
 8008ab8:	e7ab      	b.n	8008a12 <_strtol_l.constprop.0+0x56>
 8008aba:	bf00      	nop
 8008abc:	0800a199 	.word	0x0800a199

08008ac0 <_strtol_r>:
 8008ac0:	f7ff bf7c 	b.w	80089bc <_strtol_l.constprop.0>

08008ac4 <__ssputs_r>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	688e      	ldr	r6, [r1, #8]
 8008aca:	461f      	mov	r7, r3
 8008acc:	42be      	cmp	r6, r7
 8008ace:	680b      	ldr	r3, [r1, #0]
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4690      	mov	r8, r2
 8008ad6:	d82c      	bhi.n	8008b32 <__ssputs_r+0x6e>
 8008ad8:	898a      	ldrh	r2, [r1, #12]
 8008ada:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ade:	d026      	beq.n	8008b2e <__ssputs_r+0x6a>
 8008ae0:	6965      	ldr	r5, [r4, #20]
 8008ae2:	6909      	ldr	r1, [r1, #16]
 8008ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae8:	eba3 0901 	sub.w	r9, r3, r1
 8008aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af0:	1c7b      	adds	r3, r7, #1
 8008af2:	444b      	add	r3, r9
 8008af4:	106d      	asrs	r5, r5, #1
 8008af6:	429d      	cmp	r5, r3
 8008af8:	bf38      	it	cc
 8008afa:	461d      	movcc	r5, r3
 8008afc:	0553      	lsls	r3, r2, #21
 8008afe:	d527      	bpl.n	8008b50 <__ssputs_r+0x8c>
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7fe fc0f 	bl	8007324 <_malloc_r>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b360      	cbz	r0, 8008b64 <__ssputs_r+0xa0>
 8008b0a:	6921      	ldr	r1, [r4, #16]
 8008b0c:	464a      	mov	r2, r9
 8008b0e:	f000 fbe3 	bl	80092d8 <memcpy>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	6126      	str	r6, [r4, #16]
 8008b20:	6165      	str	r5, [r4, #20]
 8008b22:	444e      	add	r6, r9
 8008b24:	eba5 0509 	sub.w	r5, r5, r9
 8008b28:	6026      	str	r6, [r4, #0]
 8008b2a:	60a5      	str	r5, [r4, #8]
 8008b2c:	463e      	mov	r6, r7
 8008b2e:	42be      	cmp	r6, r7
 8008b30:	d900      	bls.n	8008b34 <__ssputs_r+0x70>
 8008b32:	463e      	mov	r6, r7
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	4632      	mov	r2, r6
 8008b38:	4641      	mov	r1, r8
 8008b3a:	f000 fb6f 	bl	800921c <memmove>
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	1b9b      	subs	r3, r3, r6
 8008b42:	60a3      	str	r3, [r4, #8]
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	4433      	add	r3, r6
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b50:	462a      	mov	r2, r5
 8008b52:	f000 ff76 	bl	8009a42 <_realloc_r>
 8008b56:	4606      	mov	r6, r0
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d1e0      	bne.n	8008b1e <__ssputs_r+0x5a>
 8008b5c:	6921      	ldr	r1, [r4, #16]
 8008b5e:	4650      	mov	r0, sl
 8008b60:	f7fe fb6c 	bl	800723c <_free_r>
 8008b64:	230c      	movs	r3, #12
 8008b66:	f8ca 3000 	str.w	r3, [sl]
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b76:	e7e9      	b.n	8008b4c <__ssputs_r+0x88>

08008b78 <_svfiprintf_r>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	4698      	mov	r8, r3
 8008b7e:	898b      	ldrh	r3, [r1, #12]
 8008b80:	061b      	lsls	r3, r3, #24
 8008b82:	b09d      	sub	sp, #116	; 0x74
 8008b84:	4607      	mov	r7, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	4614      	mov	r4, r2
 8008b8a:	d50e      	bpl.n	8008baa <_svfiprintf_r+0x32>
 8008b8c:	690b      	ldr	r3, [r1, #16]
 8008b8e:	b963      	cbnz	r3, 8008baa <_svfiprintf_r+0x32>
 8008b90:	2140      	movs	r1, #64	; 0x40
 8008b92:	f7fe fbc7 	bl	8007324 <_malloc_r>
 8008b96:	6028      	str	r0, [r5, #0]
 8008b98:	6128      	str	r0, [r5, #16]
 8008b9a:	b920      	cbnz	r0, 8008ba6 <_svfiprintf_r+0x2e>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba4:	e0d0      	b.n	8008d48 <_svfiprintf_r+0x1d0>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	616b      	str	r3, [r5, #20]
 8008baa:	2300      	movs	r3, #0
 8008bac:	9309      	str	r3, [sp, #36]	; 0x24
 8008bae:	2320      	movs	r3, #32
 8008bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb8:	2330      	movs	r3, #48	; 0x30
 8008bba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d60 <_svfiprintf_r+0x1e8>
 8008bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc2:	f04f 0901 	mov.w	r9, #1
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	469a      	mov	sl, r3
 8008bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bce:	b10a      	cbz	r2, 8008bd4 <_svfiprintf_r+0x5c>
 8008bd0:	2a25      	cmp	r2, #37	; 0x25
 8008bd2:	d1f9      	bne.n	8008bc8 <_svfiprintf_r+0x50>
 8008bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd8:	d00b      	beq.n	8008bf2 <_svfiprintf_r+0x7a>
 8008bda:	465b      	mov	r3, fp
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff6f 	bl	8008ac4 <__ssputs_r>
 8008be6:	3001      	adds	r0, #1
 8008be8:	f000 80a9 	beq.w	8008d3e <_svfiprintf_r+0x1c6>
 8008bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bee:	445a      	add	r2, fp
 8008bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80a1 	beq.w	8008d3e <_svfiprintf_r+0x1c6>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c06:	f10a 0a01 	add.w	sl, sl, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9307      	str	r3, [sp, #28]
 8008c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c12:	931a      	str	r3, [sp, #104]	; 0x68
 8008c14:	4654      	mov	r4, sl
 8008c16:	2205      	movs	r2, #5
 8008c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1c:	4850      	ldr	r0, [pc, #320]	; (8008d60 <_svfiprintf_r+0x1e8>)
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	9a04      	ldr	r2, [sp, #16]
 8008c24:	b9d8      	cbnz	r0, 8008c5e <_svfiprintf_r+0xe6>
 8008c26:	06d0      	lsls	r0, r2, #27
 8008c28:	bf44      	itt	mi
 8008c2a:	2320      	movmi	r3, #32
 8008c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c30:	0711      	lsls	r1, r2, #28
 8008c32:	bf44      	itt	mi
 8008c34:	232b      	movmi	r3, #43	; 0x2b
 8008c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c40:	d015      	beq.n	8008c6e <_svfiprintf_r+0xf6>
 8008c42:	9a07      	ldr	r2, [sp, #28]
 8008c44:	4654      	mov	r4, sl
 8008c46:	2000      	movs	r0, #0
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c52:	3b30      	subs	r3, #48	; 0x30
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d94d      	bls.n	8008cf4 <_svfiprintf_r+0x17c>
 8008c58:	b1b0      	cbz	r0, 8008c88 <_svfiprintf_r+0x110>
 8008c5a:	9207      	str	r2, [sp, #28]
 8008c5c:	e014      	b.n	8008c88 <_svfiprintf_r+0x110>
 8008c5e:	eba0 0308 	sub.w	r3, r0, r8
 8008c62:	fa09 f303 	lsl.w	r3, r9, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	46a2      	mov	sl, r4
 8008c6c:	e7d2      	b.n	8008c14 <_svfiprintf_r+0x9c>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	9103      	str	r1, [sp, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfbb      	ittet	lt
 8008c7a:	425b      	neglt	r3, r3
 8008c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c80:	9307      	strge	r3, [sp, #28]
 8008c82:	9307      	strlt	r3, [sp, #28]
 8008c84:	bfb8      	it	lt
 8008c86:	9204      	strlt	r2, [sp, #16]
 8008c88:	7823      	ldrb	r3, [r4, #0]
 8008c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8c:	d10c      	bne.n	8008ca8 <_svfiprintf_r+0x130>
 8008c8e:	7863      	ldrb	r3, [r4, #1]
 8008c90:	2b2a      	cmp	r3, #42	; 0x2a
 8008c92:	d134      	bne.n	8008cfe <_svfiprintf_r+0x186>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb8      	it	lt
 8008ca0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ca4:	3402      	adds	r4, #2
 8008ca6:	9305      	str	r3, [sp, #20]
 8008ca8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d70 <_svfiprintf_r+0x1f8>
 8008cac:	7821      	ldrb	r1, [r4, #0]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f7f7 fa9d 	bl	80001f0 <memchr>
 8008cb6:	b138      	cbz	r0, 8008cc8 <_svfiprintf_r+0x150>
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	eba0 000a 	sub.w	r0, r0, sl
 8008cbe:	2240      	movs	r2, #64	; 0x40
 8008cc0:	4082      	lsls	r2, r0
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ccc:	4825      	ldr	r0, [pc, #148]	; (8008d64 <_svfiprintf_r+0x1ec>)
 8008cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd2:	2206      	movs	r2, #6
 8008cd4:	f7f7 fa8c 	bl	80001f0 <memchr>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d038      	beq.n	8008d4e <_svfiprintf_r+0x1d6>
 8008cdc:	4b22      	ldr	r3, [pc, #136]	; (8008d68 <_svfiprintf_r+0x1f0>)
 8008cde:	bb1b      	cbnz	r3, 8008d28 <_svfiprintf_r+0x1b0>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	3307      	adds	r3, #7
 8008ce4:	f023 0307 	bic.w	r3, r3, #7
 8008ce8:	3308      	adds	r3, #8
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cee:	4433      	add	r3, r6
 8008cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf2:	e768      	b.n	8008bc6 <_svfiprintf_r+0x4e>
 8008cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e7a6      	b.n	8008c4c <_svfiprintf_r+0xd4>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	3401      	adds	r4, #1
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	4619      	mov	r1, r3
 8008d06:	f04f 0c0a 	mov.w	ip, #10
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d10:	3a30      	subs	r2, #48	; 0x30
 8008d12:	2a09      	cmp	r2, #9
 8008d14:	d903      	bls.n	8008d1e <_svfiprintf_r+0x1a6>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c6      	beq.n	8008ca8 <_svfiprintf_r+0x130>
 8008d1a:	9105      	str	r1, [sp, #20]
 8008d1c:	e7c4      	b.n	8008ca8 <_svfiprintf_r+0x130>
 8008d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d22:	4604      	mov	r4, r0
 8008d24:	2301      	movs	r3, #1
 8008d26:	e7f0      	b.n	8008d0a <_svfiprintf_r+0x192>
 8008d28:	ab03      	add	r3, sp, #12
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <_svfiprintf_r+0x1f4>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7fc fb84 	bl	8005440 <_printf_float>
 8008d38:	1c42      	adds	r2, r0, #1
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	d1d6      	bne.n	8008cec <_svfiprintf_r+0x174>
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	065b      	lsls	r3, r3, #25
 8008d42:	f53f af2d 	bmi.w	8008ba0 <_svfiprintf_r+0x28>
 8008d46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d48:	b01d      	add	sp, #116	; 0x74
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	ab03      	add	r3, sp, #12
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	462a      	mov	r2, r5
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <_svfiprintf_r+0x1f4>)
 8008d56:	a904      	add	r1, sp, #16
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f7fc fe15 	bl	8005988 <_printf_i>
 8008d5e:	e7eb      	b.n	8008d38 <_svfiprintf_r+0x1c0>
 8008d60:	0800a299 	.word	0x0800a299
 8008d64:	0800a2a3 	.word	0x0800a2a3
 8008d68:	08005441 	.word	0x08005441
 8008d6c:	08008ac5 	.word	0x08008ac5
 8008d70:	0800a29f 	.word	0x0800a29f

08008d74 <__sfputc_r>:
 8008d74:	6893      	ldr	r3, [r2, #8]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	b410      	push	{r4}
 8008d7c:	6093      	str	r3, [r2, #8]
 8008d7e:	da08      	bge.n	8008d92 <__sfputc_r+0x1e>
 8008d80:	6994      	ldr	r4, [r2, #24]
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	db01      	blt.n	8008d8a <__sfputc_r+0x16>
 8008d86:	290a      	cmp	r1, #10
 8008d88:	d103      	bne.n	8008d92 <__sfputc_r+0x1e>
 8008d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8e:	f7fd bac0 	b.w	8006312 <__swbuf_r>
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	1c58      	adds	r0, r3, #1
 8008d96:	6010      	str	r0, [r2, #0]
 8008d98:	7019      	strb	r1, [r3, #0]
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <__sfputs_r>:
 8008da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	18d5      	adds	r5, r2, r3
 8008dac:	42ac      	cmp	r4, r5
 8008dae:	d101      	bne.n	8008db4 <__sfputs_r+0x12>
 8008db0:	2000      	movs	r0, #0
 8008db2:	e007      	b.n	8008dc4 <__sfputs_r+0x22>
 8008db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db8:	463a      	mov	r2, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffda 	bl	8008d74 <__sfputc_r>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d1f3      	bne.n	8008dac <__sfputs_r+0xa>
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc8 <_vfiprintf_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	460d      	mov	r5, r1
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	4698      	mov	r8, r3
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	b118      	cbz	r0, 8008de0 <_vfiprintf_r+0x18>
 8008dd8:	6a03      	ldr	r3, [r0, #32]
 8008dda:	b90b      	cbnz	r3, 8008de0 <_vfiprintf_r+0x18>
 8008ddc:	f7fd f992 	bl	8006104 <__sinit>
 8008de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de2:	07d9      	lsls	r1, r3, #31
 8008de4:	d405      	bmi.n	8008df2 <_vfiprintf_r+0x2a>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	059a      	lsls	r2, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_vfiprintf_r+0x2a>
 8008dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dee:	f7fd fba2 	bl	8006536 <__retarget_lock_acquire_recursive>
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	071b      	lsls	r3, r3, #28
 8008df6:	d501      	bpl.n	8008dfc <_vfiprintf_r+0x34>
 8008df8:	692b      	ldr	r3, [r5, #16]
 8008dfa:	b99b      	cbnz	r3, 8008e24 <_vfiprintf_r+0x5c>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7fd fac4 	bl	800638c <__swsetup_r>
 8008e04:	b170      	cbz	r0, 8008e24 <_vfiprintf_r+0x5c>
 8008e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e08:	07dc      	lsls	r4, r3, #31
 8008e0a:	d504      	bpl.n	8008e16 <_vfiprintf_r+0x4e>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e10:	b01d      	add	sp, #116	; 0x74
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	0598      	lsls	r0, r3, #22
 8008e1a:	d4f7      	bmi.n	8008e0c <_vfiprintf_r+0x44>
 8008e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1e:	f7fd fb8b 	bl	8006538 <__retarget_lock_release_recursive>
 8008e22:	e7f3      	b.n	8008e0c <_vfiprintf_r+0x44>
 8008e24:	2300      	movs	r3, #0
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e32:	2330      	movs	r3, #48	; 0x30
 8008e34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008fe8 <_vfiprintf_r+0x220>
 8008e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e3c:	f04f 0901 	mov.w	r9, #1
 8008e40:	4623      	mov	r3, r4
 8008e42:	469a      	mov	sl, r3
 8008e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e48:	b10a      	cbz	r2, 8008e4e <_vfiprintf_r+0x86>
 8008e4a:	2a25      	cmp	r2, #37	; 0x25
 8008e4c:	d1f9      	bne.n	8008e42 <_vfiprintf_r+0x7a>
 8008e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e52:	d00b      	beq.n	8008e6c <_vfiprintf_r+0xa4>
 8008e54:	465b      	mov	r3, fp
 8008e56:	4622      	mov	r2, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ffa1 	bl	8008da2 <__sfputs_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	f000 80a9 	beq.w	8008fb8 <_vfiprintf_r+0x1f0>
 8008e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e68:	445a      	add	r2, fp
 8008e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80a1 	beq.w	8008fb8 <_vfiprintf_r+0x1f0>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8e:	4654      	mov	r4, sl
 8008e90:	2205      	movs	r2, #5
 8008e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e96:	4854      	ldr	r0, [pc, #336]	; (8008fe8 <_vfiprintf_r+0x220>)
 8008e98:	f7f7 f9aa 	bl	80001f0 <memchr>
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	b9d8      	cbnz	r0, 8008ed8 <_vfiprintf_r+0x110>
 8008ea0:	06d1      	lsls	r1, r2, #27
 8008ea2:	bf44      	itt	mi
 8008ea4:	2320      	movmi	r3, #32
 8008ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eaa:	0713      	lsls	r3, r2, #28
 8008eac:	bf44      	itt	mi
 8008eae:	232b      	movmi	r3, #43	; 0x2b
 8008eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eba:	d015      	beq.n	8008ee8 <_vfiprintf_r+0x120>
 8008ebc:	9a07      	ldr	r2, [sp, #28]
 8008ebe:	4654      	mov	r4, sl
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	f04f 0c0a 	mov.w	ip, #10
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ecc:	3b30      	subs	r3, #48	; 0x30
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d94d      	bls.n	8008f6e <_vfiprintf_r+0x1a6>
 8008ed2:	b1b0      	cbz	r0, 8008f02 <_vfiprintf_r+0x13a>
 8008ed4:	9207      	str	r2, [sp, #28]
 8008ed6:	e014      	b.n	8008f02 <_vfiprintf_r+0x13a>
 8008ed8:	eba0 0308 	sub.w	r3, r0, r8
 8008edc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	46a2      	mov	sl, r4
 8008ee6:	e7d2      	b.n	8008e8e <_vfiprintf_r+0xc6>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	1d19      	adds	r1, r3, #4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	9103      	str	r1, [sp, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfbb      	ittet	lt
 8008ef4:	425b      	neglt	r3, r3
 8008ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8008efa:	9307      	strge	r3, [sp, #28]
 8008efc:	9307      	strlt	r3, [sp, #28]
 8008efe:	bfb8      	it	lt
 8008f00:	9204      	strlt	r2, [sp, #16]
 8008f02:	7823      	ldrb	r3, [r4, #0]
 8008f04:	2b2e      	cmp	r3, #46	; 0x2e
 8008f06:	d10c      	bne.n	8008f22 <_vfiprintf_r+0x15a>
 8008f08:	7863      	ldrb	r3, [r4, #1]
 8008f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0c:	d134      	bne.n	8008f78 <_vfiprintf_r+0x1b0>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	9203      	str	r2, [sp, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f1e:	3402      	adds	r4, #2
 8008f20:	9305      	str	r3, [sp, #20]
 8008f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ff8 <_vfiprintf_r+0x230>
 8008f26:	7821      	ldrb	r1, [r4, #0]
 8008f28:	2203      	movs	r2, #3
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	f7f7 f960 	bl	80001f0 <memchr>
 8008f30:	b138      	cbz	r0, 8008f42 <_vfiprintf_r+0x17a>
 8008f32:	9b04      	ldr	r3, [sp, #16]
 8008f34:	eba0 000a 	sub.w	r0, r0, sl
 8008f38:	2240      	movs	r2, #64	; 0x40
 8008f3a:	4082      	lsls	r2, r0
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	3401      	adds	r4, #1
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	4829      	ldr	r0, [pc, #164]	; (8008fec <_vfiprintf_r+0x224>)
 8008f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f4c:	2206      	movs	r2, #6
 8008f4e:	f7f7 f94f 	bl	80001f0 <memchr>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d03f      	beq.n	8008fd6 <_vfiprintf_r+0x20e>
 8008f56:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <_vfiprintf_r+0x228>)
 8008f58:	bb1b      	cbnz	r3, 8008fa2 <_vfiprintf_r+0x1da>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	3307      	adds	r3, #7
 8008f5e:	f023 0307 	bic.w	r3, r3, #7
 8008f62:	3308      	adds	r3, #8
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	443b      	add	r3, r7
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	e768      	b.n	8008e40 <_vfiprintf_r+0x78>
 8008f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f72:	460c      	mov	r4, r1
 8008f74:	2001      	movs	r0, #1
 8008f76:	e7a6      	b.n	8008ec6 <_vfiprintf_r+0xfe>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	3401      	adds	r4, #1
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0c0a 	mov.w	ip, #10
 8008f84:	4620      	mov	r0, r4
 8008f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f8a:	3a30      	subs	r2, #48	; 0x30
 8008f8c:	2a09      	cmp	r2, #9
 8008f8e:	d903      	bls.n	8008f98 <_vfiprintf_r+0x1d0>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0c6      	beq.n	8008f22 <_vfiprintf_r+0x15a>
 8008f94:	9105      	str	r1, [sp, #20]
 8008f96:	e7c4      	b.n	8008f22 <_vfiprintf_r+0x15a>
 8008f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e7f0      	b.n	8008f84 <_vfiprintf_r+0x1bc>
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <_vfiprintf_r+0x22c>)
 8008faa:	a904      	add	r1, sp, #16
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7fc fa47 	bl	8005440 <_printf_float>
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	1c78      	adds	r0, r7, #1
 8008fb6:	d1d6      	bne.n	8008f66 <_vfiprintf_r+0x19e>
 8008fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_vfiprintf_r+0x202>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_vfiprintf_r+0x202>
 8008fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc6:	f7fd fab7 	bl	8006538 <__retarget_lock_release_recursive>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	065b      	lsls	r3, r3, #25
 8008fce:	f53f af1d 	bmi.w	8008e0c <_vfiprintf_r+0x44>
 8008fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fd4:	e71c      	b.n	8008e10 <_vfiprintf_r+0x48>
 8008fd6:	ab03      	add	r3, sp, #12
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	462a      	mov	r2, r5
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <_vfiprintf_r+0x22c>)
 8008fde:	a904      	add	r1, sp, #16
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f7fc fcd1 	bl	8005988 <_printf_i>
 8008fe6:	e7e4      	b.n	8008fb2 <_vfiprintf_r+0x1ea>
 8008fe8:	0800a299 	.word	0x0800a299
 8008fec:	0800a2a3 	.word	0x0800a2a3
 8008ff0:	08005441 	.word	0x08005441
 8008ff4:	08008da3 	.word	0x08008da3
 8008ff8:	0800a29f 	.word	0x0800a29f

08008ffc <__sflush_r>:
 8008ffc:	898a      	ldrh	r2, [r1, #12]
 8008ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	4605      	mov	r5, r0
 8009004:	0710      	lsls	r0, r2, #28
 8009006:	460c      	mov	r4, r1
 8009008:	d458      	bmi.n	80090bc <__sflush_r+0xc0>
 800900a:	684b      	ldr	r3, [r1, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc05      	bgt.n	800901c <__sflush_r+0x20>
 8009010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	dc02      	bgt.n	800901c <__sflush_r+0x20>
 8009016:	2000      	movs	r0, #0
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800901e:	2e00      	cmp	r6, #0
 8009020:	d0f9      	beq.n	8009016 <__sflush_r+0x1a>
 8009022:	2300      	movs	r3, #0
 8009024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009028:	682f      	ldr	r7, [r5, #0]
 800902a:	6a21      	ldr	r1, [r4, #32]
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	d032      	beq.n	8009096 <__sflush_r+0x9a>
 8009030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	075a      	lsls	r2, r3, #29
 8009036:	d505      	bpl.n	8009044 <__sflush_r+0x48>
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	1ac0      	subs	r0, r0, r3
 800903c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800903e:	b10b      	cbz	r3, 8009044 <__sflush_r+0x48>
 8009040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009042:	1ac0      	subs	r0, r0, r3
 8009044:	2300      	movs	r3, #0
 8009046:	4602      	mov	r2, r0
 8009048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800904a:	6a21      	ldr	r1, [r4, #32]
 800904c:	4628      	mov	r0, r5
 800904e:	47b0      	blx	r6
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	d106      	bne.n	8009064 <__sflush_r+0x68>
 8009056:	6829      	ldr	r1, [r5, #0]
 8009058:	291d      	cmp	r1, #29
 800905a:	d82b      	bhi.n	80090b4 <__sflush_r+0xb8>
 800905c:	4a29      	ldr	r2, [pc, #164]	; (8009104 <__sflush_r+0x108>)
 800905e:	410a      	asrs	r2, r1
 8009060:	07d6      	lsls	r6, r2, #31
 8009062:	d427      	bmi.n	80090b4 <__sflush_r+0xb8>
 8009064:	2200      	movs	r2, #0
 8009066:	6062      	str	r2, [r4, #4]
 8009068:	04d9      	lsls	r1, r3, #19
 800906a:	6922      	ldr	r2, [r4, #16]
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	d504      	bpl.n	800907a <__sflush_r+0x7e>
 8009070:	1c42      	adds	r2, r0, #1
 8009072:	d101      	bne.n	8009078 <__sflush_r+0x7c>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b903      	cbnz	r3, 800907a <__sflush_r+0x7e>
 8009078:	6560      	str	r0, [r4, #84]	; 0x54
 800907a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800907c:	602f      	str	r7, [r5, #0]
 800907e:	2900      	cmp	r1, #0
 8009080:	d0c9      	beq.n	8009016 <__sflush_r+0x1a>
 8009082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009086:	4299      	cmp	r1, r3
 8009088:	d002      	beq.n	8009090 <__sflush_r+0x94>
 800908a:	4628      	mov	r0, r5
 800908c:	f7fe f8d6 	bl	800723c <_free_r>
 8009090:	2000      	movs	r0, #0
 8009092:	6360      	str	r0, [r4, #52]	; 0x34
 8009094:	e7c0      	b.n	8009018 <__sflush_r+0x1c>
 8009096:	2301      	movs	r3, #1
 8009098:	4628      	mov	r0, r5
 800909a:	47b0      	blx	r6
 800909c:	1c41      	adds	r1, r0, #1
 800909e:	d1c8      	bne.n	8009032 <__sflush_r+0x36>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c5      	beq.n	8009032 <__sflush_r+0x36>
 80090a6:	2b1d      	cmp	r3, #29
 80090a8:	d001      	beq.n	80090ae <__sflush_r+0xb2>
 80090aa:	2b16      	cmp	r3, #22
 80090ac:	d101      	bne.n	80090b2 <__sflush_r+0xb6>
 80090ae:	602f      	str	r7, [r5, #0]
 80090b0:	e7b1      	b.n	8009016 <__sflush_r+0x1a>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	e7ad      	b.n	8009018 <__sflush_r+0x1c>
 80090bc:	690f      	ldr	r7, [r1, #16]
 80090be:	2f00      	cmp	r7, #0
 80090c0:	d0a9      	beq.n	8009016 <__sflush_r+0x1a>
 80090c2:	0793      	lsls	r3, r2, #30
 80090c4:	680e      	ldr	r6, [r1, #0]
 80090c6:	bf08      	it	eq
 80090c8:	694b      	ldreq	r3, [r1, #20]
 80090ca:	600f      	str	r7, [r1, #0]
 80090cc:	bf18      	it	ne
 80090ce:	2300      	movne	r3, #0
 80090d0:	eba6 0807 	sub.w	r8, r6, r7
 80090d4:	608b      	str	r3, [r1, #8]
 80090d6:	f1b8 0f00 	cmp.w	r8, #0
 80090da:	dd9c      	ble.n	8009016 <__sflush_r+0x1a>
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090e0:	4643      	mov	r3, r8
 80090e2:	463a      	mov	r2, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b0      	blx	r6
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dc06      	bgt.n	80090fa <__sflush_r+0xfe>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f8:	e78e      	b.n	8009018 <__sflush_r+0x1c>
 80090fa:	4407      	add	r7, r0
 80090fc:	eba8 0800 	sub.w	r8, r8, r0
 8009100:	e7e9      	b.n	80090d6 <__sflush_r+0xda>
 8009102:	bf00      	nop
 8009104:	dfbffffe 	.word	0xdfbffffe

08009108 <_fflush_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	690b      	ldr	r3, [r1, #16]
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	b913      	cbnz	r3, 8009118 <_fflush_r+0x10>
 8009112:	2500      	movs	r5, #0
 8009114:	4628      	mov	r0, r5
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	b118      	cbz	r0, 8009122 <_fflush_r+0x1a>
 800911a:	6a03      	ldr	r3, [r0, #32]
 800911c:	b90b      	cbnz	r3, 8009122 <_fflush_r+0x1a>
 800911e:	f7fc fff1 	bl	8006104 <__sinit>
 8009122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0f3      	beq.n	8009112 <_fflush_r+0xa>
 800912a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800912c:	07d0      	lsls	r0, r2, #31
 800912e:	d404      	bmi.n	800913a <_fflush_r+0x32>
 8009130:	0599      	lsls	r1, r3, #22
 8009132:	d402      	bmi.n	800913a <_fflush_r+0x32>
 8009134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009136:	f7fd f9fe 	bl	8006536 <__retarget_lock_acquire_recursive>
 800913a:	4628      	mov	r0, r5
 800913c:	4621      	mov	r1, r4
 800913e:	f7ff ff5d 	bl	8008ffc <__sflush_r>
 8009142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009144:	07da      	lsls	r2, r3, #31
 8009146:	4605      	mov	r5, r0
 8009148:	d4e4      	bmi.n	8009114 <_fflush_r+0xc>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	059b      	lsls	r3, r3, #22
 800914e:	d4e1      	bmi.n	8009114 <_fflush_r+0xc>
 8009150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009152:	f7fd f9f1 	bl	8006538 <__retarget_lock_release_recursive>
 8009156:	e7dd      	b.n	8009114 <_fflush_r+0xc>

08009158 <__swhatbuf_r>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	2900      	cmp	r1, #0
 8009162:	b096      	sub	sp, #88	; 0x58
 8009164:	4615      	mov	r5, r2
 8009166:	461e      	mov	r6, r3
 8009168:	da0d      	bge.n	8009186 <__swhatbuf_r+0x2e>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009170:	f04f 0100 	mov.w	r1, #0
 8009174:	bf0c      	ite	eq
 8009176:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800917a:	2340      	movne	r3, #64	; 0x40
 800917c:	2000      	movs	r0, #0
 800917e:	6031      	str	r1, [r6, #0]
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	b016      	add	sp, #88	; 0x58
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	466a      	mov	r2, sp
 8009188:	f000 f874 	bl	8009274 <_fstat_r>
 800918c:	2800      	cmp	r0, #0
 800918e:	dbec      	blt.n	800916a <__swhatbuf_r+0x12>
 8009190:	9901      	ldr	r1, [sp, #4]
 8009192:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009196:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800919a:	4259      	negs	r1, r3
 800919c:	4159      	adcs	r1, r3
 800919e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a2:	e7eb      	b.n	800917c <__swhatbuf_r+0x24>

080091a4 <__smakebuf_r>:
 80091a4:	898b      	ldrh	r3, [r1, #12]
 80091a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091a8:	079d      	lsls	r5, r3, #30
 80091aa:	4606      	mov	r6, r0
 80091ac:	460c      	mov	r4, r1
 80091ae:	d507      	bpl.n	80091c0 <__smakebuf_r+0x1c>
 80091b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	2301      	movs	r3, #1
 80091ba:	6163      	str	r3, [r4, #20]
 80091bc:	b002      	add	sp, #8
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	ab01      	add	r3, sp, #4
 80091c2:	466a      	mov	r2, sp
 80091c4:	f7ff ffc8 	bl	8009158 <__swhatbuf_r>
 80091c8:	9900      	ldr	r1, [sp, #0]
 80091ca:	4605      	mov	r5, r0
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7fe f8a9 	bl	8007324 <_malloc_r>
 80091d2:	b948      	cbnz	r0, 80091e8 <__smakebuf_r+0x44>
 80091d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d8:	059a      	lsls	r2, r3, #22
 80091da:	d4ef      	bmi.n	80091bc <__smakebuf_r+0x18>
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	e7e3      	b.n	80091b0 <__smakebuf_r+0xc>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	6020      	str	r0, [r4, #0]
 80091ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	9b00      	ldr	r3, [sp, #0]
 80091f4:	6163      	str	r3, [r4, #20]
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	6120      	str	r0, [r4, #16]
 80091fa:	b15b      	cbz	r3, 8009214 <__smakebuf_r+0x70>
 80091fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009200:	4630      	mov	r0, r6
 8009202:	f000 f849 	bl	8009298 <_isatty_r>
 8009206:	b128      	cbz	r0, 8009214 <__smakebuf_r+0x70>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f023 0303 	bic.w	r3, r3, #3
 800920e:	f043 0301 	orr.w	r3, r3, #1
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	431d      	orrs	r5, r3
 8009218:	81a5      	strh	r5, [r4, #12]
 800921a:	e7cf      	b.n	80091bc <__smakebuf_r+0x18>

0800921c <memmove>:
 800921c:	4288      	cmp	r0, r1
 800921e:	b510      	push	{r4, lr}
 8009220:	eb01 0402 	add.w	r4, r1, r2
 8009224:	d902      	bls.n	800922c <memmove+0x10>
 8009226:	4284      	cmp	r4, r0
 8009228:	4623      	mov	r3, r4
 800922a:	d807      	bhi.n	800923c <memmove+0x20>
 800922c:	1e43      	subs	r3, r0, #1
 800922e:	42a1      	cmp	r1, r4
 8009230:	d008      	beq.n	8009244 <memmove+0x28>
 8009232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800923a:	e7f8      	b.n	800922e <memmove+0x12>
 800923c:	4402      	add	r2, r0
 800923e:	4601      	mov	r1, r0
 8009240:	428a      	cmp	r2, r1
 8009242:	d100      	bne.n	8009246 <memmove+0x2a>
 8009244:	bd10      	pop	{r4, pc}
 8009246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800924a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800924e:	e7f7      	b.n	8009240 <memmove+0x24>

08009250 <strncmp>:
 8009250:	b510      	push	{r4, lr}
 8009252:	b16a      	cbz	r2, 8009270 <strncmp+0x20>
 8009254:	3901      	subs	r1, #1
 8009256:	1884      	adds	r4, r0, r2
 8009258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009260:	429a      	cmp	r2, r3
 8009262:	d103      	bne.n	800926c <strncmp+0x1c>
 8009264:	42a0      	cmp	r0, r4
 8009266:	d001      	beq.n	800926c <strncmp+0x1c>
 8009268:	2a00      	cmp	r2, #0
 800926a:	d1f5      	bne.n	8009258 <strncmp+0x8>
 800926c:	1ad0      	subs	r0, r2, r3
 800926e:	bd10      	pop	{r4, pc}
 8009270:	4610      	mov	r0, r2
 8009272:	e7fc      	b.n	800926e <strncmp+0x1e>

08009274 <_fstat_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_fstat_r+0x20>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	f7f9 fa3a 	bl	80026fa <_fstat>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d102      	bne.n	8009290 <_fstat_r+0x1c>
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	b103      	cbz	r3, 8009290 <_fstat_r+0x1c>
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	bd38      	pop	{r3, r4, r5, pc}
 8009292:	bf00      	nop
 8009294:	20000550 	.word	0x20000550

08009298 <_isatty_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_isatty_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 fa39 	bl	800271a <_isatty>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_isatty_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_isatty_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000550 	.word	0x20000550

080092b8 <_sbrk_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	; (80092d4 <_sbrk_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f9 fa42 	bl	800274c <_sbrk>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_sbrk_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_sbrk_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000550 	.word	0x20000550

080092d8 <memcpy>:
 80092d8:	440a      	add	r2, r1
 80092da:	4291      	cmp	r1, r2
 80092dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092e0:	d100      	bne.n	80092e4 <memcpy+0xc>
 80092e2:	4770      	bx	lr
 80092e4:	b510      	push	{r4, lr}
 80092e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ee:	4291      	cmp	r1, r2
 80092f0:	d1f9      	bne.n	80092e6 <memcpy+0xe>
 80092f2:	bd10      	pop	{r4, pc}
 80092f4:	0000      	movs	r0, r0
	...

080092f8 <nan>:
 80092f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009300 <nan+0x8>
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	00000000 	.word	0x00000000
 8009304:	7ff80000 	.word	0x7ff80000

08009308 <__assert_func>:
 8009308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800930a:	4614      	mov	r4, r2
 800930c:	461a      	mov	r2, r3
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <__assert_func+0x2c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	68d8      	ldr	r0, [r3, #12]
 8009316:	b14c      	cbz	r4, 800932c <__assert_func+0x24>
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <__assert_func+0x30>)
 800931a:	9100      	str	r1, [sp, #0]
 800931c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009320:	4906      	ldr	r1, [pc, #24]	; (800933c <__assert_func+0x34>)
 8009322:	462b      	mov	r3, r5
 8009324:	f000 fbca 	bl	8009abc <fiprintf>
 8009328:	f000 fbda 	bl	8009ae0 <abort>
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <__assert_func+0x38>)
 800932e:	461c      	mov	r4, r3
 8009330:	e7f3      	b.n	800931a <__assert_func+0x12>
 8009332:	bf00      	nop
 8009334:	2000007c 	.word	0x2000007c
 8009338:	0800a2b2 	.word	0x0800a2b2
 800933c:	0800a2bf 	.word	0x0800a2bf
 8009340:	0800a2ed 	.word	0x0800a2ed

08009344 <_calloc_r>:
 8009344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009346:	fba1 2402 	umull	r2, r4, r1, r2
 800934a:	b94c      	cbnz	r4, 8009360 <_calloc_r+0x1c>
 800934c:	4611      	mov	r1, r2
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	f7fd ffe8 	bl	8007324 <_malloc_r>
 8009354:	9a01      	ldr	r2, [sp, #4]
 8009356:	4605      	mov	r5, r0
 8009358:	b930      	cbnz	r0, 8009368 <_calloc_r+0x24>
 800935a:	4628      	mov	r0, r5
 800935c:	b003      	add	sp, #12
 800935e:	bd30      	pop	{r4, r5, pc}
 8009360:	220c      	movs	r2, #12
 8009362:	6002      	str	r2, [r0, #0]
 8009364:	2500      	movs	r5, #0
 8009366:	e7f8      	b.n	800935a <_calloc_r+0x16>
 8009368:	4621      	mov	r1, r4
 800936a:	f7fd f867 	bl	800643c <memset>
 800936e:	e7f4      	b.n	800935a <_calloc_r+0x16>

08009370 <rshift>:
 8009370:	6903      	ldr	r3, [r0, #16]
 8009372:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009376:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800937a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800937e:	f100 0414 	add.w	r4, r0, #20
 8009382:	dd45      	ble.n	8009410 <rshift+0xa0>
 8009384:	f011 011f 	ands.w	r1, r1, #31
 8009388:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800938c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009390:	d10c      	bne.n	80093ac <rshift+0x3c>
 8009392:	f100 0710 	add.w	r7, r0, #16
 8009396:	4629      	mov	r1, r5
 8009398:	42b1      	cmp	r1, r6
 800939a:	d334      	bcc.n	8009406 <rshift+0x96>
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	1eea      	subs	r2, r5, #3
 80093a2:	4296      	cmp	r6, r2
 80093a4:	bf38      	it	cc
 80093a6:	2300      	movcc	r3, #0
 80093a8:	4423      	add	r3, r4
 80093aa:	e015      	b.n	80093d8 <rshift+0x68>
 80093ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093b0:	f1c1 0820 	rsb	r8, r1, #32
 80093b4:	40cf      	lsrs	r7, r1
 80093b6:	f105 0e04 	add.w	lr, r5, #4
 80093ba:	46a1      	mov	r9, r4
 80093bc:	4576      	cmp	r6, lr
 80093be:	46f4      	mov	ip, lr
 80093c0:	d815      	bhi.n	80093ee <rshift+0x7e>
 80093c2:	1a9a      	subs	r2, r3, r2
 80093c4:	0092      	lsls	r2, r2, #2
 80093c6:	3a04      	subs	r2, #4
 80093c8:	3501      	adds	r5, #1
 80093ca:	42ae      	cmp	r6, r5
 80093cc:	bf38      	it	cc
 80093ce:	2200      	movcc	r2, #0
 80093d0:	18a3      	adds	r3, r4, r2
 80093d2:	50a7      	str	r7, [r4, r2]
 80093d4:	b107      	cbz	r7, 80093d8 <rshift+0x68>
 80093d6:	3304      	adds	r3, #4
 80093d8:	1b1a      	subs	r2, r3, r4
 80093da:	42a3      	cmp	r3, r4
 80093dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093e0:	bf08      	it	eq
 80093e2:	2300      	moveq	r3, #0
 80093e4:	6102      	str	r2, [r0, #16]
 80093e6:	bf08      	it	eq
 80093e8:	6143      	streq	r3, [r0, #20]
 80093ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093ee:	f8dc c000 	ldr.w	ip, [ip]
 80093f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80093f6:	ea4c 0707 	orr.w	r7, ip, r7
 80093fa:	f849 7b04 	str.w	r7, [r9], #4
 80093fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009402:	40cf      	lsrs	r7, r1
 8009404:	e7da      	b.n	80093bc <rshift+0x4c>
 8009406:	f851 cb04 	ldr.w	ip, [r1], #4
 800940a:	f847 cf04 	str.w	ip, [r7, #4]!
 800940e:	e7c3      	b.n	8009398 <rshift+0x28>
 8009410:	4623      	mov	r3, r4
 8009412:	e7e1      	b.n	80093d8 <rshift+0x68>

08009414 <__hexdig_fun>:
 8009414:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009418:	2b09      	cmp	r3, #9
 800941a:	d802      	bhi.n	8009422 <__hexdig_fun+0xe>
 800941c:	3820      	subs	r0, #32
 800941e:	b2c0      	uxtb	r0, r0
 8009420:	4770      	bx	lr
 8009422:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009426:	2b05      	cmp	r3, #5
 8009428:	d801      	bhi.n	800942e <__hexdig_fun+0x1a>
 800942a:	3847      	subs	r0, #71	; 0x47
 800942c:	e7f7      	b.n	800941e <__hexdig_fun+0xa>
 800942e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009432:	2b05      	cmp	r3, #5
 8009434:	d801      	bhi.n	800943a <__hexdig_fun+0x26>
 8009436:	3827      	subs	r0, #39	; 0x27
 8009438:	e7f1      	b.n	800941e <__hexdig_fun+0xa>
 800943a:	2000      	movs	r0, #0
 800943c:	4770      	bx	lr
	...

08009440 <__gethex>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	4617      	mov	r7, r2
 8009446:	680a      	ldr	r2, [r1, #0]
 8009448:	b085      	sub	sp, #20
 800944a:	f102 0b02 	add.w	fp, r2, #2
 800944e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009452:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009456:	4681      	mov	r9, r0
 8009458:	468a      	mov	sl, r1
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	32fe      	adds	r2, #254	; 0xfe
 800945e:	eb02 030b 	add.w	r3, r2, fp
 8009462:	46d8      	mov	r8, fp
 8009464:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	2830      	cmp	r0, #48	; 0x30
 800946c:	d0f7      	beq.n	800945e <__gethex+0x1e>
 800946e:	f7ff ffd1 	bl	8009414 <__hexdig_fun>
 8009472:	4604      	mov	r4, r0
 8009474:	2800      	cmp	r0, #0
 8009476:	d138      	bne.n	80094ea <__gethex+0xaa>
 8009478:	49a7      	ldr	r1, [pc, #668]	; (8009718 <__gethex+0x2d8>)
 800947a:	2201      	movs	r2, #1
 800947c:	4640      	mov	r0, r8
 800947e:	f7ff fee7 	bl	8009250 <strncmp>
 8009482:	4606      	mov	r6, r0
 8009484:	2800      	cmp	r0, #0
 8009486:	d169      	bne.n	800955c <__gethex+0x11c>
 8009488:	f898 0001 	ldrb.w	r0, [r8, #1]
 800948c:	465d      	mov	r5, fp
 800948e:	f7ff ffc1 	bl	8009414 <__hexdig_fun>
 8009492:	2800      	cmp	r0, #0
 8009494:	d064      	beq.n	8009560 <__gethex+0x120>
 8009496:	465a      	mov	r2, fp
 8009498:	7810      	ldrb	r0, [r2, #0]
 800949a:	2830      	cmp	r0, #48	; 0x30
 800949c:	4690      	mov	r8, r2
 800949e:	f102 0201 	add.w	r2, r2, #1
 80094a2:	d0f9      	beq.n	8009498 <__gethex+0x58>
 80094a4:	f7ff ffb6 	bl	8009414 <__hexdig_fun>
 80094a8:	2301      	movs	r3, #1
 80094aa:	fab0 f480 	clz	r4, r0
 80094ae:	0964      	lsrs	r4, r4, #5
 80094b0:	465e      	mov	r6, fp
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	4642      	mov	r2, r8
 80094b6:	4615      	mov	r5, r2
 80094b8:	3201      	adds	r2, #1
 80094ba:	7828      	ldrb	r0, [r5, #0]
 80094bc:	f7ff ffaa 	bl	8009414 <__hexdig_fun>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d1f8      	bne.n	80094b6 <__gethex+0x76>
 80094c4:	4994      	ldr	r1, [pc, #592]	; (8009718 <__gethex+0x2d8>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff fec1 	bl	8009250 <strncmp>
 80094ce:	b978      	cbnz	r0, 80094f0 <__gethex+0xb0>
 80094d0:	b946      	cbnz	r6, 80094e4 <__gethex+0xa4>
 80094d2:	1c6e      	adds	r6, r5, #1
 80094d4:	4632      	mov	r2, r6
 80094d6:	4615      	mov	r5, r2
 80094d8:	3201      	adds	r2, #1
 80094da:	7828      	ldrb	r0, [r5, #0]
 80094dc:	f7ff ff9a 	bl	8009414 <__hexdig_fun>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1f8      	bne.n	80094d6 <__gethex+0x96>
 80094e4:	1b73      	subs	r3, r6, r5
 80094e6:	009e      	lsls	r6, r3, #2
 80094e8:	e004      	b.n	80094f4 <__gethex+0xb4>
 80094ea:	2400      	movs	r4, #0
 80094ec:	4626      	mov	r6, r4
 80094ee:	e7e1      	b.n	80094b4 <__gethex+0x74>
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	d1f7      	bne.n	80094e4 <__gethex+0xa4>
 80094f4:	782b      	ldrb	r3, [r5, #0]
 80094f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094fa:	2b50      	cmp	r3, #80	; 0x50
 80094fc:	d13d      	bne.n	800957a <__gethex+0x13a>
 80094fe:	786b      	ldrb	r3, [r5, #1]
 8009500:	2b2b      	cmp	r3, #43	; 0x2b
 8009502:	d02f      	beq.n	8009564 <__gethex+0x124>
 8009504:	2b2d      	cmp	r3, #45	; 0x2d
 8009506:	d031      	beq.n	800956c <__gethex+0x12c>
 8009508:	1c69      	adds	r1, r5, #1
 800950a:	f04f 0b00 	mov.w	fp, #0
 800950e:	7808      	ldrb	r0, [r1, #0]
 8009510:	f7ff ff80 	bl	8009414 <__hexdig_fun>
 8009514:	1e42      	subs	r2, r0, #1
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	2a18      	cmp	r2, #24
 800951a:	d82e      	bhi.n	800957a <__gethex+0x13a>
 800951c:	f1a0 0210 	sub.w	r2, r0, #16
 8009520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009524:	f7ff ff76 	bl	8009414 <__hexdig_fun>
 8009528:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800952c:	fa5f fc8c 	uxtb.w	ip, ip
 8009530:	f1bc 0f18 	cmp.w	ip, #24
 8009534:	d91d      	bls.n	8009572 <__gethex+0x132>
 8009536:	f1bb 0f00 	cmp.w	fp, #0
 800953a:	d000      	beq.n	800953e <__gethex+0xfe>
 800953c:	4252      	negs	r2, r2
 800953e:	4416      	add	r6, r2
 8009540:	f8ca 1000 	str.w	r1, [sl]
 8009544:	b1dc      	cbz	r4, 800957e <__gethex+0x13e>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	bf14      	ite	ne
 800954c:	f04f 0800 	movne.w	r8, #0
 8009550:	f04f 0806 	moveq.w	r8, #6
 8009554:	4640      	mov	r0, r8
 8009556:	b005      	add	sp, #20
 8009558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955c:	4645      	mov	r5, r8
 800955e:	4626      	mov	r6, r4
 8009560:	2401      	movs	r4, #1
 8009562:	e7c7      	b.n	80094f4 <__gethex+0xb4>
 8009564:	f04f 0b00 	mov.w	fp, #0
 8009568:	1ca9      	adds	r1, r5, #2
 800956a:	e7d0      	b.n	800950e <__gethex+0xce>
 800956c:	f04f 0b01 	mov.w	fp, #1
 8009570:	e7fa      	b.n	8009568 <__gethex+0x128>
 8009572:	230a      	movs	r3, #10
 8009574:	fb03 0002 	mla	r0, r3, r2, r0
 8009578:	e7d0      	b.n	800951c <__gethex+0xdc>
 800957a:	4629      	mov	r1, r5
 800957c:	e7e0      	b.n	8009540 <__gethex+0x100>
 800957e:	eba5 0308 	sub.w	r3, r5, r8
 8009582:	3b01      	subs	r3, #1
 8009584:	4621      	mov	r1, r4
 8009586:	2b07      	cmp	r3, #7
 8009588:	dc0a      	bgt.n	80095a0 <__gethex+0x160>
 800958a:	4648      	mov	r0, r9
 800958c:	f7fd ff56 	bl	800743c <_Balloc>
 8009590:	4604      	mov	r4, r0
 8009592:	b940      	cbnz	r0, 80095a6 <__gethex+0x166>
 8009594:	4b61      	ldr	r3, [pc, #388]	; (800971c <__gethex+0x2dc>)
 8009596:	4602      	mov	r2, r0
 8009598:	21e4      	movs	r1, #228	; 0xe4
 800959a:	4861      	ldr	r0, [pc, #388]	; (8009720 <__gethex+0x2e0>)
 800959c:	f7ff feb4 	bl	8009308 <__assert_func>
 80095a0:	3101      	adds	r1, #1
 80095a2:	105b      	asrs	r3, r3, #1
 80095a4:	e7ef      	b.n	8009586 <__gethex+0x146>
 80095a6:	f100 0a14 	add.w	sl, r0, #20
 80095aa:	2300      	movs	r3, #0
 80095ac:	495a      	ldr	r1, [pc, #360]	; (8009718 <__gethex+0x2d8>)
 80095ae:	f8cd a004 	str.w	sl, [sp, #4]
 80095b2:	469b      	mov	fp, r3
 80095b4:	45a8      	cmp	r8, r5
 80095b6:	d342      	bcc.n	800963e <__gethex+0x1fe>
 80095b8:	9801      	ldr	r0, [sp, #4]
 80095ba:	f840 bb04 	str.w	fp, [r0], #4
 80095be:	eba0 000a 	sub.w	r0, r0, sl
 80095c2:	1080      	asrs	r0, r0, #2
 80095c4:	6120      	str	r0, [r4, #16]
 80095c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80095ca:	4658      	mov	r0, fp
 80095cc:	f7fe f828 	bl	8007620 <__hi0bits>
 80095d0:	683d      	ldr	r5, [r7, #0]
 80095d2:	eba8 0000 	sub.w	r0, r8, r0
 80095d6:	42a8      	cmp	r0, r5
 80095d8:	dd59      	ble.n	800968e <__gethex+0x24e>
 80095da:	eba0 0805 	sub.w	r8, r0, r5
 80095de:	4641      	mov	r1, r8
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7fe fbb7 	bl	8007d54 <__any_on>
 80095e6:	4683      	mov	fp, r0
 80095e8:	b1b8      	cbz	r0, 800961a <__gethex+0x1da>
 80095ea:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80095ee:	1159      	asrs	r1, r3, #5
 80095f0:	f003 021f 	and.w	r2, r3, #31
 80095f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80095f8:	f04f 0b01 	mov.w	fp, #1
 80095fc:	fa0b f202 	lsl.w	r2, fp, r2
 8009600:	420a      	tst	r2, r1
 8009602:	d00a      	beq.n	800961a <__gethex+0x1da>
 8009604:	455b      	cmp	r3, fp
 8009606:	dd06      	ble.n	8009616 <__gethex+0x1d6>
 8009608:	f1a8 0102 	sub.w	r1, r8, #2
 800960c:	4620      	mov	r0, r4
 800960e:	f7fe fba1 	bl	8007d54 <__any_on>
 8009612:	2800      	cmp	r0, #0
 8009614:	d138      	bne.n	8009688 <__gethex+0x248>
 8009616:	f04f 0b02 	mov.w	fp, #2
 800961a:	4641      	mov	r1, r8
 800961c:	4620      	mov	r0, r4
 800961e:	f7ff fea7 	bl	8009370 <rshift>
 8009622:	4446      	add	r6, r8
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	42b3      	cmp	r3, r6
 8009628:	da41      	bge.n	80096ae <__gethex+0x26e>
 800962a:	4621      	mov	r1, r4
 800962c:	4648      	mov	r0, r9
 800962e:	f7fd ff45 	bl	80074bc <_Bfree>
 8009632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009634:	2300      	movs	r3, #0
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800963c:	e78a      	b.n	8009554 <__gethex+0x114>
 800963e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009642:	2a2e      	cmp	r2, #46	; 0x2e
 8009644:	d014      	beq.n	8009670 <__gethex+0x230>
 8009646:	2b20      	cmp	r3, #32
 8009648:	d106      	bne.n	8009658 <__gethex+0x218>
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	f843 bb04 	str.w	fp, [r3], #4
 8009650:	f04f 0b00 	mov.w	fp, #0
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	465b      	mov	r3, fp
 8009658:	7828      	ldrb	r0, [r5, #0]
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	f7ff feda 	bl	8009414 <__hexdig_fun>
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	f000 000f 	and.w	r0, r0, #15
 8009666:	4098      	lsls	r0, r3
 8009668:	ea4b 0b00 	orr.w	fp, fp, r0
 800966c:	3304      	adds	r3, #4
 800966e:	e7a1      	b.n	80095b4 <__gethex+0x174>
 8009670:	45a8      	cmp	r8, r5
 8009672:	d8e8      	bhi.n	8009646 <__gethex+0x206>
 8009674:	2201      	movs	r2, #1
 8009676:	4628      	mov	r0, r5
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	f7ff fde9 	bl	8009250 <strncmp>
 800967e:	4926      	ldr	r1, [pc, #152]	; (8009718 <__gethex+0x2d8>)
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	2800      	cmp	r0, #0
 8009684:	d1df      	bne.n	8009646 <__gethex+0x206>
 8009686:	e795      	b.n	80095b4 <__gethex+0x174>
 8009688:	f04f 0b03 	mov.w	fp, #3
 800968c:	e7c5      	b.n	800961a <__gethex+0x1da>
 800968e:	da0b      	bge.n	80096a8 <__gethex+0x268>
 8009690:	eba5 0800 	sub.w	r8, r5, r0
 8009694:	4621      	mov	r1, r4
 8009696:	4642      	mov	r2, r8
 8009698:	4648      	mov	r0, r9
 800969a:	f7fe f929 	bl	80078f0 <__lshift>
 800969e:	eba6 0608 	sub.w	r6, r6, r8
 80096a2:	4604      	mov	r4, r0
 80096a4:	f100 0a14 	add.w	sl, r0, #20
 80096a8:	f04f 0b00 	mov.w	fp, #0
 80096ac:	e7ba      	b.n	8009624 <__gethex+0x1e4>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	42b3      	cmp	r3, r6
 80096b2:	dd73      	ble.n	800979c <__gethex+0x35c>
 80096b4:	1b9e      	subs	r6, r3, r6
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	dc34      	bgt.n	8009724 <__gethex+0x2e4>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d023      	beq.n	8009708 <__gethex+0x2c8>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d025      	beq.n	8009710 <__gethex+0x2d0>
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d115      	bne.n	80096f4 <__gethex+0x2b4>
 80096c8:	42b5      	cmp	r5, r6
 80096ca:	d113      	bne.n	80096f4 <__gethex+0x2b4>
 80096cc:	2d01      	cmp	r5, #1
 80096ce:	d10b      	bne.n	80096e8 <__gethex+0x2a8>
 80096d0:	9a02      	ldr	r2, [sp, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	2301      	movs	r3, #1
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	f8ca 3000 	str.w	r3, [sl]
 80096de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80096e4:	601c      	str	r4, [r3, #0]
 80096e6:	e735      	b.n	8009554 <__gethex+0x114>
 80096e8:	1e69      	subs	r1, r5, #1
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7fe fb32 	bl	8007d54 <__any_on>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d1ed      	bne.n	80096d0 <__gethex+0x290>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4648      	mov	r0, r9
 80096f8:	f7fd fee0 	bl	80074bc <_Bfree>
 80096fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096fe:	2300      	movs	r3, #0
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009706:	e725      	b.n	8009554 <__gethex+0x114>
 8009708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1f2      	bne.n	80096f4 <__gethex+0x2b4>
 800970e:	e7df      	b.n	80096d0 <__gethex+0x290>
 8009710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1dc      	bne.n	80096d0 <__gethex+0x290>
 8009716:	e7ed      	b.n	80096f4 <__gethex+0x2b4>
 8009718:	0800a144 	.word	0x0800a144
 800971c:	08009fdd 	.word	0x08009fdd
 8009720:	0800a2ee 	.word	0x0800a2ee
 8009724:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009728:	f1bb 0f00 	cmp.w	fp, #0
 800972c:	d133      	bne.n	8009796 <__gethex+0x356>
 800972e:	f1b8 0f00 	cmp.w	r8, #0
 8009732:	d004      	beq.n	800973e <__gethex+0x2fe>
 8009734:	4641      	mov	r1, r8
 8009736:	4620      	mov	r0, r4
 8009738:	f7fe fb0c 	bl	8007d54 <__any_on>
 800973c:	4683      	mov	fp, r0
 800973e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009742:	2301      	movs	r3, #1
 8009744:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009748:	f008 081f 	and.w	r8, r8, #31
 800974c:	fa03 f308 	lsl.w	r3, r3, r8
 8009750:	4213      	tst	r3, r2
 8009752:	4631      	mov	r1, r6
 8009754:	4620      	mov	r0, r4
 8009756:	bf18      	it	ne
 8009758:	f04b 0b02 	orrne.w	fp, fp, #2
 800975c:	1bad      	subs	r5, r5, r6
 800975e:	f7ff fe07 	bl	8009370 <rshift>
 8009762:	687e      	ldr	r6, [r7, #4]
 8009764:	f04f 0802 	mov.w	r8, #2
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	d04a      	beq.n	8009804 <__gethex+0x3c4>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d016      	beq.n	80097a2 <__gethex+0x362>
 8009774:	2b03      	cmp	r3, #3
 8009776:	d018      	beq.n	80097aa <__gethex+0x36a>
 8009778:	2b01      	cmp	r3, #1
 800977a:	d109      	bne.n	8009790 <__gethex+0x350>
 800977c:	f01b 0f02 	tst.w	fp, #2
 8009780:	d006      	beq.n	8009790 <__gethex+0x350>
 8009782:	f8da 3000 	ldr.w	r3, [sl]
 8009786:	ea4b 0b03 	orr.w	fp, fp, r3
 800978a:	f01b 0f01 	tst.w	fp, #1
 800978e:	d10f      	bne.n	80097b0 <__gethex+0x370>
 8009790:	f048 0810 	orr.w	r8, r8, #16
 8009794:	e036      	b.n	8009804 <__gethex+0x3c4>
 8009796:	f04f 0b01 	mov.w	fp, #1
 800979a:	e7d0      	b.n	800973e <__gethex+0x2fe>
 800979c:	f04f 0801 	mov.w	r8, #1
 80097a0:	e7e2      	b.n	8009768 <__gethex+0x328>
 80097a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a4:	f1c3 0301 	rsb	r3, r3, #1
 80097a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80097aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d0ef      	beq.n	8009790 <__gethex+0x350>
 80097b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097b4:	f104 0214 	add.w	r2, r4, #20
 80097b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80097c2:	2300      	movs	r3, #0
 80097c4:	4694      	mov	ip, r2
 80097c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80097ca:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80097ce:	d01e      	beq.n	800980e <__gethex+0x3ce>
 80097d0:	3101      	adds	r1, #1
 80097d2:	f8cc 1000 	str.w	r1, [ip]
 80097d6:	f1b8 0f02 	cmp.w	r8, #2
 80097da:	f104 0214 	add.w	r2, r4, #20
 80097de:	d13d      	bne.n	800985c <__gethex+0x41c>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	d10b      	bne.n	8009800 <__gethex+0x3c0>
 80097e8:	1169      	asrs	r1, r5, #5
 80097ea:	2301      	movs	r3, #1
 80097ec:	f005 051f 	and.w	r5, r5, #31
 80097f0:	fa03 f505 	lsl.w	r5, r3, r5
 80097f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097f8:	421d      	tst	r5, r3
 80097fa:	bf18      	it	ne
 80097fc:	f04f 0801 	movne.w	r8, #1
 8009800:	f048 0820 	orr.w	r8, r8, #32
 8009804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009806:	601c      	str	r4, [r3, #0]
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	601e      	str	r6, [r3, #0]
 800980c:	e6a2      	b.n	8009554 <__gethex+0x114>
 800980e:	4290      	cmp	r0, r2
 8009810:	f842 3c04 	str.w	r3, [r2, #-4]
 8009814:	d8d6      	bhi.n	80097c4 <__gethex+0x384>
 8009816:	68a2      	ldr	r2, [r4, #8]
 8009818:	4593      	cmp	fp, r2
 800981a:	db17      	blt.n	800984c <__gethex+0x40c>
 800981c:	6861      	ldr	r1, [r4, #4]
 800981e:	4648      	mov	r0, r9
 8009820:	3101      	adds	r1, #1
 8009822:	f7fd fe0b 	bl	800743c <_Balloc>
 8009826:	4682      	mov	sl, r0
 8009828:	b918      	cbnz	r0, 8009832 <__gethex+0x3f2>
 800982a:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <__gethex+0x458>)
 800982c:	4602      	mov	r2, r0
 800982e:	2184      	movs	r1, #132	; 0x84
 8009830:	e6b3      	b.n	800959a <__gethex+0x15a>
 8009832:	6922      	ldr	r2, [r4, #16]
 8009834:	3202      	adds	r2, #2
 8009836:	f104 010c 	add.w	r1, r4, #12
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	300c      	adds	r0, #12
 800983e:	f7ff fd4b 	bl	80092d8 <memcpy>
 8009842:	4621      	mov	r1, r4
 8009844:	4648      	mov	r0, r9
 8009846:	f7fd fe39 	bl	80074bc <_Bfree>
 800984a:	4654      	mov	r4, sl
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	1c51      	adds	r1, r2, #1
 8009850:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009854:	6121      	str	r1, [r4, #16]
 8009856:	2101      	movs	r1, #1
 8009858:	6151      	str	r1, [r2, #20]
 800985a:	e7bc      	b.n	80097d6 <__gethex+0x396>
 800985c:	6921      	ldr	r1, [r4, #16]
 800985e:	4559      	cmp	r1, fp
 8009860:	dd0b      	ble.n	800987a <__gethex+0x43a>
 8009862:	2101      	movs	r1, #1
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff fd83 	bl	8009370 <rshift>
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	3601      	adds	r6, #1
 800986e:	42b3      	cmp	r3, r6
 8009870:	f6ff aedb 	blt.w	800962a <__gethex+0x1ea>
 8009874:	f04f 0801 	mov.w	r8, #1
 8009878:	e7c2      	b.n	8009800 <__gethex+0x3c0>
 800987a:	f015 051f 	ands.w	r5, r5, #31
 800987e:	d0f9      	beq.n	8009874 <__gethex+0x434>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	441a      	add	r2, r3
 8009884:	f1c5 0520 	rsb	r5, r5, #32
 8009888:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800988c:	f7fd fec8 	bl	8007620 <__hi0bits>
 8009890:	42a8      	cmp	r0, r5
 8009892:	dbe6      	blt.n	8009862 <__gethex+0x422>
 8009894:	e7ee      	b.n	8009874 <__gethex+0x434>
 8009896:	bf00      	nop
 8009898:	08009fdd 	.word	0x08009fdd

0800989c <L_shift>:
 800989c:	f1c2 0208 	rsb	r2, r2, #8
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	b570      	push	{r4, r5, r6, lr}
 80098a4:	f1c2 0620 	rsb	r6, r2, #32
 80098a8:	6843      	ldr	r3, [r0, #4]
 80098aa:	6804      	ldr	r4, [r0, #0]
 80098ac:	fa03 f506 	lsl.w	r5, r3, r6
 80098b0:	432c      	orrs	r4, r5
 80098b2:	40d3      	lsrs	r3, r2
 80098b4:	6004      	str	r4, [r0, #0]
 80098b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80098ba:	4288      	cmp	r0, r1
 80098bc:	d3f4      	bcc.n	80098a8 <L_shift+0xc>
 80098be:	bd70      	pop	{r4, r5, r6, pc}

080098c0 <__match>:
 80098c0:	b530      	push	{r4, r5, lr}
 80098c2:	6803      	ldr	r3, [r0, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	b914      	cbnz	r4, 80098d2 <__match+0x12>
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	2001      	movs	r0, #1
 80098d0:	bd30      	pop	{r4, r5, pc}
 80098d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098da:	2d19      	cmp	r5, #25
 80098dc:	bf98      	it	ls
 80098de:	3220      	addls	r2, #32
 80098e0:	42a2      	cmp	r2, r4
 80098e2:	d0f0      	beq.n	80098c6 <__match+0x6>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7f3      	b.n	80098d0 <__match+0x10>

080098e8 <__hexnan>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	680b      	ldr	r3, [r1, #0]
 80098ee:	6801      	ldr	r1, [r0, #0]
 80098f0:	115e      	asrs	r6, r3, #5
 80098f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098f6:	f013 031f 	ands.w	r3, r3, #31
 80098fa:	b087      	sub	sp, #28
 80098fc:	bf18      	it	ne
 80098fe:	3604      	addne	r6, #4
 8009900:	2500      	movs	r5, #0
 8009902:	1f37      	subs	r7, r6, #4
 8009904:	4682      	mov	sl, r0
 8009906:	4690      	mov	r8, r2
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f846 5c04 	str.w	r5, [r6, #-4]
 800990e:	46b9      	mov	r9, r7
 8009910:	463c      	mov	r4, r7
 8009912:	9502      	str	r5, [sp, #8]
 8009914:	46ab      	mov	fp, r5
 8009916:	784a      	ldrb	r2, [r1, #1]
 8009918:	1c4b      	adds	r3, r1, #1
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	b342      	cbz	r2, 8009970 <__hexnan+0x88>
 800991e:	4610      	mov	r0, r2
 8009920:	9105      	str	r1, [sp, #20]
 8009922:	9204      	str	r2, [sp, #16]
 8009924:	f7ff fd76 	bl	8009414 <__hexdig_fun>
 8009928:	2800      	cmp	r0, #0
 800992a:	d14f      	bne.n	80099cc <__hexnan+0xe4>
 800992c:	9a04      	ldr	r2, [sp, #16]
 800992e:	9905      	ldr	r1, [sp, #20]
 8009930:	2a20      	cmp	r2, #32
 8009932:	d818      	bhi.n	8009966 <__hexnan+0x7e>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	459b      	cmp	fp, r3
 8009938:	dd13      	ble.n	8009962 <__hexnan+0x7a>
 800993a:	454c      	cmp	r4, r9
 800993c:	d206      	bcs.n	800994c <__hexnan+0x64>
 800993e:	2d07      	cmp	r5, #7
 8009940:	dc04      	bgt.n	800994c <__hexnan+0x64>
 8009942:	462a      	mov	r2, r5
 8009944:	4649      	mov	r1, r9
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff ffa8 	bl	800989c <L_shift>
 800994c:	4544      	cmp	r4, r8
 800994e:	d950      	bls.n	80099f2 <__hexnan+0x10a>
 8009950:	2300      	movs	r3, #0
 8009952:	f1a4 0904 	sub.w	r9, r4, #4
 8009956:	f844 3c04 	str.w	r3, [r4, #-4]
 800995a:	f8cd b008 	str.w	fp, [sp, #8]
 800995e:	464c      	mov	r4, r9
 8009960:	461d      	mov	r5, r3
 8009962:	9903      	ldr	r1, [sp, #12]
 8009964:	e7d7      	b.n	8009916 <__hexnan+0x2e>
 8009966:	2a29      	cmp	r2, #41	; 0x29
 8009968:	d155      	bne.n	8009a16 <__hexnan+0x12e>
 800996a:	3102      	adds	r1, #2
 800996c:	f8ca 1000 	str.w	r1, [sl]
 8009970:	f1bb 0f00 	cmp.w	fp, #0
 8009974:	d04f      	beq.n	8009a16 <__hexnan+0x12e>
 8009976:	454c      	cmp	r4, r9
 8009978:	d206      	bcs.n	8009988 <__hexnan+0xa0>
 800997a:	2d07      	cmp	r5, #7
 800997c:	dc04      	bgt.n	8009988 <__hexnan+0xa0>
 800997e:	462a      	mov	r2, r5
 8009980:	4649      	mov	r1, r9
 8009982:	4620      	mov	r0, r4
 8009984:	f7ff ff8a 	bl	800989c <L_shift>
 8009988:	4544      	cmp	r4, r8
 800998a:	d934      	bls.n	80099f6 <__hexnan+0x10e>
 800998c:	f1a8 0204 	sub.w	r2, r8, #4
 8009990:	4623      	mov	r3, r4
 8009992:	f853 1b04 	ldr.w	r1, [r3], #4
 8009996:	f842 1f04 	str.w	r1, [r2, #4]!
 800999a:	429f      	cmp	r7, r3
 800999c:	d2f9      	bcs.n	8009992 <__hexnan+0xaa>
 800999e:	1b3b      	subs	r3, r7, r4
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	3304      	adds	r3, #4
 80099a6:	3e03      	subs	r6, #3
 80099a8:	3401      	adds	r4, #1
 80099aa:	42a6      	cmp	r6, r4
 80099ac:	bf38      	it	cc
 80099ae:	2304      	movcc	r3, #4
 80099b0:	4443      	add	r3, r8
 80099b2:	2200      	movs	r2, #0
 80099b4:	f843 2b04 	str.w	r2, [r3], #4
 80099b8:	429f      	cmp	r7, r3
 80099ba:	d2fb      	bcs.n	80099b4 <__hexnan+0xcc>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	b91b      	cbnz	r3, 80099c8 <__hexnan+0xe0>
 80099c0:	4547      	cmp	r7, r8
 80099c2:	d126      	bne.n	8009a12 <__hexnan+0x12a>
 80099c4:	2301      	movs	r3, #1
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	2005      	movs	r0, #5
 80099ca:	e025      	b.n	8009a18 <__hexnan+0x130>
 80099cc:	3501      	adds	r5, #1
 80099ce:	2d08      	cmp	r5, #8
 80099d0:	f10b 0b01 	add.w	fp, fp, #1
 80099d4:	dd06      	ble.n	80099e4 <__hexnan+0xfc>
 80099d6:	4544      	cmp	r4, r8
 80099d8:	d9c3      	bls.n	8009962 <__hexnan+0x7a>
 80099da:	2300      	movs	r3, #0
 80099dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80099e0:	2501      	movs	r5, #1
 80099e2:	3c04      	subs	r4, #4
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	f000 000f 	and.w	r0, r0, #15
 80099ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	e7b7      	b.n	8009962 <__hexnan+0x7a>
 80099f2:	2508      	movs	r5, #8
 80099f4:	e7b5      	b.n	8009962 <__hexnan+0x7a>
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0df      	beq.n	80099bc <__hexnan+0xd4>
 80099fc:	f1c3 0320 	rsb	r3, r3, #32
 8009a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a04:	40da      	lsrs	r2, r3
 8009a06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a10:	e7d4      	b.n	80099bc <__hexnan+0xd4>
 8009a12:	3f04      	subs	r7, #4
 8009a14:	e7d2      	b.n	80099bc <__hexnan+0xd4>
 8009a16:	2004      	movs	r0, #4
 8009a18:	b007      	add	sp, #28
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a1e <__ascii_mbtowc>:
 8009a1e:	b082      	sub	sp, #8
 8009a20:	b901      	cbnz	r1, 8009a24 <__ascii_mbtowc+0x6>
 8009a22:	a901      	add	r1, sp, #4
 8009a24:	b142      	cbz	r2, 8009a38 <__ascii_mbtowc+0x1a>
 8009a26:	b14b      	cbz	r3, 8009a3c <__ascii_mbtowc+0x1e>
 8009a28:	7813      	ldrb	r3, [r2, #0]
 8009a2a:	600b      	str	r3, [r1, #0]
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	1e10      	subs	r0, r2, #0
 8009a30:	bf18      	it	ne
 8009a32:	2001      	movne	r0, #1
 8009a34:	b002      	add	sp, #8
 8009a36:	4770      	bx	lr
 8009a38:	4610      	mov	r0, r2
 8009a3a:	e7fb      	b.n	8009a34 <__ascii_mbtowc+0x16>
 8009a3c:	f06f 0001 	mvn.w	r0, #1
 8009a40:	e7f8      	b.n	8009a34 <__ascii_mbtowc+0x16>

08009a42 <_realloc_r>:
 8009a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	4680      	mov	r8, r0
 8009a48:	4614      	mov	r4, r2
 8009a4a:	460e      	mov	r6, r1
 8009a4c:	b921      	cbnz	r1, 8009a58 <_realloc_r+0x16>
 8009a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	4611      	mov	r1, r2
 8009a54:	f7fd bc66 	b.w	8007324 <_malloc_r>
 8009a58:	b92a      	cbnz	r2, 8009a66 <_realloc_r+0x24>
 8009a5a:	f7fd fbef 	bl	800723c <_free_r>
 8009a5e:	4625      	mov	r5, r4
 8009a60:	4628      	mov	r0, r5
 8009a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a66:	f000 f842 	bl	8009aee <_malloc_usable_size_r>
 8009a6a:	4284      	cmp	r4, r0
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	d802      	bhi.n	8009a76 <_realloc_r+0x34>
 8009a70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a74:	d812      	bhi.n	8009a9c <_realloc_r+0x5a>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4640      	mov	r0, r8
 8009a7a:	f7fd fc53 	bl	8007324 <_malloc_r>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0ed      	beq.n	8009a60 <_realloc_r+0x1e>
 8009a84:	42bc      	cmp	r4, r7
 8009a86:	4622      	mov	r2, r4
 8009a88:	4631      	mov	r1, r6
 8009a8a:	bf28      	it	cs
 8009a8c:	463a      	movcs	r2, r7
 8009a8e:	f7ff fc23 	bl	80092d8 <memcpy>
 8009a92:	4631      	mov	r1, r6
 8009a94:	4640      	mov	r0, r8
 8009a96:	f7fd fbd1 	bl	800723c <_free_r>
 8009a9a:	e7e1      	b.n	8009a60 <_realloc_r+0x1e>
 8009a9c:	4635      	mov	r5, r6
 8009a9e:	e7df      	b.n	8009a60 <_realloc_r+0x1e>

08009aa0 <__ascii_wctomb>:
 8009aa0:	b149      	cbz	r1, 8009ab6 <__ascii_wctomb+0x16>
 8009aa2:	2aff      	cmp	r2, #255	; 0xff
 8009aa4:	bf85      	ittet	hi
 8009aa6:	238a      	movhi	r3, #138	; 0x8a
 8009aa8:	6003      	strhi	r3, [r0, #0]
 8009aaa:	700a      	strbls	r2, [r1, #0]
 8009aac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ab0:	bf98      	it	ls
 8009ab2:	2001      	movls	r0, #1
 8009ab4:	4770      	bx	lr
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4770      	bx	lr
	...

08009abc <fiprintf>:
 8009abc:	b40e      	push	{r1, r2, r3}
 8009abe:	b503      	push	{r0, r1, lr}
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	ab03      	add	r3, sp, #12
 8009ac4:	4805      	ldr	r0, [pc, #20]	; (8009adc <fiprintf+0x20>)
 8009ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	f7ff f97b 	bl	8008dc8 <_vfiprintf_r>
 8009ad2:	b002      	add	sp, #8
 8009ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad8:	b003      	add	sp, #12
 8009ada:	4770      	bx	lr
 8009adc:	2000007c 	.word	0x2000007c

08009ae0 <abort>:
 8009ae0:	b508      	push	{r3, lr}
 8009ae2:	2006      	movs	r0, #6
 8009ae4:	f000 f834 	bl	8009b50 <raise>
 8009ae8:	2001      	movs	r0, #1
 8009aea:	f7f8 fdb7 	bl	800265c <_exit>

08009aee <_malloc_usable_size_r>:
 8009aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af2:	1f18      	subs	r0, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bfbc      	itt	lt
 8009af8:	580b      	ldrlt	r3, [r1, r0]
 8009afa:	18c0      	addlt	r0, r0, r3
 8009afc:	4770      	bx	lr

08009afe <_raise_r>:
 8009afe:	291f      	cmp	r1, #31
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	460d      	mov	r5, r1
 8009b06:	d904      	bls.n	8009b12 <_raise_r+0x14>
 8009b08:	2316      	movs	r3, #22
 8009b0a:	6003      	str	r3, [r0, #0]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b14:	b112      	cbz	r2, 8009b1c <_raise_r+0x1e>
 8009b16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b1a:	b94b      	cbnz	r3, 8009b30 <_raise_r+0x32>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 f831 	bl	8009b84 <_getpid_r>
 8009b22:	462a      	mov	r2, r5
 8009b24:	4601      	mov	r1, r0
 8009b26:	4620      	mov	r0, r4
 8009b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b2c:	f000 b818 	b.w	8009b60 <_kill_r>
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d00a      	beq.n	8009b4a <_raise_r+0x4c>
 8009b34:	1c59      	adds	r1, r3, #1
 8009b36:	d103      	bne.n	8009b40 <_raise_r+0x42>
 8009b38:	2316      	movs	r3, #22
 8009b3a:	6003      	str	r3, [r0, #0]
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	e7e7      	b.n	8009b10 <_raise_r+0x12>
 8009b40:	2400      	movs	r4, #0
 8009b42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b46:	4628      	mov	r0, r5
 8009b48:	4798      	blx	r3
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e7e0      	b.n	8009b10 <_raise_r+0x12>
	...

08009b50 <raise>:
 8009b50:	4b02      	ldr	r3, [pc, #8]	; (8009b5c <raise+0xc>)
 8009b52:	4601      	mov	r1, r0
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f7ff bfd2 	b.w	8009afe <_raise_r>
 8009b5a:	bf00      	nop
 8009b5c:	2000007c 	.word	0x2000007c

08009b60 <_kill_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	; (8009b80 <_kill_r+0x20>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	f7f8 fd65 	bl	800263c <_kill>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d102      	bne.n	8009b7c <_kill_r+0x1c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	b103      	cbz	r3, 8009b7c <_kill_r+0x1c>
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000550 	.word	0x20000550

08009b84 <_getpid_r>:
 8009b84:	f7f8 bd52 	b.w	800262c <_getpid>

08009b88 <_init>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr

08009b94 <_fini>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr
