
Practica_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003618  08003618  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001d0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000095e6  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d2f  00000000  00000000  000296d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000888  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000065b  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000269d9  00000000  00000000  0002c2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e69e  00000000  00000000  00052cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3712  00000000  00000000  0006135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000275c  00000000  00000000  00144a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  001471c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003568 	.word	0x08003568

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08003568 	.word	0x08003568

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <debounceFSM_init>:
static debounceState_t EstadoActual;
static bool_t btnPress; //boton presionado
static bool_t flanco_A=false; //boton presionado
static bool_t flanco_D=false; //boton presionado

void debounceFSM_init() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	EstadoActual = BUTTON_UP;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <debounceFSM_init+0x18>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	delayInit(&t1, Time_AntiRebote);
 8000596:	2128      	movs	r1, #40	; 0x28
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <debounceFSM_init+0x1c>)
 800059a:	f000 f8cd 	bl	8000738 <delayInit>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000a0 	.word	0x200000a0
 80005a8:	20000094 	.word	0x20000094

080005ac <debounceFSM_update>:



void debounceFSM_update() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	switch (EstadoActual) {
 80005b0:	4b37      	ldr	r3, [pc, #220]	; (8000690 <debounceFSM_update+0xe4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d860      	bhi.n	800067a <debounceFSM_update+0xce>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <debounceFSM_update+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005eb 	.word	0x080005eb
 80005c8:	08000623 	.word	0x08000623
 80005cc:	08000641 	.word	0x08000641

	case BUTTON_UP:

		if (BSP_PB_GetState(BUTTON_USER)) {  //presiono el boton
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fa29 	bl	8000a28 <BSP_PB_GetState>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d051      	beq.n	8000680 <debounceFSM_update+0xd4>
			delayRead(&t1);
 80005dc:	482d      	ldr	r0, [pc, #180]	; (8000694 <debounceFSM_update+0xe8>)
 80005de:	f000 f8c2 	bl	8000766 <delayRead>
			EstadoActual = BUTTON_FALLING;
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <debounceFSM_update+0xe4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005e8:	e04a      	b.n	8000680 <debounceFSM_update+0xd4>

	case BUTTON_FALLING:

		if (delayRead(&t1)) { // se cumplio los 40 ms
 80005ea:	482a      	ldr	r0, [pc, #168]	; (8000694 <debounceFSM_update+0xe8>)
 80005ec:	f000 f8bb 	bl	8000766 <delayRead>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d046      	beq.n	8000684 <debounceFSM_update+0xd8>
			if (BSP_PB_GetState(BUTTON_USER)) {  //SI ESTA PRESIONADO PRENDO EL LED
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fa16 	bl	8000a28 <BSP_PB_GetState>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00b      	beq.n	800061a <debounceFSM_update+0x6e>
				//delayRead(&t1);
				//BSP_LED_On(LED1);
				buttonPressed();
 8000602:	f000 f84f 	bl	80006a4 <buttonPressed>
				flanco_D=true;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <debounceFSM_update+0xec>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
				//flanco_A=false;
				btnPress=true;
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <debounceFSM_update+0xf0>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
				EstadoActual = BUTTON_DOWN;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <debounceFSM_update+0xe4>)
 8000614:	2202      	movs	r2, #2
 8000616:	701a      	strb	r2, [r3, #0]
			} else {
				EstadoActual = BUTTON_UP;

			}
		}
		break;
 8000618:	e034      	b.n	8000684 <debounceFSM_update+0xd8>
				EstadoActual = BUTTON_UP;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <debounceFSM_update+0xe4>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
		break;
 8000620:	e030      	b.n	8000684 <debounceFSM_update+0xd8>

	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) { // el pulsador esta en estado bajo
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fa00 	bl	8000a28 <BSP_PB_GetState>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d12c      	bne.n	8000688 <debounceFSM_update+0xdc>
			delayRead(&t1); //comienza el timer
 800062e:	4819      	ldr	r0, [pc, #100]	; (8000694 <debounceFSM_update+0xe8>)
 8000630:	f000 f899 	bl	8000766 <delayRead>
			readKey();
 8000634:	f000 f83e 	bl	80006b4 <readKey>
			EstadoActual = BUTTON_RAISING;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <debounceFSM_update+0xe4>)
 800063a:	2203      	movs	r2, #3
 800063c:	701a      	strb	r2, [r3, #0]
		}

		//delayWrite(&t1, Time_AntiRebote);
		break;
 800063e:	e023      	b.n	8000688 <debounceFSM_update+0xdc>
	case BUTTON_RAISING:

		if (delayRead(&t1)) {
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <debounceFSM_update+0xe8>)
 8000642:	f000 f890 	bl	8000766 <delayRead>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01e      	beq.n	800068a <debounceFSM_update+0xde>
			if (!BSP_PB_GetState(BUTTON_USER)) {
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f9eb 	bl	8000a28 <BSP_PB_GetState>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10c      	bne.n	8000672 <debounceFSM_update+0xc6>
				//delayRead(&t1);
				//buttonPressed();
				BSP_LED_Off(LED1);
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f975 	bl	8000948 <BSP_LED_Off>
				btnPress=true;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <debounceFSM_update+0xf0>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
				flanco_A=true;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <debounceFSM_update+0xf4>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
				//flanco_D=false;
				EstadoActual = BUTTON_UP;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <debounceFSM_update+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
			} else
				EstadoActual = BUTTON_DOWN;

			break;
 8000670:	e00b      	b.n	800068a <debounceFSM_update+0xde>
				EstadoActual = BUTTON_DOWN;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <debounceFSM_update+0xe4>)
 8000674:	2202      	movs	r2, #2
 8000676:	701a      	strb	r2, [r3, #0]
			break;
 8000678:	e007      	b.n	800068a <debounceFSM_update+0xde>
			default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			debounceFSM_init();
 800067a:	f7ff ff87 	bl	800058c <debounceFSM_init>

			break;
 800067e:	e004      	b.n	800068a <debounceFSM_update+0xde>
		break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <debounceFSM_update+0xde>
		break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <debounceFSM_update+0xde>
		break;
 8000688:	bf00      	nop

		}
	}

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000a0 	.word	0x200000a0
 8000694:	20000094 	.word	0x20000094
 8000698:	200000a3 	.word	0x200000a3
 800069c:	200000a1 	.word	0x200000a1
 80006a0:	200000a2 	.word	0x200000a2

080006a4 <buttonPressed>:

 void buttonPressed(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	BSP_LED_On(LED1);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 f933 	bl	8000914 <BSP_LED_On>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <readKey>:
void buttonReleased(){
	BSP_LED_Off(LED1);
}

bool_t readKey()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

	if(btnPress){
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <readKey+0x24>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <readKey+0x16>
		btnPress=false;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <readKey+0x24>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		return true;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <readKey+0x18>
	}else
		return false;
 80006ca:	2300      	movs	r3, #0

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000a1 	.word	0x200000a1

080006dc <Detecto_flanco_A>:

bool_t  Detecto_flanco_A(){
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

	if(flanco_A){
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <Detecto_flanco_A+0x24>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <Detecto_flanco_A+0x16>
		flanco_A=false;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <Detecto_flanco_A+0x24>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
		return true;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <Detecto_flanco_A+0x18>
	}

	else
       return false;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200000a2 	.word	0x200000a2

08000704 <Detecto_flanco_D>:

bool_t  Detecto_flanco_D(){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

	if(flanco_D){
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <Detecto_flanco_D+0x24>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <Detecto_flanco_D+0x16>
		flanco_D=false;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <Detecto_flanco_D+0x24>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		return true;
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <Detecto_flanco_D+0x18>
	}
	else
        return false;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200000a3 	.word	0x200000a3

0800072c <Error_Handler>:
#include <API_delay.h>

static void Error_Handler(void);

static void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 f8ef 	bl	8000914 <BSP_LED_On>
  while (1)
 8000736:	e7fe      	b.n	8000736 <Error_Handler+0xa>

08000738 <delayInit>:
  }
}



void delayInit(delay_t *delay, tick_t duration) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	/* Initializatio ERROR*/
	if(delay==NULL || duration==0)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <delayInit+0x16>
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <delayInit+0x1a>
		Error_Handler();
 800074e:	f7ff ffed 	bl	800072c <Error_Handler>

	delay->duration = duration;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	721a      	strb	r2, [r3, #8]
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <delayRead>:

 bool_t delayRead( delay_t * delay ){
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	 tick_t diff=0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]

	 /* Initializatio ERROR*/
	 if(delay==NULL)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <delayRead+0x16>
	 		Error_Handler();
 8000778:	f7ff ffd8 	bl	800072c <Error_Handler>


	 if(!delay->running){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <delayRead+0x34>

		  delay->startTime=HAL_GetTick(); //se asigna el valor cada 1mms
 800078a:	f000 facb 	bl	8000d24 <HAL_GetTick>
 800078e:	4602      	mov	r2, r0
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	601a      	str	r2, [r3, #0]
		  delay->running = true;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2201      	movs	r2, #1
 8000798:	721a      	strb	r2, [r3, #8]

		 // return false;
	  }

	 diff=(HAL_GetTick() - delay->startTime);
 800079a:	f000 fac3 	bl	8000d24 <HAL_GetTick>
 800079e:	4602      	mov	r2, r0
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	60fb      	str	r3, [r7, #12]

	 if (diff>= delay->duration) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d304      	bcc.n	80007bc <delayRead+0x56>

			delay->running = false;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2200      	movs	r2, #0
 80007b6:	721a      	strb	r2, [r3, #8]

			return true;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <delayRead+0x58>
		}
		  else
			return false;
 80007bc:	2300      	movs	r3, #0
	  }
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <uartInit>:



/* Inicializa la uart, devuelve un true si fue exitoso o un false si hubo un error */
bool_t uartInit()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <uartInit+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <uartInit+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate     = 9600;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <uartInit+0x4c>)
 80007d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d8:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <uartInit+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <uartInit+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <uartInit+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <uartInit+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <uartInit+0x4c>)
 80007f4:	220c      	movs	r2, #12
 80007f6:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <uartInit+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <uartInit+0x4c>)
 8000800:	f001 face 	bl	8001da0 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <uartInit+0x46>
	{
		/* Initialization Error */
		return false;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <uartInit+0x48>
	}



	return true;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000a4 	.word	0x200000a4
 8000818:	40004800 	.word	0x40004800

0800081c <uartSendString>:


void uartSendString(uint8_t *pstring)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	do {
		HAL_UART_Transmit(&UartHandle, pstring, 1, 0xFFFF);
 8000824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000828:	2201      	movs	r2, #1
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <uartSendString+0x30>)
 800082e:	f001 fb04 	bl	8001e3a <HAL_UART_Transmit>
		pstring++;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3301      	adds	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
	} while (*pstring != '\0');
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f1      	bne.n	8000824 <uartSendString+0x8>



}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000a4 	.word	0x200000a4

08000850 <__io_putchar>:
{
	HAL_UART_Receive(&UartHandle, pstring, size, 0xFFFF);
}

PUTCHAR_PROTOTYPE
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) &ch, 1, 0xFFFF);
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <__io_putchar+0x20>)
 8000862:	f001 faea 	bl	8001e3a <HAL_UART_Transmit>

	return ch;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000a4 	.word	0x200000a4

08000874 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10e      	bne.n	80008a2 <BSP_LED_Init+0x2e>
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <BSP_LED_Init+0x94>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <BSP_LED_Init+0x94>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <BSP_LED_Init+0x94>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	e00d      	b.n	80008be <BSP_LED_Init+0x4a>
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <BSP_LED_Init+0x94>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <BSP_LED_Init+0x94>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <BSP_LED_Init+0x94>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <BSP_LED_Init+0x98>)
 80008c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <BSP_LED_Init+0x9c>)
 80008d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008dc:	f107 0214 	add.w	r2, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fb3c 	bl	8000f60 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <BSP_LED_Init+0x9c>)
 80008ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <BSP_LED_Init+0x98>)
 80008f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	f000 fcf4 	bl	80012e8 <HAL_GPIO_WritePin>
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	080035bc 	.word	0x080035bc
 8000910:	20000000 	.word	0x20000000

08000914 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <BSP_LED_On+0x2c>)
 8000922:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <BSP_LED_On+0x30>)
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	f000 fcd9 	bl	80012e8 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000
 8000944:	080035bc 	.word	0x080035bc

08000948 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <BSP_LED_Off+0x2c>)
 8000956:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <BSP_LED_Off+0x30>)
 800095e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	f000 fcbf 	bl	80012e8 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000
 8000978:	080035bc 	.word	0x080035bc

0800097c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <BSP_PB_Init+0xa4>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <BSP_PB_Init+0xa4>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <BSP_PB_Init+0xa4>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d112      	bne.n	80009d4 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <BSP_PB_Init+0xa8>)
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fac6 	bl	8000f60 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d11d      	bne.n	8000a16 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80009da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80009e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <BSP_PB_Init+0xa8>)
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	f107 020c 	add.w	r2, r7, #12
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fab1 	bl	8000f60 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009fe:	2328      	movs	r3, #40	; 0x28
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa73 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a0c:	2328      	movs	r3, #40	; 0x28
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fa8a 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	2000000c 	.word	0x2000000c

08000a28 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <BSP_PB_GetState+0x28>)
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fc39 	bl	80012b8 <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000000c 	.word	0x2000000c

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SystemInit+0x60>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <SystemInit+0x60>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <SystemInit+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <SystemInit+0x64>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SystemInit+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <SystemInit+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <SystemInit+0x64>)
 8000a80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <SystemInit+0x64>)
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <SystemInit+0x68>)
 8000a8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <SystemInit+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <SystemInit+0x64>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x60>)
 8000aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa8:	609a      	str	r2, [r3, #8]
#endif
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	24003010 	.word	0x24003010

08000ac0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b14:	f000 f8f2 	bl	8000cfc <HAL_IncTick>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
	}

return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe6d 	bl	8000850 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
	}
	return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f001 fecc 	bl	80029c4 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20030000 	.word	0x20030000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200000e8 	.word	0x200000e8
 8000c60:	20000248 	.word	0x20000248

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x34>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x34>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x34>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x34>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f92b 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f000 fb98 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f943 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd8:	f000 f90b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	20000018 	.word	0x20000018
 8000cf8:	20000014 	.word	0x20000014

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000018 	.word	0x20000018
 8000d20:	200000ec 	.word	0x200000ec

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200000ec 	.word	0x200000ec

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff3e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e177      	b.n	800126c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8166 	bne.w	8001266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80c0 	beq.w	8001266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a65      	ldr	r2, [pc, #404]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a61      	ldr	r2, [pc, #388]	; (8001288 <HAL_GPIO_Init+0x328>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d037      	beq.n	800119e <HAL_GPIO_Init+0x23e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a57      	ldr	r2, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d031      	beq.n	800119a <HAL_GPIO_Init+0x23a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x334>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x236>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a55      	ldr	r2, [pc, #340]	; (8001298 <HAL_GPIO_Init+0x338>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x232>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a54      	ldr	r2, [pc, #336]	; (800129c <HAL_GPIO_Init+0x33c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x22e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a53      	ldr	r2, [pc, #332]	; (80012a0 <HAL_GPIO_Init+0x340>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x22a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_GPIO_Init+0x344>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x226>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x348>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x222>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x34c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x21e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x21a>
 8001176:	2309      	movs	r3, #9
 8001178:	e012      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800117a:	230a      	movs	r3, #10
 800117c:	e010      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800117e:	2308      	movs	r3, #8
 8001180:	e00e      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001182:	2307      	movs	r3, #7
 8001184:	e00c      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001186:	2306      	movs	r3, #6
 8001188:	e00a      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800118a:	2305      	movs	r3, #5
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800118e:	2304      	movs	r3, #4
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x328>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e2:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_GPIO_Init+0x354>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x354>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f ae84 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40022400 	.word	0x40022400
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_UART_MspInit+0xa0>)
 8001396:	f7ff fde3 	bl	8000f60 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <HAL_UART_MspInit+0xa0>)
 80013ac:	f7ff fdd8 	bl	8000f60 <HAL_GPIO_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_PWREx_EnableOverDrive+0x90>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_PWREx_EnableOverDrive+0x90>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_PWREx_EnableOverDrive+0x90>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_PWREx_EnableOverDrive+0x94>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff fc92 	bl	8000d24 <HAL_GetTick>
 8001400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001402:	e009      	b.n	8001418 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001404:	f7ff fc8e 	bl	8000d24 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001412:	d901      	bls.n	8001418 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e01f      	b.n	8001458 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_PWREx_EnableOverDrive+0x98>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d1ee      	bne.n	8001404 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fc7a 	bl	8000d24 <HAL_GetTick>
 8001430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001432:	e009      	b.n	8001448 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001434:	f7ff fc76 	bl	8000d24 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001442:	d901      	bls.n	8001448 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e007      	b.n	8001458 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_PWREx_EnableOverDrive+0x98>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001454:	d1ee      	bne.n	8001434 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	420e0040 	.word	0x420e0040
 8001468:	40007000 	.word	0x40007000
 800146c:	420e0044 	.word	0x420e0044

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fbfc 	bl	8000d24 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fbf8 	bl	8000d24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fbe8 	bl	8000d24 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fbe4 	bl	8000d24 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb9d 	bl	8000d24 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb99 	bl	8000d24 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb7c 	bl	8000d24 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fb78 	bl	8000d24 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fb5c 	bl	8000d24 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fb58 	bl	8000d24 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb45 	bl	8000d24 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fb41 	bl	8000d24 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb01 	bl	8000d24 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fafd 	bl	8000d24 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fac2 	bl	8000d24 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fabe 	bl	8000d24 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff faac 	bl	8000d24 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff faa8 	bl	8000d24 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa7c 	bl	8000d24 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fa78 	bl	8000d24 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa51 	bl	8000d24 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fa4d 	bl	8000d24 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa3a 	bl	8000d24 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa36 	bl	8000d24 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f968 	bl	8000d24 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f964 	bl	8000d24 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f8c8 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	080035c4 	.word	0x080035c4
 8001b24:	20000010 	.word	0x20000010
 8001b28:	20000014 	.word	0x20000014

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b094      	sub	sp, #80	; 0x50
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80e1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b64:	e0db      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	6139      	str	r1, [r7, #16]
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4651      	mov	r1, sl
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ebb2 0801 	subs.w	r8, r2, r1
 8001be4:	4659      	mov	r1, fp
 8001be6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	eb49 0303 	adc.w	r3, r9, r3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	024b      	lsls	r3, r1, #9
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c28:	4621      	mov	r1, r4
 8001c2a:	024a      	lsls	r2, r1, #9
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c3c:	f7fe fb28 	bl	8000290 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4611      	mov	r1, r2
 8001c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf0:	f7fe face 	bl	8000290 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3750      	adds	r7, #80	; 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000010 	.word	0x20000010

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	080035d4 	.word	0x080035d4

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080035d4 	.word	0x080035d4

08001da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e03f      	b.n	8001e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff faa8 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f929 	bl	800203c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af02      	add	r7, sp, #8
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d17c      	bne.n	8001f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_UART_Transmit+0x2c>
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e075      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Transmit+0x3e>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e06e      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe ff49 	bl	8000d24 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ecc:	e02a      	b.n	8001f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f840 	bl	8001f5e <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e036      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10b      	bne.n	8001f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3302      	adds	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	e007      	b.n	8001f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1cf      	bne.n	8001ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f810 	bl	8001f5e <UART_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b090      	sub	sp, #64	; 0x40
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f6e:	e050      	b.n	8002012 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f76:	d04c      	beq.n	8002012 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f7e:	f7fe fed1 	bl	8000d24 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d241      	bcs.n	8002012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	330c      	adds	r3, #12
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	e853 3f00 	ldrex	r3, [r3]
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	330c      	adds	r3, #12
 8001fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fae:	637a      	str	r2, [r7, #52]	; 0x34
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	e841 2300 	strex	r3, r2, [r1]
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e5      	bne.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe2:	623a      	str	r2, [r7, #32]
 8001fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	69f9      	ldr	r1, [r7, #28]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e5      	bne.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e00f      	b.n	8002032 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4013      	ands	r3, r2
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	429a      	cmp	r2, r3
 800202e:	d09f      	beq.n	8001f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3740      	adds	r7, #64	; 0x40
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b0c0      	sub	sp, #256	; 0x100
 8002042:	af00      	add	r7, sp, #0
 8002044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	ea40 0301 	orr.w	r3, r0, r1
 8002064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	431a      	orrs	r2, r3
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002094:	f021 010c 	bic.w	r1, r1, #12
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020a2:	430b      	orrs	r3, r1
 80020a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b6:	6999      	ldr	r1, [r3, #24]
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	ea40 0301 	orr.w	r3, r0, r1
 80020c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b8f      	ldr	r3, [pc, #572]	; (8002308 <UART_SetConfig+0x2cc>)
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d005      	beq.n	80020dc <UART_SetConfig+0xa0>
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b8d      	ldr	r3, [pc, #564]	; (800230c <UART_SetConfig+0x2d0>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	d104      	bne.n	80020e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020dc:	f7ff fe4c 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80020e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020e4:	e003      	b.n	80020ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020e6:	f7ff fe33 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 80020ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f8:	f040 810c 	bne.w	8002314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002100:	2200      	movs	r2, #0
 8002102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800210a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800210e:	4622      	mov	r2, r4
 8002110:	462b      	mov	r3, r5
 8002112:	1891      	adds	r1, r2, r2
 8002114:	65b9      	str	r1, [r7, #88]	; 0x58
 8002116:	415b      	adcs	r3, r3
 8002118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800211a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800211e:	4621      	mov	r1, r4
 8002120:	eb12 0801 	adds.w	r8, r2, r1
 8002124:	4629      	mov	r1, r5
 8002126:	eb43 0901 	adc.w	r9, r3, r1
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800213a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	4623      	mov	r3, r4
 8002144:	eb18 0303 	adds.w	r3, r8, r3
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800214c:	462b      	mov	r3, r5
 800214e:	eb49 0303 	adc.w	r3, r9, r3
 8002152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800216a:	460b      	mov	r3, r1
 800216c:	18db      	adds	r3, r3, r3
 800216e:	653b      	str	r3, [r7, #80]	; 0x50
 8002170:	4613      	mov	r3, r2
 8002172:	eb42 0303 	adc.w	r3, r2, r3
 8002176:	657b      	str	r3, [r7, #84]	; 0x54
 8002178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800217c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002180:	f7fe f886 	bl	8000290 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <UART_SetConfig+0x2d4>)
 800218a:	fba3 2302 	umull	r2, r3, r3, r2
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	011c      	lsls	r4, r3, #4
 8002192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002196:	2200      	movs	r2, #0
 8002198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800219c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021a4:	4642      	mov	r2, r8
 80021a6:	464b      	mov	r3, r9
 80021a8:	1891      	adds	r1, r2, r2
 80021aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80021ac:	415b      	adcs	r3, r3
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021b4:	4641      	mov	r1, r8
 80021b6:	eb12 0a01 	adds.w	sl, r2, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	eb43 0b01 	adc.w	fp, r3, r1
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021d4:	4692      	mov	sl, r2
 80021d6:	469b      	mov	fp, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	eb1a 0303 	adds.w	r3, sl, r3
 80021de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021e2:	464b      	mov	r3, r9
 80021e4:	eb4b 0303 	adc.w	r3, fp, r3
 80021e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002200:	460b      	mov	r3, r1
 8002202:	18db      	adds	r3, r3, r3
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
 8002206:	4613      	mov	r3, r2
 8002208:	eb42 0303 	adc.w	r3, r2, r3
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
 800220e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002216:	f7fe f83b 	bl	8000290 <__aeabi_uldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4611      	mov	r1, r2
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <UART_SetConfig+0x2d4>)
 8002222:	fba3 2301 	umull	r2, r3, r3, r1
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <UART_SetConfig+0x2d4>)
 8002238:	fba3 2302 	umull	r2, r3, r3, r2
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002244:	441c      	add	r4, r3
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002258:	4642      	mov	r2, r8
 800225a:	464b      	mov	r3, r9
 800225c:	1891      	adds	r1, r2, r2
 800225e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002260:	415b      	adcs	r3, r3
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002268:	4641      	mov	r1, r8
 800226a:	1851      	adds	r1, r2, r1
 800226c:	6339      	str	r1, [r7, #48]	; 0x30
 800226e:	4649      	mov	r1, r9
 8002270:	414b      	adcs	r3, r1
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002280:	4659      	mov	r1, fp
 8002282:	00cb      	lsls	r3, r1, #3
 8002284:	4651      	mov	r1, sl
 8002286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228a:	4651      	mov	r1, sl
 800228c:	00ca      	lsls	r2, r1, #3
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	4603      	mov	r3, r0
 8002294:	4642      	mov	r2, r8
 8002296:	189b      	adds	r3, r3, r2
 8002298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800229c:	464b      	mov	r3, r9
 800229e:	460a      	mov	r2, r1
 80022a0:	eb42 0303 	adc.w	r3, r2, r3
 80022a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022bc:	460b      	mov	r3, r1
 80022be:	18db      	adds	r3, r3, r3
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c2:	4613      	mov	r3, r2
 80022c4:	eb42 0303 	adc.w	r3, r2, r3
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022d2:	f7fd ffdd 	bl	8000290 <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <UART_SetConfig+0x2d4>)
 80022dc:	fba3 1302 	umull	r1, r3, r3, r2
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	2164      	movs	r1, #100	; 0x64
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	3332      	adds	r3, #50	; 0x32
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <UART_SetConfig+0x2d4>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	f003 0207 	and.w	r2, r3, #7
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4422      	add	r2, r4
 8002302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002304:	e106      	b.n	8002514 <UART_SetConfig+0x4d8>
 8002306:	bf00      	nop
 8002308:	40011000 	.word	0x40011000
 800230c:	40011400 	.word	0x40011400
 8002310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002318:	2200      	movs	r2, #0
 800231a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800231e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002326:	4642      	mov	r2, r8
 8002328:	464b      	mov	r3, r9
 800232a:	1891      	adds	r1, r2, r2
 800232c:	6239      	str	r1, [r7, #32]
 800232e:	415b      	adcs	r3, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002336:	4641      	mov	r1, r8
 8002338:	1854      	adds	r4, r2, r1
 800233a:	4649      	mov	r1, r9
 800233c:	eb43 0501 	adc.w	r5, r3, r1
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	00eb      	lsls	r3, r5, #3
 800234a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234e:	00e2      	lsls	r2, r4, #3
 8002350:	4614      	mov	r4, r2
 8002352:	461d      	mov	r5, r3
 8002354:	4643      	mov	r3, r8
 8002356:	18e3      	adds	r3, r4, r3
 8002358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800235c:	464b      	mov	r3, r9
 800235e:	eb45 0303 	adc.w	r3, r5, r3
 8002362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002382:	4629      	mov	r1, r5
 8002384:	008b      	lsls	r3, r1, #2
 8002386:	4621      	mov	r1, r4
 8002388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800238c:	4621      	mov	r1, r4
 800238e:	008a      	lsls	r2, r1, #2
 8002390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002394:	f7fd ff7c 	bl	8000290 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4b60      	ldr	r3, [pc, #384]	; (8002520 <UART_SetConfig+0x4e4>)
 800239e:	fba3 2302 	umull	r2, r3, r3, r2
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	011c      	lsls	r4, r3, #4
 80023a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023b8:	4642      	mov	r2, r8
 80023ba:	464b      	mov	r3, r9
 80023bc:	1891      	adds	r1, r2, r2
 80023be:	61b9      	str	r1, [r7, #24]
 80023c0:	415b      	adcs	r3, r3
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c8:	4641      	mov	r1, r8
 80023ca:	1851      	adds	r1, r2, r1
 80023cc:	6139      	str	r1, [r7, #16]
 80023ce:	4649      	mov	r1, r9
 80023d0:	414b      	adcs	r3, r1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e0:	4659      	mov	r1, fp
 80023e2:	00cb      	lsls	r3, r1, #3
 80023e4:	4651      	mov	r1, sl
 80023e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ea:	4651      	mov	r1, sl
 80023ec:	00ca      	lsls	r2, r1, #3
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	4642      	mov	r2, r8
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023fc:	464b      	mov	r3, r9
 80023fe:	460a      	mov	r2, r1
 8002400:	eb42 0303 	adc.w	r3, r2, r3
 8002404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	67bb      	str	r3, [r7, #120]	; 0x78
 8002412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002420:	4649      	mov	r1, r9
 8002422:	008b      	lsls	r3, r1, #2
 8002424:	4641      	mov	r1, r8
 8002426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800242a:	4641      	mov	r1, r8
 800242c:	008a      	lsls	r2, r1, #2
 800242e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002432:	f7fd ff2d 	bl	8000290 <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4611      	mov	r1, r2
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <UART_SetConfig+0x4e4>)
 800243e:	fba3 2301 	umull	r2, r3, r3, r1
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2264      	movs	r2, #100	; 0x64
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	1acb      	subs	r3, r1, r3
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	3332      	adds	r3, #50	; 0x32
 8002450:	4a33      	ldr	r2, [pc, #204]	; (8002520 <UART_SetConfig+0x4e4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	441c      	add	r4, r3
 800245e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002462:	2200      	movs	r2, #0
 8002464:	673b      	str	r3, [r7, #112]	; 0x70
 8002466:	677a      	str	r2, [r7, #116]	; 0x74
 8002468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800246c:	4642      	mov	r2, r8
 800246e:	464b      	mov	r3, r9
 8002470:	1891      	adds	r1, r2, r2
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	415b      	adcs	r3, r3
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800247c:	4641      	mov	r1, r8
 800247e:	1851      	adds	r1, r2, r1
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	4649      	mov	r1, r9
 8002484:	414b      	adcs	r3, r1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002494:	4659      	mov	r1, fp
 8002496:	00cb      	lsls	r3, r1, #3
 8002498:	4651      	mov	r1, sl
 800249a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249e:	4651      	mov	r1, sl
 80024a0:	00ca      	lsls	r2, r1, #3
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	4642      	mov	r2, r8
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ae:	464b      	mov	r3, r9
 80024b0:	460a      	mov	r2, r1
 80024b2:	eb42 0303 	adc.w	r3, r2, r3
 80024b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	663b      	str	r3, [r7, #96]	; 0x60
 80024c2:	667a      	str	r2, [r7, #100]	; 0x64
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024d0:	4649      	mov	r1, r9
 80024d2:	008b      	lsls	r3, r1, #2
 80024d4:	4641      	mov	r1, r8
 80024d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024da:	4641      	mov	r1, r8
 80024dc:	008a      	lsls	r2, r1, #2
 80024de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024e2:	f7fd fed5 	bl	8000290 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <UART_SetConfig+0x4e4>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	2164      	movs	r1, #100	; 0x64
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	3332      	adds	r3, #50	; 0x32
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <UART_SetConfig+0x4e4>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4422      	add	r2, r4
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800251a:	46bd      	mov	sp, r7
 800251c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002520:	51eb851f 	.word	0x51eb851f

08002524 <main>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void) {
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
	 */

	//bool flag;
	//tick_t duration;
	//uint32_t delay=100;
	HAL_Init();
 800252a:	f7fe fb9b 	bl	8000c64 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800252e:	f000 f851 	bl	80025d4 <SystemClock_Config>
	if(uartInit()){
 8002532:	f7fe f949 	bl	80007c8 <uartInit>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <main+0x20>
		printf(	"\n\r UART OK");
 800253c:	4821      	ldr	r0, [pc, #132]	; (80025c4 <main+0xa0>)
 800253e:	f000 f99d 	bl	800287c <iprintf>
 8002542:	e001      	b.n	8002548 <main+0x24>
	}else
		Error_Handler();
 8002544:	f000 f8a8 	bl	8002698 <Error_Handler>


	//uartSendString(&dato[8]);

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe f993 	bl	8000874 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800254e:	2001      	movs	r0, #1
 8002550:	f7fe f990 	bl	8000874 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8002554:	2002      	movs	r0, #2
 8002556:	f7fe f98d 	bl	8000874 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800255a:	2100      	movs	r1, #0
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fa0d 	bl	800097c <BSP_PB_Init>

	debounceFSM_init(); // Inicializa la máquina de estados
 8002562:	f7fe f813 	bl	800058c <debounceFSM_init>
	//tick_t Ti3=200;
	//tick_t cont = 0;

	/* No bloqueante delay configuración */
	//delayInit(&t1, Time_AntiRebote);
	  delayInit(&time1, PERIODO_T1);
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	4817      	ldr	r0, [pc, #92]	; (80025c8 <main+0xa4>)
 800256a:	f7fe f8e5 	bl	8000738 <delayInit>

	  //Cadenas a transmitir en los flancos
	  uint8_t flanco_up[]  = "\n\r FLANCO ASCENDENTE";
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <main+0xa8>)
 8002570:	f107 0418 	add.w	r4, r7, #24
 8002574:	461d      	mov	r5, r3
 8002576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800257a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800257e:	6020      	str	r0, [r4, #0]
 8002580:	3404      	adds	r4, #4
 8002582:	7021      	strb	r1, [r4, #0]
	  uint8_t flanco_down[] = "\n\r FLANCO DESCENDENTE";
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <main+0xac>)
 8002586:	463c      	mov	r4, r7
 8002588:	461d      	mov	r5, r3
 800258a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002592:	6020      	str	r0, [r4, #0]
 8002594:	3404      	adds	r4, #4
 8002596:	8021      	strh	r1, [r4, #0]
	//  delayInit(&t3, Ti3);

	/* Infinite loop */
	while (1) {

		debounceFSM_update();
 8002598:	f7fe f808 	bl	80005ac <debounceFSM_update>

		if (Detecto_flanco_A())
 800259c:	f7fe f89e 	bl	80006dc <Detecto_flanco_A>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <main+0x8c>
			uartSendString(flanco_up);
 80025a6:	f107 0318 	add.w	r3, r7, #24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe f936 	bl	800081c <uartSendString>

		if (Detecto_flanco_D())
 80025b0:	f7fe f8a8 	bl	8000704 <Detecto_flanco_D>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ee      	beq.n	8002598 <main+0x74>
			uartSendString(flanco_down);
 80025ba:	463b      	mov	r3, r7
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe f92d 	bl	800081c <uartSendString>
		debounceFSM_update();
 80025c2:	e7e9      	b.n	8002598 <main+0x74>
 80025c4:	08003580 	.word	0x08003580
 80025c8:	200000f0 	.word	0x200000f0
 80025cc:	0800358c 	.word	0x0800358c
 80025d0:	080035a4 	.word	0x080035a4

080025d4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b094      	sub	sp, #80	; 0x50
 80025d8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <SystemClock_Config+0xbc>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <SystemClock_Config+0xbc>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <SystemClock_Config+0xbc>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <SystemClock_Config+0xc0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <SystemClock_Config+0xc0>)
 8002600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <SystemClock_Config+0xc0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002612:	2301      	movs	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002616:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800261a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800261c:	2302      	movs	r3, #2
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002626:	2308      	movs	r3, #8
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800262a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002630:	2302      	movs	r3, #2
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002634:	2307      	movs	r3, #7
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe ff17 	bl	8001470 <HAL_RCC_OscConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002648:	f000 f826 	bl	8002698 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800264c:	f7fe fec0 	bl	80013d0 <HAL_PWREx_EnableOverDrive>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002656:	f000 f81f 	bl	8002698 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800265a:	230f      	movs	r3, #15
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800265e:	2302      	movs	r3, #2
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002672:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002676:	2105      	movs	r1, #5
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f971 	bl	8001960 <HAL_RCC_ClockConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002684:	f000 f808 	bl	8002698 <Error_Handler>
  }
}
 8002688:	bf00      	nop
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000

08002698 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  // Turn LED2 on
  BSP_LED_On(LED2);
 800269c:	2001      	movs	r0, #1
 800269e:	f7fe f939 	bl	8000914 <BSP_LED_On>
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <Error_Handler+0xa>

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026aa:	e003      	b.n	80026b4 <LoopCopyDataInit>

080026ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026b2:	3104      	adds	r1, #4

080026b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026bc:	d3f6      	bcc.n	80026ac <CopyDataInit>
  ldr  r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026c0:	e002      	b.n	80026c8 <LoopFillZerobss>

080026c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026c4:	f842 3b04 	str.w	r3, [r2], #4

080026c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026cc:	d3f9      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ce:	f7fe f9c1 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f000 f97d 	bl	80029d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff ff25 	bl	8002524 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80026e0:	08003620 	.word	0x08003620
  ldr  r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026e8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80026ec:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80026f0:	20000248 	.word	0x20000248

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>
	...

080026f8 <std>:
 80026f8:	2300      	movs	r3, #0
 80026fa:	b510      	push	{r4, lr}
 80026fc:	4604      	mov	r4, r0
 80026fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002706:	6083      	str	r3, [r0, #8]
 8002708:	8181      	strh	r1, [r0, #12]
 800270a:	6643      	str	r3, [r0, #100]	; 0x64
 800270c:	81c2      	strh	r2, [r0, #14]
 800270e:	6183      	str	r3, [r0, #24]
 8002710:	4619      	mov	r1, r3
 8002712:	2208      	movs	r2, #8
 8002714:	305c      	adds	r0, #92	; 0x5c
 8002716:	f000 f906 	bl	8002926 <memset>
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <std+0x58>)
 800271c:	6263      	str	r3, [r4, #36]	; 0x24
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <std+0x5c>)
 8002720:	62a3      	str	r3, [r4, #40]	; 0x28
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <std+0x60>)
 8002724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <std+0x64>)
 8002728:	6323      	str	r3, [r4, #48]	; 0x30
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <std+0x68>)
 800272c:	6224      	str	r4, [r4, #32]
 800272e:	429c      	cmp	r4, r3
 8002730:	d006      	beq.n	8002740 <std+0x48>
 8002732:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002736:	4294      	cmp	r4, r2
 8002738:	d002      	beq.n	8002740 <std+0x48>
 800273a:	33d0      	adds	r3, #208	; 0xd0
 800273c:	429c      	cmp	r4, r3
 800273e:	d105      	bne.n	800274c <std+0x54>
 8002740:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002748:	f000 b966 	b.w	8002a18 <__retarget_lock_init_recursive>
 800274c:	bd10      	pop	{r4, pc}
 800274e:	bf00      	nop
 8002750:	080028a1 	.word	0x080028a1
 8002754:	080028c3 	.word	0x080028c3
 8002758:	080028fb 	.word	0x080028fb
 800275c:	0800291f 	.word	0x0800291f
 8002760:	200000fc 	.word	0x200000fc

08002764 <stdio_exit_handler>:
 8002764:	4a02      	ldr	r2, [pc, #8]	; (8002770 <stdio_exit_handler+0xc>)
 8002766:	4903      	ldr	r1, [pc, #12]	; (8002774 <stdio_exit_handler+0x10>)
 8002768:	4803      	ldr	r0, [pc, #12]	; (8002778 <stdio_exit_handler+0x14>)
 800276a:	f000 b869 	b.w	8002840 <_fwalk_sglue>
 800276e:	bf00      	nop
 8002770:	2000001c 	.word	0x2000001c
 8002774:	080032c5 	.word	0x080032c5
 8002778:	20000028 	.word	0x20000028

0800277c <cleanup_stdio>:
 800277c:	6841      	ldr	r1, [r0, #4]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <cleanup_stdio+0x34>)
 8002780:	4299      	cmp	r1, r3
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	d001      	beq.n	800278c <cleanup_stdio+0x10>
 8002788:	f000 fd9c 	bl	80032c4 <_fflush_r>
 800278c:	68a1      	ldr	r1, [r4, #8]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <cleanup_stdio+0x38>)
 8002790:	4299      	cmp	r1, r3
 8002792:	d002      	beq.n	800279a <cleanup_stdio+0x1e>
 8002794:	4620      	mov	r0, r4
 8002796:	f000 fd95 	bl	80032c4 <_fflush_r>
 800279a:	68e1      	ldr	r1, [r4, #12]
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <cleanup_stdio+0x3c>)
 800279e:	4299      	cmp	r1, r3
 80027a0:	d004      	beq.n	80027ac <cleanup_stdio+0x30>
 80027a2:	4620      	mov	r0, r4
 80027a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a8:	f000 bd8c 	b.w	80032c4 <_fflush_r>
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	bf00      	nop
 80027b0:	200000fc 	.word	0x200000fc
 80027b4:	20000164 	.word	0x20000164
 80027b8:	200001cc 	.word	0x200001cc

080027bc <global_stdio_init.part.0>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <global_stdio_init.part.0+0x30>)
 80027c0:	4c0b      	ldr	r4, [pc, #44]	; (80027f0 <global_stdio_init.part.0+0x34>)
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <global_stdio_init.part.0+0x38>)
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4620      	mov	r0, r4
 80027c8:	2200      	movs	r2, #0
 80027ca:	2104      	movs	r1, #4
 80027cc:	f7ff ff94 	bl	80026f8 <std>
 80027d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80027d4:	2201      	movs	r2, #1
 80027d6:	2109      	movs	r1, #9
 80027d8:	f7ff ff8e 	bl	80026f8 <std>
 80027dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80027e0:	2202      	movs	r2, #2
 80027e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e6:	2112      	movs	r1, #18
 80027e8:	f7ff bf86 	b.w	80026f8 <std>
 80027ec:	20000234 	.word	0x20000234
 80027f0:	200000fc 	.word	0x200000fc
 80027f4:	08002765 	.word	0x08002765

080027f8 <__sfp_lock_acquire>:
 80027f8:	4801      	ldr	r0, [pc, #4]	; (8002800 <__sfp_lock_acquire+0x8>)
 80027fa:	f000 b90e 	b.w	8002a1a <__retarget_lock_acquire_recursive>
 80027fe:	bf00      	nop
 8002800:	2000023d 	.word	0x2000023d

08002804 <__sfp_lock_release>:
 8002804:	4801      	ldr	r0, [pc, #4]	; (800280c <__sfp_lock_release+0x8>)
 8002806:	f000 b909 	b.w	8002a1c <__retarget_lock_release_recursive>
 800280a:	bf00      	nop
 800280c:	2000023d 	.word	0x2000023d

08002810 <__sinit>:
 8002810:	b510      	push	{r4, lr}
 8002812:	4604      	mov	r4, r0
 8002814:	f7ff fff0 	bl	80027f8 <__sfp_lock_acquire>
 8002818:	6a23      	ldr	r3, [r4, #32]
 800281a:	b11b      	cbz	r3, 8002824 <__sinit+0x14>
 800281c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002820:	f7ff bff0 	b.w	8002804 <__sfp_lock_release>
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <__sinit+0x28>)
 8002826:	6223      	str	r3, [r4, #32]
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <__sinit+0x2c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f5      	bne.n	800281c <__sinit+0xc>
 8002830:	f7ff ffc4 	bl	80027bc <global_stdio_init.part.0>
 8002834:	e7f2      	b.n	800281c <__sinit+0xc>
 8002836:	bf00      	nop
 8002838:	0800277d 	.word	0x0800277d
 800283c:	20000234 	.word	0x20000234

08002840 <_fwalk_sglue>:
 8002840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002844:	4607      	mov	r7, r0
 8002846:	4688      	mov	r8, r1
 8002848:	4614      	mov	r4, r2
 800284a:	2600      	movs	r6, #0
 800284c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002850:	f1b9 0901 	subs.w	r9, r9, #1
 8002854:	d505      	bpl.n	8002862 <_fwalk_sglue+0x22>
 8002856:	6824      	ldr	r4, [r4, #0]
 8002858:	2c00      	cmp	r4, #0
 800285a:	d1f7      	bne.n	800284c <_fwalk_sglue+0xc>
 800285c:	4630      	mov	r0, r6
 800285e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002862:	89ab      	ldrh	r3, [r5, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d907      	bls.n	8002878 <_fwalk_sglue+0x38>
 8002868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	d003      	beq.n	8002878 <_fwalk_sglue+0x38>
 8002870:	4629      	mov	r1, r5
 8002872:	4638      	mov	r0, r7
 8002874:	47c0      	blx	r8
 8002876:	4306      	orrs	r6, r0
 8002878:	3568      	adds	r5, #104	; 0x68
 800287a:	e7e9      	b.n	8002850 <_fwalk_sglue+0x10>

0800287c <iprintf>:
 800287c:	b40f      	push	{r0, r1, r2, r3}
 800287e:	b507      	push	{r0, r1, r2, lr}
 8002880:	4906      	ldr	r1, [pc, #24]	; (800289c <iprintf+0x20>)
 8002882:	ab04      	add	r3, sp, #16
 8002884:	6808      	ldr	r0, [r1, #0]
 8002886:	f853 2b04 	ldr.w	r2, [r3], #4
 800288a:	6881      	ldr	r1, [r0, #8]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	f000 f9e9 	bl	8002c64 <_vfiprintf_r>
 8002892:	b003      	add	sp, #12
 8002894:	f85d eb04 	ldr.w	lr, [sp], #4
 8002898:	b004      	add	sp, #16
 800289a:	4770      	bx	lr
 800289c:	20000074 	.word	0x20000074

080028a0 <__sread>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	460c      	mov	r4, r1
 80028a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a8:	f000 f868 	bl	800297c <_read_r>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	bfab      	itete	ge
 80028b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028b2:	89a3      	ldrhlt	r3, [r4, #12]
 80028b4:	181b      	addge	r3, r3, r0
 80028b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028ba:	bfac      	ite	ge
 80028bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80028be:	81a3      	strhlt	r3, [r4, #12]
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <__swrite>:
 80028c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c6:	461f      	mov	r7, r3
 80028c8:	898b      	ldrh	r3, [r1, #12]
 80028ca:	05db      	lsls	r3, r3, #23
 80028cc:	4605      	mov	r5, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	4616      	mov	r6, r2
 80028d2:	d505      	bpl.n	80028e0 <__swrite+0x1e>
 80028d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d8:	2302      	movs	r3, #2
 80028da:	2200      	movs	r2, #0
 80028dc:	f000 f83c 	bl	8002958 <_lseek_r>
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ea:	81a3      	strh	r3, [r4, #12]
 80028ec:	4632      	mov	r2, r6
 80028ee:	463b      	mov	r3, r7
 80028f0:	4628      	mov	r0, r5
 80028f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028f6:	f000 b853 	b.w	80029a0 <_write_r>

080028fa <__sseek>:
 80028fa:	b510      	push	{r4, lr}
 80028fc:	460c      	mov	r4, r1
 80028fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002902:	f000 f829 	bl	8002958 <_lseek_r>
 8002906:	1c43      	adds	r3, r0, #1
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	bf15      	itete	ne
 800290c:	6560      	strne	r0, [r4, #84]	; 0x54
 800290e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002916:	81a3      	strheq	r3, [r4, #12]
 8002918:	bf18      	it	ne
 800291a:	81a3      	strhne	r3, [r4, #12]
 800291c:	bd10      	pop	{r4, pc}

0800291e <__sclose>:
 800291e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002922:	f000 b809 	b.w	8002938 <_close_r>

08002926 <memset>:
 8002926:	4402      	add	r2, r0
 8002928:	4603      	mov	r3, r0
 800292a:	4293      	cmp	r3, r2
 800292c:	d100      	bne.n	8002930 <memset+0xa>
 800292e:	4770      	bx	lr
 8002930:	f803 1b01 	strb.w	r1, [r3], #1
 8002934:	e7f9      	b.n	800292a <memset+0x4>
	...

08002938 <_close_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4d06      	ldr	r5, [pc, #24]	; (8002954 <_close_r+0x1c>)
 800293c:	2300      	movs	r3, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	602b      	str	r3, [r5, #0]
 8002944:	f7fe f923 	bl	8000b8e <_close>
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d102      	bne.n	8002952 <_close_r+0x1a>
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	b103      	cbz	r3, 8002952 <_close_r+0x1a>
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	20000238 	.word	0x20000238

08002958 <_lseek_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	4d07      	ldr	r5, [pc, #28]	; (8002978 <_lseek_r+0x20>)
 800295c:	4604      	mov	r4, r0
 800295e:	4608      	mov	r0, r1
 8002960:	4611      	mov	r1, r2
 8002962:	2200      	movs	r2, #0
 8002964:	602a      	str	r2, [r5, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f7fe f938 	bl	8000bdc <_lseek>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d102      	bne.n	8002976 <_lseek_r+0x1e>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	b103      	cbz	r3, 8002976 <_lseek_r+0x1e>
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	20000238 	.word	0x20000238

0800297c <_read_r>:
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	4d07      	ldr	r5, [pc, #28]	; (800299c <_read_r+0x20>)
 8002980:	4604      	mov	r4, r0
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	2200      	movs	r2, #0
 8002988:	602a      	str	r2, [r5, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f7fe f8c6 	bl	8000b1c <_read>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d102      	bne.n	800299a <_read_r+0x1e>
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	b103      	cbz	r3, 800299a <_read_r+0x1e>
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	20000238 	.word	0x20000238

080029a0 <_write_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4d07      	ldr	r5, [pc, #28]	; (80029c0 <_write_r+0x20>)
 80029a4:	4604      	mov	r4, r0
 80029a6:	4608      	mov	r0, r1
 80029a8:	4611      	mov	r1, r2
 80029aa:	2200      	movs	r2, #0
 80029ac:	602a      	str	r2, [r5, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7fe f8d1 	bl	8000b56 <_write>
 80029b4:	1c43      	adds	r3, r0, #1
 80029b6:	d102      	bne.n	80029be <_write_r+0x1e>
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	b103      	cbz	r3, 80029be <_write_r+0x1e>
 80029bc:	6023      	str	r3, [r4, #0]
 80029be:	bd38      	pop	{r3, r4, r5, pc}
 80029c0:	20000238 	.word	0x20000238

080029c4 <__errno>:
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <__errno+0x8>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000074 	.word	0x20000074

080029d0 <__libc_init_array>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4d0d      	ldr	r5, [pc, #52]	; (8002a08 <__libc_init_array+0x38>)
 80029d4:	4c0d      	ldr	r4, [pc, #52]	; (8002a0c <__libc_init_array+0x3c>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	2600      	movs	r6, #0
 80029dc:	42a6      	cmp	r6, r4
 80029de:	d109      	bne.n	80029f4 <__libc_init_array+0x24>
 80029e0:	4d0b      	ldr	r5, [pc, #44]	; (8002a10 <__libc_init_array+0x40>)
 80029e2:	4c0c      	ldr	r4, [pc, #48]	; (8002a14 <__libc_init_array+0x44>)
 80029e4:	f000 fdc0 	bl	8003568 <_init>
 80029e8:	1b64      	subs	r4, r4, r5
 80029ea:	10a4      	asrs	r4, r4, #2
 80029ec:	2600      	movs	r6, #0
 80029ee:	42a6      	cmp	r6, r4
 80029f0:	d105      	bne.n	80029fe <__libc_init_array+0x2e>
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f8:	4798      	blx	r3
 80029fa:	3601      	adds	r6, #1
 80029fc:	e7ee      	b.n	80029dc <__libc_init_array+0xc>
 80029fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a02:	4798      	blx	r3
 8002a04:	3601      	adds	r6, #1
 8002a06:	e7f2      	b.n	80029ee <__libc_init_array+0x1e>
 8002a08:	08003618 	.word	0x08003618
 8002a0c:	08003618 	.word	0x08003618
 8002a10:	08003618 	.word	0x08003618
 8002a14:	0800361c 	.word	0x0800361c

08002a18 <__retarget_lock_init_recursive>:
 8002a18:	4770      	bx	lr

08002a1a <__retarget_lock_acquire_recursive>:
 8002a1a:	4770      	bx	lr

08002a1c <__retarget_lock_release_recursive>:
 8002a1c:	4770      	bx	lr
	...

08002a20 <_free_r>:
 8002a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a22:	2900      	cmp	r1, #0
 8002a24:	d044      	beq.n	8002ab0 <_free_r+0x90>
 8002a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2a:	9001      	str	r0, [sp, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a32:	bfb8      	it	lt
 8002a34:	18e4      	addlt	r4, r4, r3
 8002a36:	f000 f8df 	bl	8002bf8 <__malloc_lock>
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <_free_r+0x94>)
 8002a3c:	9801      	ldr	r0, [sp, #4]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	b933      	cbnz	r3, 8002a50 <_free_r+0x30>
 8002a42:	6063      	str	r3, [r4, #4]
 8002a44:	6014      	str	r4, [r2, #0]
 8002a46:	b003      	add	sp, #12
 8002a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a4c:	f000 b8da 	b.w	8002c04 <__malloc_unlock>
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	d908      	bls.n	8002a66 <_free_r+0x46>
 8002a54:	6825      	ldr	r5, [r4, #0]
 8002a56:	1961      	adds	r1, r4, r5
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	bf01      	itttt	eq
 8002a5c:	6819      	ldreq	r1, [r3, #0]
 8002a5e:	685b      	ldreq	r3, [r3, #4]
 8002a60:	1949      	addeq	r1, r1, r5
 8002a62:	6021      	streq	r1, [r4, #0]
 8002a64:	e7ed      	b.n	8002a42 <_free_r+0x22>
 8002a66:	461a      	mov	r2, r3
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	b10b      	cbz	r3, 8002a70 <_free_r+0x50>
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d9fa      	bls.n	8002a66 <_free_r+0x46>
 8002a70:	6811      	ldr	r1, [r2, #0]
 8002a72:	1855      	adds	r5, r2, r1
 8002a74:	42a5      	cmp	r5, r4
 8002a76:	d10b      	bne.n	8002a90 <_free_r+0x70>
 8002a78:	6824      	ldr	r4, [r4, #0]
 8002a7a:	4421      	add	r1, r4
 8002a7c:	1854      	adds	r4, r2, r1
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	d1e0      	bne.n	8002a46 <_free_r+0x26>
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6053      	str	r3, [r2, #4]
 8002a8a:	440c      	add	r4, r1
 8002a8c:	6014      	str	r4, [r2, #0]
 8002a8e:	e7da      	b.n	8002a46 <_free_r+0x26>
 8002a90:	d902      	bls.n	8002a98 <_free_r+0x78>
 8002a92:	230c      	movs	r3, #12
 8002a94:	6003      	str	r3, [r0, #0]
 8002a96:	e7d6      	b.n	8002a46 <_free_r+0x26>
 8002a98:	6825      	ldr	r5, [r4, #0]
 8002a9a:	1961      	adds	r1, r4, r5
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	bf04      	itt	eq
 8002aa0:	6819      	ldreq	r1, [r3, #0]
 8002aa2:	685b      	ldreq	r3, [r3, #4]
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	bf04      	itt	eq
 8002aa8:	1949      	addeq	r1, r1, r5
 8002aaa:	6021      	streq	r1, [r4, #0]
 8002aac:	6054      	str	r4, [r2, #4]
 8002aae:	e7ca      	b.n	8002a46 <_free_r+0x26>
 8002ab0:	b003      	add	sp, #12
 8002ab2:	bd30      	pop	{r4, r5, pc}
 8002ab4:	20000240 	.word	0x20000240

08002ab8 <sbrk_aligned>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4e0e      	ldr	r6, [pc, #56]	; (8002af4 <sbrk_aligned+0x3c>)
 8002abc:	460c      	mov	r4, r1
 8002abe:	6831      	ldr	r1, [r6, #0]
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	b911      	cbnz	r1, 8002aca <sbrk_aligned+0x12>
 8002ac4:	f000 fcbc 	bl	8003440 <_sbrk_r>
 8002ac8:	6030      	str	r0, [r6, #0]
 8002aca:	4621      	mov	r1, r4
 8002acc:	4628      	mov	r0, r5
 8002ace:	f000 fcb7 	bl	8003440 <_sbrk_r>
 8002ad2:	1c43      	adds	r3, r0, #1
 8002ad4:	d00a      	beq.n	8002aec <sbrk_aligned+0x34>
 8002ad6:	1cc4      	adds	r4, r0, #3
 8002ad8:	f024 0403 	bic.w	r4, r4, #3
 8002adc:	42a0      	cmp	r0, r4
 8002ade:	d007      	beq.n	8002af0 <sbrk_aligned+0x38>
 8002ae0:	1a21      	subs	r1, r4, r0
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 fcac 	bl	8003440 <_sbrk_r>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d101      	bne.n	8002af0 <sbrk_aligned+0x38>
 8002aec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002af0:	4620      	mov	r0, r4
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	20000244 	.word	0x20000244

08002af8 <_malloc_r>:
 8002af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002afc:	1ccd      	adds	r5, r1, #3
 8002afe:	f025 0503 	bic.w	r5, r5, #3
 8002b02:	3508      	adds	r5, #8
 8002b04:	2d0c      	cmp	r5, #12
 8002b06:	bf38      	it	cc
 8002b08:	250c      	movcc	r5, #12
 8002b0a:	2d00      	cmp	r5, #0
 8002b0c:	4607      	mov	r7, r0
 8002b0e:	db01      	blt.n	8002b14 <_malloc_r+0x1c>
 8002b10:	42a9      	cmp	r1, r5
 8002b12:	d905      	bls.n	8002b20 <_malloc_r+0x28>
 8002b14:	230c      	movs	r3, #12
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	2600      	movs	r6, #0
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002bf4 <_malloc_r+0xfc>
 8002b24:	f000 f868 	bl	8002bf8 <__malloc_lock>
 8002b28:	f8d8 3000 	ldr.w	r3, [r8]
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	bb5c      	cbnz	r4, 8002b88 <_malloc_r+0x90>
 8002b30:	4629      	mov	r1, r5
 8002b32:	4638      	mov	r0, r7
 8002b34:	f7ff ffc0 	bl	8002ab8 <sbrk_aligned>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	d155      	bne.n	8002bea <_malloc_r+0xf2>
 8002b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8002b42:	4626      	mov	r6, r4
 8002b44:	2e00      	cmp	r6, #0
 8002b46:	d145      	bne.n	8002bd4 <_malloc_r+0xdc>
 8002b48:	2c00      	cmp	r4, #0
 8002b4a:	d048      	beq.n	8002bde <_malloc_r+0xe6>
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4638      	mov	r0, r7
 8002b52:	eb04 0903 	add.w	r9, r4, r3
 8002b56:	f000 fc73 	bl	8003440 <_sbrk_r>
 8002b5a:	4581      	cmp	r9, r0
 8002b5c:	d13f      	bne.n	8002bde <_malloc_r+0xe6>
 8002b5e:	6821      	ldr	r1, [r4, #0]
 8002b60:	1a6d      	subs	r5, r5, r1
 8002b62:	4629      	mov	r1, r5
 8002b64:	4638      	mov	r0, r7
 8002b66:	f7ff ffa7 	bl	8002ab8 <sbrk_aligned>
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d037      	beq.n	8002bde <_malloc_r+0xe6>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	442b      	add	r3, r5
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	f8d8 3000 	ldr.w	r3, [r8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d038      	beq.n	8002bee <_malloc_r+0xf6>
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	42a2      	cmp	r2, r4
 8002b80:	d12b      	bne.n	8002bda <_malloc_r+0xe2>
 8002b82:	2200      	movs	r2, #0
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e00f      	b.n	8002ba8 <_malloc_r+0xb0>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	1b52      	subs	r2, r2, r5
 8002b8c:	d41f      	bmi.n	8002bce <_malloc_r+0xd6>
 8002b8e:	2a0b      	cmp	r2, #11
 8002b90:	d917      	bls.n	8002bc2 <_malloc_r+0xca>
 8002b92:	1961      	adds	r1, r4, r5
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	6025      	str	r5, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	6059      	strne	r1, [r3, #4]
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	bf08      	it	eq
 8002ba0:	f8c8 1000 	streq.w	r1, [r8]
 8002ba4:	5162      	str	r2, [r4, r5]
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	4638      	mov	r0, r7
 8002baa:	f104 060b 	add.w	r6, r4, #11
 8002bae:	f000 f829 	bl	8002c04 <__malloc_unlock>
 8002bb2:	f026 0607 	bic.w	r6, r6, #7
 8002bb6:	1d23      	adds	r3, r4, #4
 8002bb8:	1af2      	subs	r2, r6, r3
 8002bba:	d0ae      	beq.n	8002b1a <_malloc_r+0x22>
 8002bbc:	1b9b      	subs	r3, r3, r6
 8002bbe:	50a3      	str	r3, [r4, r2]
 8002bc0:	e7ab      	b.n	8002b1a <_malloc_r+0x22>
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	6862      	ldr	r2, [r4, #4]
 8002bc6:	d1dd      	bne.n	8002b84 <_malloc_r+0x8c>
 8002bc8:	f8c8 2000 	str.w	r2, [r8]
 8002bcc:	e7ec      	b.n	8002ba8 <_malloc_r+0xb0>
 8002bce:	4623      	mov	r3, r4
 8002bd0:	6864      	ldr	r4, [r4, #4]
 8002bd2:	e7ac      	b.n	8002b2e <_malloc_r+0x36>
 8002bd4:	4634      	mov	r4, r6
 8002bd6:	6876      	ldr	r6, [r6, #4]
 8002bd8:	e7b4      	b.n	8002b44 <_malloc_r+0x4c>
 8002bda:	4613      	mov	r3, r2
 8002bdc:	e7cc      	b.n	8002b78 <_malloc_r+0x80>
 8002bde:	230c      	movs	r3, #12
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4638      	mov	r0, r7
 8002be4:	f000 f80e 	bl	8002c04 <__malloc_unlock>
 8002be8:	e797      	b.n	8002b1a <_malloc_r+0x22>
 8002bea:	6025      	str	r5, [r4, #0]
 8002bec:	e7dc      	b.n	8002ba8 <_malloc_r+0xb0>
 8002bee:	605b      	str	r3, [r3, #4]
 8002bf0:	deff      	udf	#255	; 0xff
 8002bf2:	bf00      	nop
 8002bf4:	20000240 	.word	0x20000240

08002bf8 <__malloc_lock>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <__malloc_lock+0x8>)
 8002bfa:	f7ff bf0e 	b.w	8002a1a <__retarget_lock_acquire_recursive>
 8002bfe:	bf00      	nop
 8002c00:	2000023c 	.word	0x2000023c

08002c04 <__malloc_unlock>:
 8002c04:	4801      	ldr	r0, [pc, #4]	; (8002c0c <__malloc_unlock+0x8>)
 8002c06:	f7ff bf09 	b.w	8002a1c <__retarget_lock_release_recursive>
 8002c0a:	bf00      	nop
 8002c0c:	2000023c 	.word	0x2000023c

08002c10 <__sfputc_r>:
 8002c10:	6893      	ldr	r3, [r2, #8]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	b410      	push	{r4}
 8002c18:	6093      	str	r3, [r2, #8]
 8002c1a:	da08      	bge.n	8002c2e <__sfputc_r+0x1e>
 8002c1c:	6994      	ldr	r4, [r2, #24]
 8002c1e:	42a3      	cmp	r3, r4
 8002c20:	db01      	blt.n	8002c26 <__sfputc_r+0x16>
 8002c22:	290a      	cmp	r1, #10
 8002c24:	d103      	bne.n	8002c2e <__sfputc_r+0x1e>
 8002c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c2a:	f000 bb73 	b.w	8003314 <__swbuf_r>
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	1c58      	adds	r0, r3, #1
 8002c32:	6010      	str	r0, [r2, #0]
 8002c34:	7019      	strb	r1, [r3, #0]
 8002c36:	4608      	mov	r0, r1
 8002c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <__sfputs_r>:
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c40:	4606      	mov	r6, r0
 8002c42:	460f      	mov	r7, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	18d5      	adds	r5, r2, r3
 8002c48:	42ac      	cmp	r4, r5
 8002c4a:	d101      	bne.n	8002c50 <__sfputs_r+0x12>
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	e007      	b.n	8002c60 <__sfputs_r+0x22>
 8002c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c54:	463a      	mov	r2, r7
 8002c56:	4630      	mov	r0, r6
 8002c58:	f7ff ffda 	bl	8002c10 <__sfputc_r>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d1f3      	bne.n	8002c48 <__sfputs_r+0xa>
 8002c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c64 <_vfiprintf_r>:
 8002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c68:	460d      	mov	r5, r1
 8002c6a:	b09d      	sub	sp, #116	; 0x74
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	4698      	mov	r8, r3
 8002c70:	4606      	mov	r6, r0
 8002c72:	b118      	cbz	r0, 8002c7c <_vfiprintf_r+0x18>
 8002c74:	6a03      	ldr	r3, [r0, #32]
 8002c76:	b90b      	cbnz	r3, 8002c7c <_vfiprintf_r+0x18>
 8002c78:	f7ff fdca 	bl	8002810 <__sinit>
 8002c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c7e:	07d9      	lsls	r1, r3, #31
 8002c80:	d405      	bmi.n	8002c8e <_vfiprintf_r+0x2a>
 8002c82:	89ab      	ldrh	r3, [r5, #12]
 8002c84:	059a      	lsls	r2, r3, #22
 8002c86:	d402      	bmi.n	8002c8e <_vfiprintf_r+0x2a>
 8002c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c8a:	f7ff fec6 	bl	8002a1a <__retarget_lock_acquire_recursive>
 8002c8e:	89ab      	ldrh	r3, [r5, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	d501      	bpl.n	8002c98 <_vfiprintf_r+0x34>
 8002c94:	692b      	ldr	r3, [r5, #16]
 8002c96:	b99b      	cbnz	r3, 8002cc0 <_vfiprintf_r+0x5c>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	f000 fb78 	bl	8003390 <__swsetup_r>
 8002ca0:	b170      	cbz	r0, 8002cc0 <_vfiprintf_r+0x5c>
 8002ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ca4:	07dc      	lsls	r4, r3, #31
 8002ca6:	d504      	bpl.n	8002cb2 <_vfiprintf_r+0x4e>
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cac:	b01d      	add	sp, #116	; 0x74
 8002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb2:	89ab      	ldrh	r3, [r5, #12]
 8002cb4:	0598      	lsls	r0, r3, #22
 8002cb6:	d4f7      	bmi.n	8002ca8 <_vfiprintf_r+0x44>
 8002cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cba:	f7ff feaf 	bl	8002a1c <__retarget_lock_release_recursive>
 8002cbe:	e7f3      	b.n	8002ca8 <_vfiprintf_r+0x44>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cce:	2330      	movs	r3, #48	; 0x30
 8002cd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002e84 <_vfiprintf_r+0x220>
 8002cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cd8:	f04f 0901 	mov.w	r9, #1
 8002cdc:	4623      	mov	r3, r4
 8002cde:	469a      	mov	sl, r3
 8002ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce4:	b10a      	cbz	r2, 8002cea <_vfiprintf_r+0x86>
 8002ce6:	2a25      	cmp	r2, #37	; 0x25
 8002ce8:	d1f9      	bne.n	8002cde <_vfiprintf_r+0x7a>
 8002cea:	ebba 0b04 	subs.w	fp, sl, r4
 8002cee:	d00b      	beq.n	8002d08 <_vfiprintf_r+0xa4>
 8002cf0:	465b      	mov	r3, fp
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f7ff ffa1 	bl	8002c3e <__sfputs_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	f000 80a9 	beq.w	8002e54 <_vfiprintf_r+0x1f0>
 8002d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d04:	445a      	add	r2, fp
 8002d06:	9209      	str	r2, [sp, #36]	; 0x24
 8002d08:	f89a 3000 	ldrb.w	r3, [sl]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a1 	beq.w	8002e54 <_vfiprintf_r+0x1f0>
 8002d12:	2300      	movs	r3, #0
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d1c:	f10a 0a01 	add.w	sl, sl, #1
 8002d20:	9304      	str	r3, [sp, #16]
 8002d22:	9307      	str	r3, [sp, #28]
 8002d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d28:	931a      	str	r3, [sp, #104]	; 0x68
 8002d2a:	4654      	mov	r4, sl
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d32:	4854      	ldr	r0, [pc, #336]	; (8002e84 <_vfiprintf_r+0x220>)
 8002d34:	f7fd fa5c 	bl	80001f0 <memchr>
 8002d38:	9a04      	ldr	r2, [sp, #16]
 8002d3a:	b9d8      	cbnz	r0, 8002d74 <_vfiprintf_r+0x110>
 8002d3c:	06d1      	lsls	r1, r2, #27
 8002d3e:	bf44      	itt	mi
 8002d40:	2320      	movmi	r3, #32
 8002d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d46:	0713      	lsls	r3, r2, #28
 8002d48:	bf44      	itt	mi
 8002d4a:	232b      	movmi	r3, #43	; 0x2b
 8002d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d50:	f89a 3000 	ldrb.w	r3, [sl]
 8002d54:	2b2a      	cmp	r3, #42	; 0x2a
 8002d56:	d015      	beq.n	8002d84 <_vfiprintf_r+0x120>
 8002d58:	9a07      	ldr	r2, [sp, #28]
 8002d5a:	4654      	mov	r4, sl
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f04f 0c0a 	mov.w	ip, #10
 8002d62:	4621      	mov	r1, r4
 8002d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d68:	3b30      	subs	r3, #48	; 0x30
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	d94d      	bls.n	8002e0a <_vfiprintf_r+0x1a6>
 8002d6e:	b1b0      	cbz	r0, 8002d9e <_vfiprintf_r+0x13a>
 8002d70:	9207      	str	r2, [sp, #28]
 8002d72:	e014      	b.n	8002d9e <_vfiprintf_r+0x13a>
 8002d74:	eba0 0308 	sub.w	r3, r0, r8
 8002d78:	fa09 f303 	lsl.w	r3, r9, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	9304      	str	r3, [sp, #16]
 8002d80:	46a2      	mov	sl, r4
 8002d82:	e7d2      	b.n	8002d2a <_vfiprintf_r+0xc6>
 8002d84:	9b03      	ldr	r3, [sp, #12]
 8002d86:	1d19      	adds	r1, r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	9103      	str	r1, [sp, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bfbb      	ittet	lt
 8002d90:	425b      	neglt	r3, r3
 8002d92:	f042 0202 	orrlt.w	r2, r2, #2
 8002d96:	9307      	strge	r3, [sp, #28]
 8002d98:	9307      	strlt	r3, [sp, #28]
 8002d9a:	bfb8      	it	lt
 8002d9c:	9204      	strlt	r2, [sp, #16]
 8002d9e:	7823      	ldrb	r3, [r4, #0]
 8002da0:	2b2e      	cmp	r3, #46	; 0x2e
 8002da2:	d10c      	bne.n	8002dbe <_vfiprintf_r+0x15a>
 8002da4:	7863      	ldrb	r3, [r4, #1]
 8002da6:	2b2a      	cmp	r3, #42	; 0x2a
 8002da8:	d134      	bne.n	8002e14 <_vfiprintf_r+0x1b0>
 8002daa:	9b03      	ldr	r3, [sp, #12]
 8002dac:	1d1a      	adds	r2, r3, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	9203      	str	r2, [sp, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bfb8      	it	lt
 8002db6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dba:	3402      	adds	r4, #2
 8002dbc:	9305      	str	r3, [sp, #20]
 8002dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002e94 <_vfiprintf_r+0x230>
 8002dc2:	7821      	ldrb	r1, [r4, #0]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	f7fd fa12 	bl	80001f0 <memchr>
 8002dcc:	b138      	cbz	r0, 8002dde <_vfiprintf_r+0x17a>
 8002dce:	9b04      	ldr	r3, [sp, #16]
 8002dd0:	eba0 000a 	sub.w	r0, r0, sl
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4082      	lsls	r2, r0
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	3401      	adds	r4, #1
 8002ddc:	9304      	str	r3, [sp, #16]
 8002dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de2:	4829      	ldr	r0, [pc, #164]	; (8002e88 <_vfiprintf_r+0x224>)
 8002de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002de8:	2206      	movs	r2, #6
 8002dea:	f7fd fa01 	bl	80001f0 <memchr>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d03f      	beq.n	8002e72 <_vfiprintf_r+0x20e>
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <_vfiprintf_r+0x228>)
 8002df4:	bb1b      	cbnz	r3, 8002e3e <_vfiprintf_r+0x1da>
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	3308      	adds	r3, #8
 8002e00:	9303      	str	r3, [sp, #12]
 8002e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e04:	443b      	add	r3, r7
 8002e06:	9309      	str	r3, [sp, #36]	; 0x24
 8002e08:	e768      	b.n	8002cdc <_vfiprintf_r+0x78>
 8002e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e0e:	460c      	mov	r4, r1
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7a6      	b.n	8002d62 <_vfiprintf_r+0xfe>
 8002e14:	2300      	movs	r3, #0
 8002e16:	3401      	adds	r4, #1
 8002e18:	9305      	str	r3, [sp, #20]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 0c0a 	mov.w	ip, #10
 8002e20:	4620      	mov	r0, r4
 8002e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e26:	3a30      	subs	r2, #48	; 0x30
 8002e28:	2a09      	cmp	r2, #9
 8002e2a:	d903      	bls.n	8002e34 <_vfiprintf_r+0x1d0>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0c6      	beq.n	8002dbe <_vfiprintf_r+0x15a>
 8002e30:	9105      	str	r1, [sp, #20]
 8002e32:	e7c4      	b.n	8002dbe <_vfiprintf_r+0x15a>
 8002e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e38:	4604      	mov	r4, r0
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e7f0      	b.n	8002e20 <_vfiprintf_r+0x1bc>
 8002e3e:	ab03      	add	r3, sp, #12
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	462a      	mov	r2, r5
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <_vfiprintf_r+0x22c>)
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f3af 8000 	nop.w
 8002e4e:	4607      	mov	r7, r0
 8002e50:	1c78      	adds	r0, r7, #1
 8002e52:	d1d6      	bne.n	8002e02 <_vfiprintf_r+0x19e>
 8002e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e56:	07d9      	lsls	r1, r3, #31
 8002e58:	d405      	bmi.n	8002e66 <_vfiprintf_r+0x202>
 8002e5a:	89ab      	ldrh	r3, [r5, #12]
 8002e5c:	059a      	lsls	r2, r3, #22
 8002e5e:	d402      	bmi.n	8002e66 <_vfiprintf_r+0x202>
 8002e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e62:	f7ff fddb 	bl	8002a1c <__retarget_lock_release_recursive>
 8002e66:	89ab      	ldrh	r3, [r5, #12]
 8002e68:	065b      	lsls	r3, r3, #25
 8002e6a:	f53f af1d 	bmi.w	8002ca8 <_vfiprintf_r+0x44>
 8002e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e70:	e71c      	b.n	8002cac <_vfiprintf_r+0x48>
 8002e72:	ab03      	add	r3, sp, #12
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	462a      	mov	r2, r5
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <_vfiprintf_r+0x22c>)
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f879 	bl	8002f74 <_printf_i>
 8002e82:	e7e4      	b.n	8002e4e <_vfiprintf_r+0x1ea>
 8002e84:	080035dc 	.word	0x080035dc
 8002e88:	080035e6 	.word	0x080035e6
 8002e8c:	00000000 	.word	0x00000000
 8002e90:	08002c3f 	.word	0x08002c3f
 8002e94:	080035e2 	.word	0x080035e2

08002e98 <_printf_common>:
 8002e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	688a      	ldr	r2, [r1, #8]
 8002ea2:	690b      	ldr	r3, [r1, #16]
 8002ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bfb8      	it	lt
 8002eac:	4613      	movlt	r3, r2
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	b10a      	cbz	r2, 8002ebe <_printf_common+0x26>
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	0699      	lsls	r1, r3, #26
 8002ec2:	bf42      	ittt	mi
 8002ec4:	6833      	ldrmi	r3, [r6, #0]
 8002ec6:	3302      	addmi	r3, #2
 8002ec8:	6033      	strmi	r3, [r6, #0]
 8002eca:	6825      	ldr	r5, [r4, #0]
 8002ecc:	f015 0506 	ands.w	r5, r5, #6
 8002ed0:	d106      	bne.n	8002ee0 <_printf_common+0x48>
 8002ed2:	f104 0a19 	add.w	sl, r4, #25
 8002ed6:	68e3      	ldr	r3, [r4, #12]
 8002ed8:	6832      	ldr	r2, [r6, #0]
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	42ab      	cmp	r3, r5
 8002ede:	dc26      	bgt.n	8002f2e <_printf_common+0x96>
 8002ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ee4:	1e13      	subs	r3, r2, #0
 8002ee6:	6822      	ldr	r2, [r4, #0]
 8002ee8:	bf18      	it	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	0692      	lsls	r2, r2, #26
 8002eee:	d42b      	bmi.n	8002f48 <_printf_common+0xb0>
 8002ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d01e      	beq.n	8002f3c <_printf_common+0xa4>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	6922      	ldr	r2, [r4, #16]
 8002f02:	f003 0306 	and.w	r3, r3, #6
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	bf02      	ittt	eq
 8002f0a:	68e5      	ldreq	r5, [r4, #12]
 8002f0c:	6833      	ldreq	r3, [r6, #0]
 8002f0e:	1aed      	subeq	r5, r5, r3
 8002f10:	68a3      	ldr	r3, [r4, #8]
 8002f12:	bf0c      	ite	eq
 8002f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f18:	2500      	movne	r5, #0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfc4      	itt	gt
 8002f1e:	1a9b      	subgt	r3, r3, r2
 8002f20:	18ed      	addgt	r5, r5, r3
 8002f22:	2600      	movs	r6, #0
 8002f24:	341a      	adds	r4, #26
 8002f26:	42b5      	cmp	r5, r6
 8002f28:	d11a      	bne.n	8002f60 <_printf_common+0xc8>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e008      	b.n	8002f40 <_printf_common+0xa8>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4652      	mov	r2, sl
 8002f32:	4649      	mov	r1, r9
 8002f34:	4638      	mov	r0, r7
 8002f36:	47c0      	blx	r8
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d103      	bne.n	8002f44 <_printf_common+0xac>
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f44:	3501      	adds	r5, #1
 8002f46:	e7c6      	b.n	8002ed6 <_printf_common+0x3e>
 8002f48:	18e1      	adds	r1, r4, r3
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	2030      	movs	r0, #48	; 0x30
 8002f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f52:	4422      	add	r2, r4
 8002f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	e7c7      	b.n	8002ef0 <_printf_common+0x58>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4622      	mov	r2, r4
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d0e6      	beq.n	8002f3c <_printf_common+0xa4>
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7d9      	b.n	8002f26 <_printf_common+0x8e>
	...

08002f74 <_printf_i>:
 8002f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	7e0f      	ldrb	r7, [r1, #24]
 8002f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f7c:	2f78      	cmp	r7, #120	; 0x78
 8002f7e:	4691      	mov	r9, r2
 8002f80:	4680      	mov	r8, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	469a      	mov	sl, r3
 8002f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f8a:	d807      	bhi.n	8002f9c <_printf_i+0x28>
 8002f8c:	2f62      	cmp	r7, #98	; 0x62
 8002f8e:	d80a      	bhi.n	8002fa6 <_printf_i+0x32>
 8002f90:	2f00      	cmp	r7, #0
 8002f92:	f000 80d4 	beq.w	800313e <_printf_i+0x1ca>
 8002f96:	2f58      	cmp	r7, #88	; 0x58
 8002f98:	f000 80c0 	beq.w	800311c <_printf_i+0x1a8>
 8002f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fa4:	e03a      	b.n	800301c <_printf_i+0xa8>
 8002fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002faa:	2b15      	cmp	r3, #21
 8002fac:	d8f6      	bhi.n	8002f9c <_printf_i+0x28>
 8002fae:	a101      	add	r1, pc, #4	; (adr r1, 8002fb4 <_printf_i+0x40>)
 8002fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	08003021 	.word	0x08003021
 8002fbc:	08002f9d 	.word	0x08002f9d
 8002fc0:	08002f9d 	.word	0x08002f9d
 8002fc4:	08002f9d 	.word	0x08002f9d
 8002fc8:	08002f9d 	.word	0x08002f9d
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08002f9d 	.word	0x08002f9d
 8002fd4:	08002f9d 	.word	0x08002f9d
 8002fd8:	08002f9d 	.word	0x08002f9d
 8002fdc:	08002f9d 	.word	0x08002f9d
 8002fe0:	08003125 	.word	0x08003125
 8002fe4:	0800304d 	.word	0x0800304d
 8002fe8:	080030df 	.word	0x080030df
 8002fec:	08002f9d 	.word	0x08002f9d
 8002ff0:	08002f9d 	.word	0x08002f9d
 8002ff4:	08003147 	.word	0x08003147
 8002ff8:	08002f9d 	.word	0x08002f9d
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	08002f9d 	.word	0x08002f9d
 8003004:	08002f9d 	.word	0x08002f9d
 8003008:	080030e7 	.word	0x080030e7
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	602a      	str	r2, [r5, #0]
 8003014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800301c:	2301      	movs	r3, #1
 800301e:	e09f      	b.n	8003160 <_printf_i+0x1ec>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	0607      	lsls	r7, r0, #24
 8003026:	f103 0104 	add.w	r1, r3, #4
 800302a:	6029      	str	r1, [r5, #0]
 800302c:	d501      	bpl.n	8003032 <_printf_i+0xbe>
 800302e:	681e      	ldr	r6, [r3, #0]
 8003030:	e003      	b.n	800303a <_printf_i+0xc6>
 8003032:	0646      	lsls	r6, r0, #25
 8003034:	d5fb      	bpl.n	800302e <_printf_i+0xba>
 8003036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800303a:	2e00      	cmp	r6, #0
 800303c:	da03      	bge.n	8003046 <_printf_i+0xd2>
 800303e:	232d      	movs	r3, #45	; 0x2d
 8003040:	4276      	negs	r6, r6
 8003042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003046:	485a      	ldr	r0, [pc, #360]	; (80031b0 <_printf_i+0x23c>)
 8003048:	230a      	movs	r3, #10
 800304a:	e012      	b.n	8003072 <_printf_i+0xfe>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1d19      	adds	r1, r3, #4
 8003052:	6029      	str	r1, [r5, #0]
 8003054:	0605      	lsls	r5, r0, #24
 8003056:	d501      	bpl.n	800305c <_printf_i+0xe8>
 8003058:	681e      	ldr	r6, [r3, #0]
 800305a:	e002      	b.n	8003062 <_printf_i+0xee>
 800305c:	0641      	lsls	r1, r0, #25
 800305e:	d5fb      	bpl.n	8003058 <_printf_i+0xe4>
 8003060:	881e      	ldrh	r6, [r3, #0]
 8003062:	4853      	ldr	r0, [pc, #332]	; (80031b0 <_printf_i+0x23c>)
 8003064:	2f6f      	cmp	r7, #111	; 0x6f
 8003066:	bf0c      	ite	eq
 8003068:	2308      	moveq	r3, #8
 800306a:	230a      	movne	r3, #10
 800306c:	2100      	movs	r1, #0
 800306e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003072:	6865      	ldr	r5, [r4, #4]
 8003074:	60a5      	str	r5, [r4, #8]
 8003076:	2d00      	cmp	r5, #0
 8003078:	bfa2      	ittt	ge
 800307a:	6821      	ldrge	r1, [r4, #0]
 800307c:	f021 0104 	bicge.w	r1, r1, #4
 8003080:	6021      	strge	r1, [r4, #0]
 8003082:	b90e      	cbnz	r6, 8003088 <_printf_i+0x114>
 8003084:	2d00      	cmp	r5, #0
 8003086:	d04b      	beq.n	8003120 <_printf_i+0x1ac>
 8003088:	4615      	mov	r5, r2
 800308a:	fbb6 f1f3 	udiv	r1, r6, r3
 800308e:	fb03 6711 	mls	r7, r3, r1, r6
 8003092:	5dc7      	ldrb	r7, [r0, r7]
 8003094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003098:	4637      	mov	r7, r6
 800309a:	42bb      	cmp	r3, r7
 800309c:	460e      	mov	r6, r1
 800309e:	d9f4      	bls.n	800308a <_printf_i+0x116>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10b      	bne.n	80030bc <_printf_i+0x148>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	07de      	lsls	r6, r3, #31
 80030a8:	d508      	bpl.n	80030bc <_printf_i+0x148>
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	6861      	ldr	r1, [r4, #4]
 80030ae:	4299      	cmp	r1, r3
 80030b0:	bfde      	ittt	le
 80030b2:	2330      	movle	r3, #48	; 0x30
 80030b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030bc:	1b52      	subs	r2, r2, r5
 80030be:	6122      	str	r2, [r4, #16]
 80030c0:	f8cd a000 	str.w	sl, [sp]
 80030c4:	464b      	mov	r3, r9
 80030c6:	aa03      	add	r2, sp, #12
 80030c8:	4621      	mov	r1, r4
 80030ca:	4640      	mov	r0, r8
 80030cc:	f7ff fee4 	bl	8002e98 <_printf_common>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d14a      	bne.n	800316a <_printf_i+0x1f6>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d8:	b004      	add	sp, #16
 80030da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	4833      	ldr	r0, [pc, #204]	; (80031b4 <_printf_i+0x240>)
 80030e8:	2778      	movs	r7, #120	; 0x78
 80030ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	6829      	ldr	r1, [r5, #0]
 80030f2:	061f      	lsls	r7, r3, #24
 80030f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80030f8:	d402      	bmi.n	8003100 <_printf_i+0x18c>
 80030fa:	065f      	lsls	r7, r3, #25
 80030fc:	bf48      	it	mi
 80030fe:	b2b6      	uxthmi	r6, r6
 8003100:	07df      	lsls	r7, r3, #31
 8003102:	bf48      	it	mi
 8003104:	f043 0320 	orrmi.w	r3, r3, #32
 8003108:	6029      	str	r1, [r5, #0]
 800310a:	bf48      	it	mi
 800310c:	6023      	strmi	r3, [r4, #0]
 800310e:	b91e      	cbnz	r6, 8003118 <_printf_i+0x1a4>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f023 0320 	bic.w	r3, r3, #32
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	2310      	movs	r3, #16
 800311a:	e7a7      	b.n	800306c <_printf_i+0xf8>
 800311c:	4824      	ldr	r0, [pc, #144]	; (80031b0 <_printf_i+0x23c>)
 800311e:	e7e4      	b.n	80030ea <_printf_i+0x176>
 8003120:	4615      	mov	r5, r2
 8003122:	e7bd      	b.n	80030a0 <_printf_i+0x12c>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	6826      	ldr	r6, [r4, #0]
 8003128:	6961      	ldr	r1, [r4, #20]
 800312a:	1d18      	adds	r0, r3, #4
 800312c:	6028      	str	r0, [r5, #0]
 800312e:	0635      	lsls	r5, r6, #24
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	d501      	bpl.n	8003138 <_printf_i+0x1c4>
 8003134:	6019      	str	r1, [r3, #0]
 8003136:	e002      	b.n	800313e <_printf_i+0x1ca>
 8003138:	0670      	lsls	r0, r6, #25
 800313a:	d5fb      	bpl.n	8003134 <_printf_i+0x1c0>
 800313c:	8019      	strh	r1, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	6123      	str	r3, [r4, #16]
 8003142:	4615      	mov	r5, r2
 8003144:	e7bc      	b.n	80030c0 <_printf_i+0x14c>
 8003146:	682b      	ldr	r3, [r5, #0]
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	602a      	str	r2, [r5, #0]
 800314c:	681d      	ldr	r5, [r3, #0]
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	2100      	movs	r1, #0
 8003152:	4628      	mov	r0, r5
 8003154:	f7fd f84c 	bl	80001f0 <memchr>
 8003158:	b108      	cbz	r0, 800315e <_printf_i+0x1ea>
 800315a:	1b40      	subs	r0, r0, r5
 800315c:	6060      	str	r0, [r4, #4]
 800315e:	6863      	ldr	r3, [r4, #4]
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	2300      	movs	r3, #0
 8003164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003168:	e7aa      	b.n	80030c0 <_printf_i+0x14c>
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	462a      	mov	r2, r5
 800316e:	4649      	mov	r1, r9
 8003170:	4640      	mov	r0, r8
 8003172:	47d0      	blx	sl
 8003174:	3001      	adds	r0, #1
 8003176:	d0ad      	beq.n	80030d4 <_printf_i+0x160>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	079b      	lsls	r3, r3, #30
 800317c:	d413      	bmi.n	80031a6 <_printf_i+0x232>
 800317e:	68e0      	ldr	r0, [r4, #12]
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	4298      	cmp	r0, r3
 8003184:	bfb8      	it	lt
 8003186:	4618      	movlt	r0, r3
 8003188:	e7a6      	b.n	80030d8 <_printf_i+0x164>
 800318a:	2301      	movs	r3, #1
 800318c:	4632      	mov	r2, r6
 800318e:	4649      	mov	r1, r9
 8003190:	4640      	mov	r0, r8
 8003192:	47d0      	blx	sl
 8003194:	3001      	adds	r0, #1
 8003196:	d09d      	beq.n	80030d4 <_printf_i+0x160>
 8003198:	3501      	adds	r5, #1
 800319a:	68e3      	ldr	r3, [r4, #12]
 800319c:	9903      	ldr	r1, [sp, #12]
 800319e:	1a5b      	subs	r3, r3, r1
 80031a0:	42ab      	cmp	r3, r5
 80031a2:	dcf2      	bgt.n	800318a <_printf_i+0x216>
 80031a4:	e7eb      	b.n	800317e <_printf_i+0x20a>
 80031a6:	2500      	movs	r5, #0
 80031a8:	f104 0619 	add.w	r6, r4, #25
 80031ac:	e7f5      	b.n	800319a <_printf_i+0x226>
 80031ae:	bf00      	nop
 80031b0:	080035ed 	.word	0x080035ed
 80031b4:	080035fe 	.word	0x080035fe

080031b8 <__sflush_r>:
 80031b8:	898a      	ldrh	r2, [r1, #12]
 80031ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	4605      	mov	r5, r0
 80031c0:	0710      	lsls	r0, r2, #28
 80031c2:	460c      	mov	r4, r1
 80031c4:	d458      	bmi.n	8003278 <__sflush_r+0xc0>
 80031c6:	684b      	ldr	r3, [r1, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dc05      	bgt.n	80031d8 <__sflush_r+0x20>
 80031cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	dc02      	bgt.n	80031d8 <__sflush_r+0x20>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d0f9      	beq.n	80031d2 <__sflush_r+0x1a>
 80031de:	2300      	movs	r3, #0
 80031e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031e4:	682f      	ldr	r7, [r5, #0]
 80031e6:	6a21      	ldr	r1, [r4, #32]
 80031e8:	602b      	str	r3, [r5, #0]
 80031ea:	d032      	beq.n	8003252 <__sflush_r+0x9a>
 80031ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	075a      	lsls	r2, r3, #29
 80031f2:	d505      	bpl.n	8003200 <__sflush_r+0x48>
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	1ac0      	subs	r0, r0, r3
 80031f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031fa:	b10b      	cbz	r3, 8003200 <__sflush_r+0x48>
 80031fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031fe:	1ac0      	subs	r0, r0, r3
 8003200:	2300      	movs	r3, #0
 8003202:	4602      	mov	r2, r0
 8003204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003206:	6a21      	ldr	r1, [r4, #32]
 8003208:	4628      	mov	r0, r5
 800320a:	47b0      	blx	r6
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	d106      	bne.n	8003220 <__sflush_r+0x68>
 8003212:	6829      	ldr	r1, [r5, #0]
 8003214:	291d      	cmp	r1, #29
 8003216:	d82b      	bhi.n	8003270 <__sflush_r+0xb8>
 8003218:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <__sflush_r+0x108>)
 800321a:	410a      	asrs	r2, r1
 800321c:	07d6      	lsls	r6, r2, #31
 800321e:	d427      	bmi.n	8003270 <__sflush_r+0xb8>
 8003220:	2200      	movs	r2, #0
 8003222:	6062      	str	r2, [r4, #4]
 8003224:	04d9      	lsls	r1, r3, #19
 8003226:	6922      	ldr	r2, [r4, #16]
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	d504      	bpl.n	8003236 <__sflush_r+0x7e>
 800322c:	1c42      	adds	r2, r0, #1
 800322e:	d101      	bne.n	8003234 <__sflush_r+0x7c>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	b903      	cbnz	r3, 8003236 <__sflush_r+0x7e>
 8003234:	6560      	str	r0, [r4, #84]	; 0x54
 8003236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003238:	602f      	str	r7, [r5, #0]
 800323a:	2900      	cmp	r1, #0
 800323c:	d0c9      	beq.n	80031d2 <__sflush_r+0x1a>
 800323e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003242:	4299      	cmp	r1, r3
 8003244:	d002      	beq.n	800324c <__sflush_r+0x94>
 8003246:	4628      	mov	r0, r5
 8003248:	f7ff fbea 	bl	8002a20 <_free_r>
 800324c:	2000      	movs	r0, #0
 800324e:	6360      	str	r0, [r4, #52]	; 0x34
 8003250:	e7c0      	b.n	80031d4 <__sflush_r+0x1c>
 8003252:	2301      	movs	r3, #1
 8003254:	4628      	mov	r0, r5
 8003256:	47b0      	blx	r6
 8003258:	1c41      	adds	r1, r0, #1
 800325a:	d1c8      	bne.n	80031ee <__sflush_r+0x36>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c5      	beq.n	80031ee <__sflush_r+0x36>
 8003262:	2b1d      	cmp	r3, #29
 8003264:	d001      	beq.n	800326a <__sflush_r+0xb2>
 8003266:	2b16      	cmp	r3, #22
 8003268:	d101      	bne.n	800326e <__sflush_r+0xb6>
 800326a:	602f      	str	r7, [r5, #0]
 800326c:	e7b1      	b.n	80031d2 <__sflush_r+0x1a>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	e7ad      	b.n	80031d4 <__sflush_r+0x1c>
 8003278:	690f      	ldr	r7, [r1, #16]
 800327a:	2f00      	cmp	r7, #0
 800327c:	d0a9      	beq.n	80031d2 <__sflush_r+0x1a>
 800327e:	0793      	lsls	r3, r2, #30
 8003280:	680e      	ldr	r6, [r1, #0]
 8003282:	bf08      	it	eq
 8003284:	694b      	ldreq	r3, [r1, #20]
 8003286:	600f      	str	r7, [r1, #0]
 8003288:	bf18      	it	ne
 800328a:	2300      	movne	r3, #0
 800328c:	eba6 0807 	sub.w	r8, r6, r7
 8003290:	608b      	str	r3, [r1, #8]
 8003292:	f1b8 0f00 	cmp.w	r8, #0
 8003296:	dd9c      	ble.n	80031d2 <__sflush_r+0x1a>
 8003298:	6a21      	ldr	r1, [r4, #32]
 800329a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800329c:	4643      	mov	r3, r8
 800329e:	463a      	mov	r2, r7
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b0      	blx	r6
 80032a4:	2800      	cmp	r0, #0
 80032a6:	dc06      	bgt.n	80032b6 <__sflush_r+0xfe>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b4:	e78e      	b.n	80031d4 <__sflush_r+0x1c>
 80032b6:	4407      	add	r7, r0
 80032b8:	eba8 0800 	sub.w	r8, r8, r0
 80032bc:	e7e9      	b.n	8003292 <__sflush_r+0xda>
 80032be:	bf00      	nop
 80032c0:	dfbffffe 	.word	0xdfbffffe

080032c4 <_fflush_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	4605      	mov	r5, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	b913      	cbnz	r3, 80032d4 <_fflush_r+0x10>
 80032ce:	2500      	movs	r5, #0
 80032d0:	4628      	mov	r0, r5
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	b118      	cbz	r0, 80032de <_fflush_r+0x1a>
 80032d6:	6a03      	ldr	r3, [r0, #32]
 80032d8:	b90b      	cbnz	r3, 80032de <_fflush_r+0x1a>
 80032da:	f7ff fa99 	bl	8002810 <__sinit>
 80032de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f3      	beq.n	80032ce <_fflush_r+0xa>
 80032e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032e8:	07d0      	lsls	r0, r2, #31
 80032ea:	d404      	bmi.n	80032f6 <_fflush_r+0x32>
 80032ec:	0599      	lsls	r1, r3, #22
 80032ee:	d402      	bmi.n	80032f6 <_fflush_r+0x32>
 80032f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032f2:	f7ff fb92 	bl	8002a1a <__retarget_lock_acquire_recursive>
 80032f6:	4628      	mov	r0, r5
 80032f8:	4621      	mov	r1, r4
 80032fa:	f7ff ff5d 	bl	80031b8 <__sflush_r>
 80032fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003300:	07da      	lsls	r2, r3, #31
 8003302:	4605      	mov	r5, r0
 8003304:	d4e4      	bmi.n	80032d0 <_fflush_r+0xc>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	059b      	lsls	r3, r3, #22
 800330a:	d4e1      	bmi.n	80032d0 <_fflush_r+0xc>
 800330c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800330e:	f7ff fb85 	bl	8002a1c <__retarget_lock_release_recursive>
 8003312:	e7dd      	b.n	80032d0 <_fflush_r+0xc>

08003314 <__swbuf_r>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	460e      	mov	r6, r1
 8003318:	4614      	mov	r4, r2
 800331a:	4605      	mov	r5, r0
 800331c:	b118      	cbz	r0, 8003326 <__swbuf_r+0x12>
 800331e:	6a03      	ldr	r3, [r0, #32]
 8003320:	b90b      	cbnz	r3, 8003326 <__swbuf_r+0x12>
 8003322:	f7ff fa75 	bl	8002810 <__sinit>
 8003326:	69a3      	ldr	r3, [r4, #24]
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	071a      	lsls	r2, r3, #28
 800332e:	d525      	bpl.n	800337c <__swbuf_r+0x68>
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	b31b      	cbz	r3, 800337c <__swbuf_r+0x68>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	1a98      	subs	r0, r3, r2
 800333a:	6963      	ldr	r3, [r4, #20]
 800333c:	b2f6      	uxtb	r6, r6
 800333e:	4283      	cmp	r3, r0
 8003340:	4637      	mov	r7, r6
 8003342:	dc04      	bgt.n	800334e <__swbuf_r+0x3a>
 8003344:	4621      	mov	r1, r4
 8003346:	4628      	mov	r0, r5
 8003348:	f7ff ffbc 	bl	80032c4 <_fflush_r>
 800334c:	b9e0      	cbnz	r0, 8003388 <__swbuf_r+0x74>
 800334e:	68a3      	ldr	r3, [r4, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60a3      	str	r3, [r4, #8]
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	6022      	str	r2, [r4, #0]
 800335a:	701e      	strb	r6, [r3, #0]
 800335c:	6962      	ldr	r2, [r4, #20]
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	429a      	cmp	r2, r3
 8003362:	d004      	beq.n	800336e <__swbuf_r+0x5a>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	07db      	lsls	r3, r3, #31
 8003368:	d506      	bpl.n	8003378 <__swbuf_r+0x64>
 800336a:	2e0a      	cmp	r6, #10
 800336c:	d104      	bne.n	8003378 <__swbuf_r+0x64>
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	f7ff ffa7 	bl	80032c4 <_fflush_r>
 8003376:	b938      	cbnz	r0, 8003388 <__swbuf_r+0x74>
 8003378:	4638      	mov	r0, r7
 800337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f806 	bl	8003390 <__swsetup_r>
 8003384:	2800      	cmp	r0, #0
 8003386:	d0d5      	beq.n	8003334 <__swbuf_r+0x20>
 8003388:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800338c:	e7f4      	b.n	8003378 <__swbuf_r+0x64>
	...

08003390 <__swsetup_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <__swsetup_r+0xac>)
 8003394:	4605      	mov	r5, r0
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	460c      	mov	r4, r1
 800339a:	b118      	cbz	r0, 80033a4 <__swsetup_r+0x14>
 800339c:	6a03      	ldr	r3, [r0, #32]
 800339e:	b90b      	cbnz	r3, 80033a4 <__swsetup_r+0x14>
 80033a0:	f7ff fa36 	bl	8002810 <__sinit>
 80033a4:	89a3      	ldrh	r3, [r4, #12]
 80033a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033aa:	0718      	lsls	r0, r3, #28
 80033ac:	d422      	bmi.n	80033f4 <__swsetup_r+0x64>
 80033ae:	06d9      	lsls	r1, r3, #27
 80033b0:	d407      	bmi.n	80033c2 <__swsetup_r+0x32>
 80033b2:	2309      	movs	r3, #9
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c0:	e034      	b.n	800342c <__swsetup_r+0x9c>
 80033c2:	0758      	lsls	r0, r3, #29
 80033c4:	d512      	bpl.n	80033ec <__swsetup_r+0x5c>
 80033c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c8:	b141      	cbz	r1, 80033dc <__swsetup_r+0x4c>
 80033ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ce:	4299      	cmp	r1, r3
 80033d0:	d002      	beq.n	80033d8 <__swsetup_r+0x48>
 80033d2:	4628      	mov	r0, r5
 80033d4:	f7ff fb24 	bl	8002a20 <_free_r>
 80033d8:	2300      	movs	r3, #0
 80033da:	6363      	str	r3, [r4, #52]	; 0x34
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033e2:	81a3      	strh	r3, [r4, #12]
 80033e4:	2300      	movs	r3, #0
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	b94b      	cbnz	r3, 800340c <__swsetup_r+0x7c>
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003402:	d003      	beq.n	800340c <__swsetup_r+0x7c>
 8003404:	4621      	mov	r1, r4
 8003406:	4628      	mov	r0, r5
 8003408:	f000 f850 	bl	80034ac <__smakebuf_r>
 800340c:	89a0      	ldrh	r0, [r4, #12]
 800340e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003412:	f010 0301 	ands.w	r3, r0, #1
 8003416:	d00a      	beq.n	800342e <__swsetup_r+0x9e>
 8003418:	2300      	movs	r3, #0
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	6963      	ldr	r3, [r4, #20]
 800341e:	425b      	negs	r3, r3
 8003420:	61a3      	str	r3, [r4, #24]
 8003422:	6923      	ldr	r3, [r4, #16]
 8003424:	b943      	cbnz	r3, 8003438 <__swsetup_r+0xa8>
 8003426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800342a:	d1c4      	bne.n	80033b6 <__swsetup_r+0x26>
 800342c:	bd38      	pop	{r3, r4, r5, pc}
 800342e:	0781      	lsls	r1, r0, #30
 8003430:	bf58      	it	pl
 8003432:	6963      	ldrpl	r3, [r4, #20]
 8003434:	60a3      	str	r3, [r4, #8]
 8003436:	e7f4      	b.n	8003422 <__swsetup_r+0x92>
 8003438:	2000      	movs	r0, #0
 800343a:	e7f7      	b.n	800342c <__swsetup_r+0x9c>
 800343c:	20000074 	.word	0x20000074

08003440 <_sbrk_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4d06      	ldr	r5, [pc, #24]	; (800345c <_sbrk_r+0x1c>)
 8003444:	2300      	movs	r3, #0
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd fbd4 	bl	8000bf8 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_sbrk_r+0x1a>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_sbrk_r+0x1a>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000238 	.word	0x20000238

08003460 <__swhatbuf_r>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	460c      	mov	r4, r1
 8003464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003468:	2900      	cmp	r1, #0
 800346a:	b096      	sub	sp, #88	; 0x58
 800346c:	4615      	mov	r5, r2
 800346e:	461e      	mov	r6, r3
 8003470:	da0d      	bge.n	800348e <__swhatbuf_r+0x2e>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	bf0c      	ite	eq
 800347e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003482:	2340      	movne	r3, #64	; 0x40
 8003484:	2000      	movs	r0, #0
 8003486:	6031      	str	r1, [r6, #0]
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	b016      	add	sp, #88	; 0x58
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	466a      	mov	r2, sp
 8003490:	f000 f848 	bl	8003524 <_fstat_r>
 8003494:	2800      	cmp	r0, #0
 8003496:	dbec      	blt.n	8003472 <__swhatbuf_r+0x12>
 8003498:	9901      	ldr	r1, [sp, #4]
 800349a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800349e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80034a2:	4259      	negs	r1, r3
 80034a4:	4159      	adcs	r1, r3
 80034a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034aa:	e7eb      	b.n	8003484 <__swhatbuf_r+0x24>

080034ac <__smakebuf_r>:
 80034ac:	898b      	ldrh	r3, [r1, #12]
 80034ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034b0:	079d      	lsls	r5, r3, #30
 80034b2:	4606      	mov	r6, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	d507      	bpl.n	80034c8 <__smakebuf_r+0x1c>
 80034b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	2301      	movs	r3, #1
 80034c2:	6163      	str	r3, [r4, #20]
 80034c4:	b002      	add	sp, #8
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	ab01      	add	r3, sp, #4
 80034ca:	466a      	mov	r2, sp
 80034cc:	f7ff ffc8 	bl	8003460 <__swhatbuf_r>
 80034d0:	9900      	ldr	r1, [sp, #0]
 80034d2:	4605      	mov	r5, r0
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7ff fb0f 	bl	8002af8 <_malloc_r>
 80034da:	b948      	cbnz	r0, 80034f0 <__smakebuf_r+0x44>
 80034dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034e0:	059a      	lsls	r2, r3, #22
 80034e2:	d4ef      	bmi.n	80034c4 <__smakebuf_r+0x18>
 80034e4:	f023 0303 	bic.w	r3, r3, #3
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	e7e3      	b.n	80034b8 <__smakebuf_r+0xc>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	6020      	str	r0, [r4, #0]
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	9b00      	ldr	r3, [sp, #0]
 80034fc:	6163      	str	r3, [r4, #20]
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	6120      	str	r0, [r4, #16]
 8003502:	b15b      	cbz	r3, 800351c <__smakebuf_r+0x70>
 8003504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003508:	4630      	mov	r0, r6
 800350a:	f000 f81d 	bl	8003548 <_isatty_r>
 800350e:	b128      	cbz	r0, 800351c <__smakebuf_r+0x70>
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	81a3      	strh	r3, [r4, #12]
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	431d      	orrs	r5, r3
 8003520:	81a5      	strh	r5, [r4, #12]
 8003522:	e7cf      	b.n	80034c4 <__smakebuf_r+0x18>

08003524 <_fstat_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4d07      	ldr	r5, [pc, #28]	; (8003544 <_fstat_r+0x20>)
 8003528:	2300      	movs	r3, #0
 800352a:	4604      	mov	r4, r0
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	602b      	str	r3, [r5, #0]
 8003532:	f7fd fb38 	bl	8000ba6 <_fstat>
 8003536:	1c43      	adds	r3, r0, #1
 8003538:	d102      	bne.n	8003540 <_fstat_r+0x1c>
 800353a:	682b      	ldr	r3, [r5, #0]
 800353c:	b103      	cbz	r3, 8003540 <_fstat_r+0x1c>
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	bd38      	pop	{r3, r4, r5, pc}
 8003542:	bf00      	nop
 8003544:	20000238 	.word	0x20000238

08003548 <_isatty_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d06      	ldr	r5, [pc, #24]	; (8003564 <_isatty_r+0x1c>)
 800354c:	2300      	movs	r3, #0
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	f7fd fb37 	bl	8000bc6 <_isatty>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_isatty_r+0x1a>
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	b103      	cbz	r3, 8003562 <_isatty_r+0x1a>
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	20000238 	.word	0x20000238

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
