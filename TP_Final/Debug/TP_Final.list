
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080097d0  080097d0  000197d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed8  08009ed8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee0  08009ee0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000002a8  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dcf1  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028b3  00000000  00000000  0002df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb8  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009b7  00000000  00000000  000314b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028321  00000000  00000000  00031e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a0a  00000000  00000000  0005a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6808  00000000  00000000  00070b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004718  00000000  00000000  001573a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a3  00000000  00000000  0015babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097b8 	.word	0x080097b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	080097b8 	.word	0x080097b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <Error_Handler>:
HAL_StatusTypeDef returnValue1;

static void Error_Handler(void);

static void Error_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001014:	2001      	movs	r0, #1
 8001016:	f001 f80b 	bl	8002030 <BSP_LED_On>
  while (1)
 800101a:	e7fe      	b.n	800101a <Error_Handler+0xa>

0800101c <AHT10_Temp>:

	HAL_Delay(100); // Delay must be > 75 ms
	HAL_I2C_Master_Receive(&hi2c2, AHT10_ADRESS, (uint8_t*)DATA_RX, 6,time);
}*/

float AHT10_Temp(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8

	/* Convert to Temperature in °C */
	returnValue1=HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADRESS, (uint8_t*)AHT10_Config,3, time);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2303      	movs	r3, #3
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <AHT10_Temp+0xb0>)
 800102a:	2170      	movs	r1, #112	; 0x70
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <AHT10_Temp+0xb4>)
 800102e:	f001 fecb 	bl	8002dc8 <HAL_I2C_Master_Transmit>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <AHT10_Temp+0xb8>)
 8001038:	701a      	strb	r2, [r3, #0]
		if(returnValue1 != HAL_OK){
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <AHT10_Temp+0xb8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <AHT10_Temp+0x2a>
				Error_Handler();
 8001042:	f7ff ffe5 	bl	8001010 <Error_Handler>
			}

		HAL_Delay(100); // Delay must be > 75 ms
 8001046:	2064      	movs	r0, #100	; 0x64
 8001048:	f001 fa42 	bl	80024d0 <HAL_Delay>
	    HAL_I2C_Master_Receive(&hi2c2, AHT10_ADRESS, (uint8_t*)DATA_RX, 6,time);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2306      	movs	r3, #6
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <AHT10_Temp+0xbc>)
 8001054:	2170      	movs	r1, #112	; 0x70
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <AHT10_Temp+0xb4>)
 8001058:	f001 ffb4 	bl	8002fc4 <HAL_I2C_Master_Receive>

		AHT10_ADC = (((uint32_t) DATA_RX[3] & 15) << 16) | ((uint32_t) DATA_RX[4] << 8) | DATA_RX[5];
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <AHT10_Temp+0xbc>)
 800105e:	78db      	ldrb	r3, [r3, #3]
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <AHT10_Temp+0xbc>)
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4313      	orrs	r3, r2
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <AHT10_Temp+0xbc>)
 8001070:	7952      	ldrb	r2, [r2, #5]
 8001072:	4313      	orrs	r3, r2
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <AHT10_Temp+0xc0>)
 8001076:	6013      	str	r3, [r2, #0]
		Temperature = (float) (AHT10_ADC * 200.00 / 1048576.00) - 50;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <AHT10_Temp+0xc0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa51 	bl	8000524 <__aeabi_ui2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <AHT10_Temp+0xc4>)
 8001088:	f7ff fac6 	bl	8000618 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <AHT10_Temp+0xc8>)
 800109a:	f7ff fbe7 	bl	800086c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fdaf 	bl	8000c08 <__aeabi_d2f>
 80010aa:	ee07 0a10 	vmov	s14, r0
 80010ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80010e8 <AHT10_Temp+0xcc>
 80010b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <AHT10_Temp+0xd0>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]

		return Temperature;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <AHT10_Temp+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	ee07 3a90 	vmov	s15, r3
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	200002a4 	.word	0x200002a4
 80010d4:	20000214 	.word	0x20000214
 80010d8:	20000204 	.word	0x20000204
 80010dc:	2000020c 	.word	0x2000020c
 80010e0:	40690000 	.word	0x40690000
 80010e4:	41300000 	.word	0x41300000
 80010e8:	42480000 	.word	0x42480000
 80010ec:	20000210 	.word	0x20000210

080010f0 <Error_Handler>:
	TEMP_INICIAL, TEMP_BAJA, TEMP_NORMAL, TEMP_ALTA, DEFAULT,
} TEMPState_t;

static void Error_Handler(void);

static void Error_Handler(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED1);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 ff9b 	bl	8002030 <BSP_LED_On>
	while (1) {
 80010fa:	e7fe      	b.n	80010fa <Error_Handler+0xa>

080010fc <TEMPFSM_init>:
static TEMPState_t EstadoActual;
//static bool_t btnPres; //boton presionado
//static bool_t btnPres1; //boton presionado
//static bool_t btnPres2; //boton presionado

void TEMPFSM_init(conf_temp *conf_T) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	if (conf_T == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <TEMPFSM_init+0x12>
		Error_Handler();
 800110a:	f7ff fff1 	bl	80010f0 <Error_Handler>

	EstadoActual = TEMP_INICIAL;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <TEMPFSM_init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	//EstadoActual=DEFAULT;
	//printf("\033[2Jinicio\n");
	//printf("Temp_Init:%0.1f\n\r",AHT10_Temp() );
	temp_N_min = (conf_T->temp_normal - conf_T->temp_min);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a01 	vldr	s14, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <TEMPFSM_init+0x5c>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
	temp_N_max = (conf_T->temp_max - conf_T->temp_normal);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a01 	vldr	s15, [r3, #4]
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <TEMPFSM_init+0x60>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
	delayInit(&t5, Time_SENSOR);
 8001140:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <TEMPFSM_init+0x64>)
 8001146:	f000 fdb9 	bl	8001cbc <delayInit>

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000230 	.word	0x20000230
 8001158:	2000021c 	.word	0x2000021c
 800115c:	20000218 	.word	0x20000218
 8001160:	20000224 	.word	0x20000224

08001164 <TEMPFSM_update>:

void TEMPFSM_update(conf_temp *conf_T) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	switch (EstadoActual) {
 800116c:	4bb2      	ldr	r3, [pc, #712]	; (8001438 <TEMPFSM_update+0x2d4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	f200 8155 	bhi.w	8001420 <TEMPFSM_update+0x2bc>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <TEMPFSM_update+0x18>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001235 	.word	0x08001235
 8001184:	080012df 	.word	0x080012df
 8001188:	0800137b 	.word	0x0800137b

	case TEMP_INICIAL:
		//printf("\033[2Jinicio\n");
		delayRead(&t5);
 800118c:	48ab      	ldr	r0, [pc, #684]	; (800143c <TEMPFSM_update+0x2d8>)
 800118e:	f000 fdac 	bl	8001cea <delayRead>
		if (AHT10_Temp() < conf_T->temp_min) { //&& AHT10_Temp() < conf_T->temp_normal)
 8001192:	f7ff ff43 	bl	800101c <AHT10_Temp>
 8001196:	eeb0 7a40 	vmov.f32	s14, s0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	d505      	bpl.n	80011b6 <TEMPFSM_update+0x52>
			EstadoActual = TEMP_BAJA;
 80011aa:	4ba3      	ldr	r3, [pc, #652]	; (8001438 <TEMPFSM_update+0x2d4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
			temp_low_flag = true;
 80011b0:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <TEMPFSM_update+0x2dc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
			 printf("Temp2:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp3:%0.1f\n\r", conf_T->temp_min);*/
			//printf("Temp:%0.1f\n\r", conf_T->temp_min);
		}

		if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max)
 80011b6:	f7ff ff31 	bl	800101c <AHT10_Temp>
 80011ba:	eef0 6a40 	vmov.f32	s13, s0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011c4:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <TEMPFSM_update+0x2e0>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d819      	bhi.n	800120c <TEMPFSM_update+0xa8>
				&& AHT10_Temp() >= (conf_T->temp_normal - temp_N_min)) {
 80011d8:	f7ff ff20 	bl	800101c <AHT10_Temp>
 80011dc:	eef0 6a40 	vmov.f32	s13, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80011e6:	4b98      	ldr	r3, [pc, #608]	; (8001448 <TEMPFSM_update+0x2e4>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	db08      	blt.n	800120c <TEMPFSM_update+0xa8>
			EstadoActual = TEMP_NORMAL;
 80011fa:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <TEMPFSM_update+0x2d4>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	701a      	strb	r2, [r3, #0]
			temp_high_flag = false;
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <TEMPFSM_update+0x2e8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
			temp_low_flag = false;
 8001206:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <TEMPFSM_update+0x2dc>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
			/*printf("Temp4:%0.1f\n\r", conf_T->temp_max);
			 printf("Temp5:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp6:%0.1f\n\r", conf_T->temp_min);*/
		}
		if (AHT10_Temp() > conf_T->temp_max) { //|| AHT10_Temp() > (conf_T->temp_normal + 1)
 800120c:	f7ff ff06 	bl	800101c <AHT10_Temp>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a02 	vldr	s15, [r3, #8]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dc00      	bgt.n	8001226 <TEMPFSM_update+0xc2>
			 printf("Temp8:%0.1f\n\r", conf_T->temp_normal);
			 printf("Temp9:%0.1f\n\r", conf_T->temp_min);*/

		}

		break;
 8001224:	e103      	b.n	800142e <TEMPFSM_update+0x2ca>
			EstadoActual = TEMP_ALTA;
 8001226:	4b84      	ldr	r3, [pc, #528]	; (8001438 <TEMPFSM_update+0x2d4>)
 8001228:	2203      	movs	r2, #3
 800122a:	701a      	strb	r2, [r3, #0]
			temp_high_flag = true;
 800122c:	4b87      	ldr	r3, [pc, #540]	; (800144c <TEMPFSM_update+0x2e8>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
		break;
 8001232:	e0fc      	b.n	800142e <TEMPFSM_update+0x2ca>

	case TEMP_BAJA:

		if (delayRead(&t5)) { // se cumplio los 200 ms
 8001234:	4881      	ldr	r0, [pc, #516]	; (800143c <TEMPFSM_update+0x2d8>)
 8001236:	f000 fd58 	bl	8001cea <delayRead>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80f6 	beq.w	800142e <TEMPFSM_update+0x2ca>

			//temp_state = AHT10_Temp();
			printf("\033[2JTemp Baja\n"
					"Temp:%0.1f\n", AHT10_Temp());
 8001242:	f7ff feeb 	bl	800101c <AHT10_Temp>
 8001246:	ee10 3a10 	vmov	r3, s0
			printf("\033[2JTemp Baja\n"
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f98c 	bl	8000568 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	487e      	ldr	r0, [pc, #504]	; (8001450 <TEMPFSM_update+0x2ec>)
 8001256:	f004 fda1 	bl	8005d9c <iprintf>
			//delayRead(&t5); //comienza de nuevo el timer

			//buttonPressed1(); //se activa para calefaccionar el ambiente
			if (AHT10_Temp() < conf_T->temp_min) {
 800125a:	f7ff fedf 	bl	800101c <AHT10_Temp>
 800125e:	eeb0 7a40 	vmov.f32	s14, s0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d400      	bmi.n	8001274 <TEMPFSM_update+0x110>
				//BSP_LED_Off(LED3);
				BSP_LED_Off(LED1);

				delayRead(&t5);
			}
			break;
 8001272:	e0dc      	b.n	800142e <TEMPFSM_update+0x2ca>
				EstadoActual = TEMP_BAJA;
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <TEMPFSM_update+0x2d4>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
				if (temp_low_flag) {
 800127a:	4b71      	ldr	r3, [pc, #452]	; (8001440 <TEMPFSM_update+0x2dc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <TEMPFSM_update+0x12a>
					temp_low_flag = false;
 8001282:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <TEMPFSM_update+0x2dc>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
					temp_low = true;
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <TEMPFSM_update+0x2f0>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
				if (AHT10_Temp() >= (conf_T->temp_normal - temp_N_min)) {
 800128e:	f7ff fec5 	bl	800101c <AHT10_Temp>
 8001292:	eef0 6a40 	vmov.f32	s13, s0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	ed93 7a01 	vldr	s14, [r3, #4]
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <TEMPFSM_update+0x2e4>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	db0f      	blt.n	80012d0 <TEMPFSM_update+0x16c>
					EstadoActual = TEMP_NORMAL;
 80012b0:	4b61      	ldr	r3, [pc, #388]	; (8001438 <TEMPFSM_update+0x2d4>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
					if (!temp_low_flag) {
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <TEMPFSM_update+0x2dc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f083 0301 	eor.w	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <TEMPFSM_update+0x16c>
						temp_low_flag = true;
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <TEMPFSM_update+0x2dc>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
						temp_low = true;
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <TEMPFSM_update+0x2f0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
				BSP_LED_Off(LED1);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 fec7 	bl	8002064 <BSP_LED_Off>
				delayRead(&t5);
 80012d6:	4859      	ldr	r0, [pc, #356]	; (800143c <TEMPFSM_update+0x2d8>)
 80012d8:	f000 fd07 	bl	8001cea <delayRead>
			break;
 80012dc:	e0a7      	b.n	800142e <TEMPFSM_update+0x2ca>

			case TEMP_NORMAL:

			if (delayRead(&t5)) { // se cumplio los 40 ms
 80012de:	4857      	ldr	r0, [pc, #348]	; (800143c <TEMPFSM_update+0x2d8>)
 80012e0:	f000 fd03 	bl	8001cea <delayRead>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 809e 	beq.w	8001428 <TEMPFSM_update+0x2c4>
				printf("\033[2J  Temp Normal\n Temp:%0.1f\n", AHT10_Temp());
 80012ec:	f7ff fe96 	bl	800101c <AHT10_Temp>
 80012f0:	ee10 3a10 	vmov	r3, s0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f937 	bl	8000568 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4856      	ldr	r0, [pc, #344]	; (8001458 <TEMPFSM_update+0x2f4>)
 8001300:	f004 fd4c 	bl	8005d9c <iprintf>

				if (AHT10_Temp() > (conf_T->temp_normal + temp_N_max)) {
 8001304:	f7ff fe8a 	bl	800101c <AHT10_Temp>
 8001308:	eef0 6a40 	vmov.f32	s13, s0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <TEMPFSM_update+0x2e0>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dd05      	ble.n	8001332 <TEMPFSM_update+0x1ce>
					EstadoActual = TEMP_ALTA;
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <TEMPFSM_update+0x2d4>)
 8001328:	2203      	movs	r2, #3
 800132a:	701a      	strb	r2, [r3, #0]
					temp_high_flag = true;
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <TEMPFSM_update+0x2e8>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
				}

				if (AHT10_Temp() < (conf_T->temp_normal - temp_N_min)) {
 8001332:	f7ff fe73 	bl	800101c <AHT10_Temp>
 8001336:	eef0 6a40 	vmov.f32	s13, s0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <TEMPFSM_update+0x2e4>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d505      	bpl.n	8001360 <TEMPFSM_update+0x1fc>
					EstadoActual = TEMP_BAJA;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <TEMPFSM_update+0x2d4>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
					temp_low_flag = true;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <TEMPFSM_update+0x2dc>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]

				//if (AHT10_Temp() < (conf_T->temp_normal + 1) )//&& AHT10_Temp() > (conf_T->temp_normal - 1)
				//	EstadoActual = TEMP_NORMAL;
				//buttonPressed1(); //se desactiva para calefaccionar el ambiente
				//BSP_LED_On(LED2);
				BSP_LED_Off(LED3);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 fe7f 	bl	8002064 <BSP_LED_Off>
				BSP_LED_On(LED1);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 fe62 	bl	8002030 <BSP_LED_On>
				BSP_LED_Off(LED2);
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fe79 	bl	8002064 <BSP_LED_Off>

				delayRead(&t5);
 8001372:	4832      	ldr	r0, [pc, #200]	; (800143c <TEMPFSM_update+0x2d8>)
 8001374:	f000 fcb9 	bl	8001cea <delayRead>
			}

			//BSP_LED_On(LED2);

			//delayWrite(&t1, Time_AntiRebote);
			break;
 8001378:	e056      	b.n	8001428 <TEMPFSM_update+0x2c4>
			case TEMP_ALTA:

			if (delayRead(&t5)) {
 800137a:	4830      	ldr	r0, [pc, #192]	; (800143c <TEMPFSM_update+0x2d8>)
 800137c:	f000 fcb5 	bl	8001cea <delayRead>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d052      	beq.n	800142c <TEMPFSM_update+0x2c8>
				printf("\033[2JTemp Alta\n"
						"Temp:%0.1f\n", AHT10_Temp());
 8001386:	f7ff fe49 	bl	800101c <AHT10_Temp>
 800138a:	ee10 3a10 	vmov	r3, s0
				printf("\033[2JTemp Alta\n"
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8ea 	bl	8000568 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4830      	ldr	r0, [pc, #192]	; (800145c <TEMPFSM_update+0x2f8>)
 800139a:	f004 fcff 	bl	8005d9c <iprintf>
				//	temp_state = AHT10_Temp();

				//comienza de nuevo el timer

				if (AHT10_Temp() > conf_T->temp_max) {
 800139e:	f7ff fe3d 	bl	800101c <AHT10_Temp>
 80013a2:	eeb0 7a40 	vmov.f32	s14, s0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	dd0c      	ble.n	80013d0 <TEMPFSM_update+0x26c>
					EstadoActual = TEMP_ALTA;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <TEMPFSM_update+0x2d4>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	701a      	strb	r2, [r3, #0]
					if (temp_high_flag) {
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <TEMPFSM_update+0x2e8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <TEMPFSM_update+0x26c>

						temp_high_flag = false;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <TEMPFSM_update+0x2e8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
						temp_high = true;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <TEMPFSM_update+0x2fc>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
					}
				}

				if (AHT10_Temp() <= (conf_T->temp_normal + temp_N_max)) {
 80013d0:	f7ff fe24 	bl	800101c <AHT10_Temp>
 80013d4:	eef0 6a40 	vmov.f32	s13, s0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	ed93 7a01 	vldr	s14, [r3, #4]
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <TEMPFSM_update+0x2e0>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	d80f      	bhi.n	8001412 <TEMPFSM_update+0x2ae>
					EstadoActual = TEMP_NORMAL;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <TEMPFSM_update+0x2d4>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
					if (!temp_high_flag) {
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <TEMPFSM_update+0x2e8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <TEMPFSM_update+0x2ae>

						temp_high_flag = true;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <TEMPFSM_update+0x2e8>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
						temp_high = true;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <TEMPFSM_update+0x2fc>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
					}
				}

				//BSP_LED_Off(LED2);
				//buttonReleased1();
				BSP_LED_Off(LED1); //
 8001412:	2000      	movs	r0, #0
 8001414:	f000 fe26 	bl	8002064 <BSP_LED_Off>
				//BSP_LED_On(LED3); //Enfriamos el ambiente para llevarlo a la temperatura normal
				delayRead(&t5); //tiempo de muestro para obtener datos del AHT10
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <TEMPFSM_update+0x2d8>)
 800141a:	f000 fc66 	bl	8001cea <delayRead>
			}

			break;
 800141e:	e005      	b.n	800142c <TEMPFSM_update+0x2c8>
			default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			TEMPFSM_init(conf_T);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fe6b 	bl	80010fc <TEMPFSM_init>

			break;
 8001426:	e002      	b.n	800142e <TEMPFSM_update+0x2ca>
			break;
 8001428:	bf00      	nop
 800142a:	e000      	b.n	800142e <TEMPFSM_update+0x2ca>
			break;
 800142c:	bf00      	nop



		}
	}
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000230 	.word	0x20000230
 800143c:	20000224 	.word	0x20000224
 8001440:	20000223 	.word	0x20000223
 8001444:	20000218 	.word	0x20000218
 8001448:	2000021c 	.word	0x2000021c
 800144c:	20000222 	.word	0x20000222
 8001450:	080097d0 	.word	0x080097d0
 8001454:	20000221 	.word	0x20000221
 8001458:	080097ec 	.word	0x080097ec
 800145c:	0800980c 	.word	0x0800980c
 8001460:	20000220 	.word	0x20000220

08001464 <Detecto_TempHigh>:

void buttonReleased1() {
	BSP_LED_Off(LED2);
}

bool_t Detecto_TempHigh() {
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

	if (temp_high) {
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <Detecto_TempHigh+0x24>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <Detecto_TempHigh+0x16>
		temp_high = false;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <Detecto_TempHigh+0x24>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
		return true;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <Detecto_TempHigh+0x18>
	}

	else
		return false;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000220 	.word	0x20000220

0800148c <Detecto_TempLow>:

bool_t Detecto_TempLow() {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

	if (temp_low) {
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <Detecto_TempLow+0x24>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <Detecto_TempLow+0x16>
		temp_low = false;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <Detecto_TempLow+0x24>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		return true;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <Detecto_TempLow+0x18>
	} else
		return false;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000221 	.word	0x20000221

080014b4 <GPIO_Init>:
#define GPIOB_CLK_EN    __HAL_RCC_GPIOB_CLK_ENABLE()
#define GPIOE_CLK_EN    __HAL_RCC_GPIOE_CLK_ENABLE()


void GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStructE = {0};
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
 // __HAL_RCC_GPIOD_CLK_ENABLE();
 // __HAL_RCC_GPIOB_CLK_ENABLE();
 // __HAL_RCC_GPIOE_CLK_ENABLE();
	GPIOD_CLK_EN;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <GPIO_Init+0x90>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <GPIO_Init+0x90>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <GPIO_Init+0x90>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
	GPIOB_CLK_EN;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <GPIO_Init+0x90>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <GPIO_Init+0x90>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <GPIO_Init+0x90>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
	GPIOE_CLK_EN;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <GPIO_Init+0x90>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <GPIO_Init+0x90>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <GPIO_Init+0x90>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 */
    GPIO_InitStructE.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;;
 800151e:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructE.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStructE.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(PORT_E , &GPIO_InitStructE);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <GPIO_Init+0x94>)
 8001538:	f001 f900 	bl	800273c <HAL_GPIO_Init>

}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40021000 	.word	0x40021000

0800154c <ButtonGet_1>:

bool_t ButtonGet_1(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)){
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_10 )){
 8001550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <ButtonGet_1+0x20>)
 8001556:	f001 fa9d 	bl	8002a94 <HAL_GPIO_ReadPin>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <ButtonGet_1+0x18>
		return true;
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <ButtonGet_1+0x1a>
	}


	return false;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <ButtonGet_2>:

bool_t ButtonGet_2(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_12 )){
 8001574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <ButtonGet_2+0x20>)
 800157a:	f001 fa8b 	bl	8002a94 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <ButtonGet_2+0x18>
		return true;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <ButtonGet_2+0x1a>
	}


	return false;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <ButtonGet_3>:

bool_t ButtonGet_3(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_14 )){
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <ButtonGet_3+0x20>)
 800159e:	f001 fa79 	bl	8002a94 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <ButtonGet_3+0x18>
		return true;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <ButtonGet_3+0x1a>
	}


	return false;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <ButtonGet_4>:

bool_t ButtonGet_4(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

	//if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_15))
		if(!HAL_GPIO_ReadPin(PORT_E ,PIN_E_15 )){
 80015bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <ButtonGet_4+0x20>)
 80015c2:	f001 fa67 	bl	8002a94 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <ButtonGet_4+0x18>
		return true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <ButtonGet_4+0x1a>
	}


	return false;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <Conf_update>:

		}
	} while (data1 == 1);
}

void Conf_update() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

	uint8_t flag_next = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	71fb      	strb	r3, [r7, #7]
	printf("\033[2J");
 80015e6:	4830      	ldr	r0, [pc, #192]	; (80016a8 <Conf_update+0xcc>)
 80015e8:	f004 fbd8 	bl	8005d9c <iprintf>
	printf("\033[2J Temp Min:\n"
 80015ec:	482f      	ldr	r0, [pc, #188]	; (80016ac <Conf_update+0xd0>)
 80015ee:	f004 fc3b 	bl	8005e68 <puts>
			"Temp Normal:\n"
			"Temp Max:\n");

	do {

		switch (ESTADO) {
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <Conf_update+0xd4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d849      	bhi.n	800168e <Conf_update+0xb2>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <Conf_update+0x24>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001611 	.word	0x08001611
 8001604:	08001629 	.word	0x08001629
 8001608:	0800163d 	.word	0x0800163d
 800160c:	0800164d 	.word	0x0800164d

		case CONF_TEMPMIN:
			flag_next = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	71fb      	strb	r3, [r7, #7]

			conf_temperatura(flag_next);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f852 	bl	80016c0 <conf_temperatura>

			flag_next = 2;
 800161c:	2302      	movs	r3, #2
 800161e:	71fb      	strb	r3, [r7, #7]

			ESTADO = CONF_TEMPNORMAL;
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <Conf_update+0xd4>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]

			break;
 8001626:	e036      	b.n	8001696 <Conf_update+0xba>

		case CONF_TEMPNORMAL:

			conf_temperatura(flag_next);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f848 	bl	80016c0 <conf_temperatura>

			flag_next = 3;
 8001630:	2303      	movs	r3, #3
 8001632:	71fb      	strb	r3, [r7, #7]

			ESTADO = CONF_TEMPMAX;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <Conf_update+0xd4>)
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]

			break;
 800163a:	e02c      	b.n	8001696 <Conf_update+0xba>

		case CONF_TEMPMAX:
			conf_temperatura(flag_next);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f83e 	bl	80016c0 <conf_temperatura>

			ESTADO = SALIDA;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Conf_update+0xd4>)
 8001646:	2203      	movs	r2, #3
 8001648:	701a      	strb	r2, [r3, #0]

			break;
 800164a:	e024      	b.n	8001696 <Conf_update+0xba>

		case SALIDA:
			if (conf_T.temp_normal > conf_T.temp_min
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <Conf_update+0xd8>)
 800164e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <Conf_update+0xd8>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd0e      	ble.n	8001680 <Conf_update+0xa4>
					&& conf_T.temp_normal < conf_T.temp_max)
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <Conf_update+0xd8>)
 8001664:	ed93 7a01 	vldr	s14, [r3, #4]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <Conf_update+0xd8>)
 800166a:	edd3 7a02 	vldr	s15, [r3, #8]
 800166e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d503      	bpl.n	8001680 <Conf_update+0xa4>
				flag = false;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <Conf_update+0xdc>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
			else {
				printf(
						"\033[2J Error!! vuelva a ingresar los datos nuevamente Temp Min < Temp Normal < Temp Max\n");
				ESTADO = CONF_TEMPMIN;
			}
			break;
 800167e:	e00a      	b.n	8001696 <Conf_update+0xba>
				printf(
 8001680:	480e      	ldr	r0, [pc, #56]	; (80016bc <Conf_update+0xe0>)
 8001682:	f004 fbf1 	bl	8005e68 <puts>
				ESTADO = CONF_TEMPMIN;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <Conf_update+0xd4>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			break;
 800168c:	e003      	b.n	8001696 <Conf_update+0xba>
		default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			ESTADO = CONF_TEMPMIN;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <Conf_update+0xd4>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

			break;
 8001694:	bf00      	nop

		}

	}

	while (flag == true);
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <Conf_update+0xdc>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1a9      	bne.n	80015f2 <Conf_update+0x16>
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	080098e0 	.word	0x080098e0
 80016ac:	080098e8 	.word	0x080098e8
 80016b0:	20000231 	.word	0x20000231
 80016b4:	20000234 	.word	0x20000234
 80016b8:	20000003 	.word	0x20000003
 80016bc:	08009910 	.word	0x08009910

080016c0 <conf_temperatura>:

static void conf_temperatura(uint8_t flag1) {
 80016c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af04      	add	r7, sp, #16
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]

	do {
		debounceFSM_update();
 80016cc:	f000 f9be 	bl	8001a4c <debounceFSM_update>

		if (readKey_Up()) {
 80016d0:	f000 fab2 	bl	8001c38 <readKey_Up>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80c0 	beq.w	800185c <conf_temperatura+0x19c>

			if (flag1 == 1) {
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d13c      	bne.n	800175c <conf_temperatura+0x9c>

				if (conf_T.temp_min >= tempmin && conf_T.temp_min < tempmax) {
 80016e2:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <conf_temperatura+0x2fc>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	db34      	blt.n	800175c <conf_temperatura+0x9c>
 80016f2:	4bb2      	ldr	r3, [pc, #712]	; (80019bc <conf_temperatura+0x2fc>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80016fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	d52a      	bpl.n	800175c <conf_temperatura+0x9c>
					conf_T.temp_min = conf_T.temp_min + res_temp;
 8001706:	4bad      	ldr	r3, [pc, #692]	; (80019bc <conf_temperatura+0x2fc>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001710:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001714:	4ba9      	ldr	r3, [pc, #676]	; (80019bc <conf_temperatura+0x2fc>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
					printf("\033[2J");
 800171a:	48a9      	ldr	r0, [pc, #676]	; (80019c0 <conf_temperatura+0x300>)
 800171c:	f004 fb3e 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f <--\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f\n", conf_T.temp_min,
 8001720:	4ba6      	ldr	r3, [pc, #664]	; (80019bc <conf_temperatura+0x2fc>)
 8001722:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff1f 	bl	8000568 <__aeabi_f2d>
 800172a:	4680      	mov	r8, r0
 800172c:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 800172e:	4ba3      	ldr	r3, [pc, #652]	; (80019bc <conf_temperatura+0x2fc>)
 8001730:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff18 	bl	8000568 <__aeabi_f2d>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 800173c:	4b9f      	ldr	r3, [pc, #636]	; (80019bc <conf_temperatura+0x2fc>)
 800173e:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f <--\n"
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff11 	bl	8000568 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800174e:	e9cd 4500 	strd	r4, r5, [sp]
 8001752:	4642      	mov	r2, r8
 8001754:	464b      	mov	r3, r9
 8001756:	489b      	ldr	r0, [pc, #620]	; (80019c4 <conf_temperatura+0x304>)
 8001758:	f004 fb20 	bl	8005d9c <iprintf>

				}

			}

			if (flag1 == 2) {
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d13c      	bne.n	80017dc <conf_temperatura+0x11c>
				if (conf_T.temp_normal >= tempmin
 8001762:	4b96      	ldr	r3, [pc, #600]	; (80019bc <conf_temperatura+0x2fc>)
 8001764:	edd3 7a01 	vldr	s15, [r3, #4]
 8001768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	db34      	blt.n	80017dc <conf_temperatura+0x11c>
						&& conf_T.temp_normal < tempmax) {
 8001772:	4b92      	ldr	r3, [pc, #584]	; (80019bc <conf_temperatura+0x2fc>)
 8001774:	edd3 7a01 	vldr	s15, [r3, #4]
 8001778:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d52a      	bpl.n	80017dc <conf_temperatura+0x11c>
					conf_T.temp_normal = conf_T.temp_normal + res_temp;
 8001786:	4b8d      	ldr	r3, [pc, #564]	; (80019bc <conf_temperatura+0x2fc>)
 8001788:	edd3 7a01 	vldr	s15, [r3, #4]
 800178c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001794:	4b89      	ldr	r3, [pc, #548]	; (80019bc <conf_temperatura+0x2fc>)
 8001796:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 800179a:	4889      	ldr	r0, [pc, #548]	; (80019c0 <conf_temperatura+0x300>)
 800179c:	f004 fafe 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f \n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 80017a0:	4b86      	ldr	r3, [pc, #536]	; (80019bc <conf_temperatura+0x2fc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f \n"
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fedf 	bl	8000568 <__aeabi_f2d>
 80017aa:	4680      	mov	r8, r0
 80017ac:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 80017ae:	4b83      	ldr	r3, [pc, #524]	; (80019bc <conf_temperatura+0x2fc>)
 80017b0:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f \n"
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed8 	bl	8000568 <__aeabi_f2d>
 80017b8:	4604      	mov	r4, r0
 80017ba:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 80017bc:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <conf_temperatura+0x2fc>)
 80017be:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f \n"
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fed1 	bl	8000568 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017ce:	e9cd 4500 	strd	r4, r5, [sp]
 80017d2:	4642      	mov	r2, r8
 80017d4:	464b      	mov	r3, r9
 80017d6:	487c      	ldr	r0, [pc, #496]	; (80019c8 <conf_temperatura+0x308>)
 80017d8:	f004 fae0 	bl	8005d9c <iprintf>

				}
			}

			if (flag1 == 3) {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d13c      	bne.n	800185c <conf_temperatura+0x19c>
				if (conf_T.temp_max >= tempmin && conf_T.temp_max < tempmax) {
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <conf_temperatura+0x2fc>)
 80017e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	db34      	blt.n	800185c <conf_temperatura+0x19c>
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <conf_temperatura+0x2fc>)
 80017f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80017fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	d52a      	bpl.n	800185c <conf_temperatura+0x19c>
					conf_T.temp_max = conf_T.temp_max + res_temp;
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <conf_temperatura+0x2fc>)
 8001808:	edd3 7a02 	vldr	s15, [r3, #8]
 800180c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <conf_temperatura+0x2fc>)
 8001816:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 800181a:	4869      	ldr	r0, [pc, #420]	; (80019c0 <conf_temperatura+0x300>)
 800181c:	f004 fabe 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 8001820:	4b66      	ldr	r3, [pc, #408]	; (80019bc <conf_temperatura+0x2fc>)
 8001822:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe9f 	bl	8000568 <__aeabi_f2d>
 800182a:	4680      	mov	r8, r0
 800182c:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <conf_temperatura+0x2fc>)
 8001830:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe98 	bl	8000568 <__aeabi_f2d>
 8001838:	4604      	mov	r4, r0
 800183a:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 800183c:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <conf_temperatura+0x2fc>)
 800183e:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe91 	bl	8000568 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800184e:	e9cd 4500 	strd	r4, r5, [sp]
 8001852:	4642      	mov	r2, r8
 8001854:	464b      	mov	r3, r9
 8001856:	485d      	ldr	r0, [pc, #372]	; (80019cc <conf_temperatura+0x30c>)
 8001858:	f004 faa0 	bl	8005d9c <iprintf>
				}
			}

		}

		if (readKey_Down()) {
 800185c:	f000 fa00 	bl	8001c60 <readKey_Down>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80cf 	beq.w	8001a06 <conf_temperatura+0x346>
			//Lcd_Set_Cursor(4, 2);
			//Lcd_Send_String("button_2");
			if (flag1 == 1) {
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d13c      	bne.n	80018e8 <conf_temperatura+0x228>
				if (conf_T.temp_min > tempmin && conf_T.temp_min <= tempmax) {
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <conf_temperatura+0x2fc>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd34      	ble.n	80018e8 <conf_temperatura+0x228>
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <conf_temperatura+0x2fc>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d82a      	bhi.n	80018e8 <conf_temperatura+0x228>
					conf_T.temp_min = conf_T.temp_min - res_temp;
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <conf_temperatura+0x2fc>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800189c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <conf_temperatura+0x2fc>)
 80018a2:	edc3 7a00 	vstr	s15, [r3]
					printf("\033[2J");
 80018a6:	4846      	ldr	r0, [pc, #280]	; (80019c0 <conf_temperatura+0x300>)
 80018a8:	f004 fa78 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f <--\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <conf_temperatura+0x2fc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f <--\n"
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe59 	bl	8000568 <__aeabi_f2d>
 80018b6:	4680      	mov	r8, r0
 80018b8:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 80018ba:	4b40      	ldr	r3, [pc, #256]	; (80019bc <conf_temperatura+0x2fc>)
 80018bc:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f <--\n"
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe52 	bl	8000568 <__aeabi_f2d>
 80018c4:	4604      	mov	r4, r0
 80018c6:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <conf_temperatura+0x2fc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f <--\n"
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe4b 	bl	8000568 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018da:	e9cd 4500 	strd	r4, r5, [sp]
 80018de:	4642      	mov	r2, r8
 80018e0:	464b      	mov	r3, r9
 80018e2:	483b      	ldr	r0, [pc, #236]	; (80019d0 <conf_temperatura+0x310>)
 80018e4:	f004 fa5a 	bl	8005d9c <iprintf>

				}
			}

			if (flag1 == 2) {
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d13c      	bne.n	8001968 <conf_temperatura+0x2a8>
				if (conf_T.temp_normal > tempmin
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <conf_temperatura+0x2fc>)
 80018f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	dd34      	ble.n	8001968 <conf_temperatura+0x2a8>
						&& conf_T.temp_normal <= tempmax) {
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <conf_temperatura+0x2fc>)
 8001900:	edd3 7a01 	vldr	s15, [r3, #4]
 8001904:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d82a      	bhi.n	8001968 <conf_temperatura+0x2a8>
					conf_T.temp_normal = conf_T.temp_normal - res_temp;
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <conf_temperatura+0x2fc>)
 8001914:	edd3 7a01 	vldr	s15, [r3, #4]
 8001918:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800191c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <conf_temperatura+0x2fc>)
 8001922:	edc3 7a01 	vstr	s15, [r3, #4]
					printf("\033[2J");
 8001926:	4826      	ldr	r0, [pc, #152]	; (80019c0 <conf_temperatura+0x300>)
 8001928:	f004 fa38 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f <--\n"
							"Temp Max:%0.1f \n", conf_T.temp_min,
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <conf_temperatura+0x2fc>)
 800192e:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe19 	bl	8000568 <__aeabi_f2d>
 8001936:	4680      	mov	r8, r0
 8001938:	4689      	mov	r9, r1
							conf_T.temp_normal, conf_T.temp_max);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <conf_temperatura+0x2fc>)
 800193c:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe12 	bl	8000568 <__aeabi_f2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <conf_temperatura+0x2fc>)
 800194a:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe0b 	bl	8000568 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800195a:	e9cd 4500 	strd	r4, r5, [sp]
 800195e:	4642      	mov	r2, r8
 8001960:	464b      	mov	r3, r9
 8001962:	481c      	ldr	r0, [pc, #112]	; (80019d4 <conf_temperatura+0x314>)
 8001964:	f004 fa1a 	bl	8005d9c <iprintf>

				}
			}

			if (flag1 == 3) {
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d14b      	bne.n	8001a06 <conf_temperatura+0x346>
				if (conf_T.temp_max > tempmin && conf_T.temp_max <= tempmax) {
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <conf_temperatura+0x2fc>)
 8001970:	edd3 7a02 	vldr	s15, [r3, #8]
 8001974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	dd43      	ble.n	8001a06 <conf_temperatura+0x346>
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <conf_temperatura+0x2fc>)
 8001980:	edd3 7a02 	vldr	s15, [r3, #8]
 8001984:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d839      	bhi.n	8001a06 <conf_temperatura+0x346>
					conf_T.temp_max = conf_T.temp_max - res_temp;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <conf_temperatura+0x2fc>)
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800199c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <conf_temperatura+0x2fc>)
 80019a2:	edc3 7a02 	vstr	s15, [r3, #8]
					printf("\033[2J");
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <conf_temperatura+0x300>)
 80019a8:	f004 f9f8 	bl	8005d9c <iprintf>
					printf("\033[2JTemp Min:%0.1f\n"
							"Temp Normal:%0.1f\n"
							"Temp Max:%0.1f<--\n", conf_T.temp_min,
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <conf_temperatura+0x2fc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
					printf("\033[2JTemp Min:%0.1f\n"
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd9 	bl	8000568 <__aeabi_f2d>
 80019b6:	4680      	mov	r8, r0
 80019b8:	4689      	mov	r9, r1
 80019ba:	e00d      	b.n	80019d8 <conf_temperatura+0x318>
 80019bc:	20000234 	.word	0x20000234
 80019c0:	080098e0 	.word	0x080098e0
 80019c4:	08009968 	.word	0x08009968
 80019c8:	080099a4 	.word	0x080099a4
 80019cc:	080099e0 	.word	0x080099e0
 80019d0:	08009a18 	.word	0x08009a18
 80019d4:	08009a54 	.word	0x08009a54
							conf_T.temp_normal, conf_T.temp_max);
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <conf_temperatura+0x364>)
 80019da:	685b      	ldr	r3, [r3, #4]
					printf("\033[2JTemp Min:%0.1f\n"
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdc3 	bl	8000568 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
							conf_T.temp_normal, conf_T.temp_max);
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <conf_temperatura+0x364>)
 80019e8:	689b      	ldr	r3, [r3, #8]
					printf("\033[2JTemp Min:%0.1f\n"
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdbc 	bl	8000568 <__aeabi_f2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019f8:	e9cd 4500 	strd	r4, r5, [sp]
 80019fc:	4642      	mov	r2, r8
 80019fe:	464b      	mov	r3, r9
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <conf_temperatura+0x368>)
 8001a02:	f004 f9cb 	bl	8005d9c <iprintf>
				}
			}

		}

	} while (!readKey_enter());
 8001a06:	f000 f93f 	bl	8001c88 <readKey_enter>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f083 0301 	eor.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f ae5a 	bne.w	80016cc <conf_temperatura+0xc>

}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a24:	20000234 	.word	0x20000234
 8001a28:	080099e0 	.word	0x080099e0

08001a2c <debounceFSM_init>:
static debounceState_t EstadoActual;
static bool_t btnPress; //boton presionado
static bool_t btnPress1; //boton presionado
static bool_t btnPress2; //boton presionado

void debounceFSM_init() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	EstadoActual = BUTTON_UP;
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <debounceFSM_init+0x18>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	delayInit(&t1, Time_AntiRebote);
 8001a36:	2114      	movs	r1, #20
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <debounceFSM_init+0x1c>)
 8001a3a:	f000 f93f 	bl	8001cbc <delayInit>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000024c 	.word	0x2000024c
 8001a48:	20000240 	.word	0x20000240

08001a4c <debounceFSM_update>:

void debounceFSM_update() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

	switch (EstadoActual) {
 8001a50:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	f200 80cd 	bhi.w	8001bf4 <debounceFSM_update+0x1a8>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <debounceFSM_update+0x14>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001a71 	.word	0x08001a71
 8001a64:	08001aa9 	.word	0x08001aa9
 8001a68:	08001b2f 	.word	0x08001b2f
 8001a6c:	08001b89 	.word	0x08001b89

	case BUTTON_UP:

		if ((ButtonGet_1() || ButtonGet_2() || ButtonGet_3() || ButtonGet_4())) { //presiono el boton
 8001a70:	f7ff fd6c 	bl	800154c <ButtonGet_1>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <debounceFSM_update+0x4e>
 8001a7a:	f7ff fd79 	bl	8001570 <ButtonGet_2>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <debounceFSM_update+0x4e>
 8001a84:	f7ff fd86 	bl	8001594 <ButtonGet_3>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <debounceFSM_update+0x4e>
 8001a8e:	f7ff fd93 	bl	80015b8 <ButtonGet_4>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80b0 	beq.w	8001bfa <debounceFSM_update+0x1ae>
			//if ( button_1()) {  //presiono el boton
			delayRead(&t1);
 8001a9a:	485c      	ldr	r0, [pc, #368]	; (8001c0c <debounceFSM_update+0x1c0>)
 8001a9c:	f000 f925 	bl	8001cea <delayRead>
			EstadoActual = BUTTON_FALLING;
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001aa6:	e0a8      	b.n	8001bfa <debounceFSM_update+0x1ae>

	case BUTTON_FALLING:

		if (delayRead(&t1)) { // se cumplio los 40 ms
 8001aa8:	4858      	ldr	r0, [pc, #352]	; (8001c0c <debounceFSM_update+0x1c0>)
 8001aaa:	f000 f91e 	bl	8001cea <delayRead>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a4 	beq.w	8001bfe <debounceFSM_update+0x1b2>
			if ((BSP_PB_GetState(BUTTON_USER) || ButtonGet_1() || ButtonGet_2()
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 fb5e 	bl	8002178 <BSP_PB_GetState>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <debounceFSM_update+0x9e>
 8001ac2:	f7ff fd43 	bl	800154c <ButtonGet_1>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10e      	bne.n	8001aea <debounceFSM_update+0x9e>
 8001acc:	f7ff fd50 	bl	8001570 <ButtonGet_2>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <debounceFSM_update+0x9e>
					|| ButtonGet_3() || ButtonGet_4())) { //SI ESTA PRESIONADO PRENDO EL LED
 8001ad6:	f7ff fd5d 	bl	8001594 <ButtonGet_3>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d104      	bne.n	8001aea <debounceFSM_update+0x9e>
 8001ae0:	f7ff fd6a 	bl	80015b8 <ButtonGet_4>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01d      	beq.n	8001b26 <debounceFSM_update+0xda>
				//if (button_1()) {  //SI ESTA PRESIONADO PRENDO EL LED
				//delayRead(&t1);
				//BSP_LED_On(LED1);

				buttonPressed();
 8001aea:	f000 f897 	bl	8001c1c <buttonPressed>
				if (ButtonGet_1()) {
 8001aee:	f7ff fd2d 	bl	800154c <ButtonGet_1>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <debounceFSM_update+0xb2>
					btnPress = true;
 8001af8:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <debounceFSM_update+0x1c4>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_2()) {
 8001afe:	f7ff fd37 	bl	8001570 <ButtonGet_2>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <debounceFSM_update+0xc2>
					btnPress1 = true;
 8001b08:	4b42      	ldr	r3, [pc, #264]	; (8001c14 <debounceFSM_update+0x1c8>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
				}
				if (ButtonGet_3()) {
 8001b0e:	f7ff fd41 	bl	8001594 <ButtonGet_3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <debounceFSM_update+0xd2>
					btnPress2 = true;
 8001b18:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <debounceFSM_update+0x1cc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
				}

				EstadoActual = BUTTON_DOWN;
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001b20:	2202      	movs	r2, #2
 8001b22:	701a      	strb	r2, [r3, #0]
			} else {
				EstadoActual = BUTTON_UP;

			}
		}
		break;
 8001b24:	e06b      	b.n	8001bfe <debounceFSM_update+0x1b2>
				EstadoActual = BUTTON_UP;
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
		break;
 8001b2c:	e067      	b.n	8001bfe <debounceFSM_update+0x1b2>

	case BUTTON_DOWN:
		if (!(BSP_PB_GetState(BUTTON_USER) || ButtonGet_1() || ButtonGet_2()
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 fb22 	bl	8002178 <BSP_PB_GetState>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d163      	bne.n	8001c02 <debounceFSM_update+0x1b6>
 8001b3a:	f7ff fd07 	bl	800154c <ButtonGet_1>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d05b      	beq.n	8001c02 <debounceFSM_update+0x1b6>
 8001b4a:	f7ff fd11 	bl	8001570 <ButtonGet_2>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d053      	beq.n	8001c02 <debounceFSM_update+0x1b6>
				|| ButtonGet_3() || ButtonGet_4())) { // el pulsador esta en estado bajo
 8001b5a:	f7ff fd1b 	bl	8001594 <ButtonGet_3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d04b      	beq.n	8001c02 <debounceFSM_update+0x1b6>
 8001b6a:	f7ff fd25 	bl	80015b8 <ButtonGet_4>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
		if (!(BSP_PB_GetState(BUTTON_USER) || ButtonGet_1() || ButtonGet_2()
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d043      	beq.n	8001c02 <debounceFSM_update+0x1b6>
			//if ( !button_1()) { // el pulsador esta en estado bajo
			delayRead(&t1); //comienza el timer
 8001b7a:	4824      	ldr	r0, [pc, #144]	; (8001c0c <debounceFSM_update+0x1c0>)
 8001b7c:	f000 f8b5 	bl	8001cea <delayRead>

			EstadoActual = BUTTON_RAISING;
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001b82:	2203      	movs	r2, #3
 8001b84:	701a      	strb	r2, [r3, #0]
		}

		//delayWrite(&t1, Time_AntiRebote);
		break;
 8001b86:	e03c      	b.n	8001c02 <debounceFSM_update+0x1b6>
	case BUTTON_RAISING:

		if (delayRead(&t1)) {
 8001b88:	4820      	ldr	r0, [pc, #128]	; (8001c0c <debounceFSM_update+0x1c0>)
 8001b8a:	f000 f8ae 	bl	8001cea <delayRead>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d037      	beq.n	8001c04 <debounceFSM_update+0x1b8>
			if (!(BSP_PB_GetState(BUTTON_USER) || ButtonGet_1() || ButtonGet_2()
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 faef 	bl	8002178 <BSP_PB_GetState>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d125      	bne.n	8001bec <debounceFSM_update+0x1a0>
 8001ba0:	f7ff fcd4 	bl	800154c <ButtonGet_1>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01d      	beq.n	8001bec <debounceFSM_update+0x1a0>
 8001bb0:	f7ff fcde 	bl	8001570 <ButtonGet_2>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <debounceFSM_update+0x1a0>
					|| ButtonGet_3() || ButtonGet_4())) {
 8001bc0:	f7ff fce8 	bl	8001594 <ButtonGet_3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <debounceFSM_update+0x1a0>
 8001bd0:	f7ff fcf2 	bl	80015b8 <ButtonGet_4>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
			if (!(BSP_PB_GetState(BUTTON_USER) || ButtonGet_1() || ButtonGet_2()
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <debounceFSM_update+0x1a0>
				//	if ( !button_1()) {
				//delayRead(&t1);
				//BSP_LED_Off(LED1);
				buttonReleased();
 8001be0:	f000 f823 	bl	8001c2a <buttonReleased>

				EstadoActual = BUTTON_UP;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			} else
				EstadoActual = BUTTON_DOWN;

			break;
 8001bea:	e00b      	b.n	8001c04 <debounceFSM_update+0x1b8>
				EstadoActual = BUTTON_DOWN;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <debounceFSM_update+0x1bc>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]
			break;
 8001bf2:	e007      	b.n	8001c04 <debounceFSM_update+0x1b8>
			default:
			//Si algo modificó la variable estadoActual
			// a un estado no válido llevo la MEF a un
			// lugar seguro, por ejemplo, la reinicio:
			//controlDeErrores();
			debounceFSM_init();
 8001bf4:	f7ff ff1a 	bl	8001a2c <debounceFSM_init>

			break;
 8001bf8:	e004      	b.n	8001c04 <debounceFSM_update+0x1b8>
		break;
 8001bfa:	bf00      	nop
 8001bfc:	e002      	b.n	8001c04 <debounceFSM_update+0x1b8>
		break;
 8001bfe:	bf00      	nop
 8001c00:	e000      	b.n	8001c04 <debounceFSM_update+0x1b8>
		break;
 8001c02:	bf00      	nop

		}
	}

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000024c 	.word	0x2000024c
 8001c0c:	20000240 	.word	0x20000240
 8001c10:	2000024d 	.word	0x2000024d
 8001c14:	2000024e 	.word	0x2000024e
 8001c18:	2000024f 	.word	0x2000024f

08001c1c <buttonPressed>:

void buttonPressed() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

	BSP_LED_On(LED1);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 fa05 	bl	8002030 <BSP_LED_On>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <buttonReleased>:

void buttonReleased() {
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 fa18 	bl	8002064 <BSP_LED_Off>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <readKey_Up>:

bool_t readKey_Up() {
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

	if (btnPress) {
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <readKey_Up+0x24>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <readKey_Up+0x16>
		btnPress = false;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <readKey_Up+0x24>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
		return true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <readKey_Up+0x18>
	} else
		return false;
 8001c4e:	2300      	movs	r3, #0

}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000024d 	.word	0x2000024d

08001c60 <readKey_Down>:

bool_t readKey_Down() {
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

	if (btnPress1) {
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <readKey_Down+0x24>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <readKey_Down+0x16>
		btnPress1 = false;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <readKey_Down+0x24>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
		return true;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <readKey_Down+0x18>
	} else
		return false;
 8001c76:	2300      	movs	r3, #0

}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000024e 	.word	0x2000024e

08001c88 <readKey_enter>:

bool_t readKey_enter() {
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

	if (btnPress2) {
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <readKey_enter+0x24>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <readKey_enter+0x16>
		btnPress2 = false;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <readKey_enter+0x24>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
		return true;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <readKey_enter+0x18>
	} else
		return false;
 8001c9e:	2300      	movs	r3, #0

}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000024f 	.word	0x2000024f

08001cb0 <Error_Handler>:
#include <API_delay.h>

static void Error_Handler(void);

static void Error_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED1);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f9bb 	bl	8002030 <BSP_LED_On>
  while (1)
 8001cba:	e7fe      	b.n	8001cba <Error_Handler+0xa>

08001cbc <delayInit>:
  }
}



void delayInit(delay_t *delay, tick_t duration) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]

	/* Initializatio ERROR*/
	if(delay==NULL || duration==0)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <delayInit+0x16>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <delayInit+0x1a>
		Error_Handler();
 8001cd2:	f7ff ffed 	bl	8001cb0 <Error_Handler>

	delay->duration = duration;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	721a      	strb	r2, [r3, #8]
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <delayRead>:

 bool_t delayRead( delay_t * delay ){
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]

	 tick_t diff=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]

	 /* Initializatio ERROR*/
	 if(delay==NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <delayRead+0x16>
	 		Error_Handler();
 8001cfc:	f7ff ffd8 	bl	8001cb0 <Error_Handler>


	 if(!delay->running){
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7a1b      	ldrb	r3, [r3, #8]
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <delayRead+0x34>

		  delay->startTime=HAL_GetTick(); //se asigna el valor cada 1mms
 8001d0e:	f000 fbd3 	bl	80024b8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	601a      	str	r2, [r3, #0]
		  delay->running = true;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	721a      	strb	r2, [r3, #8]

		 // return false;
	  }

	 diff=(HAL_GetTick() - delay->startTime);
 8001d1e:	f000 fbcb 	bl	80024b8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	60fb      	str	r3, [r7, #12]

	 if (diff>= delay->duration) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d304      	bcc.n	8001d40 <delayRead+0x56>

			delay->running = false;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	721a      	strb	r2, [r3, #8]

			return true;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <delayRead+0x58>
		}
		  else
			return false;
 8001d40:	2300      	movs	r3, #0
	  }
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <Error_Handler>:
I2C_HandleTypeDef hi2c2;

static void Error_Handler(void);

static void Error_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 f96e 	bl	8002030 <BSP_LED_On>
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0xa>
	...

08001d58 <I2C_Init>:
}


/* I2C1 init function */
void I2C_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	; 0x38
 8001d5c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
	 GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
    /* I2C1 clock enable */
   __HAL_RCC_I2C1_CLK_ENABLE(); //IMPORTANTE
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <I2C_Init+0x164>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <I2C_Init+0x164>)
 8001d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <I2C_Init+0x164>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_I2C2_CLK_ENABLE(); //IMPORTANTE
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <I2C_Init+0x164>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <I2C_Init+0x164>)
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <I2C_Init+0x164>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

   __HAL_RCC_GPIOB_CLK_ENABLE();//IMPORTANTE
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <I2C_Init+0x164>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <I2C_Init+0x164>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <I2C_Init+0x164>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <I2C_Init+0x168>)
 8001dd4:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <I2C_Init+0x16c>)
 8001dd6:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <I2C_Init+0x168>)
 8001dda:	4a3b      	ldr	r2, [pc, #236]	; (8001ec8 <I2C_Init+0x170>)
 8001ddc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <I2C_Init+0x168>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <I2C_Init+0x168>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <I2C_Init+0x168>)
 8001dec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df0:	611a      	str	r2, [r3, #16]

  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <I2C_Init+0x168>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <I2C_Init+0x168>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <I2C_Init+0x168>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <I2C_Init+0x168>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 8001e0a:	482d      	ldr	r0, [pc, #180]	; (8001ec0 <I2C_Init+0x168>)
 8001e0c:	f000 fe8e 	bl	8002b2c <HAL_I2C_Init>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e10:	482b      	ldr	r0, [pc, #172]	; (8001ec0 <I2C_Init+0x168>)
 8001e12:	f000 fe8b 	bl	8002b2c <HAL_I2C_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_Init+0xc8>
  {
    Error_Handler();
 8001e1c:	f7ff ff95 	bl	8001d4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

     GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e26:	2312      	movs	r3, #18
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
     GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e32:	2304      	movs	r3, #4
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <I2C_Init+0x174>)
 8001e3e:	f000 fc7d 	bl	800273c <HAL_GPIO_Init>




     /* USER CODE END I2C1_Init 1 */
      hi2c2.Instance = I2C2;
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <I2C_Init+0x178>)
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <I2C_Init+0x17c>)
 8001e46:	601a      	str	r2, [r3, #0]
      hi2c2.Init.ClockSpeed = 100000;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <I2C_Init+0x178>)
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <I2C_Init+0x170>)
 8001e4c:	605a      	str	r2, [r3, #4]
      hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <I2C_Init+0x178>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
      hi2c2.Init.OwnAddress1 = 0;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <I2C_Init+0x178>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
      hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <I2C_Init+0x178>)
 8001e5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e60:	611a      	str	r2, [r3, #16]
      hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <I2C_Init+0x178>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
      hi2c2.Init.OwnAddress2 = 0;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <I2C_Init+0x178>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
      hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <I2C_Init+0x178>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
      hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <I2C_Init+0x178>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
      HAL_I2C_Init(&hi2c2);
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <I2C_Init+0x178>)
 8001e7c:	f000 fe56 	bl	8002b2c <HAL_I2C_Init>
      if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e80:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <I2C_Init+0x178>)
 8001e82:	f000 fe53 	bl	8002b2c <HAL_I2C_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <I2C_Init+0x138>
      {
        Error_Handler();
 8001e8c:	f7ff ff5d 	bl	8001d4a <Error_Handler>
      }
      /* USER CODE BEGIN I2C1_Init 2 */

      /* USER CODE END I2C1_Init 2 */

         GPIO_InitStruct2.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e94:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct2.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
         GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
         GPIO_InitStruct2.Alternate = GPIO_AF4_I2C2;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	623b      	str	r3, [r7, #32]
         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <I2C_Init+0x174>)
 8001eae:	f000 fc45 	bl	800273c <HAL_GPIO_Init>

}
 8001eb2:	bf00      	nop
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	20000250 	.word	0x20000250
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	000186a0 	.word	0x000186a0
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	200002a4 	.word	0x200002a4
 8001ed4:	40005800 	.word	0x40005800

08001ed8 <uartInit>:



/* Inicializa la uart, devuelve un true si fue exitoso o un false si hubo un error */
bool_t uartInit()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = ODD parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <uartInit+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <uartInit+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate     = BAUDRATE;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <uartInit+0x50>)
 8001ee4:	f242 3228 	movw	r2, #9000	; 0x2328
 8001ee8:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <uartInit+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <uartInit+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_ODD;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <uartInit+0x50>)
 8001ef8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001efc:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <uartInit+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <uartInit+0x50>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <uartInit+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <uartInit+0x50>)
 8001f12:	f002 faed 	bl	80044f0 <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <uartInit+0x48>
	{
		/* Initialization Error */
		return false;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <uartInit+0x4a>
	}



	return true;
 8001f20:	2301      	movs	r3, #1
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200002f8 	.word	0x200002f8
 8001f2c:	40004800 	.word	0x40004800

08001f30 <__io_putchar>:
{
	HAL_UART_Receive(&UartHandle, pstring, size, 0xFFFF);
}

PUTCHAR_PROTOTYPE
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t*)&ch, 1, 0xFFFF);
 8001f38:	1d39      	adds	r1, r7, #4
 8001f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <__io_putchar+0x20>)
 8001f42:	f002 fb22 	bl	800458a <HAL_UART_Transmit>

	return ch;
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200002f8 	.word	0x200002f8

08001f54 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
    uint8_t ch = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
    __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <__io_getchar+0x38>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <__io_getchar+0x38>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
    HAL_UART_Receive(&UartHandle, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f74:	1df9      	adds	r1, r7, #7
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <__io_getchar+0x38>)
 8001f7e:	f002 fb96 	bl	80046ae <HAL_UART_Receive>
    return ch;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200002f8 	.word	0x200002f8

08001f90 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10e      	bne.n	8001fbe <BSP_LED_Init+0x2e>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <BSP_LED_Init+0x94>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <BSP_LED_Init+0x94>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <BSP_LED_Init+0x94>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	e00d      	b.n	8001fda <BSP_LED_Init+0x4a>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <BSP_LED_Init+0x94>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <BSP_LED_Init+0x94>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <BSP_LED_Init+0x94>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <BSP_LED_Init+0x98>)
 8001fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <BSP_LED_Init+0x9c>)
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	f107 0214 	add.w	r2, r7, #20
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fb9c 	bl	800273c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <BSP_LED_Init+0x9c>)
 8002008:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <BSP_LED_Init+0x98>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	f000 fd54 	bl	8002ac4 <HAL_GPIO_WritePin>
}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08009a90 	.word	0x08009a90
 800202c:	20000004 	.word	0x20000004

08002030 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <BSP_LED_On+0x2c>)
 800203e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <BSP_LED_On+0x30>)
 8002046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f000 fd39 	bl	8002ac4 <HAL_GPIO_WritePin>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004
 8002060:	08009a90 	.word	0x08009a90

08002064 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <BSP_LED_Off+0x2c>)
 8002072:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <BSP_LED_Off+0x30>)
 800207a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	f000 fd1f 	bl	8002ac4 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000004 	.word	0x20000004
 8002094:	08009a90 	.word	0x08009a90

08002098 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <BSP_LED_Toggle+0x2c>)
 80020a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4906      	ldr	r1, [pc, #24]	; (80020c8 <BSP_LED_Toggle+0x30>)
 80020ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f000 fd1e 	bl	8002af6 <HAL_GPIO_TogglePin>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000004 	.word	0x20000004
 80020c8:	08009a90 	.word	0x08009a90

080020cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	460a      	mov	r2, r1
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	4613      	mov	r3, r2
 80020da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <BSP_PB_Init+0xa4>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <BSP_PB_Init+0xa4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <BSP_PB_Init+0xa4>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80020fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002102:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002108:	2302      	movs	r3, #2
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <BSP_PB_Init+0xa8>)
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	f107 020c 	add.w	r2, r7, #12
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb0c 	bl	800273c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002124:	79bb      	ldrb	r3, [r7, #6]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d11d      	bne.n	8002166 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800212a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8002134:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002138:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <BSP_PB_Init+0xa8>)
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 faf7 	bl	800273c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800214e:	2328      	movs	r3, #40	; 0x28
 8002150:	b25b      	sxtb	r3, r3
 8002152:	2200      	movs	r2, #0
 8002154:	210f      	movs	r1, #15
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fab9 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800215c:	2328      	movs	r3, #40	; 0x28
 800215e:	b25b      	sxtb	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fad0 	bl	8002706 <HAL_NVIC_EnableIRQ>
  }
}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	20000010 	.word	0x20000010

08002178 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <BSP_PB_GetState+0x28>)
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fc7f 	bl	8002a94 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000010 	.word	0x20000010

080021a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <SystemInit+0x60>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <SystemInit+0x60>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <SystemInit+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <SystemInit+0x64>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <SystemInit+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <SystemInit+0x64>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <SystemInit+0x64>)
 80021d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <SystemInit+0x64>)
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <SystemInit+0x68>)
 80021de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <SystemInit+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <SystemInit+0x64>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <SystemInit+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SystemInit+0x60>)
 80021f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f8:	609a      	str	r2, [r3, #8]
#endif
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00
 8002208:	40023800 	.word	0x40023800
 800220c:	24003010 	.word	0x24003010

08002210 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002264:	f000 f914 	bl	8002490 <HAL_IncTick>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_kill>:

int _kill(int pid, int sig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002286:	f003 ff41 	bl	800610c <__errno>
 800228a:	4603      	mov	r3, r0
 800228c:	2216      	movs	r2, #22
 800228e:	601a      	str	r2, [r3, #0]
	return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_exit>:

void _exit (int status)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffe7 	bl	800227c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ae:	e7fe      	b.n	80022ae <_exit+0x12>

080022b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e00a      	b.n	80022d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022c2:	f7ff fe47 	bl	8001f54 <__io_getchar>
 80022c6:	4601      	mov	r1, r0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	b2ca      	uxtb	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf0      	blt.n	80022c2 <_read+0x12>
	}

return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e009      	b.n	8002310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fe13 	bl	8001f30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	dbf1      	blt.n	80022fc <_write+0x12>
	}
	return len;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_close>:

int _close(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234a:	605a      	str	r2, [r3, #4]
	return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_isatty>:

int _isatty(int file)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return 1;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f003 fea6 	bl	800610c <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20030000 	.word	0x20030000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	2000033c 	.word	0x2000033c
 80023f4:	20000490 	.word	0x20000490

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_Init+0x34>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_Init+0x34>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_Init+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_Init+0x34>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f94f 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	200f      	movs	r0, #15
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f001 fb76 	bl	8003b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f967 	bl	8002722 <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246c:	f000 f92f 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000014 	.word	0x20000014
 8002488:	2000001c 	.word	0x2000001c
 800248c:	20000018 	.word	0x20000018

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000001c 	.word	0x2000001c
 80024b4:	20000340 	.word	0x20000340

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000340 	.word	0x20000340

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000001c 	.word	0x2000001c

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e177      	b.n	8002a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	f040 8166 	bne.w	8002a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d005      	beq.n	800278e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	2b02      	cmp	r3, #2
 800278c:	d130      	bne.n	80027f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d017      	beq.n	800282c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80c0 	beq.w	8002a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <HAL_GPIO_Init+0x328>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d037      	beq.n	800297a <HAL_GPIO_Init+0x23e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_GPIO_Init+0x23a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_GPIO_Init+0x334>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <HAL_GPIO_Init+0x236>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_GPIO_Init+0x338>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x232>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_GPIO_Init+0x33c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x22e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_GPIO_Init+0x340>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x22a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_GPIO_Init+0x344>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a51      	ldr	r2, [pc, #324]	; (8002a84 <HAL_GPIO_Init+0x348>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <HAL_GPIO_Init+0x34c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <HAL_GPIO_Init+0x350>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x21a>
 8002952:	2309      	movs	r3, #9
 8002954:	e012      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002956:	230a      	movs	r3, #10
 8002958:	e010      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295a:	2308      	movs	r3, #8
 800295c:	e00e      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295e:	2307      	movs	r3, #7
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002962:	2306      	movs	r3, #6
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x240>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x328>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_GPIO_Init+0x354>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c4:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f ae84 	bls.w	8002758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022400 	.word	0x40022400
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae0:	e003      	b.n	8002aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	041a      	lsls	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b08:	887a      	ldrh	r2, [r7, #2]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	400b      	ands	r3, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e12b      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f92e 	bl	8002db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b90:	f001 fc86 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8002b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a81      	ldr	r2, [pc, #516]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d807      	bhi.n	8002bb0 <HAL_I2C_Init+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_I2C_Init+0x278>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e006      	b.n	8002bbe <HAL_I2C_Init+0x92>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	; (8002da8 <HAL_I2C_Init+0x27c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0e7      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a78      	ldr	r2, [pc, #480]	; (8002dac <HAL_I2C_Init+0x280>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9b      	lsrs	r3, r3, #18
 8002bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d802      	bhi.n	8002c00 <HAL_I2C_Init+0xd4>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	e009      	b.n	8002c14 <HAL_I2C_Init+0xe8>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_I2C_Init+0x284>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	3301      	adds	r3, #1
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	495c      	ldr	r1, [pc, #368]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d819      	bhi.n	8002c68 <HAL_I2C_Init+0x13c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e59      	subs	r1, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c48:	400b      	ands	r3, r1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_I2C_Init+0x138>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e59      	subs	r1, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c62:	e051      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e04f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <HAL_I2C_Init+0x168>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e012      	b.n	8002cba <HAL_I2C_Init+0x18e>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e58      	subs	r0, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	0099      	lsls	r1, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x196>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e022      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_I2C_Init+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e58      	subs	r0, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	440b      	add	r3, r1
 8002cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	0099      	lsls	r1, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6809      	ldr	r1, [r1, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6911      	ldr	r1, [r2, #16]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	000186a0 	.word	0x000186a0
 8002da4:	001e847f 	.word	0x001e847f
 8002da8:	003d08ff 	.word	0x003d08ff
 8002dac:	431bde83 	.word	0x431bde83
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fb6c 	bl	80024b8 <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80e0 	bne.w	8002fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4970      	ldr	r1, [pc, #448]	; (8002fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fc58 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d3      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fac2 	bl	8003410 <I2C_MasterRequestWrite>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eac:	e066      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fcd2 	bl	800385c <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fcc2 	bl	80038de <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d194      	bne.n	8002eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fa6e 	bl	80024b8 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 820b 	bne.w	8003402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	497c      	ldr	r1, [pc, #496]	; (80031e8 <HAL_I2C_Master_Receive+0x224>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb5a 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e1fe      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_Master_Receive+0x50>
 8003010:	2302      	movs	r3, #2
 8003012:	e1f7      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d007      	beq.n	800303a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2222      	movs	r2, #34	; 0x22
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2210      	movs	r2, #16
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <HAL_I2C_Master_Receive+0x228>)
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800307c:	8979      	ldrh	r1, [r7, #10]
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa46 	bl	8003514 <I2C_MasterRequestRead>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e1b8      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d113      	bne.n	80030c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e18c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d11b      	bne.n	8003102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e16c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b02      	cmp	r3, #2
 8003108:	d11b      	bne.n	8003142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	e14c      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003168:	e138      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b03      	cmp	r3, #3
 8003170:	f200 80f1 	bhi.w	8003356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d123      	bne.n	80031c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fbed 	bl	8003960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e139      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c2:	e10b      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d14e      	bne.n	800326a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	2200      	movs	r2, #0
 80031d4:	4906      	ldr	r1, [pc, #24]	; (80031f0 <HAL_I2C_Master_Receive+0x22c>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fa6a 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e10e      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
 80031e6:	bf00      	nop
 80031e8:	00100002 	.word	0x00100002
 80031ec:	ffff0000 	.word	0xffff0000
 80031f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003268:	e0b8      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	4966      	ldr	r1, [pc, #408]	; (800340c <HAL_I2C_Master_Receive+0x448>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fa1b 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0bf      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	494f      	ldr	r1, [pc, #316]	; (800340c <HAL_I2C_Master_Receive+0x448>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f9ed 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e091      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003354:	e042      	b.n	80033dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb00 	bl	8003960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e04c      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d118      	bne.n	80033dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f47f aec2 	bne.w	800316a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00010004 	.word	0x00010004

08003410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d006      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d003      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003438:	d108      	bne.n	800344c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00b      	b.n	8003464 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b12      	cmp	r3, #18
 8003452:	d107      	bne.n	8003464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f91d 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d103      	bne.n	8003494 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e035      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d108      	bne.n	80034b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e01b      	b.n	80034ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	11db      	asrs	r3, r3, #7
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0306 	and.w	r3, r3, #6
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f063 030f 	orn	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <I2C_MasterRequestWrite+0xfc>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f943 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e010      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <I2C_MasterRequestWrite+0x100>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f933 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003538:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d006      	beq.n	800354e <I2C_MasterRequestRead+0x3a>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d003      	beq.n	800354e <I2C_MasterRequestRead+0x3a>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800354c:	d108      	bne.n	8003560 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e00b      	b.n	8003578 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	2b11      	cmp	r3, #17
 8003566:	d107      	bne.n	8003578 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f893 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359e:	d103      	bne.n	80035a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e079      	b.n	80036a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b4:	d108      	bne.n	80035c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	e05f      	b.n	8003688 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	11db      	asrs	r3, r3, #7
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f063 030f 	orn	r3, r3, #15
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4930      	ldr	r1, [pc, #192]	; (80036a8 <I2C_MasterRequestRead+0x194>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f8b9 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e054      	b.n	80036a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4929      	ldr	r1, [pc, #164]	; (80036ac <I2C_MasterRequestRead+0x198>)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f8a9 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e044      	b.n	80036a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f831 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d103      	bne.n	800366c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e017      	b.n	80036a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003670:	897b      	ldrh	r3, [r7, #10]
 8003672:	11db      	asrs	r3, r3, #7
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f003 0306 	and.w	r3, r3, #6
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f063 030e 	orn	r3, r3, #14
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4907      	ldr	r1, [pc, #28]	; (80036ac <I2C_MasterRequestRead+0x198>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f865 	bl	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	00010008 	.word	0x00010008
 80036ac:	00010002 	.word	0x00010002

080036b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c0:	e025      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c8:	d021      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fef5 	bl	80024b8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d116      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e023      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d10d      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	e00c      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	429a      	cmp	r2, r3
 8003752:	d0b6      	beq.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376c:	e051      	b.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d123      	bne.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e046      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	d021      	beq.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe fe73 	bl	80024b8 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e020      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10c      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e00b      	b.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d18d      	bne.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003868:	e02d      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8ce 	bl	8003a0c <I2C_IsAcknowledgeFailed>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003880:	d021      	beq.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe fe19 	bl	80024b8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d1ca      	bne.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ea:	e02d      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f88d 	bl	8003a0c <I2C_IsAcknowledgeFailed>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e02d      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003902:	d021      	beq.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003904:	f7fe fdd8 	bl	80024b8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e007      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d1ca      	bne.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800396c:	e042      	b.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b10      	cmp	r3, #16
 800397a:	d119      	bne.n	80039b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0210 	mvn.w	r2, #16
 8003984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e029      	b.n	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fe fd82 	bl	80024b8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d1b5      	bne.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a22:	d11b      	bne.n	8003a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	6313      	str	r3, [r2, #48]	; 0x30
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aba:	6413      	str	r3, [r2, #64]	; 0x40
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_UART_MspInit+0x9c>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8003ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003ada:	2307      	movs	r3, #7
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <HAL_UART_MspInit+0xa0>)
 8003ae6:	f7fe fe29 	bl	800273c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8003aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003af0:	2307      	movs	r3, #7
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4619      	mov	r1, r3
 8003afa:	4804      	ldr	r0, [pc, #16]	; (8003b0c <HAL_UART_MspInit+0xa0>)
 8003afc:	f7fe fe1e 	bl	800273c <HAL_GPIO_Init>
}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020c00 	.word	0x40020c00

08003b10 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0

}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4c:	f7fe fcb4 	bl	80024b8 <HAL_GetTick>
 8003b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b52:	e009      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b54:	f7fe fcb0 	bl	80024b8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b62:	d901      	bls.n	8003b68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e01f      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d1ee      	bne.n	8003b54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7c:	f7fe fc9c 	bl	80024b8 <HAL_GetTick>
 8003b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b82:	e009      	b.n	8003b98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b84:	f7fe fc98 	bl	80024b8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b92:	d901      	bls.n	8003b98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e007      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	420e0040 	.word	0x420e0040
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	420e0044 	.word	0x420e0044

08003bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e267      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d075      	beq.n	8003cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bde:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d00c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bea:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d112      	bne.n	8003c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf6:	4b82      	ldr	r3, [pc, #520]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	4b7e      	ldr	r3, [pc, #504]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d05b      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x108>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d157      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e242      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x74>
 8003c26:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a75      	ldr	r2, [pc, #468]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xb0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x98>
 8003c3e:	4b70      	ldr	r3, [pc, #448]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6f      	ldr	r2, [pc, #444]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6c      	ldr	r2, [pc, #432]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xb0>
 8003c58:	4b69      	ldr	r3, [pc, #420]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a68      	ldr	r2, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b66      	ldr	r3, [pc, #408]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a65      	ldr	r2, [pc, #404]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fc1e 	bl	80024b8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fc1a 	bl	80024b8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e207      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xc0>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc0a 	bl	80024b8 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fc06 	bl	80024b8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1f3      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b51      	ldr	r3, [pc, #324]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xe8>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cd6:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x152>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1c7      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e03a      	b.n	8003d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x244>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe fbbf 	bl	80024b8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fbbb 	bl	80024b8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1a8      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4925      	ldr	r1, [pc, #148]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	e015      	b.n	8003d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_OscConfig+0x244>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fe fb9e 	bl	80024b8 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fe fb9a 	bl	80024b8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e187      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d036      	beq.n	8003e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCC_OscConfig+0x248>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe fb7e 	bl	80024b8 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fb7a 	bl	80024b8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e167      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x200>
 8003dde:	e01b      	b.n	8003e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_OscConfig+0x248>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7fe fb67 	bl	80024b8 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	e00e      	b.n	8003e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dee:	f7fe fb63 	bl	80024b8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d907      	bls.n	8003e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e150      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	42470000 	.word	0x42470000
 8003e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ea      	bne.n	8003dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8097 	beq.w	8003f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	4b7d      	ldr	r3, [pc, #500]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a7c      	ldr	r2, [pc, #496]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b7a      	ldr	r3, [pc, #488]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b77      	ldr	r3, [pc, #476]	; (8004034 <HAL_RCC_OscConfig+0x474>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d118      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e62:	4b74      	ldr	r3, [pc, #464]	; (8004034 <HAL_RCC_OscConfig+0x474>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a73      	ldr	r2, [pc, #460]	; (8004034 <HAL_RCC_OscConfig+0x474>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fb23 	bl	80024b8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fe fb1f 	bl	80024b8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e10c      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_RCC_OscConfig+0x474>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2ea>
 8003e9c:	4b64      	ldr	r3, [pc, #400]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a63      	ldr	r2, [pc, #396]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	e01c      	b.n	8003ee4 <HAL_RCC_OscConfig+0x324>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x30c>
 8003eb2:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a5e      	ldr	r2, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	f043 0304 	orr.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a5b      	ldr	r2, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eca:	e00b      	b.n	8003ee4 <HAL_RCC_OscConfig+0x324>
 8003ecc:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a57      	ldr	r2, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed8:	4b55      	ldr	r3, [pc, #340]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a54      	ldr	r2, [pc, #336]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003ede:	f023 0304 	bic.w	r3, r3, #4
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe fae4 	bl	80024b8 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fe fae0 	bl	80024b8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0cb      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	4b49      	ldr	r3, [pc, #292]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ee      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x334>
 8003f16:	e014      	b.n	8003f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f18:	f7fe face 	bl	80024b8 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fe faca 	bl	80024b8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e0b5      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ee      	bne.n	8003f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	4a38      	ldr	r2, [pc, #224]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a1 	beq.w	80040a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f5e:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d05c      	beq.n	8004024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d141      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_RCC_OscConfig+0x478>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe fa9e 	bl	80024b8 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe fa9a 	bl	80024b8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e087      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x478>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe fa73 	bl	80024b8 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe fa6f 	bl	80024b8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e05c      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x416>
 8003ff4:	e054      	b.n	80040a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x478>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fa5c 	bl	80024b8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe fa58 	bl	80024b8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e045      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x470>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x444>
 8004022:	e03d      	b.n	80040a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e038      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
 8004038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x4ec>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d028      	beq.n	800409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d121      	bne.n	800409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d11a      	bne.n	800409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d107      	bne.n	800409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0cc      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b68      	ldr	r3, [pc, #416]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90c      	bls.n	80040ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d044      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d119      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d003      	beq.n	800416e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b3f      	ldr	r3, [pc, #252]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e067      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4934      	ldr	r1, [pc, #208]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a0:	f7fe f98a 	bl	80024b8 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fe f986 	bl	80024b8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e04f      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d20c      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4602      	mov	r2, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	490a      	ldr	r1, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	5ccb      	ldrb	r3, [r1, r3]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe f8ea 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023c00 	.word	0x40023c00
 800426c:	40023800 	.word	0x40023800
 8004270:	08009a98 	.word	0x08009a98
 8004274:	20000014 	.word	0x20000014
 8004278:	20000018 	.word	0x20000018

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004280:	b094      	sub	sp, #80	; 0x50
 8004282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
 8004288:	2300      	movs	r3, #0
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800428c:	2300      	movs	r3, #0
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d00d      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x40>
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	f200 80e1 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x34>
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ae:	e0db      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_GetSysClockFreq+0x204>)
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042b4:	e0db      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b6:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCC_GetSysClockFreq+0x208>)
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ba:	e0d8      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042bc:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c6:	4b6d      	ldr	r3, [pc, #436]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d063      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d2:	4b6a      	ldr	r3, [pc, #424]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	2200      	movs	r2, #0
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
 80042dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
 80042e6:	2300      	movs	r3, #0
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042ee:	4622      	mov	r2, r4
 80042f0:	462b      	mov	r3, r5
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	0159      	lsls	r1, r3, #5
 80042fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004300:	0150      	lsls	r0, r2, #5
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4621      	mov	r1, r4
 8004308:	1a51      	subs	r1, r2, r1
 800430a:	6139      	str	r1, [r7, #16]
 800430c:	4629      	mov	r1, r5
 800430e:	eb63 0301 	sbc.w	r3, r3, r1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004320:	4659      	mov	r1, fp
 8004322:	018b      	lsls	r3, r1, #6
 8004324:	4651      	mov	r1, sl
 8004326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800432a:	4651      	mov	r1, sl
 800432c:	018a      	lsls	r2, r1, #6
 800432e:	4651      	mov	r1, sl
 8004330:	ebb2 0801 	subs.w	r8, r2, r1
 8004334:	4659      	mov	r1, fp
 8004336:	eb63 0901 	sbc.w	r9, r3, r1
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800434a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434e:	4690      	mov	r8, r2
 8004350:	4699      	mov	r9, r3
 8004352:	4623      	mov	r3, r4
 8004354:	eb18 0303 	adds.w	r3, r8, r3
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	462b      	mov	r3, r5
 800435c:	eb49 0303 	adc.w	r3, r9, r3
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800436e:	4629      	mov	r1, r5
 8004370:	024b      	lsls	r3, r1, #9
 8004372:	4621      	mov	r1, r4
 8004374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004378:	4621      	mov	r1, r4
 800437a:	024a      	lsls	r2, r1, #9
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004382:	2200      	movs	r2, #0
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
 8004386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438c:	f7fc fc8c 	bl	8000ca8 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	e058      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b38      	ldr	r3, [pc, #224]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	2200      	movs	r2, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	4611      	mov	r1, r2
 80043a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	0159      	lsls	r1, r3, #5
 80043c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c6:	0150      	lsls	r0, r2, #5
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4641      	mov	r1, r8
 80043ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80043d2:	4649      	mov	r1, r9
 80043d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043ec:	ebb2 040a 	subs.w	r4, r2, sl
 80043f0:	eb63 050b 	sbc.w	r5, r3, fp
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	00eb      	lsls	r3, r5, #3
 80043fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004402:	00e2      	lsls	r2, r4, #3
 8004404:	4614      	mov	r4, r2
 8004406:	461d      	mov	r5, r3
 8004408:	4643      	mov	r3, r8
 800440a:	18e3      	adds	r3, r4, r3
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	464b      	mov	r3, r9
 8004410:	eb45 0303 	adc.w	r3, r5, r3
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004422:	4629      	mov	r1, r5
 8004424:	028b      	lsls	r3, r1, #10
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800442c:	4621      	mov	r1, r4
 800442e:	028a      	lsls	r2, r1, #10
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	61fa      	str	r2, [r7, #28]
 800443c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004440:	f7fc fc32 	bl	8000ca8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_GetSysClockFreq+0x200>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800445c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004466:	e002      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetSysClockFreq+0x204>)
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004470:	4618      	mov	r0, r3
 8004472:	3750      	adds	r7, #80	; 0x50
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	007a1200 	.word	0x007a1200

08004488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000014 	.word	0x20000014

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	08009aa8 	.word	0x08009aa8

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffdc 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08009aa8 	.word	0x08009aa8

080044f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03f      	b.n	8004582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff faa8 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2224      	movs	r2, #36	; 0x24
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9cb 	bl	80048d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08a      	sub	sp, #40	; 0x28
 800458e:	af02      	add	r7, sp, #8
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d17c      	bne.n	80046a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_UART_Transmit+0x2c>
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e075      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x3e>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2221      	movs	r2, #33	; 0x21
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045de:	f7fd ff6b 	bl	80024b8 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d108      	bne.n	800460c <HAL_UART_Transmit+0x82>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e003      	b.n	8004614 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800461c:	e02a      	b.n	8004674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f8e2 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e036      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3302      	adds	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e007      	b.n	8004666 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1cf      	bne.n	800461e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	2140      	movs	r1, #64	; 0x40
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8b2 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08a      	sub	sp, #40	; 0x28
 80046b2:	af02      	add	r7, sp, #8
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	f040 808c 	bne.w	80047e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Receive+0x2e>
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e084      	b.n	80047ea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Receive+0x40>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e07d      	b.n	80047ea <HAL_UART_Receive+0x13c>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fd fed5 	bl	80024b8 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Receive+0x8a>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004748:	e043      	b.n	80047d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2120      	movs	r1, #32
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f84c 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e042      	b.n	80047ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	b29a      	uxth	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e01f      	b.n	80047c4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d007      	beq.n	800479e <HAL_UART_Receive+0xf0>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_UART_Receive+0xfe>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e008      	b.n	80047be <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1b6      	bne.n	800474a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b090      	sub	sp, #64	; 0x40
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	e050      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	d04c      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x30>
 8004812:	f7fd fe51 	bl	80024b8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481e:	429a      	cmp	r2, r3
 8004820:	d241      	bcs.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004842:	637a      	str	r2, [r7, #52]	; 0x34
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	613b      	str	r3, [r7, #16]
   return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004876:	623a      	str	r2, [r7, #32]
 8004878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	61bb      	str	r3, [r7, #24]
   return(result);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d09f      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3740      	adds	r7, #64	; 0x40
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b0c0      	sub	sp, #256	; 0x100
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	ea40 0301 	orr.w	r3, r0, r1
 80048f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	431a      	orrs	r2, r3
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004928:	f021 010c 	bic.w	r1, r1, #12
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004936:	430b      	orrs	r3, r1
 8004938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	6999      	ldr	r1, [r3, #24]
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	ea40 0301 	orr.w	r3, r0, r1
 8004956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b8f      	ldr	r3, [pc, #572]	; (8004b9c <UART_SetConfig+0x2cc>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d005      	beq.n	8004970 <UART_SetConfig+0xa0>
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b8d      	ldr	r3, [pc, #564]	; (8004ba0 <UART_SetConfig+0x2d0>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d104      	bne.n	800497a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7ff fdaa 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8004974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004978:	e003      	b.n	8004982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800497a:	f7ff fd91 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 800497e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498c:	f040 810c 	bne.w	8004ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800499a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800499e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049aa:	415b      	adcs	r3, r3
 80049ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b2:	4621      	mov	r1, r4
 80049b4:	eb12 0801 	adds.w	r8, r2, r1
 80049b8:	4629      	mov	r1, r5
 80049ba:	eb43 0901 	adc.w	r9, r3, r1
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d2:	4690      	mov	r8, r2
 80049d4:	4699      	mov	r9, r3
 80049d6:	4623      	mov	r3, r4
 80049d8:	eb18 0303 	adds.w	r3, r8, r3
 80049dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049e0:	462b      	mov	r3, r5
 80049e2:	eb49 0303 	adc.w	r3, r9, r3
 80049e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049fe:	460b      	mov	r3, r1
 8004a00:	18db      	adds	r3, r3, r3
 8004a02:	653b      	str	r3, [r7, #80]	; 0x50
 8004a04:	4613      	mov	r3, r2
 8004a06:	eb42 0303 	adc.w	r3, r2, r3
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a14:	f7fc f948 	bl	8000ca8 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <UART_SetConfig+0x2d4>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	011c      	lsls	r4, r3, #4
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a40:	415b      	adcs	r3, r3
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a48:	4641      	mov	r1, r8
 8004a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a4e:	4649      	mov	r1, r9
 8004a50:	eb43 0b01 	adc.w	fp, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a68:	4692      	mov	sl, r2
 8004a6a:	469b      	mov	fp, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a76:	464b      	mov	r3, r9
 8004a78:	eb4b 0303 	adc.w	r3, fp, r3
 8004a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a94:	460b      	mov	r3, r1
 8004a96:	18db      	adds	r3, r3, r3
 8004a98:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aaa:	f7fc f8fd 	bl	8000ca8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <UART_SetConfig+0x2d4>)
 8004ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2264      	movs	r2, #100	; 0x64
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	1acb      	subs	r3, r1, r3
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <UART_SetConfig+0x2d4>)
 8004acc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad8:	441c      	add	r4, r3
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af4:	415b      	adcs	r3, r3
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6339      	str	r1, [r7, #48]	; 0x30
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b30:	464b      	mov	r3, r9
 8004b32:	460a      	mov	r2, r1
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b50:	460b      	mov	r3, r1
 8004b52:	18db      	adds	r3, r3, r3
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b56:	4613      	mov	r3, r2
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b66:	f7fc f89f 	bl	8000ca8 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <UART_SetConfig+0x2d4>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <UART_SetConfig+0x2d4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4422      	add	r2, r4
 8004b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b98:	e106      	b.n	8004da8 <UART_SetConfig+0x4d8>
 8004b9a:	bf00      	nop
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	40011400 	.word	0x40011400
 8004ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bba:	4642      	mov	r2, r8
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	1891      	adds	r1, r2, r2
 8004bc0:	6239      	str	r1, [r7, #32]
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bca:	4641      	mov	r1, r8
 8004bcc:	1854      	adds	r4, r2, r1
 8004bce:	4649      	mov	r1, r9
 8004bd0:	eb43 0501 	adc.w	r5, r3, r1
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	00eb      	lsls	r3, r5, #3
 8004bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be2:	00e2      	lsls	r2, r4, #3
 8004be4:	4614      	mov	r4, r2
 8004be6:	461d      	mov	r5, r3
 8004be8:	4643      	mov	r3, r8
 8004bea:	18e3      	adds	r3, r4, r3
 8004bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	eb45 0303 	adc.w	r3, r5, r3
 8004bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c16:	4629      	mov	r1, r5
 8004c18:	008b      	lsls	r3, r1, #2
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c20:	4621      	mov	r1, r4
 8004c22:	008a      	lsls	r2, r1, #2
 8004c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c28:	f7fc f83e 	bl	8000ca8 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4b60      	ldr	r3, [pc, #384]	; (8004db4 <UART_SetConfig+0x4e4>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	011c      	lsls	r4, r3, #4
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	61b9      	str	r1, [r7, #24]
 8004c54:	415b      	adcs	r3, r3
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	1851      	adds	r1, r2, r1
 8004c60:	6139      	str	r1, [r7, #16]
 8004c62:	4649      	mov	r1, r9
 8004c64:	414b      	adcs	r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	00cb      	lsls	r3, r1, #3
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7e:	4651      	mov	r1, sl
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c90:	464b      	mov	r3, r9
 8004c92:	460a      	mov	r2, r1
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	008b      	lsls	r3, r1, #2
 8004cb8:	4641      	mov	r1, r8
 8004cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	008a      	lsls	r2, r1, #2
 8004cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cc6:	f7fb ffef 	bl	8000ca8 <__aeabi_uldivmod>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <UART_SetConfig+0x4e4>)
 8004cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2264      	movs	r2, #100	; 0x64
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	1acb      	subs	r3, r1, r3
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	3332      	adds	r3, #50	; 0x32
 8004ce4:	4a33      	ldr	r2, [pc, #204]	; (8004db4 <UART_SetConfig+0x4e4>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf0:	441c      	add	r4, r3
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cfa:	677a      	str	r2, [r7, #116]	; 0x74
 8004cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d42:	464b      	mov	r3, r9
 8004d44:	460a      	mov	r2, r1
 8004d46:	eb42 0303 	adc.w	r3, r2, r3
 8004d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
 8004d56:	667a      	str	r2, [r7, #100]	; 0x64
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d64:	4649      	mov	r1, r9
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6e:	4641      	mov	r1, r8
 8004d70:	008a      	lsls	r2, r1, #2
 8004d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d76:	f7fb ff97 	bl	8000ca8 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <UART_SetConfig+0x4e4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <UART_SetConfig+0x4e4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 020f 	and.w	r2, r3, #15
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db4:	51eb851f 	.word	0x51eb851f

08004db8 <main>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */

	HAL_Init();
 8004dbc:	f7fd fb1c 	bl	80023f8 <HAL_Init>
	//setvbuf(stdin, NULL, _IONBF, 0); //svcanf para la uart

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8004dc0:	f000 f832 	bl	8004e28 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fd f8e3 	bl	8001f90 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7fd f8e0 	bl	8001f90 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8004dd0:	2002      	movs	r0, #2
 8004dd2:	f7fd f8dd 	bl	8001f90 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fd f977 	bl	80020cc <BSP_PB_Init>

	debounceFSM_init(); // Inicializa la máquina de estados
 8004dde:	f7fc fe25 	bl	8001a2c <debounceFSM_init>


	GPIO_Init();
 8004de2:	f7fc fb67 	bl	80014b4 <GPIO_Init>
	I2C_Init();
 8004de6:	f7fc ffb7 	bl	8001d58 <I2C_Init>
	uartInit();
 8004dea:	f7fd f875 	bl	8001ed8 <uartInit>


	//Conf_update_Uart();
	Conf_update();
 8004dee:	f7fc fbf5 	bl	80015dc <Conf_update>
	//Lcd_Init();

	TEMPFSM_init(&conf_T);
 8004df2:	480c      	ldr	r0, [pc, #48]	; (8004e24 <main+0x6c>)
 8004df4:	f7fc f982 	bl	80010fc <TEMPFSM_init>



	while (1) {

		debounceFSM_update();
 8004df8:	f7fc fe28 	bl	8001a4c <debounceFSM_update>
		TEMPFSM_update(&conf_T);
 8004dfc:	4809      	ldr	r0, [pc, #36]	; (8004e24 <main+0x6c>)
 8004dfe:	f7fc f9b1 	bl	8001164 <TEMPFSM_update>

		if(Detecto_TempHigh())
 8004e02:	f7fc fb2f 	bl	8001464 <Detecto_TempHigh>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <main+0x5a>
			BSP_LED_Toggle(LED3);//se activa para enfria
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	f7fd f943 	bl	8002098 <BSP_LED_Toggle>

		if( Detecto_TempLow())
 8004e12:	f7fc fb3b 	bl	800148c <Detecto_TempLow>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ed      	beq.n	8004df8 <main+0x40>
			BSP_LED_Toggle(LED2);//se activa para calentar
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f7fd f93b 	bl	8002098 <BSP_LED_Toggle>
		debounceFSM_update();
 8004e22:	e7e9      	b.n	8004df8 <main+0x40>
 8004e24:	20000234 	.word	0x20000234

08004e28 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config()
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b092      	sub	sp, #72	; 0x48
 8004e2c:	af00      	add	r7, sp, #0
 /* __HAL_RCC_PWR_CLK_ENABLE();*/

  /* The voltage scaling allows optimizing the power consumption when the device is*/
    /* clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <SystemClock_Config+0xa0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <SystemClock_Config+0xa0>)
 8004e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <SystemClock_Config+0xa0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004e4e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004e52:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e54:	2302      	movs	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e5e:	2308      	movs	r3, #8
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 360;
 8004e62:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004e6c:	2307      	movs	r3, #7
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fea4 	bl	8003bc0 <HAL_RCC_OscConfig>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <SystemClock_Config+0x5a>
  {
    /* Initialization Error */
    Error_Handler();
 8004e7e:	f000 f825 	bl	8004ecc <Error_Handler>
  }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004e82:	f7fe fe4d 	bl	8003b20 <HAL_PWREx_EnableOverDrive>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <SystemClock_Config+0x68>
  {
    /* Initialization Error */
    Error_Handler();
 8004e8c:	f000 f81e 	bl	8004ecc <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004e90:	230f      	movs	r3, #15
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e94:	2302      	movs	r3, #2
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ea0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ea6:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004eac:	2105      	movs	r1, #5
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff f8fe 	bl	80040b0 <HAL_RCC_ClockConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <SystemClock_Config+0x96>
  {
    /* Initialization Error */
    Error_Handler();
 8004eba:	f000 f807 	bl	8004ecc <Error_Handler>
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3748      	adds	r7, #72	; 0x48
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40007000 	.word	0x40007000

08004ecc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  // Turn LED2 on
  BSP_LED_On(LED2);
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f7fd f8ad 	bl	8002030 <BSP_LED_On>
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <Error_Handler+0xa>

08004ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f10 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ede:	e003      	b.n	8004ee8 <LoopCopyDataInit>

08004ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ee6:	3104      	adds	r1, #4

08004ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ee8:	480b      	ldr	r0, [pc, #44]	; (8004f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ef0:	d3f6      	bcc.n	8004ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ef2:	4a0b      	ldr	r2, [pc, #44]	; (8004f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ef4:	e002      	b.n	8004efc <LoopFillZerobss>

08004ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ef8:	f842 3b04 	str.w	r3, [r2], #4

08004efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f00:	d3f9      	bcc.n	8004ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f02:	f7fd f94f 	bl	80021a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f06:	f001 f907 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f0a:	f7ff ff55 	bl	8004db8 <main>
  bx  lr    
 8004f0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004f10:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004f14:	08009ee8 	.word	0x08009ee8
  ldr  r0, =_sdata
 8004f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f1c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8004f20:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8004f24:	20000490 	.word	0x20000490

08004f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f28:	e7fe      	b.n	8004f28 <ADC_IRQHandler>

08004f2a <__cvt>:
 8004f2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2e:	ec55 4b10 	vmov	r4, r5, d0
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	460e      	mov	r6, r1
 8004f36:	4619      	mov	r1, r3
 8004f38:	462b      	mov	r3, r5
 8004f3a:	bfbb      	ittet	lt
 8004f3c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f40:	461d      	movlt	r5, r3
 8004f42:	2300      	movge	r3, #0
 8004f44:	232d      	movlt	r3, #45	; 0x2d
 8004f46:	700b      	strb	r3, [r1, #0]
 8004f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f4e:	4691      	mov	r9, r2
 8004f50:	f023 0820 	bic.w	r8, r3, #32
 8004f54:	bfbc      	itt	lt
 8004f56:	4622      	movlt	r2, r4
 8004f58:	4614      	movlt	r4, r2
 8004f5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f5e:	d005      	beq.n	8004f6c <__cvt+0x42>
 8004f60:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f64:	d100      	bne.n	8004f68 <__cvt+0x3e>
 8004f66:	3601      	adds	r6, #1
 8004f68:	2102      	movs	r1, #2
 8004f6a:	e000      	b.n	8004f6e <__cvt+0x44>
 8004f6c:	2103      	movs	r1, #3
 8004f6e:	ab03      	add	r3, sp, #12
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	ab02      	add	r3, sp, #8
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	ec45 4b10 	vmov	d0, r4, r5
 8004f7a:	4653      	mov	r3, sl
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	f001 f983 	bl	8006288 <_dtoa_r>
 8004f82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f86:	4607      	mov	r7, r0
 8004f88:	d102      	bne.n	8004f90 <__cvt+0x66>
 8004f8a:	f019 0f01 	tst.w	r9, #1
 8004f8e:	d022      	beq.n	8004fd6 <__cvt+0xac>
 8004f90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f94:	eb07 0906 	add.w	r9, r7, r6
 8004f98:	d110      	bne.n	8004fbc <__cvt+0x92>
 8004f9a:	783b      	ldrb	r3, [r7, #0]
 8004f9c:	2b30      	cmp	r3, #48	; 0x30
 8004f9e:	d10a      	bne.n	8004fb6 <__cvt+0x8c>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7fb fd9e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fac:	b918      	cbnz	r0, 8004fb6 <__cvt+0x8c>
 8004fae:	f1c6 0601 	rsb	r6, r6, #1
 8004fb2:	f8ca 6000 	str.w	r6, [sl]
 8004fb6:	f8da 3000 	ldr.w	r3, [sl]
 8004fba:	4499      	add	r9, r3
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f7fb fd90 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fc8:	b108      	cbz	r0, 8004fce <__cvt+0xa4>
 8004fca:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fce:	2230      	movs	r2, #48	; 0x30
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	454b      	cmp	r3, r9
 8004fd4:	d307      	bcc.n	8004fe6 <__cvt+0xbc>
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fda:	1bdb      	subs	r3, r3, r7
 8004fdc:	4638      	mov	r0, r7
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	b004      	add	sp, #16
 8004fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	9103      	str	r1, [sp, #12]
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e7f0      	b.n	8004fd0 <__cvt+0xa6>

08004fee <__exponent>:
 8004fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	bfb8      	it	lt
 8004ff6:	4249      	neglt	r1, r1
 8004ff8:	f803 2b02 	strb.w	r2, [r3], #2
 8004ffc:	bfb4      	ite	lt
 8004ffe:	222d      	movlt	r2, #45	; 0x2d
 8005000:	222b      	movge	r2, #43	; 0x2b
 8005002:	2909      	cmp	r1, #9
 8005004:	7042      	strb	r2, [r0, #1]
 8005006:	dd2a      	ble.n	800505e <__exponent+0x70>
 8005008:	f10d 0207 	add.w	r2, sp, #7
 800500c:	4617      	mov	r7, r2
 800500e:	260a      	movs	r6, #10
 8005010:	4694      	mov	ip, r2
 8005012:	fb91 f5f6 	sdiv	r5, r1, r6
 8005016:	fb06 1415 	mls	r4, r6, r5, r1
 800501a:	3430      	adds	r4, #48	; 0x30
 800501c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005020:	460c      	mov	r4, r1
 8005022:	2c63      	cmp	r4, #99	; 0x63
 8005024:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005028:	4629      	mov	r1, r5
 800502a:	dcf1      	bgt.n	8005010 <__exponent+0x22>
 800502c:	3130      	adds	r1, #48	; 0x30
 800502e:	f1ac 0402 	sub.w	r4, ip, #2
 8005032:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005036:	1c41      	adds	r1, r0, #1
 8005038:	4622      	mov	r2, r4
 800503a:	42ba      	cmp	r2, r7
 800503c:	d30a      	bcc.n	8005054 <__exponent+0x66>
 800503e:	f10d 0209 	add.w	r2, sp, #9
 8005042:	eba2 020c 	sub.w	r2, r2, ip
 8005046:	42bc      	cmp	r4, r7
 8005048:	bf88      	it	hi
 800504a:	2200      	movhi	r2, #0
 800504c:	4413      	add	r3, r2
 800504e:	1a18      	subs	r0, r3, r0
 8005050:	b003      	add	sp, #12
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005058:	f801 5f01 	strb.w	r5, [r1, #1]!
 800505c:	e7ed      	b.n	800503a <__exponent+0x4c>
 800505e:	2330      	movs	r3, #48	; 0x30
 8005060:	3130      	adds	r1, #48	; 0x30
 8005062:	7083      	strb	r3, [r0, #2]
 8005064:	70c1      	strb	r1, [r0, #3]
 8005066:	1d03      	adds	r3, r0, #4
 8005068:	e7f1      	b.n	800504e <__exponent+0x60>
	...

0800506c <_printf_float>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	ed2d 8b02 	vpush	{d8}
 8005074:	b08d      	sub	sp, #52	; 0x34
 8005076:	460c      	mov	r4, r1
 8005078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800507c:	4616      	mov	r6, r2
 800507e:	461f      	mov	r7, r3
 8005080:	4605      	mov	r5, r0
 8005082:	f000 fff9 	bl	8006078 <_localeconv_r>
 8005086:	f8d0 a000 	ldr.w	sl, [r0]
 800508a:	4650      	mov	r0, sl
 800508c:	f7fb f900 	bl	8000290 <strlen>
 8005090:	2300      	movs	r3, #0
 8005092:	930a      	str	r3, [sp, #40]	; 0x28
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	9305      	str	r3, [sp, #20]
 8005098:	f8d8 3000 	ldr.w	r3, [r8]
 800509c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050a0:	3307      	adds	r3, #7
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	f103 0208 	add.w	r2, r3, #8
 80050aa:	f8c8 2000 	str.w	r2, [r8]
 80050ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80050bc:	ee08 0a10 	vmov	s16, r0
 80050c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80050c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c8:	4b9e      	ldr	r3, [pc, #632]	; (8005344 <_printf_float+0x2d8>)
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050ce:	f7fb fd3d 	bl	8000b4c <__aeabi_dcmpun>
 80050d2:	bb88      	cbnz	r0, 8005138 <_printf_float+0xcc>
 80050d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050d8:	4b9a      	ldr	r3, [pc, #616]	; (8005344 <_printf_float+0x2d8>)
 80050da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050de:	f7fb fd17 	bl	8000b10 <__aeabi_dcmple>
 80050e2:	bb48      	cbnz	r0, 8005138 <_printf_float+0xcc>
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f7fb fd06 	bl	8000afc <__aeabi_dcmplt>
 80050f0:	b110      	cbz	r0, 80050f8 <_printf_float+0x8c>
 80050f2:	232d      	movs	r3, #45	; 0x2d
 80050f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f8:	4a93      	ldr	r2, [pc, #588]	; (8005348 <_printf_float+0x2dc>)
 80050fa:	4b94      	ldr	r3, [pc, #592]	; (800534c <_printf_float+0x2e0>)
 80050fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005100:	bf94      	ite	ls
 8005102:	4690      	movls	r8, r2
 8005104:	4698      	movhi	r8, r3
 8005106:	2303      	movs	r3, #3
 8005108:	6123      	str	r3, [r4, #16]
 800510a:	9b05      	ldr	r3, [sp, #20]
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	f04f 0900 	mov.w	r9, #0
 8005116:	9700      	str	r7, [sp, #0]
 8005118:	4633      	mov	r3, r6
 800511a:	aa0b      	add	r2, sp, #44	; 0x2c
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f000 f9da 	bl	80054d8 <_printf_common>
 8005124:	3001      	adds	r0, #1
 8005126:	f040 8090 	bne.w	800524a <_printf_float+0x1de>
 800512a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800512e:	b00d      	add	sp, #52	; 0x34
 8005130:	ecbd 8b02 	vpop	{d8}
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	4640      	mov	r0, r8
 800513e:	4649      	mov	r1, r9
 8005140:	f7fb fd04 	bl	8000b4c <__aeabi_dcmpun>
 8005144:	b140      	cbz	r0, 8005158 <_printf_float+0xec>
 8005146:	464b      	mov	r3, r9
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfbc      	itt	lt
 800514c:	232d      	movlt	r3, #45	; 0x2d
 800514e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005152:	4a7f      	ldr	r2, [pc, #508]	; (8005350 <_printf_float+0x2e4>)
 8005154:	4b7f      	ldr	r3, [pc, #508]	; (8005354 <_printf_float+0x2e8>)
 8005156:	e7d1      	b.n	80050fc <_printf_float+0x90>
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800515e:	9206      	str	r2, [sp, #24]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	d13f      	bne.n	80051e4 <_printf_float+0x178>
 8005164:	2306      	movs	r3, #6
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	9b05      	ldr	r3, [sp, #20]
 800516a:	6861      	ldr	r1, [r4, #4]
 800516c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005170:	2300      	movs	r3, #0
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	ab0a      	add	r3, sp, #40	; 0x28
 8005176:	e9cd b301 	strd	fp, r3, [sp, #4]
 800517a:	ab09      	add	r3, sp, #36	; 0x24
 800517c:	ec49 8b10 	vmov	d0, r8, r9
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	6022      	str	r2, [r4, #0]
 8005184:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005188:	4628      	mov	r0, r5
 800518a:	f7ff fece 	bl	8004f2a <__cvt>
 800518e:	9b06      	ldr	r3, [sp, #24]
 8005190:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005192:	2b47      	cmp	r3, #71	; 0x47
 8005194:	4680      	mov	r8, r0
 8005196:	d108      	bne.n	80051aa <_printf_float+0x13e>
 8005198:	1cc8      	adds	r0, r1, #3
 800519a:	db02      	blt.n	80051a2 <_printf_float+0x136>
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	4299      	cmp	r1, r3
 80051a0:	dd41      	ble.n	8005226 <_printf_float+0x1ba>
 80051a2:	f1ab 0302 	sub.w	r3, fp, #2
 80051a6:	fa5f fb83 	uxtb.w	fp, r3
 80051aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051ae:	d820      	bhi.n	80051f2 <_printf_float+0x186>
 80051b0:	3901      	subs	r1, #1
 80051b2:	465a      	mov	r2, fp
 80051b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051b8:	9109      	str	r1, [sp, #36]	; 0x24
 80051ba:	f7ff ff18 	bl	8004fee <__exponent>
 80051be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c0:	1813      	adds	r3, r2, r0
 80051c2:	2a01      	cmp	r2, #1
 80051c4:	4681      	mov	r9, r0
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	dc02      	bgt.n	80051d0 <_printf_float+0x164>
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	07d2      	lsls	r2, r2, #31
 80051ce:	d501      	bpl.n	80051d4 <_printf_float+0x168>
 80051d0:	3301      	adds	r3, #1
 80051d2:	6123      	str	r3, [r4, #16]
 80051d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d09c      	beq.n	8005116 <_printf_float+0xaa>
 80051dc:	232d      	movs	r3, #45	; 0x2d
 80051de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e2:	e798      	b.n	8005116 <_printf_float+0xaa>
 80051e4:	9a06      	ldr	r2, [sp, #24]
 80051e6:	2a47      	cmp	r2, #71	; 0x47
 80051e8:	d1be      	bne.n	8005168 <_printf_float+0xfc>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1bc      	bne.n	8005168 <_printf_float+0xfc>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e7b9      	b.n	8005166 <_printf_float+0xfa>
 80051f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051f6:	d118      	bne.n	800522a <_printf_float+0x1be>
 80051f8:	2900      	cmp	r1, #0
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	dd0b      	ble.n	8005216 <_printf_float+0x1aa>
 80051fe:	6121      	str	r1, [r4, #16]
 8005200:	b913      	cbnz	r3, 8005208 <_printf_float+0x19c>
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	07d0      	lsls	r0, r2, #31
 8005206:	d502      	bpl.n	800520e <_printf_float+0x1a2>
 8005208:	3301      	adds	r3, #1
 800520a:	440b      	add	r3, r1
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005210:	f04f 0900 	mov.w	r9, #0
 8005214:	e7de      	b.n	80051d4 <_printf_float+0x168>
 8005216:	b913      	cbnz	r3, 800521e <_printf_float+0x1b2>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	07d2      	lsls	r2, r2, #31
 800521c:	d501      	bpl.n	8005222 <_printf_float+0x1b6>
 800521e:	3302      	adds	r3, #2
 8005220:	e7f4      	b.n	800520c <_printf_float+0x1a0>
 8005222:	2301      	movs	r3, #1
 8005224:	e7f2      	b.n	800520c <_printf_float+0x1a0>
 8005226:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800522a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522c:	4299      	cmp	r1, r3
 800522e:	db05      	blt.n	800523c <_printf_float+0x1d0>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	6121      	str	r1, [r4, #16]
 8005234:	07d8      	lsls	r0, r3, #31
 8005236:	d5ea      	bpl.n	800520e <_printf_float+0x1a2>
 8005238:	1c4b      	adds	r3, r1, #1
 800523a:	e7e7      	b.n	800520c <_printf_float+0x1a0>
 800523c:	2900      	cmp	r1, #0
 800523e:	bfd4      	ite	le
 8005240:	f1c1 0202 	rsble	r2, r1, #2
 8005244:	2201      	movgt	r2, #1
 8005246:	4413      	add	r3, r2
 8005248:	e7e0      	b.n	800520c <_printf_float+0x1a0>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	055a      	lsls	r2, r3, #21
 800524e:	d407      	bmi.n	8005260 <_printf_float+0x1f4>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	4642      	mov	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	d12c      	bne.n	80052b8 <_printf_float+0x24c>
 800525e:	e764      	b.n	800512a <_printf_float+0xbe>
 8005260:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005264:	f240 80e0 	bls.w	8005428 <_printf_float+0x3bc>
 8005268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800526c:	2200      	movs	r2, #0
 800526e:	2300      	movs	r3, #0
 8005270:	f7fb fc3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005274:	2800      	cmp	r0, #0
 8005276:	d034      	beq.n	80052e2 <_printf_float+0x276>
 8005278:	4a37      	ldr	r2, [pc, #220]	; (8005358 <_printf_float+0x2ec>)
 800527a:	2301      	movs	r3, #1
 800527c:	4631      	mov	r1, r6
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	f43f af51 	beq.w	800512a <_printf_float+0xbe>
 8005288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800528c:	429a      	cmp	r2, r3
 800528e:	db02      	blt.n	8005296 <_printf_float+0x22a>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	07d8      	lsls	r0, r3, #31
 8005294:	d510      	bpl.n	80052b8 <_printf_float+0x24c>
 8005296:	ee18 3a10 	vmov	r3, s16
 800529a:	4652      	mov	r2, sl
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	f43f af41 	beq.w	800512a <_printf_float+0xbe>
 80052a8:	f04f 0800 	mov.w	r8, #0
 80052ac:	f104 091a 	add.w	r9, r4, #26
 80052b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b2:	3b01      	subs	r3, #1
 80052b4:	4543      	cmp	r3, r8
 80052b6:	dc09      	bgt.n	80052cc <_printf_float+0x260>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	079b      	lsls	r3, r3, #30
 80052bc:	f100 8107 	bmi.w	80054ce <_printf_float+0x462>
 80052c0:	68e0      	ldr	r0, [r4, #12]
 80052c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c4:	4298      	cmp	r0, r3
 80052c6:	bfb8      	it	lt
 80052c8:	4618      	movlt	r0, r3
 80052ca:	e730      	b.n	800512e <_printf_float+0xc2>
 80052cc:	2301      	movs	r3, #1
 80052ce:	464a      	mov	r2, r9
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f af27 	beq.w	800512a <_printf_float+0xbe>
 80052dc:	f108 0801 	add.w	r8, r8, #1
 80052e0:	e7e6      	b.n	80052b0 <_printf_float+0x244>
 80052e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dc39      	bgt.n	800535c <_printf_float+0x2f0>
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <_printf_float+0x2ec>)
 80052ea:	2301      	movs	r3, #1
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f af19 	beq.w	800512a <_printf_float+0xbe>
 80052f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d102      	bne.n	8005306 <_printf_float+0x29a>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07d9      	lsls	r1, r3, #31
 8005304:	d5d8      	bpl.n	80052b8 <_printf_float+0x24c>
 8005306:	ee18 3a10 	vmov	r3, s16
 800530a:	4652      	mov	r2, sl
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	f43f af09 	beq.w	800512a <_printf_float+0xbe>
 8005318:	f04f 0900 	mov.w	r9, #0
 800531c:	f104 0a1a 	add.w	sl, r4, #26
 8005320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005322:	425b      	negs	r3, r3
 8005324:	454b      	cmp	r3, r9
 8005326:	dc01      	bgt.n	800532c <_printf_float+0x2c0>
 8005328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532a:	e792      	b.n	8005252 <_printf_float+0x1e6>
 800532c:	2301      	movs	r3, #1
 800532e:	4652      	mov	r2, sl
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f aef7 	beq.w	800512a <_printf_float+0xbe>
 800533c:	f109 0901 	add.w	r9, r9, #1
 8005340:	e7ee      	b.n	8005320 <_printf_float+0x2b4>
 8005342:	bf00      	nop
 8005344:	7fefffff 	.word	0x7fefffff
 8005348:	08009ab0 	.word	0x08009ab0
 800534c:	08009ab4 	.word	0x08009ab4
 8005350:	08009ab8 	.word	0x08009ab8
 8005354:	08009abc 	.word	0x08009abc
 8005358:	08009ac0 	.word	0x08009ac0
 800535c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005360:	429a      	cmp	r2, r3
 8005362:	bfa8      	it	ge
 8005364:	461a      	movge	r2, r3
 8005366:	2a00      	cmp	r2, #0
 8005368:	4691      	mov	r9, r2
 800536a:	dc37      	bgt.n	80053dc <_printf_float+0x370>
 800536c:	f04f 0b00 	mov.w	fp, #0
 8005370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005374:	f104 021a 	add.w	r2, r4, #26
 8005378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800537a:	9305      	str	r3, [sp, #20]
 800537c:	eba3 0309 	sub.w	r3, r3, r9
 8005380:	455b      	cmp	r3, fp
 8005382:	dc33      	bgt.n	80053ec <_printf_float+0x380>
 8005384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005388:	429a      	cmp	r2, r3
 800538a:	db3b      	blt.n	8005404 <_printf_float+0x398>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d438      	bmi.n	8005404 <_printf_float+0x398>
 8005392:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005396:	eba2 0903 	sub.w	r9, r2, r3
 800539a:	9b05      	ldr	r3, [sp, #20]
 800539c:	1ad2      	subs	r2, r2, r3
 800539e:	4591      	cmp	r9, r2
 80053a0:	bfa8      	it	ge
 80053a2:	4691      	movge	r9, r2
 80053a4:	f1b9 0f00 	cmp.w	r9, #0
 80053a8:	dc35      	bgt.n	8005416 <_printf_float+0x3aa>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053b2:	f104 0a1a 	add.w	sl, r4, #26
 80053b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	eba3 0309 	sub.w	r3, r3, r9
 80053c0:	4543      	cmp	r3, r8
 80053c2:	f77f af79 	ble.w	80052b8 <_printf_float+0x24c>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4652      	mov	r2, sl
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f aeaa 	beq.w	800512a <_printf_float+0xbe>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	e7ec      	b.n	80053b6 <_printf_float+0x34a>
 80053dc:	4613      	mov	r3, r2
 80053de:	4631      	mov	r1, r6
 80053e0:	4642      	mov	r2, r8
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	d1c0      	bne.n	800536c <_printf_float+0x300>
 80053ea:	e69e      	b.n	800512a <_printf_float+0xbe>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	9205      	str	r2, [sp, #20]
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	f43f ae97 	beq.w	800512a <_printf_float+0xbe>
 80053fc:	9a05      	ldr	r2, [sp, #20]
 80053fe:	f10b 0b01 	add.w	fp, fp, #1
 8005402:	e7b9      	b.n	8005378 <_printf_float+0x30c>
 8005404:	ee18 3a10 	vmov	r3, s16
 8005408:	4652      	mov	r2, sl
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	d1be      	bne.n	8005392 <_printf_float+0x326>
 8005414:	e689      	b.n	800512a <_printf_float+0xbe>
 8005416:	9a05      	ldr	r2, [sp, #20]
 8005418:	464b      	mov	r3, r9
 800541a:	4442      	add	r2, r8
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	d1c1      	bne.n	80053aa <_printf_float+0x33e>
 8005426:	e680      	b.n	800512a <_printf_float+0xbe>
 8005428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542a:	2a01      	cmp	r2, #1
 800542c:	dc01      	bgt.n	8005432 <_printf_float+0x3c6>
 800542e:	07db      	lsls	r3, r3, #31
 8005430:	d53a      	bpl.n	80054a8 <_printf_float+0x43c>
 8005432:	2301      	movs	r3, #1
 8005434:	4642      	mov	r2, r8
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f ae74 	beq.w	800512a <_printf_float+0xbe>
 8005442:	ee18 3a10 	vmov	r3, s16
 8005446:	4652      	mov	r2, sl
 8005448:	4631      	mov	r1, r6
 800544a:	4628      	mov	r0, r5
 800544c:	47b8      	blx	r7
 800544e:	3001      	adds	r0, #1
 8005450:	f43f ae6b 	beq.w	800512a <_printf_float+0xbe>
 8005454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005460:	f7fb fb42 	bl	8000ae8 <__aeabi_dcmpeq>
 8005464:	b9d8      	cbnz	r0, 800549e <_printf_float+0x432>
 8005466:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800546a:	f108 0201 	add.w	r2, r8, #1
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	d10e      	bne.n	8005496 <_printf_float+0x42a>
 8005478:	e657      	b.n	800512a <_printf_float+0xbe>
 800547a:	2301      	movs	r3, #1
 800547c:	4652      	mov	r2, sl
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f ae50 	beq.w	800512a <_printf_float+0xbe>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	4543      	cmp	r3, r8
 8005494:	dcf1      	bgt.n	800547a <_printf_float+0x40e>
 8005496:	464b      	mov	r3, r9
 8005498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800549c:	e6da      	b.n	8005254 <_printf_float+0x1e8>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	f104 0a1a 	add.w	sl, r4, #26
 80054a6:	e7f2      	b.n	800548e <_printf_float+0x422>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4642      	mov	r2, r8
 80054ac:	e7df      	b.n	800546e <_printf_float+0x402>
 80054ae:	2301      	movs	r3, #1
 80054b0:	464a      	mov	r2, r9
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f ae36 	beq.w	800512a <_printf_float+0xbe>
 80054be:	f108 0801 	add.w	r8, r8, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	4543      	cmp	r3, r8
 80054ca:	dcf0      	bgt.n	80054ae <_printf_float+0x442>
 80054cc:	e6f8      	b.n	80052c0 <_printf_float+0x254>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 0919 	add.w	r9, r4, #25
 80054d6:	e7f4      	b.n	80054c2 <_printf_float+0x456>

080054d8 <_printf_common>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	4616      	mov	r6, r2
 80054de:	4699      	mov	r9, r3
 80054e0:	688a      	ldr	r2, [r1, #8]
 80054e2:	690b      	ldr	r3, [r1, #16]
 80054e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	bfb8      	it	lt
 80054ec:	4613      	movlt	r3, r2
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054f4:	4607      	mov	r7, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b10a      	cbz	r2, 80054fe <_printf_common+0x26>
 80054fa:	3301      	adds	r3, #1
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	0699      	lsls	r1, r3, #26
 8005502:	bf42      	ittt	mi
 8005504:	6833      	ldrmi	r3, [r6, #0]
 8005506:	3302      	addmi	r3, #2
 8005508:	6033      	strmi	r3, [r6, #0]
 800550a:	6825      	ldr	r5, [r4, #0]
 800550c:	f015 0506 	ands.w	r5, r5, #6
 8005510:	d106      	bne.n	8005520 <_printf_common+0x48>
 8005512:	f104 0a19 	add.w	sl, r4, #25
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	6832      	ldr	r2, [r6, #0]
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	42ab      	cmp	r3, r5
 800551e:	dc26      	bgt.n	800556e <_printf_common+0x96>
 8005520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005524:	1e13      	subs	r3, r2, #0
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	bf18      	it	ne
 800552a:	2301      	movne	r3, #1
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d42b      	bmi.n	8005588 <_printf_common+0xb0>
 8005530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005534:	4649      	mov	r1, r9
 8005536:	4638      	mov	r0, r7
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d01e      	beq.n	800557c <_printf_common+0xa4>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	6922      	ldr	r2, [r4, #16]
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	2b04      	cmp	r3, #4
 8005548:	bf02      	ittt	eq
 800554a:	68e5      	ldreq	r5, [r4, #12]
 800554c:	6833      	ldreq	r3, [r6, #0]
 800554e:	1aed      	subeq	r5, r5, r3
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	bf0c      	ite	eq
 8005554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005558:	2500      	movne	r5, #0
 800555a:	4293      	cmp	r3, r2
 800555c:	bfc4      	itt	gt
 800555e:	1a9b      	subgt	r3, r3, r2
 8005560:	18ed      	addgt	r5, r5, r3
 8005562:	2600      	movs	r6, #0
 8005564:	341a      	adds	r4, #26
 8005566:	42b5      	cmp	r5, r6
 8005568:	d11a      	bne.n	80055a0 <_printf_common+0xc8>
 800556a:	2000      	movs	r0, #0
 800556c:	e008      	b.n	8005580 <_printf_common+0xa8>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4649      	mov	r1, r9
 8005574:	4638      	mov	r0, r7
 8005576:	47c0      	blx	r8
 8005578:	3001      	adds	r0, #1
 800557a:	d103      	bne.n	8005584 <_printf_common+0xac>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	3501      	adds	r5, #1
 8005586:	e7c6      	b.n	8005516 <_printf_common+0x3e>
 8005588:	18e1      	adds	r1, r4, r3
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	2030      	movs	r0, #48	; 0x30
 800558e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005592:	4422      	add	r2, r4
 8005594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800559c:	3302      	adds	r3, #2
 800559e:	e7c7      	b.n	8005530 <_printf_common+0x58>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4622      	mov	r2, r4
 80055a4:	4649      	mov	r1, r9
 80055a6:	4638      	mov	r0, r7
 80055a8:	47c0      	blx	r8
 80055aa:	3001      	adds	r0, #1
 80055ac:	d0e6      	beq.n	800557c <_printf_common+0xa4>
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7d9      	b.n	8005566 <_printf_common+0x8e>
	...

080055b4 <_printf_i>:
 80055b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	7e0f      	ldrb	r7, [r1, #24]
 80055ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055bc:	2f78      	cmp	r7, #120	; 0x78
 80055be:	4691      	mov	r9, r2
 80055c0:	4680      	mov	r8, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	469a      	mov	sl, r3
 80055c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ca:	d807      	bhi.n	80055dc <_printf_i+0x28>
 80055cc:	2f62      	cmp	r7, #98	; 0x62
 80055ce:	d80a      	bhi.n	80055e6 <_printf_i+0x32>
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	f000 80d4 	beq.w	800577e <_printf_i+0x1ca>
 80055d6:	2f58      	cmp	r7, #88	; 0x58
 80055d8:	f000 80c0 	beq.w	800575c <_printf_i+0x1a8>
 80055dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055e4:	e03a      	b.n	800565c <_printf_i+0xa8>
 80055e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ea:	2b15      	cmp	r3, #21
 80055ec:	d8f6      	bhi.n	80055dc <_printf_i+0x28>
 80055ee:	a101      	add	r1, pc, #4	; (adr r1, 80055f4 <_printf_i+0x40>)
 80055f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	08005661 	.word	0x08005661
 80055fc:	080055dd 	.word	0x080055dd
 8005600:	080055dd 	.word	0x080055dd
 8005604:	080055dd 	.word	0x080055dd
 8005608:	080055dd 	.word	0x080055dd
 800560c:	08005661 	.word	0x08005661
 8005610:	080055dd 	.word	0x080055dd
 8005614:	080055dd 	.word	0x080055dd
 8005618:	080055dd 	.word	0x080055dd
 800561c:	080055dd 	.word	0x080055dd
 8005620:	08005765 	.word	0x08005765
 8005624:	0800568d 	.word	0x0800568d
 8005628:	0800571f 	.word	0x0800571f
 800562c:	080055dd 	.word	0x080055dd
 8005630:	080055dd 	.word	0x080055dd
 8005634:	08005787 	.word	0x08005787
 8005638:	080055dd 	.word	0x080055dd
 800563c:	0800568d 	.word	0x0800568d
 8005640:	080055dd 	.word	0x080055dd
 8005644:	080055dd 	.word	0x080055dd
 8005648:	08005727 	.word	0x08005727
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	602a      	str	r2, [r5, #0]
 8005654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800565c:	2301      	movs	r3, #1
 800565e:	e09f      	b.n	80057a0 <_printf_i+0x1ec>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	0607      	lsls	r7, r0, #24
 8005666:	f103 0104 	add.w	r1, r3, #4
 800566a:	6029      	str	r1, [r5, #0]
 800566c:	d501      	bpl.n	8005672 <_printf_i+0xbe>
 800566e:	681e      	ldr	r6, [r3, #0]
 8005670:	e003      	b.n	800567a <_printf_i+0xc6>
 8005672:	0646      	lsls	r6, r0, #25
 8005674:	d5fb      	bpl.n	800566e <_printf_i+0xba>
 8005676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800567a:	2e00      	cmp	r6, #0
 800567c:	da03      	bge.n	8005686 <_printf_i+0xd2>
 800567e:	232d      	movs	r3, #45	; 0x2d
 8005680:	4276      	negs	r6, r6
 8005682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005686:	485a      	ldr	r0, [pc, #360]	; (80057f0 <_printf_i+0x23c>)
 8005688:	230a      	movs	r3, #10
 800568a:	e012      	b.n	80056b2 <_printf_i+0xfe>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	1d19      	adds	r1, r3, #4
 8005692:	6029      	str	r1, [r5, #0]
 8005694:	0605      	lsls	r5, r0, #24
 8005696:	d501      	bpl.n	800569c <_printf_i+0xe8>
 8005698:	681e      	ldr	r6, [r3, #0]
 800569a:	e002      	b.n	80056a2 <_printf_i+0xee>
 800569c:	0641      	lsls	r1, r0, #25
 800569e:	d5fb      	bpl.n	8005698 <_printf_i+0xe4>
 80056a0:	881e      	ldrh	r6, [r3, #0]
 80056a2:	4853      	ldr	r0, [pc, #332]	; (80057f0 <_printf_i+0x23c>)
 80056a4:	2f6f      	cmp	r7, #111	; 0x6f
 80056a6:	bf0c      	ite	eq
 80056a8:	2308      	moveq	r3, #8
 80056aa:	230a      	movne	r3, #10
 80056ac:	2100      	movs	r1, #0
 80056ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056b2:	6865      	ldr	r5, [r4, #4]
 80056b4:	60a5      	str	r5, [r4, #8]
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	bfa2      	ittt	ge
 80056ba:	6821      	ldrge	r1, [r4, #0]
 80056bc:	f021 0104 	bicge.w	r1, r1, #4
 80056c0:	6021      	strge	r1, [r4, #0]
 80056c2:	b90e      	cbnz	r6, 80056c8 <_printf_i+0x114>
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	d04b      	beq.n	8005760 <_printf_i+0x1ac>
 80056c8:	4615      	mov	r5, r2
 80056ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80056ce:	fb03 6711 	mls	r7, r3, r1, r6
 80056d2:	5dc7      	ldrb	r7, [r0, r7]
 80056d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056d8:	4637      	mov	r7, r6
 80056da:	42bb      	cmp	r3, r7
 80056dc:	460e      	mov	r6, r1
 80056de:	d9f4      	bls.n	80056ca <_printf_i+0x116>
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d10b      	bne.n	80056fc <_printf_i+0x148>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	07de      	lsls	r6, r3, #31
 80056e8:	d508      	bpl.n	80056fc <_printf_i+0x148>
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	6861      	ldr	r1, [r4, #4]
 80056ee:	4299      	cmp	r1, r3
 80056f0:	bfde      	ittt	le
 80056f2:	2330      	movle	r3, #48	; 0x30
 80056f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80056fc:	1b52      	subs	r2, r2, r5
 80056fe:	6122      	str	r2, [r4, #16]
 8005700:	f8cd a000 	str.w	sl, [sp]
 8005704:	464b      	mov	r3, r9
 8005706:	aa03      	add	r2, sp, #12
 8005708:	4621      	mov	r1, r4
 800570a:	4640      	mov	r0, r8
 800570c:	f7ff fee4 	bl	80054d8 <_printf_common>
 8005710:	3001      	adds	r0, #1
 8005712:	d14a      	bne.n	80057aa <_printf_i+0x1f6>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005718:	b004      	add	sp, #16
 800571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f043 0320 	orr.w	r3, r3, #32
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	4833      	ldr	r0, [pc, #204]	; (80057f4 <_printf_i+0x240>)
 8005728:	2778      	movs	r7, #120	; 0x78
 800572a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	6829      	ldr	r1, [r5, #0]
 8005732:	061f      	lsls	r7, r3, #24
 8005734:	f851 6b04 	ldr.w	r6, [r1], #4
 8005738:	d402      	bmi.n	8005740 <_printf_i+0x18c>
 800573a:	065f      	lsls	r7, r3, #25
 800573c:	bf48      	it	mi
 800573e:	b2b6      	uxthmi	r6, r6
 8005740:	07df      	lsls	r7, r3, #31
 8005742:	bf48      	it	mi
 8005744:	f043 0320 	orrmi.w	r3, r3, #32
 8005748:	6029      	str	r1, [r5, #0]
 800574a:	bf48      	it	mi
 800574c:	6023      	strmi	r3, [r4, #0]
 800574e:	b91e      	cbnz	r6, 8005758 <_printf_i+0x1a4>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	f023 0320 	bic.w	r3, r3, #32
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	2310      	movs	r3, #16
 800575a:	e7a7      	b.n	80056ac <_printf_i+0xf8>
 800575c:	4824      	ldr	r0, [pc, #144]	; (80057f0 <_printf_i+0x23c>)
 800575e:	e7e4      	b.n	800572a <_printf_i+0x176>
 8005760:	4615      	mov	r5, r2
 8005762:	e7bd      	b.n	80056e0 <_printf_i+0x12c>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6826      	ldr	r6, [r4, #0]
 8005768:	6961      	ldr	r1, [r4, #20]
 800576a:	1d18      	adds	r0, r3, #4
 800576c:	6028      	str	r0, [r5, #0]
 800576e:	0635      	lsls	r5, r6, #24
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	d501      	bpl.n	8005778 <_printf_i+0x1c4>
 8005774:	6019      	str	r1, [r3, #0]
 8005776:	e002      	b.n	800577e <_printf_i+0x1ca>
 8005778:	0670      	lsls	r0, r6, #25
 800577a:	d5fb      	bpl.n	8005774 <_printf_i+0x1c0>
 800577c:	8019      	strh	r1, [r3, #0]
 800577e:	2300      	movs	r3, #0
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	4615      	mov	r5, r2
 8005784:	e7bc      	b.n	8005700 <_printf_i+0x14c>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	602a      	str	r2, [r5, #0]
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	2100      	movs	r1, #0
 8005792:	4628      	mov	r0, r5
 8005794:	f7fa fd2c 	bl	80001f0 <memchr>
 8005798:	b108      	cbz	r0, 800579e <_printf_i+0x1ea>
 800579a:	1b40      	subs	r0, r0, r5
 800579c:	6060      	str	r0, [r4, #4]
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	2300      	movs	r3, #0
 80057a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a8:	e7aa      	b.n	8005700 <_printf_i+0x14c>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	462a      	mov	r2, r5
 80057ae:	4649      	mov	r1, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	47d0      	blx	sl
 80057b4:	3001      	adds	r0, #1
 80057b6:	d0ad      	beq.n	8005714 <_printf_i+0x160>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	079b      	lsls	r3, r3, #30
 80057bc:	d413      	bmi.n	80057e6 <_printf_i+0x232>
 80057be:	68e0      	ldr	r0, [r4, #12]
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	4298      	cmp	r0, r3
 80057c4:	bfb8      	it	lt
 80057c6:	4618      	movlt	r0, r3
 80057c8:	e7a6      	b.n	8005718 <_printf_i+0x164>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4632      	mov	r2, r6
 80057ce:	4649      	mov	r1, r9
 80057d0:	4640      	mov	r0, r8
 80057d2:	47d0      	blx	sl
 80057d4:	3001      	adds	r0, #1
 80057d6:	d09d      	beq.n	8005714 <_printf_i+0x160>
 80057d8:	3501      	adds	r5, #1
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	9903      	ldr	r1, [sp, #12]
 80057de:	1a5b      	subs	r3, r3, r1
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	dcf2      	bgt.n	80057ca <_printf_i+0x216>
 80057e4:	e7eb      	b.n	80057be <_printf_i+0x20a>
 80057e6:	2500      	movs	r5, #0
 80057e8:	f104 0619 	add.w	r6, r4, #25
 80057ec:	e7f5      	b.n	80057da <_printf_i+0x226>
 80057ee:	bf00      	nop
 80057f0:	08009ac2 	.word	0x08009ac2
 80057f4:	08009ad3 	.word	0x08009ad3

080057f8 <_scanf_float>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b087      	sub	sp, #28
 80057fe:	4617      	mov	r7, r2
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	688b      	ldr	r3, [r1, #8]
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800580a:	bf83      	ittte	hi
 800580c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005810:	195b      	addhi	r3, r3, r5
 8005812:	9302      	strhi	r3, [sp, #8]
 8005814:	2300      	movls	r3, #0
 8005816:	bf86      	itte	hi
 8005818:	f240 135d 	movwhi	r3, #349	; 0x15d
 800581c:	608b      	strhi	r3, [r1, #8]
 800581e:	9302      	strls	r3, [sp, #8]
 8005820:	680b      	ldr	r3, [r1, #0]
 8005822:	468b      	mov	fp, r1
 8005824:	2500      	movs	r5, #0
 8005826:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800582a:	f84b 3b1c 	str.w	r3, [fp], #28
 800582e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005832:	4680      	mov	r8, r0
 8005834:	460c      	mov	r4, r1
 8005836:	465e      	mov	r6, fp
 8005838:	46aa      	mov	sl, r5
 800583a:	46a9      	mov	r9, r5
 800583c:	9501      	str	r5, [sp, #4]
 800583e:	68a2      	ldr	r2, [r4, #8]
 8005840:	b152      	cbz	r2, 8005858 <_scanf_float+0x60>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b4e      	cmp	r3, #78	; 0x4e
 8005848:	d864      	bhi.n	8005914 <_scanf_float+0x11c>
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d83c      	bhi.n	80058c8 <_scanf_float+0xd0>
 800584e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005852:	b2c8      	uxtb	r0, r1
 8005854:	280e      	cmp	r0, #14
 8005856:	d93a      	bls.n	80058ce <_scanf_float+0xd6>
 8005858:	f1b9 0f00 	cmp.w	r9, #0
 800585c:	d003      	beq.n	8005866 <_scanf_float+0x6e>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800586a:	f1ba 0f01 	cmp.w	sl, #1
 800586e:	f200 8113 	bhi.w	8005a98 <_scanf_float+0x2a0>
 8005872:	455e      	cmp	r6, fp
 8005874:	f200 8105 	bhi.w	8005a82 <_scanf_float+0x28a>
 8005878:	2501      	movs	r5, #1
 800587a:	4628      	mov	r0, r5
 800587c:	b007      	add	sp, #28
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005882:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005886:	2a0d      	cmp	r2, #13
 8005888:	d8e6      	bhi.n	8005858 <_scanf_float+0x60>
 800588a:	a101      	add	r1, pc, #4	; (adr r1, 8005890 <_scanf_float+0x98>)
 800588c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005890:	080059cf 	.word	0x080059cf
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	08005859 	.word	0x08005859
 80058a0:	08005a2f 	.word	0x08005a2f
 80058a4:	08005a07 	.word	0x08005a07
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	080059dd 	.word	0x080059dd
 80058b4:	08005859 	.word	0x08005859
 80058b8:	08005859 	.word	0x08005859
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	08005995 	.word	0x08005995
 80058c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80058cc:	e7db      	b.n	8005886 <_scanf_float+0x8e>
 80058ce:	290e      	cmp	r1, #14
 80058d0:	d8c2      	bhi.n	8005858 <_scanf_float+0x60>
 80058d2:	a001      	add	r0, pc, #4	; (adr r0, 80058d8 <_scanf_float+0xe0>)
 80058d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80058d8:	08005987 	.word	0x08005987
 80058dc:	08005859 	.word	0x08005859
 80058e0:	08005987 	.word	0x08005987
 80058e4:	08005a1b 	.word	0x08005a1b
 80058e8:	08005859 	.word	0x08005859
 80058ec:	08005935 	.word	0x08005935
 80058f0:	08005971 	.word	0x08005971
 80058f4:	08005971 	.word	0x08005971
 80058f8:	08005971 	.word	0x08005971
 80058fc:	08005971 	.word	0x08005971
 8005900:	08005971 	.word	0x08005971
 8005904:	08005971 	.word	0x08005971
 8005908:	08005971 	.word	0x08005971
 800590c:	08005971 	.word	0x08005971
 8005910:	08005971 	.word	0x08005971
 8005914:	2b6e      	cmp	r3, #110	; 0x6e
 8005916:	d809      	bhi.n	800592c <_scanf_float+0x134>
 8005918:	2b60      	cmp	r3, #96	; 0x60
 800591a:	d8b2      	bhi.n	8005882 <_scanf_float+0x8a>
 800591c:	2b54      	cmp	r3, #84	; 0x54
 800591e:	d077      	beq.n	8005a10 <_scanf_float+0x218>
 8005920:	2b59      	cmp	r3, #89	; 0x59
 8005922:	d199      	bne.n	8005858 <_scanf_float+0x60>
 8005924:	2d07      	cmp	r5, #7
 8005926:	d197      	bne.n	8005858 <_scanf_float+0x60>
 8005928:	2508      	movs	r5, #8
 800592a:	e029      	b.n	8005980 <_scanf_float+0x188>
 800592c:	2b74      	cmp	r3, #116	; 0x74
 800592e:	d06f      	beq.n	8005a10 <_scanf_float+0x218>
 8005930:	2b79      	cmp	r3, #121	; 0x79
 8005932:	e7f6      	b.n	8005922 <_scanf_float+0x12a>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	05c8      	lsls	r0, r1, #23
 8005938:	d51a      	bpl.n	8005970 <_scanf_float+0x178>
 800593a:	9b02      	ldr	r3, [sp, #8]
 800593c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005940:	6021      	str	r1, [r4, #0]
 8005942:	f109 0901 	add.w	r9, r9, #1
 8005946:	b11b      	cbz	r3, 8005950 <_scanf_float+0x158>
 8005948:	3b01      	subs	r3, #1
 800594a:	3201      	adds	r2, #1
 800594c:	9302      	str	r3, [sp, #8]
 800594e:	60a2      	str	r2, [r4, #8]
 8005950:	68a3      	ldr	r3, [r4, #8]
 8005952:	3b01      	subs	r3, #1
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	3301      	adds	r3, #1
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3b01      	subs	r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	f340 8084 	ble.w	8005a70 <_scanf_float+0x278>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	3301      	adds	r3, #1
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	e766      	b.n	800583e <_scanf_float+0x46>
 8005970:	eb1a 0f05 	cmn.w	sl, r5
 8005974:	f47f af70 	bne.w	8005858 <_scanf_float+0x60>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800597e:	6022      	str	r2, [r4, #0]
 8005980:	f806 3b01 	strb.w	r3, [r6], #1
 8005984:	e7e4      	b.n	8005950 <_scanf_float+0x158>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	0610      	lsls	r0, r2, #24
 800598a:	f57f af65 	bpl.w	8005858 <_scanf_float+0x60>
 800598e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005992:	e7f4      	b.n	800597e <_scanf_float+0x186>
 8005994:	f1ba 0f00 	cmp.w	sl, #0
 8005998:	d10e      	bne.n	80059b8 <_scanf_float+0x1c0>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	d10e      	bne.n	80059be <_scanf_float+0x1c6>
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80059a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80059aa:	d108      	bne.n	80059be <_scanf_float+0x1c6>
 80059ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	f04f 0a01 	mov.w	sl, #1
 80059b6:	e7e3      	b.n	8005980 <_scanf_float+0x188>
 80059b8:	f1ba 0f02 	cmp.w	sl, #2
 80059bc:	d055      	beq.n	8005a6a <_scanf_float+0x272>
 80059be:	2d01      	cmp	r5, #1
 80059c0:	d002      	beq.n	80059c8 <_scanf_float+0x1d0>
 80059c2:	2d04      	cmp	r5, #4
 80059c4:	f47f af48 	bne.w	8005858 <_scanf_float+0x60>
 80059c8:	3501      	adds	r5, #1
 80059ca:	b2ed      	uxtb	r5, r5
 80059cc:	e7d8      	b.n	8005980 <_scanf_float+0x188>
 80059ce:	f1ba 0f01 	cmp.w	sl, #1
 80059d2:	f47f af41 	bne.w	8005858 <_scanf_float+0x60>
 80059d6:	f04f 0a02 	mov.w	sl, #2
 80059da:	e7d1      	b.n	8005980 <_scanf_float+0x188>
 80059dc:	b97d      	cbnz	r5, 80059fe <_scanf_float+0x206>
 80059de:	f1b9 0f00 	cmp.w	r9, #0
 80059e2:	f47f af3c 	bne.w	800585e <_scanf_float+0x66>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80059ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80059f0:	f47f af39 	bne.w	8005866 <_scanf_float+0x6e>
 80059f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	2501      	movs	r5, #1
 80059fc:	e7c0      	b.n	8005980 <_scanf_float+0x188>
 80059fe:	2d03      	cmp	r5, #3
 8005a00:	d0e2      	beq.n	80059c8 <_scanf_float+0x1d0>
 8005a02:	2d05      	cmp	r5, #5
 8005a04:	e7de      	b.n	80059c4 <_scanf_float+0x1cc>
 8005a06:	2d02      	cmp	r5, #2
 8005a08:	f47f af26 	bne.w	8005858 <_scanf_float+0x60>
 8005a0c:	2503      	movs	r5, #3
 8005a0e:	e7b7      	b.n	8005980 <_scanf_float+0x188>
 8005a10:	2d06      	cmp	r5, #6
 8005a12:	f47f af21 	bne.w	8005858 <_scanf_float+0x60>
 8005a16:	2507      	movs	r5, #7
 8005a18:	e7b2      	b.n	8005980 <_scanf_float+0x188>
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	0591      	lsls	r1, r2, #22
 8005a1e:	f57f af1b 	bpl.w	8005858 <_scanf_float+0x60>
 8005a22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a2c:	e7a8      	b.n	8005980 <_scanf_float+0x188>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005a34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005a38:	d006      	beq.n	8005a48 <_scanf_float+0x250>
 8005a3a:	0550      	lsls	r0, r2, #21
 8005a3c:	f57f af0c 	bpl.w	8005858 <_scanf_float+0x60>
 8005a40:	f1b9 0f00 	cmp.w	r9, #0
 8005a44:	f43f af0f 	beq.w	8005866 <_scanf_float+0x6e>
 8005a48:	0591      	lsls	r1, r2, #22
 8005a4a:	bf58      	it	pl
 8005a4c:	9901      	ldrpl	r1, [sp, #4]
 8005a4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a52:	bf58      	it	pl
 8005a54:	eba9 0101 	subpl.w	r1, r9, r1
 8005a58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005a5c:	bf58      	it	pl
 8005a5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005a62:	6022      	str	r2, [r4, #0]
 8005a64:	f04f 0900 	mov.w	r9, #0
 8005a68:	e78a      	b.n	8005980 <_scanf_float+0x188>
 8005a6a:	f04f 0a03 	mov.w	sl, #3
 8005a6e:	e787      	b.n	8005980 <_scanf_float+0x188>
 8005a70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a74:	4639      	mov	r1, r7
 8005a76:	4640      	mov	r0, r8
 8005a78:	4798      	blx	r3
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f43f aedf 	beq.w	800583e <_scanf_float+0x46>
 8005a80:	e6ea      	b.n	8005858 <_scanf_float+0x60>
 8005a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	4798      	blx	r3
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	e6ec      	b.n	8005872 <_scanf_float+0x7a>
 8005a98:	1e6b      	subs	r3, r5, #1
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d825      	bhi.n	8005aea <_scanf_float+0x2f2>
 8005a9e:	2d02      	cmp	r5, #2
 8005aa0:	d836      	bhi.n	8005b10 <_scanf_float+0x318>
 8005aa2:	455e      	cmp	r6, fp
 8005aa4:	f67f aee8 	bls.w	8005878 <_scanf_float+0x80>
 8005aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4798      	blx	r3
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	e7f1      	b.n	8005aa2 <_scanf_float+0x2aa>
 8005abe:	9802      	ldr	r0, [sp, #8]
 8005ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ac4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005ac8:	9002      	str	r0, [sp, #8]
 8005aca:	463a      	mov	r2, r7
 8005acc:	4640      	mov	r0, r8
 8005ace:	4798      	blx	r3
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	6123      	str	r3, [r4, #16]
 8005ad6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ada:	fa5f fa8a 	uxtb.w	sl, sl
 8005ade:	f1ba 0f02 	cmp.w	sl, #2
 8005ae2:	d1ec      	bne.n	8005abe <_scanf_float+0x2c6>
 8005ae4:	3d03      	subs	r5, #3
 8005ae6:	b2ed      	uxtb	r5, r5
 8005ae8:	1b76      	subs	r6, r6, r5
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	05da      	lsls	r2, r3, #23
 8005aee:	d52f      	bpl.n	8005b50 <_scanf_float+0x358>
 8005af0:	055b      	lsls	r3, r3, #21
 8005af2:	d510      	bpl.n	8005b16 <_scanf_float+0x31e>
 8005af4:	455e      	cmp	r6, fp
 8005af6:	f67f aebf 	bls.w	8005878 <_scanf_float+0x80>
 8005afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b02:	463a      	mov	r2, r7
 8005b04:	4640      	mov	r0, r8
 8005b06:	4798      	blx	r3
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	e7f1      	b.n	8005af4 <_scanf_float+0x2fc>
 8005b10:	46aa      	mov	sl, r5
 8005b12:	9602      	str	r6, [sp, #8]
 8005b14:	e7df      	b.n	8005ad6 <_scanf_float+0x2de>
 8005b16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	2965      	cmp	r1, #101	; 0x65
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005b22:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	d00c      	beq.n	8005b44 <_scanf_float+0x34c>
 8005b2a:	2945      	cmp	r1, #69	; 0x45
 8005b2c:	d00a      	beq.n	8005b44 <_scanf_float+0x34c>
 8005b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b32:	463a      	mov	r2, r7
 8005b34:	4640      	mov	r0, r8
 8005b36:	4798      	blx	r3
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	1eb5      	subs	r5, r6, #2
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b48:	463a      	mov	r2, r7
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4798      	blx	r3
 8005b4e:	462e      	mov	r6, r5
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	f015 0510 	ands.w	r5, r5, #16
 8005b56:	d158      	bne.n	8005c0a <_scanf_float+0x412>
 8005b58:	7035      	strb	r5, [r6, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d11c      	bne.n	8005ba0 <_scanf_float+0x3a8>
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	454b      	cmp	r3, r9
 8005b6a:	eba3 0209 	sub.w	r2, r3, r9
 8005b6e:	d124      	bne.n	8005bba <_scanf_float+0x3c2>
 8005b70:	2200      	movs	r2, #0
 8005b72:	4659      	mov	r1, fp
 8005b74:	4640      	mov	r0, r8
 8005b76:	f002 fd33 	bl	80085e0 <_strtod_r>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	6821      	ldr	r1, [r4, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f011 0f02 	tst.w	r1, #2
 8005b84:	ec57 6b10 	vmov	r6, r7, d0
 8005b88:	f103 0204 	add.w	r2, r3, #4
 8005b8c:	d020      	beq.n	8005bd0 <_scanf_float+0x3d8>
 8005b8e:	9903      	ldr	r1, [sp, #12]
 8005b90:	600a      	str	r2, [r1, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	e9c3 6700 	strd	r6, r7, [r3]
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60e3      	str	r3, [r4, #12]
 8005b9e:	e66c      	b.n	800587a <_scanf_float+0x82>
 8005ba0:	9b04      	ldr	r3, [sp, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0e4      	beq.n	8005b70 <_scanf_float+0x378>
 8005ba6:	9905      	ldr	r1, [sp, #20]
 8005ba8:	230a      	movs	r3, #10
 8005baa:	462a      	mov	r2, r5
 8005bac:	3101      	adds	r1, #1
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f002 fd9e 	bl	80086f0 <_strtol_r>
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	9e05      	ldr	r6, [sp, #20]
 8005bb8:	1ac2      	subs	r2, r0, r3
 8005bba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005bbe:	429e      	cmp	r6, r3
 8005bc0:	bf28      	it	cs
 8005bc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005bc6:	4912      	ldr	r1, [pc, #72]	; (8005c10 <_scanf_float+0x418>)
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f955 	bl	8005e78 <siprintf>
 8005bce:	e7cf      	b.n	8005b70 <_scanf_float+0x378>
 8005bd0:	f011 0f04 	tst.w	r1, #4
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	600a      	str	r2, [r1, #0]
 8005bd8:	d1db      	bne.n	8005b92 <_scanf_float+0x39a>
 8005bda:	f8d3 8000 	ldr.w	r8, [r3]
 8005bde:	ee10 2a10 	vmov	r2, s0
 8005be2:	ee10 0a10 	vmov	r0, s0
 8005be6:	463b      	mov	r3, r7
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa ffaf 	bl	8000b4c <__aeabi_dcmpun>
 8005bee:	b128      	cbz	r0, 8005bfc <_scanf_float+0x404>
 8005bf0:	4808      	ldr	r0, [pc, #32]	; (8005c14 <_scanf_float+0x41c>)
 8005bf2:	f000 fab9 	bl	8006168 <nanf>
 8005bf6:	ed88 0a00 	vstr	s0, [r8]
 8005bfa:	e7cd      	b.n	8005b98 <_scanf_float+0x3a0>
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fb f802 	bl	8000c08 <__aeabi_d2f>
 8005c04:	f8c8 0000 	str.w	r0, [r8]
 8005c08:	e7c6      	b.n	8005b98 <_scanf_float+0x3a0>
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	e635      	b.n	800587a <_scanf_float+0x82>
 8005c0e:	bf00      	nop
 8005c10:	08009ae4 	.word	0x08009ae4
 8005c14:	08009e75 	.word	0x08009e75

08005c18 <std>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c26:	6083      	str	r3, [r0, #8]
 8005c28:	8181      	strh	r1, [r0, #12]
 8005c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c2c:	81c2      	strh	r2, [r0, #14]
 8005c2e:	6183      	str	r3, [r0, #24]
 8005c30:	4619      	mov	r1, r3
 8005c32:	2208      	movs	r2, #8
 8005c34:	305c      	adds	r0, #92	; 0x5c
 8005c36:	f000 fa17 	bl	8006068 <memset>
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <std+0x58>)
 8005c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <std+0x5c>)
 8005c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <std+0x60>)
 8005c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <std+0x64>)
 8005c48:	6323      	str	r3, [r4, #48]	; 0x30
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <std+0x68>)
 8005c4c:	6224      	str	r4, [r4, #32]
 8005c4e:	429c      	cmp	r4, r3
 8005c50:	d006      	beq.n	8005c60 <std+0x48>
 8005c52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c56:	4294      	cmp	r4, r2
 8005c58:	d002      	beq.n	8005c60 <std+0x48>
 8005c5a:	33d0      	adds	r3, #208	; 0xd0
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d105      	bne.n	8005c6c <std+0x54>
 8005c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f000 ba7a 	b.w	8006160 <__retarget_lock_init_recursive>
 8005c6c:	bd10      	pop	{r4, pc}
 8005c6e:	bf00      	nop
 8005c70:	08005eb9 	.word	0x08005eb9
 8005c74:	08005edb 	.word	0x08005edb
 8005c78:	08005f13 	.word	0x08005f13
 8005c7c:	08005f37 	.word	0x08005f37
 8005c80:	20000344 	.word	0x20000344

08005c84 <stdio_exit_handler>:
 8005c84:	4a02      	ldr	r2, [pc, #8]	; (8005c90 <stdio_exit_handler+0xc>)
 8005c86:	4903      	ldr	r1, [pc, #12]	; (8005c94 <stdio_exit_handler+0x10>)
 8005c88:	4803      	ldr	r0, [pc, #12]	; (8005c98 <stdio_exit_handler+0x14>)
 8005c8a:	f000 b869 	b.w	8005d60 <_fwalk_sglue>
 8005c8e:	bf00      	nop
 8005c90:	20000020 	.word	0x20000020
 8005c94:	08008d39 	.word	0x08008d39
 8005c98:	2000002c 	.word	0x2000002c

08005c9c <cleanup_stdio>:
 8005c9c:	6841      	ldr	r1, [r0, #4]
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <cleanup_stdio+0x34>)
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	d001      	beq.n	8005cac <cleanup_stdio+0x10>
 8005ca8:	f003 f846 	bl	8008d38 <_fflush_r>
 8005cac:	68a1      	ldr	r1, [r4, #8]
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <cleanup_stdio+0x38>)
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	d002      	beq.n	8005cba <cleanup_stdio+0x1e>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f003 f83f 	bl	8008d38 <_fflush_r>
 8005cba:	68e1      	ldr	r1, [r4, #12]
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <cleanup_stdio+0x3c>)
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d004      	beq.n	8005ccc <cleanup_stdio+0x30>
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc8:	f003 b836 	b.w	8008d38 <_fflush_r>
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000344 	.word	0x20000344
 8005cd4:	200003ac 	.word	0x200003ac
 8005cd8:	20000414 	.word	0x20000414

08005cdc <global_stdio_init.part.0>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <global_stdio_init.part.0+0x30>)
 8005ce0:	4c0b      	ldr	r4, [pc, #44]	; (8005d10 <global_stdio_init.part.0+0x34>)
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <global_stdio_init.part.0+0x38>)
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2104      	movs	r1, #4
 8005cec:	f7ff ff94 	bl	8005c18 <std>
 8005cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2109      	movs	r1, #9
 8005cf8:	f7ff ff8e 	bl	8005c18 <std>
 8005cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d00:	2202      	movs	r2, #2
 8005d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d06:	2112      	movs	r1, #18
 8005d08:	f7ff bf86 	b.w	8005c18 <std>
 8005d0c:	2000047c 	.word	0x2000047c
 8005d10:	20000344 	.word	0x20000344
 8005d14:	08005c85 	.word	0x08005c85

08005d18 <__sfp_lock_acquire>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__sfp_lock_acquire+0x8>)
 8005d1a:	f000 ba22 	b.w	8006162 <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000485 	.word	0x20000485

08005d24 <__sfp_lock_release>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__sfp_lock_release+0x8>)
 8005d26:	f000 ba1d 	b.w	8006164 <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000485 	.word	0x20000485

08005d30 <__sinit>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	f7ff fff0 	bl	8005d18 <__sfp_lock_acquire>
 8005d38:	6a23      	ldr	r3, [r4, #32]
 8005d3a:	b11b      	cbz	r3, 8005d44 <__sinit+0x14>
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	f7ff bff0 	b.w	8005d24 <__sfp_lock_release>
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <__sinit+0x28>)
 8005d46:	6223      	str	r3, [r4, #32]
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <__sinit+0x2c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f5      	bne.n	8005d3c <__sinit+0xc>
 8005d50:	f7ff ffc4 	bl	8005cdc <global_stdio_init.part.0>
 8005d54:	e7f2      	b.n	8005d3c <__sinit+0xc>
 8005d56:	bf00      	nop
 8005d58:	08005c9d 	.word	0x08005c9d
 8005d5c:	2000047c 	.word	0x2000047c

08005d60 <_fwalk_sglue>:
 8005d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	4607      	mov	r7, r0
 8005d66:	4688      	mov	r8, r1
 8005d68:	4614      	mov	r4, r2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d70:	f1b9 0901 	subs.w	r9, r9, #1
 8005d74:	d505      	bpl.n	8005d82 <_fwalk_sglue+0x22>
 8005d76:	6824      	ldr	r4, [r4, #0]
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d1f7      	bne.n	8005d6c <_fwalk_sglue+0xc>
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d907      	bls.n	8005d98 <_fwalk_sglue+0x38>
 8005d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	d003      	beq.n	8005d98 <_fwalk_sglue+0x38>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4638      	mov	r0, r7
 8005d94:	47c0      	blx	r8
 8005d96:	4306      	orrs	r6, r0
 8005d98:	3568      	adds	r5, #104	; 0x68
 8005d9a:	e7e9      	b.n	8005d70 <_fwalk_sglue+0x10>

08005d9c <iprintf>:
 8005d9c:	b40f      	push	{r0, r1, r2, r3}
 8005d9e:	b507      	push	{r0, r1, r2, lr}
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <iprintf+0x20>)
 8005da2:	ab04      	add	r3, sp, #16
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005daa:	6881      	ldr	r1, [r0, #8]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	f002 fe23 	bl	80089f8 <_vfiprintf_r>
 8005db2:	b003      	add	sp, #12
 8005db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db8:	b004      	add	sp, #16
 8005dba:	4770      	bx	lr
 8005dbc:	20000078 	.word	0x20000078

08005dc0 <_puts_r>:
 8005dc0:	6a03      	ldr	r3, [r0, #32]
 8005dc2:	b570      	push	{r4, r5, r6, lr}
 8005dc4:	6884      	ldr	r4, [r0, #8]
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	460e      	mov	r6, r1
 8005dca:	b90b      	cbnz	r3, 8005dd0 <_puts_r+0x10>
 8005dcc:	f7ff ffb0 	bl	8005d30 <__sinit>
 8005dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd2:	07db      	lsls	r3, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_puts_r+0x22>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	0598      	lsls	r0, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_puts_r+0x22>
 8005ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dde:	f000 f9c0 	bl	8006162 <__retarget_lock_acquire_recursive>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	0719      	lsls	r1, r3, #28
 8005de6:	d513      	bpl.n	8005e10 <_puts_r+0x50>
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	b18b      	cbz	r3, 8005e10 <_puts_r+0x50>
 8005dec:	3e01      	subs	r6, #1
 8005dee:	68a3      	ldr	r3, [r4, #8]
 8005df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005df4:	3b01      	subs	r3, #1
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	b9e9      	cbnz	r1, 8005e36 <_puts_r+0x76>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da2e      	bge.n	8005e5c <_puts_r+0x9c>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	210a      	movs	r1, #10
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f89b 	bl	8005f3e <__swbuf_r>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d007      	beq.n	8005e1c <_puts_r+0x5c>
 8005e0c:	250a      	movs	r5, #10
 8005e0e:	e007      	b.n	8005e20 <_puts_r+0x60>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f8d0 	bl	8005fb8 <__swsetup_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d0e7      	beq.n	8005dec <_puts_r+0x2c>
 8005e1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e22:	07da      	lsls	r2, r3, #31
 8005e24:	d405      	bmi.n	8005e32 <_puts_r+0x72>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	059b      	lsls	r3, r3, #22
 8005e2a:	d402      	bmi.n	8005e32 <_puts_r+0x72>
 8005e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2e:	f000 f999 	bl	8006164 <__retarget_lock_release_recursive>
 8005e32:	4628      	mov	r0, r5
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da04      	bge.n	8005e44 <_puts_r+0x84>
 8005e3a:	69a2      	ldr	r2, [r4, #24]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	dc06      	bgt.n	8005e4e <_puts_r+0x8e>
 8005e40:	290a      	cmp	r1, #10
 8005e42:	d004      	beq.n	8005e4e <_puts_r+0x8e>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	6022      	str	r2, [r4, #0]
 8005e4a:	7019      	strb	r1, [r3, #0]
 8005e4c:	e7cf      	b.n	8005dee <_puts_r+0x2e>
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 f874 	bl	8005f3e <__swbuf_r>
 8005e56:	3001      	adds	r0, #1
 8005e58:	d1c9      	bne.n	8005dee <_puts_r+0x2e>
 8005e5a:	e7df      	b.n	8005e1c <_puts_r+0x5c>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	250a      	movs	r5, #10
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	701d      	strb	r5, [r3, #0]
 8005e66:	e7db      	b.n	8005e20 <_puts_r+0x60>

08005e68 <puts>:
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <puts+0xc>)
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f7ff bfa7 	b.w	8005dc0 <_puts_r>
 8005e72:	bf00      	nop
 8005e74:	20000078 	.word	0x20000078

08005e78 <siprintf>:
 8005e78:	b40e      	push	{r1, r2, r3}
 8005e7a:	b500      	push	{lr}
 8005e7c:	b09c      	sub	sp, #112	; 0x70
 8005e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e80:	9002      	str	r0, [sp, #8]
 8005e82:	9006      	str	r0, [sp, #24]
 8005e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <siprintf+0x38>)
 8005e8a:	9107      	str	r1, [sp, #28]
 8005e8c:	9104      	str	r1, [sp, #16]
 8005e8e:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <siprintf+0x3c>)
 8005e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	a902      	add	r1, sp, #8
 8005e9c:	f002 fc84 	bl	80087a8 <_svfiprintf_r>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01c      	add	sp, #112	; 0x70
 8005ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eac:	b003      	add	sp, #12
 8005eae:	4770      	bx	lr
 8005eb0:	20000078 	.word	0x20000078
 8005eb4:	ffff0208 	.word	0xffff0208

08005eb8 <__sread>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	460c      	mov	r4, r1
 8005ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec0:	f000 f900 	bl	80060c4 <_read_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	bfab      	itete	ge
 8005ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eca:	89a3      	ldrhlt	r3, [r4, #12]
 8005ecc:	181b      	addge	r3, r3, r0
 8005ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ed2:	bfac      	ite	ge
 8005ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ed6:	81a3      	strhlt	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__swrite>:
 8005eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	461f      	mov	r7, r3
 8005ee0:	898b      	ldrh	r3, [r1, #12]
 8005ee2:	05db      	lsls	r3, r3, #23
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4616      	mov	r6, r2
 8005eea:	d505      	bpl.n	8005ef8 <__swrite+0x1e>
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f000 f8d4 	bl	80060a0 <_lseek_r>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	f000 b8eb 	b.w	80060e8 <_write_r>

08005f12 <__sseek>:
 8005f12:	b510      	push	{r4, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 f8c1 	bl	80060a0 <_lseek_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	bf15      	itete	ne
 8005f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f2e:	81a3      	strheq	r3, [r4, #12]
 8005f30:	bf18      	it	ne
 8005f32:	81a3      	strhne	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__sclose>:
 8005f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3a:	f000 b8a1 	b.w	8006080 <_close_r>

08005f3e <__swbuf_r>:
 8005f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f40:	460e      	mov	r6, r1
 8005f42:	4614      	mov	r4, r2
 8005f44:	4605      	mov	r5, r0
 8005f46:	b118      	cbz	r0, 8005f50 <__swbuf_r+0x12>
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	b90b      	cbnz	r3, 8005f50 <__swbuf_r+0x12>
 8005f4c:	f7ff fef0 	bl	8005d30 <__sinit>
 8005f50:	69a3      	ldr	r3, [r4, #24]
 8005f52:	60a3      	str	r3, [r4, #8]
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	071a      	lsls	r2, r3, #28
 8005f58:	d525      	bpl.n	8005fa6 <__swbuf_r+0x68>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	b31b      	cbz	r3, 8005fa6 <__swbuf_r+0x68>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	6922      	ldr	r2, [r4, #16]
 8005f62:	1a98      	subs	r0, r3, r2
 8005f64:	6963      	ldr	r3, [r4, #20]
 8005f66:	b2f6      	uxtb	r6, r6
 8005f68:	4283      	cmp	r3, r0
 8005f6a:	4637      	mov	r7, r6
 8005f6c:	dc04      	bgt.n	8005f78 <__swbuf_r+0x3a>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f002 fee1 	bl	8008d38 <_fflush_r>
 8005f76:	b9e0      	cbnz	r0, 8005fb2 <__swbuf_r+0x74>
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	60a3      	str	r3, [r4, #8]
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	6022      	str	r2, [r4, #0]
 8005f84:	701e      	strb	r6, [r3, #0]
 8005f86:	6962      	ldr	r2, [r4, #20]
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d004      	beq.n	8005f98 <__swbuf_r+0x5a>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	07db      	lsls	r3, r3, #31
 8005f92:	d506      	bpl.n	8005fa2 <__swbuf_r+0x64>
 8005f94:	2e0a      	cmp	r6, #10
 8005f96:	d104      	bne.n	8005fa2 <__swbuf_r+0x64>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f002 fecc 	bl	8008d38 <_fflush_r>
 8005fa0:	b938      	cbnz	r0, 8005fb2 <__swbuf_r+0x74>
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 f805 	bl	8005fb8 <__swsetup_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0d5      	beq.n	8005f5e <__swbuf_r+0x20>
 8005fb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005fb6:	e7f4      	b.n	8005fa2 <__swbuf_r+0x64>

08005fb8 <__swsetup_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <__swsetup_r+0xac>)
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	b118      	cbz	r0, 8005fcc <__swsetup_r+0x14>
 8005fc4:	6a03      	ldr	r3, [r0, #32]
 8005fc6:	b90b      	cbnz	r3, 8005fcc <__swsetup_r+0x14>
 8005fc8:	f7ff feb2 	bl	8005d30 <__sinit>
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fd2:	0718      	lsls	r0, r3, #28
 8005fd4:	d422      	bmi.n	800601c <__swsetup_r+0x64>
 8005fd6:	06d9      	lsls	r1, r3, #27
 8005fd8:	d407      	bmi.n	8005fea <__swsetup_r+0x32>
 8005fda:	2309      	movs	r3, #9
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe8:	e034      	b.n	8006054 <__swsetup_r+0x9c>
 8005fea:	0758      	lsls	r0, r3, #29
 8005fec:	d512      	bpl.n	8006014 <__swsetup_r+0x5c>
 8005fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff0:	b141      	cbz	r1, 8006004 <__swsetup_r+0x4c>
 8005ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	d002      	beq.n	8006000 <__swsetup_r+0x48>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 ff36 	bl	8006e6c <_free_r>
 8006000:	2300      	movs	r3, #0
 8006002:	6363      	str	r3, [r4, #52]	; 0x34
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	2300      	movs	r3, #0
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0308 	orr.w	r3, r3, #8
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	b94b      	cbnz	r3, 8006034 <__swsetup_r+0x7c>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602a:	d003      	beq.n	8006034 <__swsetup_r+0x7c>
 800602c:	4621      	mov	r1, r4
 800602e:	4628      	mov	r0, r5
 8006030:	f002 fed0 	bl	8008dd4 <__smakebuf_r>
 8006034:	89a0      	ldrh	r0, [r4, #12]
 8006036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800603a:	f010 0301 	ands.w	r3, r0, #1
 800603e:	d00a      	beq.n	8006056 <__swsetup_r+0x9e>
 8006040:	2300      	movs	r3, #0
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	6963      	ldr	r3, [r4, #20]
 8006046:	425b      	negs	r3, r3
 8006048:	61a3      	str	r3, [r4, #24]
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	b943      	cbnz	r3, 8006060 <__swsetup_r+0xa8>
 800604e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006052:	d1c4      	bne.n	8005fde <__swsetup_r+0x26>
 8006054:	bd38      	pop	{r3, r4, r5, pc}
 8006056:	0781      	lsls	r1, r0, #30
 8006058:	bf58      	it	pl
 800605a:	6963      	ldrpl	r3, [r4, #20]
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	e7f4      	b.n	800604a <__swsetup_r+0x92>
 8006060:	2000      	movs	r0, #0
 8006062:	e7f7      	b.n	8006054 <__swsetup_r+0x9c>
 8006064:	20000078 	.word	0x20000078

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <_localeconv_r>:
 8006078:	4800      	ldr	r0, [pc, #0]	; (800607c <_localeconv_r+0x4>)
 800607a:	4770      	bx	lr
 800607c:	2000016c 	.word	0x2000016c

08006080 <_close_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4d06      	ldr	r5, [pc, #24]	; (800609c <_close_r+0x1c>)
 8006084:	2300      	movs	r3, #0
 8006086:	4604      	mov	r4, r0
 8006088:	4608      	mov	r0, r1
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	f7fc f949 	bl	8002322 <_close>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_close_r+0x1a>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	b103      	cbz	r3, 800609a <_close_r+0x1a>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	20000480 	.word	0x20000480

080060a0 <_lseek_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d07      	ldr	r5, [pc, #28]	; (80060c0 <_lseek_r+0x20>)
 80060a4:	4604      	mov	r4, r0
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	602a      	str	r2, [r5, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f7fc f95e 	bl	8002370 <_lseek>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_lseek_r+0x1e>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_lseek_r+0x1e>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	20000480 	.word	0x20000480

080060c4 <_read_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	; (80060e4 <_read_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fc f8ec 	bl	80022b0 <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_read_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_read_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20000480 	.word	0x20000480

080060e8 <_write_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_write_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fc f8f7 	bl	80022ea <_write>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_write_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_write_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20000480 	.word	0x20000480

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000078 	.word	0x20000078

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f003 fb44 	bl	80097b8 <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	08009ee0 	.word	0x08009ee0
 8006154:	08009ee0 	.word	0x08009ee0
 8006158:	08009ee0 	.word	0x08009ee0
 800615c:	08009ee4 	.word	0x08009ee4

08006160 <__retarget_lock_init_recursive>:
 8006160:	4770      	bx	lr

08006162 <__retarget_lock_acquire_recursive>:
 8006162:	4770      	bx	lr

08006164 <__retarget_lock_release_recursive>:
 8006164:	4770      	bx	lr
	...

08006168 <nanf>:
 8006168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006170 <nanf+0x8>
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	7fc00000 	.word	0x7fc00000

08006174 <quorem>:
 8006174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	6903      	ldr	r3, [r0, #16]
 800617a:	690c      	ldr	r4, [r1, #16]
 800617c:	42a3      	cmp	r3, r4
 800617e:	4607      	mov	r7, r0
 8006180:	db7e      	blt.n	8006280 <quorem+0x10c>
 8006182:	3c01      	subs	r4, #1
 8006184:	f101 0814 	add.w	r8, r1, #20
 8006188:	f100 0514 	add.w	r5, r0, #20
 800618c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800619a:	3301      	adds	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80061aa:	d331      	bcc.n	8006210 <quorem+0x9c>
 80061ac:	f04f 0e00 	mov.w	lr, #0
 80061b0:	4640      	mov	r0, r8
 80061b2:	46ac      	mov	ip, r5
 80061b4:	46f2      	mov	sl, lr
 80061b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80061ba:	b293      	uxth	r3, r2
 80061bc:	fb06 e303 	mla	r3, r6, r3, lr
 80061c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061c4:	0c1a      	lsrs	r2, r3, #16
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ebaa 0303 	sub.w	r3, sl, r3
 80061cc:	f8dc a000 	ldr.w	sl, [ip]
 80061d0:	fa13 f38a 	uxtah	r3, r3, sl
 80061d4:	fb06 220e 	mla	r2, r6, lr, r2
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	9b00      	ldr	r3, [sp, #0]
 80061dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061e0:	b292      	uxth	r2, r2
 80061e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80061ee:	4581      	cmp	r9, r0
 80061f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061f4:	f84c 3b04 	str.w	r3, [ip], #4
 80061f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061fc:	d2db      	bcs.n	80061b6 <quorem+0x42>
 80061fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8006202:	b92b      	cbnz	r3, 8006210 <quorem+0x9c>
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	3b04      	subs	r3, #4
 8006208:	429d      	cmp	r5, r3
 800620a:	461a      	mov	r2, r3
 800620c:	d32c      	bcc.n	8006268 <quorem+0xf4>
 800620e:	613c      	str	r4, [r7, #16]
 8006210:	4638      	mov	r0, r7
 8006212:	f001 f9f1 	bl	80075f8 <__mcmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	db22      	blt.n	8006260 <quorem+0xec>
 800621a:	3601      	adds	r6, #1
 800621c:	4629      	mov	r1, r5
 800621e:	2000      	movs	r0, #0
 8006220:	f858 2b04 	ldr.w	r2, [r8], #4
 8006224:	f8d1 c000 	ldr.w	ip, [r1]
 8006228:	b293      	uxth	r3, r2
 800622a:	1ac3      	subs	r3, r0, r3
 800622c:	0c12      	lsrs	r2, r2, #16
 800622e:	fa13 f38c 	uxtah	r3, r3, ip
 8006232:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006236:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006240:	45c1      	cmp	r9, r8
 8006242:	f841 3b04 	str.w	r3, [r1], #4
 8006246:	ea4f 4022 	mov.w	r0, r2, asr #16
 800624a:	d2e9      	bcs.n	8006220 <quorem+0xac>
 800624c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006254:	b922      	cbnz	r2, 8006260 <quorem+0xec>
 8006256:	3b04      	subs	r3, #4
 8006258:	429d      	cmp	r5, r3
 800625a:	461a      	mov	r2, r3
 800625c:	d30a      	bcc.n	8006274 <quorem+0x100>
 800625e:	613c      	str	r4, [r7, #16]
 8006260:	4630      	mov	r0, r6
 8006262:	b003      	add	sp, #12
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	3b04      	subs	r3, #4
 800626c:	2a00      	cmp	r2, #0
 800626e:	d1ce      	bne.n	800620e <quorem+0x9a>
 8006270:	3c01      	subs	r4, #1
 8006272:	e7c9      	b.n	8006208 <quorem+0x94>
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	3b04      	subs	r3, #4
 8006278:	2a00      	cmp	r2, #0
 800627a:	d1f0      	bne.n	800625e <quorem+0xea>
 800627c:	3c01      	subs	r4, #1
 800627e:	e7eb      	b.n	8006258 <quorem+0xe4>
 8006280:	2000      	movs	r0, #0
 8006282:	e7ee      	b.n	8006262 <quorem+0xee>
 8006284:	0000      	movs	r0, r0
	...

08006288 <_dtoa_r>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	ed2d 8b04 	vpush	{d8-d9}
 8006290:	69c5      	ldr	r5, [r0, #28]
 8006292:	b093      	sub	sp, #76	; 0x4c
 8006294:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006298:	ec57 6b10 	vmov	r6, r7, d0
 800629c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062a0:	9107      	str	r1, [sp, #28]
 80062a2:	4604      	mov	r4, r0
 80062a4:	920a      	str	r2, [sp, #40]	; 0x28
 80062a6:	930d      	str	r3, [sp, #52]	; 0x34
 80062a8:	b975      	cbnz	r5, 80062c8 <_dtoa_r+0x40>
 80062aa:	2010      	movs	r0, #16
 80062ac:	f000 fe2a 	bl	8006f04 <malloc>
 80062b0:	4602      	mov	r2, r0
 80062b2:	61e0      	str	r0, [r4, #28]
 80062b4:	b920      	cbnz	r0, 80062c0 <_dtoa_r+0x38>
 80062b6:	4bae      	ldr	r3, [pc, #696]	; (8006570 <_dtoa_r+0x2e8>)
 80062b8:	21ef      	movs	r1, #239	; 0xef
 80062ba:	48ae      	ldr	r0, [pc, #696]	; (8006574 <_dtoa_r+0x2ec>)
 80062bc:	f002 fe3c 	bl	8008f38 <__assert_func>
 80062c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062c4:	6005      	str	r5, [r0, #0]
 80062c6:	60c5      	str	r5, [r0, #12]
 80062c8:	69e3      	ldr	r3, [r4, #28]
 80062ca:	6819      	ldr	r1, [r3, #0]
 80062cc:	b151      	cbz	r1, 80062e4 <_dtoa_r+0x5c>
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	604a      	str	r2, [r1, #4]
 80062d2:	2301      	movs	r3, #1
 80062d4:	4093      	lsls	r3, r2
 80062d6:	608b      	str	r3, [r1, #8]
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 ff07 	bl	80070ec <_Bfree>
 80062de:	69e3      	ldr	r3, [r4, #28]
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	1e3b      	subs	r3, r7, #0
 80062e6:	bfbb      	ittet	lt
 80062e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062ec:	9303      	strlt	r3, [sp, #12]
 80062ee:	2300      	movge	r3, #0
 80062f0:	2201      	movlt	r2, #1
 80062f2:	bfac      	ite	ge
 80062f4:	f8c8 3000 	strge.w	r3, [r8]
 80062f8:	f8c8 2000 	strlt.w	r2, [r8]
 80062fc:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <_dtoa_r+0x2f0>)
 80062fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006302:	ea33 0308 	bics.w	r3, r3, r8
 8006306:	d11b      	bne.n	8006340 <_dtoa_r+0xb8>
 8006308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800630a:	f242 730f 	movw	r3, #9999	; 0x270f
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006314:	4333      	orrs	r3, r6
 8006316:	f000 8593 	beq.w	8006e40 <_dtoa_r+0xbb8>
 800631a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800631c:	b963      	cbnz	r3, 8006338 <_dtoa_r+0xb0>
 800631e:	4b97      	ldr	r3, [pc, #604]	; (800657c <_dtoa_r+0x2f4>)
 8006320:	e027      	b.n	8006372 <_dtoa_r+0xea>
 8006322:	4b97      	ldr	r3, [pc, #604]	; (8006580 <_dtoa_r+0x2f8>)
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	9800      	ldr	r0, [sp, #0]
 800632e:	b013      	add	sp, #76	; 0x4c
 8006330:	ecbd 8b04 	vpop	{d8-d9}
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	4b90      	ldr	r3, [pc, #576]	; (800657c <_dtoa_r+0x2f4>)
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	3303      	adds	r3, #3
 800633e:	e7f3      	b.n	8006328 <_dtoa_r+0xa0>
 8006340:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006344:	2200      	movs	r2, #0
 8006346:	ec51 0b17 	vmov	r0, r1, d7
 800634a:	eeb0 8a47 	vmov.f32	s16, s14
 800634e:	eef0 8a67 	vmov.f32	s17, s15
 8006352:	2300      	movs	r3, #0
 8006354:	f7fa fbc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006358:	4681      	mov	r9, r0
 800635a:	b160      	cbz	r0, 8006376 <_dtoa_r+0xee>
 800635c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800635e:	2301      	movs	r3, #1
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8568 	beq.w	8006e3a <_dtoa_r+0xbb2>
 800636a:	4b86      	ldr	r3, [pc, #536]	; (8006584 <_dtoa_r+0x2fc>)
 800636c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	e7da      	b.n	800632c <_dtoa_r+0xa4>
 8006376:	aa10      	add	r2, sp, #64	; 0x40
 8006378:	a911      	add	r1, sp, #68	; 0x44
 800637a:	4620      	mov	r0, r4
 800637c:	eeb0 0a48 	vmov.f32	s0, s16
 8006380:	eef0 0a68 	vmov.f32	s1, s17
 8006384:	f001 fa4e 	bl	8007824 <__d2b>
 8006388:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800638c:	4682      	mov	sl, r0
 800638e:	2d00      	cmp	r5, #0
 8006390:	d07f      	beq.n	8006492 <_dtoa_r+0x20a>
 8006392:	ee18 3a90 	vmov	r3, s17
 8006396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800639a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800639e:	ec51 0b18 	vmov	r0, r1, d8
 80063a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063ae:	4619      	mov	r1, r3
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b75      	ldr	r3, [pc, #468]	; (8006588 <_dtoa_r+0x300>)
 80063b4:	f7f9 ff78 	bl	80002a8 <__aeabi_dsub>
 80063b8:	a367      	add	r3, pc, #412	; (adr r3, 8006558 <_dtoa_r+0x2d0>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa f92b 	bl	8000618 <__aeabi_dmul>
 80063c2:	a367      	add	r3, pc, #412	; (adr r3, 8006560 <_dtoa_r+0x2d8>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f7f9 ff70 	bl	80002ac <__adddf3>
 80063cc:	4606      	mov	r6, r0
 80063ce:	4628      	mov	r0, r5
 80063d0:	460f      	mov	r7, r1
 80063d2:	f7fa f8b7 	bl	8000544 <__aeabi_i2d>
 80063d6:	a364      	add	r3, pc, #400	; (adr r3, 8006568 <_dtoa_r+0x2e0>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7fa f91c 	bl	8000618 <__aeabi_dmul>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4630      	mov	r0, r6
 80063e6:	4639      	mov	r1, r7
 80063e8:	f7f9 ff60 	bl	80002ac <__adddf3>
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	f7fa fbc2 	bl	8000b78 <__aeabi_d2iz>
 80063f4:	2200      	movs	r2, #0
 80063f6:	4683      	mov	fp, r0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7fa fb7d 	bl	8000afc <__aeabi_dcmplt>
 8006402:	b148      	cbz	r0, 8006418 <_dtoa_r+0x190>
 8006404:	4658      	mov	r0, fp
 8006406:	f7fa f89d 	bl	8000544 <__aeabi_i2d>
 800640a:	4632      	mov	r2, r6
 800640c:	463b      	mov	r3, r7
 800640e:	f7fa fb6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006412:	b908      	cbnz	r0, 8006418 <_dtoa_r+0x190>
 8006414:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006418:	f1bb 0f16 	cmp.w	fp, #22
 800641c:	d857      	bhi.n	80064ce <_dtoa_r+0x246>
 800641e:	4b5b      	ldr	r3, [pc, #364]	; (800658c <_dtoa_r+0x304>)
 8006420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	ec51 0b18 	vmov	r0, r1, d8
 800642c:	f7fa fb66 	bl	8000afc <__aeabi_dcmplt>
 8006430:	2800      	cmp	r0, #0
 8006432:	d04e      	beq.n	80064d2 <_dtoa_r+0x24a>
 8006434:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006438:	2300      	movs	r3, #0
 800643a:	930c      	str	r3, [sp, #48]	; 0x30
 800643c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800643e:	1b5b      	subs	r3, r3, r5
 8006440:	1e5a      	subs	r2, r3, #1
 8006442:	bf45      	ittet	mi
 8006444:	f1c3 0301 	rsbmi	r3, r3, #1
 8006448:	9305      	strmi	r3, [sp, #20]
 800644a:	2300      	movpl	r3, #0
 800644c:	2300      	movmi	r3, #0
 800644e:	9206      	str	r2, [sp, #24]
 8006450:	bf54      	ite	pl
 8006452:	9305      	strpl	r3, [sp, #20]
 8006454:	9306      	strmi	r3, [sp, #24]
 8006456:	f1bb 0f00 	cmp.w	fp, #0
 800645a:	db3c      	blt.n	80064d6 <_dtoa_r+0x24e>
 800645c:	9b06      	ldr	r3, [sp, #24]
 800645e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006462:	445b      	add	r3, fp
 8006464:	9306      	str	r3, [sp, #24]
 8006466:	2300      	movs	r3, #0
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b07      	ldr	r3, [sp, #28]
 800646c:	2b09      	cmp	r3, #9
 800646e:	d868      	bhi.n	8006542 <_dtoa_r+0x2ba>
 8006470:	2b05      	cmp	r3, #5
 8006472:	bfc4      	itt	gt
 8006474:	3b04      	subgt	r3, #4
 8006476:	9307      	strgt	r3, [sp, #28]
 8006478:	9b07      	ldr	r3, [sp, #28]
 800647a:	f1a3 0302 	sub.w	r3, r3, #2
 800647e:	bfcc      	ite	gt
 8006480:	2500      	movgt	r5, #0
 8006482:	2501      	movle	r5, #1
 8006484:	2b03      	cmp	r3, #3
 8006486:	f200 8085 	bhi.w	8006594 <_dtoa_r+0x30c>
 800648a:	e8df f003 	tbb	[pc, r3]
 800648e:	3b2e      	.short	0x3b2e
 8006490:	5839      	.short	0x5839
 8006492:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006496:	441d      	add	r5, r3
 8006498:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800649c:	2b20      	cmp	r3, #32
 800649e:	bfc1      	itttt	gt
 80064a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80064a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80064ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064b0:	bfd6      	itet	le
 80064b2:	f1c3 0320 	rsble	r3, r3, #32
 80064b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80064ba:	fa06 f003 	lslle.w	r0, r6, r3
 80064be:	f7fa f831 	bl	8000524 <__aeabi_ui2d>
 80064c2:	2201      	movs	r2, #1
 80064c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064c8:	3d01      	subs	r5, #1
 80064ca:	920e      	str	r2, [sp, #56]	; 0x38
 80064cc:	e76f      	b.n	80063ae <_dtoa_r+0x126>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e7b3      	b.n	800643a <_dtoa_r+0x1b2>
 80064d2:	900c      	str	r0, [sp, #48]	; 0x30
 80064d4:	e7b2      	b.n	800643c <_dtoa_r+0x1b4>
 80064d6:	9b05      	ldr	r3, [sp, #20]
 80064d8:	eba3 030b 	sub.w	r3, r3, fp
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	f1cb 0300 	rsb	r3, fp, #0
 80064e2:	9308      	str	r3, [sp, #32]
 80064e4:	2300      	movs	r3, #0
 80064e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e8:	e7bf      	b.n	800646a <_dtoa_r+0x1e2>
 80064ea:	2300      	movs	r3, #0
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc52      	bgt.n	800659a <_dtoa_r+0x312>
 80064f4:	2301      	movs	r3, #1
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	461a      	mov	r2, r3
 80064fc:	920a      	str	r2, [sp, #40]	; 0x28
 80064fe:	e00b      	b.n	8006518 <_dtoa_r+0x290>
 8006500:	2301      	movs	r3, #1
 8006502:	e7f3      	b.n	80064ec <_dtoa_r+0x264>
 8006504:	2300      	movs	r3, #0
 8006506:	9309      	str	r3, [sp, #36]	; 0x24
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	445b      	add	r3, fp
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	3301      	adds	r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	bfb8      	it	lt
 8006516:	2301      	movlt	r3, #1
 8006518:	69e0      	ldr	r0, [r4, #28]
 800651a:	2100      	movs	r1, #0
 800651c:	2204      	movs	r2, #4
 800651e:	f102 0614 	add.w	r6, r2, #20
 8006522:	429e      	cmp	r6, r3
 8006524:	d93d      	bls.n	80065a2 <_dtoa_r+0x31a>
 8006526:	6041      	str	r1, [r0, #4]
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fd9f 	bl	800706c <_Balloc>
 800652e:	9000      	str	r0, [sp, #0]
 8006530:	2800      	cmp	r0, #0
 8006532:	d139      	bne.n	80065a8 <_dtoa_r+0x320>
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <_dtoa_r+0x308>)
 8006536:	4602      	mov	r2, r0
 8006538:	f240 11af 	movw	r1, #431	; 0x1af
 800653c:	e6bd      	b.n	80062ba <_dtoa_r+0x32>
 800653e:	2301      	movs	r3, #1
 8006540:	e7e1      	b.n	8006506 <_dtoa_r+0x27e>
 8006542:	2501      	movs	r5, #1
 8006544:	2300      	movs	r3, #0
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	9509      	str	r5, [sp, #36]	; 0x24
 800654a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	2200      	movs	r2, #0
 8006554:	2312      	movs	r3, #18
 8006556:	e7d1      	b.n	80064fc <_dtoa_r+0x274>
 8006558:	636f4361 	.word	0x636f4361
 800655c:	3fd287a7 	.word	0x3fd287a7
 8006560:	8b60c8b3 	.word	0x8b60c8b3
 8006564:	3fc68a28 	.word	0x3fc68a28
 8006568:	509f79fb 	.word	0x509f79fb
 800656c:	3fd34413 	.word	0x3fd34413
 8006570:	08009af6 	.word	0x08009af6
 8006574:	08009b0d 	.word	0x08009b0d
 8006578:	7ff00000 	.word	0x7ff00000
 800657c:	08009af2 	.word	0x08009af2
 8006580:	08009ae9 	.word	0x08009ae9
 8006584:	08009ac1 	.word	0x08009ac1
 8006588:	3ff80000 	.word	0x3ff80000
 800658c:	08009bf8 	.word	0x08009bf8
 8006590:	08009b65 	.word	0x08009b65
 8006594:	2301      	movs	r3, #1
 8006596:	9309      	str	r3, [sp, #36]	; 0x24
 8006598:	e7d7      	b.n	800654a <_dtoa_r+0x2c2>
 800659a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	e7ba      	b.n	8006518 <_dtoa_r+0x290>
 80065a2:	3101      	adds	r1, #1
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	e7ba      	b.n	800651e <_dtoa_r+0x296>
 80065a8:	69e3      	ldr	r3, [r4, #28]
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	2b0e      	cmp	r3, #14
 80065b2:	f200 80a8 	bhi.w	8006706 <_dtoa_r+0x47e>
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	f000 80a5 	beq.w	8006706 <_dtoa_r+0x47e>
 80065bc:	f1bb 0f00 	cmp.w	fp, #0
 80065c0:	dd38      	ble.n	8006634 <_dtoa_r+0x3ac>
 80065c2:	4bc0      	ldr	r3, [pc, #768]	; (80068c4 <_dtoa_r+0x63c>)
 80065c4:	f00b 020f 	and.w	r2, fp, #15
 80065c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80065d8:	d019      	beq.n	800660e <_dtoa_r+0x386>
 80065da:	4bbb      	ldr	r3, [pc, #748]	; (80068c8 <_dtoa_r+0x640>)
 80065dc:	ec51 0b18 	vmov	r0, r1, d8
 80065e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065e4:	f7fa f942 	bl	800086c <__aeabi_ddiv>
 80065e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ec:	f008 080f 	and.w	r8, r8, #15
 80065f0:	2503      	movs	r5, #3
 80065f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80068c8 <_dtoa_r+0x640>
 80065f6:	f1b8 0f00 	cmp.w	r8, #0
 80065fa:	d10a      	bne.n	8006612 <_dtoa_r+0x38a>
 80065fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	f7fa f932 	bl	800086c <__aeabi_ddiv>
 8006608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800660c:	e02b      	b.n	8006666 <_dtoa_r+0x3de>
 800660e:	2502      	movs	r5, #2
 8006610:	e7ef      	b.n	80065f2 <_dtoa_r+0x36a>
 8006612:	f018 0f01 	tst.w	r8, #1
 8006616:	d008      	beq.n	800662a <_dtoa_r+0x3a2>
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006620:	f7f9 fffa 	bl	8000618 <__aeabi_dmul>
 8006624:	3501      	adds	r5, #1
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800662e:	f109 0908 	add.w	r9, r9, #8
 8006632:	e7e0      	b.n	80065f6 <_dtoa_r+0x36e>
 8006634:	f000 809f 	beq.w	8006776 <_dtoa_r+0x4ee>
 8006638:	f1cb 0600 	rsb	r6, fp, #0
 800663c:	4ba1      	ldr	r3, [pc, #644]	; (80068c4 <_dtoa_r+0x63c>)
 800663e:	4fa2      	ldr	r7, [pc, #648]	; (80068c8 <_dtoa_r+0x640>)
 8006640:	f006 020f 	and.w	r2, r6, #15
 8006644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	ec51 0b18 	vmov	r0, r1, d8
 8006650:	f7f9 ffe2 	bl	8000618 <__aeabi_dmul>
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	1136      	asrs	r6, r6, #4
 800665a:	2300      	movs	r3, #0
 800665c:	2502      	movs	r5, #2
 800665e:	2e00      	cmp	r6, #0
 8006660:	d17e      	bne.n	8006760 <_dtoa_r+0x4d8>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1d0      	bne.n	8006608 <_dtoa_r+0x380>
 8006666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006668:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8084 	beq.w	800677a <_dtoa_r+0x4f2>
 8006672:	4b96      	ldr	r3, [pc, #600]	; (80068cc <_dtoa_r+0x644>)
 8006674:	2200      	movs	r2, #0
 8006676:	4640      	mov	r0, r8
 8006678:	4649      	mov	r1, r9
 800667a:	f7fa fa3f 	bl	8000afc <__aeabi_dcmplt>
 800667e:	2800      	cmp	r0, #0
 8006680:	d07b      	beq.n	800677a <_dtoa_r+0x4f2>
 8006682:	9b04      	ldr	r3, [sp, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d078      	beq.n	800677a <_dtoa_r+0x4f2>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	dd39      	ble.n	8006702 <_dtoa_r+0x47a>
 800668e:	4b90      	ldr	r3, [pc, #576]	; (80068d0 <_dtoa_r+0x648>)
 8006690:	2200      	movs	r2, #0
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7f9 ffbf 	bl	8000618 <__aeabi_dmul>
 800669a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669e:	9e01      	ldr	r6, [sp, #4]
 80066a0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80066a4:	3501      	adds	r5, #1
 80066a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 ff4a 	bl	8000544 <__aeabi_i2d>
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	f7f9 ffb0 	bl	8000618 <__aeabi_dmul>
 80066b8:	4b86      	ldr	r3, [pc, #536]	; (80068d4 <_dtoa_r+0x64c>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	f7f9 fdf6 	bl	80002ac <__adddf3>
 80066c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d158      	bne.n	8006780 <_dtoa_r+0x4f8>
 80066ce:	4b82      	ldr	r3, [pc, #520]	; (80068d8 <_dtoa_r+0x650>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 fde7 	bl	80002a8 <__aeabi_dsub>
 80066da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066de:	4680      	mov	r8, r0
 80066e0:	4689      	mov	r9, r1
 80066e2:	f7fa fa29 	bl	8000b38 <__aeabi_dcmpgt>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f040 8296 	bne.w	8006c18 <_dtoa_r+0x990>
 80066ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066f0:	4640      	mov	r0, r8
 80066f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7fa fa00 	bl	8000afc <__aeabi_dcmplt>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f040 8289 	bne.w	8006c14 <_dtoa_r+0x98c>
 8006702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006708:	2b00      	cmp	r3, #0
 800670a:	f2c0 814e 	blt.w	80069aa <_dtoa_r+0x722>
 800670e:	f1bb 0f0e 	cmp.w	fp, #14
 8006712:	f300 814a 	bgt.w	80069aa <_dtoa_r+0x722>
 8006716:	4b6b      	ldr	r3, [pc, #428]	; (80068c4 <_dtoa_r+0x63c>)
 8006718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800671c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	f280 80dc 	bge.w	80068e0 <_dtoa_r+0x658>
 8006728:	9b04      	ldr	r3, [sp, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f300 80d8 	bgt.w	80068e0 <_dtoa_r+0x658>
 8006730:	f040 826f 	bne.w	8006c12 <_dtoa_r+0x98a>
 8006734:	4b68      	ldr	r3, [pc, #416]	; (80068d8 <_dtoa_r+0x650>)
 8006736:	2200      	movs	r2, #0
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7f9 ff6c 	bl	8000618 <__aeabi_dmul>
 8006740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006744:	f7fa f9ee 	bl	8000b24 <__aeabi_dcmpge>
 8006748:	9e04      	ldr	r6, [sp, #16]
 800674a:	4637      	mov	r7, r6
 800674c:	2800      	cmp	r0, #0
 800674e:	f040 8245 	bne.w	8006bdc <_dtoa_r+0x954>
 8006752:	9d00      	ldr	r5, [sp, #0]
 8006754:	2331      	movs	r3, #49	; 0x31
 8006756:	f805 3b01 	strb.w	r3, [r5], #1
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	e241      	b.n	8006be4 <_dtoa_r+0x95c>
 8006760:	07f2      	lsls	r2, r6, #31
 8006762:	d505      	bpl.n	8006770 <_dtoa_r+0x4e8>
 8006764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006768:	f7f9 ff56 	bl	8000618 <__aeabi_dmul>
 800676c:	3501      	adds	r5, #1
 800676e:	2301      	movs	r3, #1
 8006770:	1076      	asrs	r6, r6, #1
 8006772:	3708      	adds	r7, #8
 8006774:	e773      	b.n	800665e <_dtoa_r+0x3d6>
 8006776:	2502      	movs	r5, #2
 8006778:	e775      	b.n	8006666 <_dtoa_r+0x3de>
 800677a:	9e04      	ldr	r6, [sp, #16]
 800677c:	465f      	mov	r7, fp
 800677e:	e792      	b.n	80066a6 <_dtoa_r+0x41e>
 8006780:	9900      	ldr	r1, [sp, #0]
 8006782:	4b50      	ldr	r3, [pc, #320]	; (80068c4 <_dtoa_r+0x63c>)
 8006784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006788:	4431      	add	r1, r6
 800678a:	9102      	str	r1, [sp, #8]
 800678c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678e:	eeb0 9a47 	vmov.f32	s18, s14
 8006792:	eef0 9a67 	vmov.f32	s19, s15
 8006796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800679a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800679e:	2900      	cmp	r1, #0
 80067a0:	d044      	beq.n	800682c <_dtoa_r+0x5a4>
 80067a2:	494e      	ldr	r1, [pc, #312]	; (80068dc <_dtoa_r+0x654>)
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7fa f861 	bl	800086c <__aeabi_ddiv>
 80067aa:	ec53 2b19 	vmov	r2, r3, d9
 80067ae:	f7f9 fd7b 	bl	80002a8 <__aeabi_dsub>
 80067b2:	9d00      	ldr	r5, [sp, #0]
 80067b4:	ec41 0b19 	vmov	d9, r0, r1
 80067b8:	4649      	mov	r1, r9
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7fa f9dc 	bl	8000b78 <__aeabi_d2iz>
 80067c0:	4606      	mov	r6, r0
 80067c2:	f7f9 febf 	bl	8000544 <__aeabi_i2d>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7f9 fd6b 	bl	80002a8 <__aeabi_dsub>
 80067d2:	3630      	adds	r6, #48	; 0x30
 80067d4:	f805 6b01 	strb.w	r6, [r5], #1
 80067d8:	ec53 2b19 	vmov	r2, r3, d9
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	f7fa f98c 	bl	8000afc <__aeabi_dcmplt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d164      	bne.n	80068b2 <_dtoa_r+0x62a>
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	4937      	ldr	r1, [pc, #220]	; (80068cc <_dtoa_r+0x644>)
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7f9 fd5a 	bl	80002a8 <__aeabi_dsub>
 80067f4:	ec53 2b19 	vmov	r2, r3, d9
 80067f8:	f7fa f980 	bl	8000afc <__aeabi_dcmplt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f040 80b6 	bne.w	800696e <_dtoa_r+0x6e6>
 8006802:	9b02      	ldr	r3, [sp, #8]
 8006804:	429d      	cmp	r5, r3
 8006806:	f43f af7c 	beq.w	8006702 <_dtoa_r+0x47a>
 800680a:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <_dtoa_r+0x648>)
 800680c:	ec51 0b19 	vmov	r0, r1, d9
 8006810:	2200      	movs	r2, #0
 8006812:	f7f9 ff01 	bl	8000618 <__aeabi_dmul>
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <_dtoa_r+0x648>)
 8006818:	ec41 0b19 	vmov	d9, r0, r1
 800681c:	2200      	movs	r2, #0
 800681e:	4640      	mov	r0, r8
 8006820:	4649      	mov	r1, r9
 8006822:	f7f9 fef9 	bl	8000618 <__aeabi_dmul>
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	e7c5      	b.n	80067b8 <_dtoa_r+0x530>
 800682c:	ec51 0b17 	vmov	r0, r1, d7
 8006830:	f7f9 fef2 	bl	8000618 <__aeabi_dmul>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	9d00      	ldr	r5, [sp, #0]
 8006838:	930f      	str	r3, [sp, #60]	; 0x3c
 800683a:	ec41 0b19 	vmov	d9, r0, r1
 800683e:	4649      	mov	r1, r9
 8006840:	4640      	mov	r0, r8
 8006842:	f7fa f999 	bl	8000b78 <__aeabi_d2iz>
 8006846:	4606      	mov	r6, r0
 8006848:	f7f9 fe7c 	bl	8000544 <__aeabi_i2d>
 800684c:	3630      	adds	r6, #48	; 0x30
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7f9 fd27 	bl	80002a8 <__aeabi_dsub>
 800685a:	f805 6b01 	strb.w	r6, [r5], #1
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	429d      	cmp	r5, r3
 8006862:	4680      	mov	r8, r0
 8006864:	4689      	mov	r9, r1
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	d124      	bne.n	80068b6 <_dtoa_r+0x62e>
 800686c:	4b1b      	ldr	r3, [pc, #108]	; (80068dc <_dtoa_r+0x654>)
 800686e:	ec51 0b19 	vmov	r0, r1, d9
 8006872:	f7f9 fd1b 	bl	80002ac <__adddf3>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7fa f95b 	bl	8000b38 <__aeabi_dcmpgt>
 8006882:	2800      	cmp	r0, #0
 8006884:	d173      	bne.n	800696e <_dtoa_r+0x6e6>
 8006886:	ec53 2b19 	vmov	r2, r3, d9
 800688a:	4914      	ldr	r1, [pc, #80]	; (80068dc <_dtoa_r+0x654>)
 800688c:	2000      	movs	r0, #0
 800688e:	f7f9 fd0b 	bl	80002a8 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4640      	mov	r0, r8
 8006898:	4649      	mov	r1, r9
 800689a:	f7fa f92f 	bl	8000afc <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f af2f 	beq.w	8006702 <_dtoa_r+0x47a>
 80068a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068a6:	1e6b      	subs	r3, r5, #1
 80068a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068ae:	2b30      	cmp	r3, #48	; 0x30
 80068b0:	d0f8      	beq.n	80068a4 <_dtoa_r+0x61c>
 80068b2:	46bb      	mov	fp, r7
 80068b4:	e04a      	b.n	800694c <_dtoa_r+0x6c4>
 80068b6:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <_dtoa_r+0x648>)
 80068b8:	f7f9 feae 	bl	8000618 <__aeabi_dmul>
 80068bc:	4680      	mov	r8, r0
 80068be:	4689      	mov	r9, r1
 80068c0:	e7bd      	b.n	800683e <_dtoa_r+0x5b6>
 80068c2:	bf00      	nop
 80068c4:	08009bf8 	.word	0x08009bf8
 80068c8:	08009bd0 	.word	0x08009bd0
 80068cc:	3ff00000 	.word	0x3ff00000
 80068d0:	40240000 	.word	0x40240000
 80068d4:	401c0000 	.word	0x401c0000
 80068d8:	40140000 	.word	0x40140000
 80068dc:	3fe00000 	.word	0x3fe00000
 80068e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068e4:	9d00      	ldr	r5, [sp, #0]
 80068e6:	4642      	mov	r2, r8
 80068e8:	464b      	mov	r3, r9
 80068ea:	4630      	mov	r0, r6
 80068ec:	4639      	mov	r1, r7
 80068ee:	f7f9 ffbd 	bl	800086c <__aeabi_ddiv>
 80068f2:	f7fa f941 	bl	8000b78 <__aeabi_d2iz>
 80068f6:	9001      	str	r0, [sp, #4]
 80068f8:	f7f9 fe24 	bl	8000544 <__aeabi_i2d>
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	f7f9 fe8a 	bl	8000618 <__aeabi_dmul>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7f9 fccc 	bl	80002a8 <__aeabi_dsub>
 8006910:	9e01      	ldr	r6, [sp, #4]
 8006912:	9f04      	ldr	r7, [sp, #16]
 8006914:	3630      	adds	r6, #48	; 0x30
 8006916:	f805 6b01 	strb.w	r6, [r5], #1
 800691a:	9e00      	ldr	r6, [sp, #0]
 800691c:	1bae      	subs	r6, r5, r6
 800691e:	42b7      	cmp	r7, r6
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	d134      	bne.n	8006990 <_dtoa_r+0x708>
 8006926:	f7f9 fcc1 	bl	80002ac <__adddf3>
 800692a:	4642      	mov	r2, r8
 800692c:	464b      	mov	r3, r9
 800692e:	4606      	mov	r6, r0
 8006930:	460f      	mov	r7, r1
 8006932:	f7fa f901 	bl	8000b38 <__aeabi_dcmpgt>
 8006936:	b9c8      	cbnz	r0, 800696c <_dtoa_r+0x6e4>
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	4630      	mov	r0, r6
 800693e:	4639      	mov	r1, r7
 8006940:	f7fa f8d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006944:	b110      	cbz	r0, 800694c <_dtoa_r+0x6c4>
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	07db      	lsls	r3, r3, #31
 800694a:	d40f      	bmi.n	800696c <_dtoa_r+0x6e4>
 800694c:	4651      	mov	r1, sl
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fbcc 	bl	80070ec <_Bfree>
 8006954:	2300      	movs	r3, #0
 8006956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006958:	702b      	strb	r3, [r5, #0]
 800695a:	f10b 0301 	add.w	r3, fp, #1
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006962:	2b00      	cmp	r3, #0
 8006964:	f43f ace2 	beq.w	800632c <_dtoa_r+0xa4>
 8006968:	601d      	str	r5, [r3, #0]
 800696a:	e4df      	b.n	800632c <_dtoa_r+0xa4>
 800696c:	465f      	mov	r7, fp
 800696e:	462b      	mov	r3, r5
 8006970:	461d      	mov	r5, r3
 8006972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006976:	2a39      	cmp	r2, #57	; 0x39
 8006978:	d106      	bne.n	8006988 <_dtoa_r+0x700>
 800697a:	9a00      	ldr	r2, [sp, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d1f7      	bne.n	8006970 <_dtoa_r+0x6e8>
 8006980:	9900      	ldr	r1, [sp, #0]
 8006982:	2230      	movs	r2, #48	; 0x30
 8006984:	3701      	adds	r7, #1
 8006986:	700a      	strb	r2, [r1, #0]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	3201      	adds	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e790      	b.n	80068b2 <_dtoa_r+0x62a>
 8006990:	4ba3      	ldr	r3, [pc, #652]	; (8006c20 <_dtoa_r+0x998>)
 8006992:	2200      	movs	r2, #0
 8006994:	f7f9 fe40 	bl	8000618 <__aeabi_dmul>
 8006998:	2200      	movs	r2, #0
 800699a:	2300      	movs	r3, #0
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	f7fa f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d09e      	beq.n	80068e6 <_dtoa_r+0x65e>
 80069a8:	e7d0      	b.n	800694c <_dtoa_r+0x6c4>
 80069aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	f000 80ca 	beq.w	8006b46 <_dtoa_r+0x8be>
 80069b2:	9a07      	ldr	r2, [sp, #28]
 80069b4:	2a01      	cmp	r2, #1
 80069b6:	f300 80ad 	bgt.w	8006b14 <_dtoa_r+0x88c>
 80069ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069bc:	2a00      	cmp	r2, #0
 80069be:	f000 80a5 	beq.w	8006b0c <_dtoa_r+0x884>
 80069c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069c6:	9e08      	ldr	r6, [sp, #32]
 80069c8:	9d05      	ldr	r5, [sp, #20]
 80069ca:	9a05      	ldr	r2, [sp, #20]
 80069cc:	441a      	add	r2, r3
 80069ce:	9205      	str	r2, [sp, #20]
 80069d0:	9a06      	ldr	r2, [sp, #24]
 80069d2:	2101      	movs	r1, #1
 80069d4:	441a      	add	r2, r3
 80069d6:	4620      	mov	r0, r4
 80069d8:	9206      	str	r2, [sp, #24]
 80069da:	f000 fc87 	bl	80072ec <__i2b>
 80069de:	4607      	mov	r7, r0
 80069e0:	b165      	cbz	r5, 80069fc <_dtoa_r+0x774>
 80069e2:	9b06      	ldr	r3, [sp, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd09      	ble.n	80069fc <_dtoa_r+0x774>
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	9a05      	ldr	r2, [sp, #20]
 80069ec:	bfa8      	it	ge
 80069ee:	462b      	movge	r3, r5
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	9205      	str	r2, [sp, #20]
 80069f4:	9a06      	ldr	r2, [sp, #24]
 80069f6:	1aed      	subs	r5, r5, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	9b08      	ldr	r3, [sp, #32]
 80069fe:	b1f3      	cbz	r3, 8006a3e <_dtoa_r+0x7b6>
 8006a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80a3 	beq.w	8006b4e <_dtoa_r+0x8c6>
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	dd10      	ble.n	8006a2e <_dtoa_r+0x7a6>
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4632      	mov	r2, r6
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fd2b 	bl	800746c <__pow5mult>
 8006a16:	4652      	mov	r2, sl
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fc7b 	bl	8007318 <__multiply>
 8006a22:	4651      	mov	r1, sl
 8006a24:	4680      	mov	r8, r0
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fb60 	bl	80070ec <_Bfree>
 8006a2c:	46c2      	mov	sl, r8
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	1b9a      	subs	r2, r3, r6
 8006a32:	d004      	beq.n	8006a3e <_dtoa_r+0x7b6>
 8006a34:	4651      	mov	r1, sl
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 fd18 	bl	800746c <__pow5mult>
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	2101      	movs	r1, #1
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fc53 	bl	80072ec <__i2b>
 8006a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	f340 8081 	ble.w	8006b52 <_dtoa_r+0x8ca>
 8006a50:	461a      	mov	r2, r3
 8006a52:	4601      	mov	r1, r0
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fd09 	bl	800746c <__pow5mult>
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	4606      	mov	r6, r0
 8006a60:	dd7a      	ble.n	8006b58 <_dtoa_r+0x8d0>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	6933      	ldr	r3, [r6, #16]
 8006a68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a6c:	6918      	ldr	r0, [r3, #16]
 8006a6e:	f000 fbef 	bl	8007250 <__hi0bits>
 8006a72:	f1c0 0020 	rsb	r0, r0, #32
 8006a76:	9b06      	ldr	r3, [sp, #24]
 8006a78:	4418      	add	r0, r3
 8006a7a:	f010 001f 	ands.w	r0, r0, #31
 8006a7e:	f000 8094 	beq.w	8006baa <_dtoa_r+0x922>
 8006a82:	f1c0 0320 	rsb	r3, r0, #32
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	f340 8085 	ble.w	8006b96 <_dtoa_r+0x90e>
 8006a8c:	9b05      	ldr	r3, [sp, #20]
 8006a8e:	f1c0 001c 	rsb	r0, r0, #28
 8006a92:	4403      	add	r3, r0
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	9b06      	ldr	r3, [sp, #24]
 8006a98:	4403      	add	r3, r0
 8006a9a:	4405      	add	r5, r0
 8006a9c:	9306      	str	r3, [sp, #24]
 8006a9e:	9b05      	ldr	r3, [sp, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dd05      	ble.n	8006ab0 <_dtoa_r+0x828>
 8006aa4:	4651      	mov	r1, sl
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fd39 	bl	8007520 <__lshift>
 8006aae:	4682      	mov	sl, r0
 8006ab0:	9b06      	ldr	r3, [sp, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dd05      	ble.n	8006ac2 <_dtoa_r+0x83a>
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 fd30 	bl	8007520 <__lshift>
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d072      	beq.n	8006bae <_dtoa_r+0x926>
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4650      	mov	r0, sl
 8006acc:	f000 fd94 	bl	80075f8 <__mcmp>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	da6c      	bge.n	8006bae <_dtoa_r+0x926>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	220a      	movs	r2, #10
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 fb28 	bl	8007130 <__multadd>
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 81b0 	beq.w	8006e4e <_dtoa_r+0xbc6>
 8006aee:	2300      	movs	r3, #0
 8006af0:	4639      	mov	r1, r7
 8006af2:	220a      	movs	r2, #10
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fb1b 	bl	8007130 <__multadd>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	4607      	mov	r7, r0
 8006b00:	f300 8096 	bgt.w	8006c30 <_dtoa_r+0x9a8>
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	dc59      	bgt.n	8006bbe <_dtoa_r+0x936>
 8006b0a:	e091      	b.n	8006c30 <_dtoa_r+0x9a8>
 8006b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b12:	e758      	b.n	80069c6 <_dtoa_r+0x73e>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	1e5e      	subs	r6, r3, #1
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	42b3      	cmp	r3, r6
 8006b1c:	bfbf      	itttt	lt
 8006b1e:	9b08      	ldrlt	r3, [sp, #32]
 8006b20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006b22:	9608      	strlt	r6, [sp, #32]
 8006b24:	1af3      	sublt	r3, r6, r3
 8006b26:	bfb4      	ite	lt
 8006b28:	18d2      	addlt	r2, r2, r3
 8006b2a:	1b9e      	subge	r6, r3, r6
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	bfbc      	itt	lt
 8006b30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b32:	2600      	movlt	r6, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bfb7      	itett	lt
 8006b38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b40:	1a9d      	sublt	r5, r3, r2
 8006b42:	2300      	movlt	r3, #0
 8006b44:	e741      	b.n	80069ca <_dtoa_r+0x742>
 8006b46:	9e08      	ldr	r6, [sp, #32]
 8006b48:	9d05      	ldr	r5, [sp, #20]
 8006b4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b4c:	e748      	b.n	80069e0 <_dtoa_r+0x758>
 8006b4e:	9a08      	ldr	r2, [sp, #32]
 8006b50:	e770      	b.n	8006a34 <_dtoa_r+0x7ac>
 8006b52:	9b07      	ldr	r3, [sp, #28]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	dc19      	bgt.n	8006b8c <_dtoa_r+0x904>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	b9bb      	cbnz	r3, 8006b8c <_dtoa_r+0x904>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b62:	b99b      	cbnz	r3, 8006b8c <_dtoa_r+0x904>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	051b      	lsls	r3, r3, #20
 8006b6e:	b183      	cbz	r3, 8006b92 <_dtoa_r+0x90a>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	3301      	adds	r3, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	9306      	str	r3, [sp, #24]
 8006b7c:	f04f 0801 	mov.w	r8, #1
 8006b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f47f af6f 	bne.w	8006a66 <_dtoa_r+0x7de>
 8006b88:	2001      	movs	r0, #1
 8006b8a:	e774      	b.n	8006a76 <_dtoa_r+0x7ee>
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	e7f6      	b.n	8006b80 <_dtoa_r+0x8f8>
 8006b92:	4698      	mov	r8, r3
 8006b94:	e7f4      	b.n	8006b80 <_dtoa_r+0x8f8>
 8006b96:	d082      	beq.n	8006a9e <_dtoa_r+0x816>
 8006b98:	9a05      	ldr	r2, [sp, #20]
 8006b9a:	331c      	adds	r3, #28
 8006b9c:	441a      	add	r2, r3
 8006b9e:	9205      	str	r2, [sp, #20]
 8006ba0:	9a06      	ldr	r2, [sp, #24]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	441d      	add	r5, r3
 8006ba6:	9206      	str	r2, [sp, #24]
 8006ba8:	e779      	b.n	8006a9e <_dtoa_r+0x816>
 8006baa:	4603      	mov	r3, r0
 8006bac:	e7f4      	b.n	8006b98 <_dtoa_r+0x910>
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dc37      	bgt.n	8006c24 <_dtoa_r+0x99c>
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	dd34      	ble.n	8006c24 <_dtoa_r+0x99c>
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	b963      	cbnz	r3, 8006bdc <_dtoa_r+0x954>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fab2 	bl	8007130 <__multadd>
 8006bcc:	4601      	mov	r1, r0
 8006bce:	4606      	mov	r6, r0
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f000 fd11 	bl	80075f8 <__mcmp>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f73f adbb 	bgt.w	8006752 <_dtoa_r+0x4ca>
 8006bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bde:	9d00      	ldr	r5, [sp, #0]
 8006be0:	ea6f 0b03 	mvn.w	fp, r3
 8006be4:	f04f 0800 	mov.w	r8, #0
 8006be8:	4631      	mov	r1, r6
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fa7e 	bl	80070ec <_Bfree>
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	f43f aeab 	beq.w	800694c <_dtoa_r+0x6c4>
 8006bf6:	f1b8 0f00 	cmp.w	r8, #0
 8006bfa:	d005      	beq.n	8006c08 <_dtoa_r+0x980>
 8006bfc:	45b8      	cmp	r8, r7
 8006bfe:	d003      	beq.n	8006c08 <_dtoa_r+0x980>
 8006c00:	4641      	mov	r1, r8
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fa72 	bl	80070ec <_Bfree>
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fa6e 	bl	80070ec <_Bfree>
 8006c10:	e69c      	b.n	800694c <_dtoa_r+0x6c4>
 8006c12:	2600      	movs	r6, #0
 8006c14:	4637      	mov	r7, r6
 8006c16:	e7e1      	b.n	8006bdc <_dtoa_r+0x954>
 8006c18:	46bb      	mov	fp, r7
 8006c1a:	4637      	mov	r7, r6
 8006c1c:	e599      	b.n	8006752 <_dtoa_r+0x4ca>
 8006c1e:	bf00      	nop
 8006c20:	40240000 	.word	0x40240000
 8006c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80c8 	beq.w	8006dbc <_dtoa_r+0xb34>
 8006c2c:	9b04      	ldr	r3, [sp, #16]
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	dd05      	ble.n	8006c40 <_dtoa_r+0x9b8>
 8006c34:	4639      	mov	r1, r7
 8006c36:	462a      	mov	r2, r5
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fc71 	bl	8007520 <__lshift>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	d05b      	beq.n	8006cfe <_dtoa_r+0xa76>
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 fa0f 	bl	800706c <_Balloc>
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b928      	cbnz	r0, 8006c5e <_dtoa_r+0x9d6>
 8006c52:	4b83      	ldr	r3, [pc, #524]	; (8006e60 <_dtoa_r+0xbd8>)
 8006c54:	4602      	mov	r2, r0
 8006c56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c5a:	f7ff bb2e 	b.w	80062ba <_dtoa_r+0x32>
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	3202      	adds	r2, #2
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	f107 010c 	add.w	r1, r7, #12
 8006c68:	300c      	adds	r0, #12
 8006c6a:	f002 f94d 	bl	8008f08 <memcpy>
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fc54 	bl	8007520 <__lshift>
 8006c78:	9b00      	ldr	r3, [sp, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	9304      	str	r3, [sp, #16]
 8006c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c82:	4413      	add	r3, r2
 8006c84:	9308      	str	r3, [sp, #32]
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	46b8      	mov	r8, r7
 8006c8e:	9306      	str	r3, [sp, #24]
 8006c90:	4607      	mov	r7, r0
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	4631      	mov	r1, r6
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4650      	mov	r0, sl
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f7ff fa6a 	bl	8006174 <quorem>
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	9002      	str	r0, [sp, #8]
 8006ca4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ca8:	4650      	mov	r0, sl
 8006caa:	f000 fca5 	bl	80075f8 <__mcmp>
 8006cae:	463a      	mov	r2, r7
 8006cb0:	9005      	str	r0, [sp, #20]
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fcbb 	bl	8007630 <__mdiff>
 8006cba:	68c2      	ldr	r2, [r0, #12]
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	bb02      	cbnz	r2, 8006d02 <_dtoa_r+0xa7a>
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f000 fc98 	bl	80075f8 <__mcmp>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4620      	mov	r0, r4
 8006cce:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd0:	f000 fa0c 	bl	80070ec <_Bfree>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd8:	9d04      	ldr	r5, [sp, #16]
 8006cda:	ea43 0102 	orr.w	r1, r3, r2
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	4319      	orrs	r1, r3
 8006ce2:	d110      	bne.n	8006d06 <_dtoa_r+0xa7e>
 8006ce4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ce8:	d029      	beq.n	8006d3e <_dtoa_r+0xab6>
 8006cea:	9b05      	ldr	r3, [sp, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd02      	ble.n	8006cf6 <_dtoa_r+0xa6e>
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	f883 9000 	strb.w	r9, [r3]
 8006cfc:	e774      	b.n	8006be8 <_dtoa_r+0x960>
 8006cfe:	4638      	mov	r0, r7
 8006d00:	e7ba      	b.n	8006c78 <_dtoa_r+0x9f0>
 8006d02:	2201      	movs	r2, #1
 8006d04:	e7e1      	b.n	8006cca <_dtoa_r+0xa42>
 8006d06:	9b05      	ldr	r3, [sp, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	db04      	blt.n	8006d16 <_dtoa_r+0xa8e>
 8006d0c:	9907      	ldr	r1, [sp, #28]
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	9906      	ldr	r1, [sp, #24]
 8006d12:	430b      	orrs	r3, r1
 8006d14:	d120      	bne.n	8006d58 <_dtoa_r+0xad0>
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	dded      	ble.n	8006cf6 <_dtoa_r+0xa6e>
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fbfe 	bl	8007520 <__lshift>
 8006d24:	4631      	mov	r1, r6
 8006d26:	4682      	mov	sl, r0
 8006d28:	f000 fc66 	bl	80075f8 <__mcmp>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dc03      	bgt.n	8006d38 <_dtoa_r+0xab0>
 8006d30:	d1e1      	bne.n	8006cf6 <_dtoa_r+0xa6e>
 8006d32:	f019 0f01 	tst.w	r9, #1
 8006d36:	d0de      	beq.n	8006cf6 <_dtoa_r+0xa6e>
 8006d38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d3c:	d1d8      	bne.n	8006cf0 <_dtoa_r+0xa68>
 8006d3e:	9a01      	ldr	r2, [sp, #4]
 8006d40:	2339      	movs	r3, #57	; 0x39
 8006d42:	7013      	strb	r3, [r2, #0]
 8006d44:	462b      	mov	r3, r5
 8006d46:	461d      	mov	r5, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d4e:	2a39      	cmp	r2, #57	; 0x39
 8006d50:	d06c      	beq.n	8006e2c <_dtoa_r+0xba4>
 8006d52:	3201      	adds	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	e747      	b.n	8006be8 <_dtoa_r+0x960>
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	dd07      	ble.n	8006d6c <_dtoa_r+0xae4>
 8006d5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d60:	d0ed      	beq.n	8006d3e <_dtoa_r+0xab6>
 8006d62:	9a01      	ldr	r2, [sp, #4]
 8006d64:	f109 0301 	add.w	r3, r9, #1
 8006d68:	7013      	strb	r3, [r2, #0]
 8006d6a:	e73d      	b.n	8006be8 <_dtoa_r+0x960>
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	9a08      	ldr	r2, [sp, #32]
 8006d70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d043      	beq.n	8006e00 <_dtoa_r+0xb78>
 8006d78:	4651      	mov	r1, sl
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	220a      	movs	r2, #10
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f9d6 	bl	8007130 <__multadd>
 8006d84:	45b8      	cmp	r8, r7
 8006d86:	4682      	mov	sl, r0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	f04f 020a 	mov.w	r2, #10
 8006d90:	4641      	mov	r1, r8
 8006d92:	4620      	mov	r0, r4
 8006d94:	d107      	bne.n	8006da6 <_dtoa_r+0xb1e>
 8006d96:	f000 f9cb 	bl	8007130 <__multadd>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	3301      	adds	r3, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	e775      	b.n	8006c92 <_dtoa_r+0xa0a>
 8006da6:	f000 f9c3 	bl	8007130 <__multadd>
 8006daa:	4639      	mov	r1, r7
 8006dac:	4680      	mov	r8, r0
 8006dae:	2300      	movs	r3, #0
 8006db0:	220a      	movs	r2, #10
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f9bc 	bl	8007130 <__multadd>
 8006db8:	4607      	mov	r7, r0
 8006dba:	e7f0      	b.n	8006d9e <_dtoa_r+0xb16>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	9d00      	ldr	r5, [sp, #0]
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	f7ff f9d5 	bl	8006174 <quorem>
 8006dca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	f805 9b01 	strb.w	r9, [r5], #1
 8006dd4:	1aea      	subs	r2, r5, r3
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	dd07      	ble.n	8006dec <_dtoa_r+0xb64>
 8006ddc:	4651      	mov	r1, sl
 8006dde:	2300      	movs	r3, #0
 8006de0:	220a      	movs	r2, #10
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f9a4 	bl	8007130 <__multadd>
 8006de8:	4682      	mov	sl, r0
 8006dea:	e7ea      	b.n	8006dc2 <_dtoa_r+0xb3a>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfc8      	it	gt
 8006df2:	461d      	movgt	r5, r3
 8006df4:	9b00      	ldr	r3, [sp, #0]
 8006df6:	bfd8      	it	le
 8006df8:	2501      	movle	r5, #1
 8006dfa:	441d      	add	r5, r3
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	4651      	mov	r1, sl
 8006e02:	2201      	movs	r2, #1
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fb8b 	bl	8007520 <__lshift>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	f000 fbf3 	bl	80075f8 <__mcmp>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	dc96      	bgt.n	8006d44 <_dtoa_r+0xabc>
 8006e16:	d102      	bne.n	8006e1e <_dtoa_r+0xb96>
 8006e18:	f019 0f01 	tst.w	r9, #1
 8006e1c:	d192      	bne.n	8006d44 <_dtoa_r+0xabc>
 8006e1e:	462b      	mov	r3, r5
 8006e20:	461d      	mov	r5, r3
 8006e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e26:	2a30      	cmp	r2, #48	; 0x30
 8006e28:	d0fa      	beq.n	8006e20 <_dtoa_r+0xb98>
 8006e2a:	e6dd      	b.n	8006be8 <_dtoa_r+0x960>
 8006e2c:	9a00      	ldr	r2, [sp, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d189      	bne.n	8006d46 <_dtoa_r+0xabe>
 8006e32:	f10b 0b01 	add.w	fp, fp, #1
 8006e36:	2331      	movs	r3, #49	; 0x31
 8006e38:	e796      	b.n	8006d68 <_dtoa_r+0xae0>
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <_dtoa_r+0xbdc>)
 8006e3c:	f7ff ba99 	b.w	8006372 <_dtoa_r+0xea>
 8006e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f47f aa6d 	bne.w	8006322 <_dtoa_r+0x9a>
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <_dtoa_r+0xbe0>)
 8006e4a:	f7ff ba92 	b.w	8006372 <_dtoa_r+0xea>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dcb5      	bgt.n	8006dc0 <_dtoa_r+0xb38>
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	f73f aeb1 	bgt.w	8006bbe <_dtoa_r+0x936>
 8006e5c:	e7b0      	b.n	8006dc0 <_dtoa_r+0xb38>
 8006e5e:	bf00      	nop
 8006e60:	08009b65 	.word	0x08009b65
 8006e64:	08009ac0 	.word	0x08009ac0
 8006e68:	08009ae9 	.word	0x08009ae9

08006e6c <_free_r>:
 8006e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d044      	beq.n	8006efc <_free_r+0x90>
 8006e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e76:	9001      	str	r0, [sp, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e7e:	bfb8      	it	lt
 8006e80:	18e4      	addlt	r4, r4, r3
 8006e82:	f000 f8e7 	bl	8007054 <__malloc_lock>
 8006e86:	4a1e      	ldr	r2, [pc, #120]	; (8006f00 <_free_r+0x94>)
 8006e88:	9801      	ldr	r0, [sp, #4]
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	b933      	cbnz	r3, 8006e9c <_free_r+0x30>
 8006e8e:	6063      	str	r3, [r4, #4]
 8006e90:	6014      	str	r4, [r2, #0]
 8006e92:	b003      	add	sp, #12
 8006e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e98:	f000 b8e2 	b.w	8007060 <__malloc_unlock>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d908      	bls.n	8006eb2 <_free_r+0x46>
 8006ea0:	6825      	ldr	r5, [r4, #0]
 8006ea2:	1961      	adds	r1, r4, r5
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	bf01      	itttt	eq
 8006ea8:	6819      	ldreq	r1, [r3, #0]
 8006eaa:	685b      	ldreq	r3, [r3, #4]
 8006eac:	1949      	addeq	r1, r1, r5
 8006eae:	6021      	streq	r1, [r4, #0]
 8006eb0:	e7ed      	b.n	8006e8e <_free_r+0x22>
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	b10b      	cbz	r3, 8006ebc <_free_r+0x50>
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	d9fa      	bls.n	8006eb2 <_free_r+0x46>
 8006ebc:	6811      	ldr	r1, [r2, #0]
 8006ebe:	1855      	adds	r5, r2, r1
 8006ec0:	42a5      	cmp	r5, r4
 8006ec2:	d10b      	bne.n	8006edc <_free_r+0x70>
 8006ec4:	6824      	ldr	r4, [r4, #0]
 8006ec6:	4421      	add	r1, r4
 8006ec8:	1854      	adds	r4, r2, r1
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	d1e0      	bne.n	8006e92 <_free_r+0x26>
 8006ed0:	681c      	ldr	r4, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	6053      	str	r3, [r2, #4]
 8006ed6:	440c      	add	r4, r1
 8006ed8:	6014      	str	r4, [r2, #0]
 8006eda:	e7da      	b.n	8006e92 <_free_r+0x26>
 8006edc:	d902      	bls.n	8006ee4 <_free_r+0x78>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	e7d6      	b.n	8006e92 <_free_r+0x26>
 8006ee4:	6825      	ldr	r5, [r4, #0]
 8006ee6:	1961      	adds	r1, r4, r5
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	bf04      	itt	eq
 8006eec:	6819      	ldreq	r1, [r3, #0]
 8006eee:	685b      	ldreq	r3, [r3, #4]
 8006ef0:	6063      	str	r3, [r4, #4]
 8006ef2:	bf04      	itt	eq
 8006ef4:	1949      	addeq	r1, r1, r5
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	6054      	str	r4, [r2, #4]
 8006efa:	e7ca      	b.n	8006e92 <_free_r+0x26>
 8006efc:	b003      	add	sp, #12
 8006efe:	bd30      	pop	{r4, r5, pc}
 8006f00:	20000488 	.word	0x20000488

08006f04 <malloc>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <malloc+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f000 b823 	b.w	8006f54 <_malloc_r>
 8006f0e:	bf00      	nop
 8006f10:	20000078 	.word	0x20000078

08006f14 <sbrk_aligned>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4e0e      	ldr	r6, [pc, #56]	; (8006f50 <sbrk_aligned+0x3c>)
 8006f18:	460c      	mov	r4, r1
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	b911      	cbnz	r1, 8006f26 <sbrk_aligned+0x12>
 8006f20:	f001 ffe2 	bl	8008ee8 <_sbrk_r>
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f001 ffdd 	bl	8008ee8 <_sbrk_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d00a      	beq.n	8006f48 <sbrk_aligned+0x34>
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d007      	beq.n	8006f4c <sbrk_aligned+0x38>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f001 ffd2 	bl	8008ee8 <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d101      	bne.n	8006f4c <sbrk_aligned+0x38>
 8006f48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	2000048c 	.word	0x2000048c

08006f54 <_malloc_r>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	1ccd      	adds	r5, r1, #3
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	4607      	mov	r7, r0
 8006f6a:	db01      	blt.n	8006f70 <_malloc_r+0x1c>
 8006f6c:	42a9      	cmp	r1, r5
 8006f6e:	d905      	bls.n	8006f7c <_malloc_r+0x28>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	2600      	movs	r6, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007050 <_malloc_r+0xfc>
 8006f80:	f000 f868 	bl	8007054 <__malloc_lock>
 8006f84:	f8d8 3000 	ldr.w	r3, [r8]
 8006f88:	461c      	mov	r4, r3
 8006f8a:	bb5c      	cbnz	r4, 8006fe4 <_malloc_r+0x90>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff ffc0 	bl	8006f14 <sbrk_aligned>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	4604      	mov	r4, r0
 8006f98:	d155      	bne.n	8007046 <_malloc_r+0xf2>
 8006f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f9e:	4626      	mov	r6, r4
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	d145      	bne.n	8007030 <_malloc_r+0xdc>
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	d048      	beq.n	800703a <_malloc_r+0xe6>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	4631      	mov	r1, r6
 8006fac:	4638      	mov	r0, r7
 8006fae:	eb04 0903 	add.w	r9, r4, r3
 8006fb2:	f001 ff99 	bl	8008ee8 <_sbrk_r>
 8006fb6:	4581      	cmp	r9, r0
 8006fb8:	d13f      	bne.n	800703a <_malloc_r+0xe6>
 8006fba:	6821      	ldr	r1, [r4, #0]
 8006fbc:	1a6d      	subs	r5, r5, r1
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f7ff ffa7 	bl	8006f14 <sbrk_aligned>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d037      	beq.n	800703a <_malloc_r+0xe6>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	442b      	add	r3, r5
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d038      	beq.n	800704a <_malloc_r+0xf6>
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	42a2      	cmp	r2, r4
 8006fdc:	d12b      	bne.n	8007036 <_malloc_r+0xe2>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	e00f      	b.n	8007004 <_malloc_r+0xb0>
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	1b52      	subs	r2, r2, r5
 8006fe8:	d41f      	bmi.n	800702a <_malloc_r+0xd6>
 8006fea:	2a0b      	cmp	r2, #11
 8006fec:	d917      	bls.n	800701e <_malloc_r+0xca>
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	6025      	str	r5, [r4, #0]
 8006ff4:	bf18      	it	ne
 8006ff6:	6059      	strne	r1, [r3, #4]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	bf08      	it	eq
 8006ffc:	f8c8 1000 	streq.w	r1, [r8]
 8007000:	5162      	str	r2, [r4, r5]
 8007002:	604b      	str	r3, [r1, #4]
 8007004:	4638      	mov	r0, r7
 8007006:	f104 060b 	add.w	r6, r4, #11
 800700a:	f000 f829 	bl	8007060 <__malloc_unlock>
 800700e:	f026 0607 	bic.w	r6, r6, #7
 8007012:	1d23      	adds	r3, r4, #4
 8007014:	1af2      	subs	r2, r6, r3
 8007016:	d0ae      	beq.n	8006f76 <_malloc_r+0x22>
 8007018:	1b9b      	subs	r3, r3, r6
 800701a:	50a3      	str	r3, [r4, r2]
 800701c:	e7ab      	b.n	8006f76 <_malloc_r+0x22>
 800701e:	42a3      	cmp	r3, r4
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	d1dd      	bne.n	8006fe0 <_malloc_r+0x8c>
 8007024:	f8c8 2000 	str.w	r2, [r8]
 8007028:	e7ec      	b.n	8007004 <_malloc_r+0xb0>
 800702a:	4623      	mov	r3, r4
 800702c:	6864      	ldr	r4, [r4, #4]
 800702e:	e7ac      	b.n	8006f8a <_malloc_r+0x36>
 8007030:	4634      	mov	r4, r6
 8007032:	6876      	ldr	r6, [r6, #4]
 8007034:	e7b4      	b.n	8006fa0 <_malloc_r+0x4c>
 8007036:	4613      	mov	r3, r2
 8007038:	e7cc      	b.n	8006fd4 <_malloc_r+0x80>
 800703a:	230c      	movs	r3, #12
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4638      	mov	r0, r7
 8007040:	f000 f80e 	bl	8007060 <__malloc_unlock>
 8007044:	e797      	b.n	8006f76 <_malloc_r+0x22>
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	e7dc      	b.n	8007004 <_malloc_r+0xb0>
 800704a:	605b      	str	r3, [r3, #4]
 800704c:	deff      	udf	#255	; 0xff
 800704e:	bf00      	nop
 8007050:	20000488 	.word	0x20000488

08007054 <__malloc_lock>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__malloc_lock+0x8>)
 8007056:	f7ff b884 	b.w	8006162 <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	20000484 	.word	0x20000484

08007060 <__malloc_unlock>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__malloc_unlock+0x8>)
 8007062:	f7ff b87f 	b.w	8006164 <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	20000484 	.word	0x20000484

0800706c <_Balloc>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	69c6      	ldr	r6, [r0, #28]
 8007070:	4604      	mov	r4, r0
 8007072:	460d      	mov	r5, r1
 8007074:	b976      	cbnz	r6, 8007094 <_Balloc+0x28>
 8007076:	2010      	movs	r0, #16
 8007078:	f7ff ff44 	bl	8006f04 <malloc>
 800707c:	4602      	mov	r2, r0
 800707e:	61e0      	str	r0, [r4, #28]
 8007080:	b920      	cbnz	r0, 800708c <_Balloc+0x20>
 8007082:	4b18      	ldr	r3, [pc, #96]	; (80070e4 <_Balloc+0x78>)
 8007084:	4818      	ldr	r0, [pc, #96]	; (80070e8 <_Balloc+0x7c>)
 8007086:	216b      	movs	r1, #107	; 0x6b
 8007088:	f001 ff56 	bl	8008f38 <__assert_func>
 800708c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007090:	6006      	str	r6, [r0, #0]
 8007092:	60c6      	str	r6, [r0, #12]
 8007094:	69e6      	ldr	r6, [r4, #28]
 8007096:	68f3      	ldr	r3, [r6, #12]
 8007098:	b183      	cbz	r3, 80070bc <_Balloc+0x50>
 800709a:	69e3      	ldr	r3, [r4, #28]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070a2:	b9b8      	cbnz	r0, 80070d4 <_Balloc+0x68>
 80070a4:	2101      	movs	r1, #1
 80070a6:	fa01 f605 	lsl.w	r6, r1, r5
 80070aa:	1d72      	adds	r2, r6, #5
 80070ac:	0092      	lsls	r2, r2, #2
 80070ae:	4620      	mov	r0, r4
 80070b0:	f001 ff60 	bl	8008f74 <_calloc_r>
 80070b4:	b160      	cbz	r0, 80070d0 <_Balloc+0x64>
 80070b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070ba:	e00e      	b.n	80070da <_Balloc+0x6e>
 80070bc:	2221      	movs	r2, #33	; 0x21
 80070be:	2104      	movs	r1, #4
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 ff57 	bl	8008f74 <_calloc_r>
 80070c6:	69e3      	ldr	r3, [r4, #28]
 80070c8:	60f0      	str	r0, [r6, #12]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e4      	bne.n	800709a <_Balloc+0x2e>
 80070d0:	2000      	movs	r0, #0
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	6802      	ldr	r2, [r0, #0]
 80070d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070da:	2300      	movs	r3, #0
 80070dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070e0:	e7f7      	b.n	80070d2 <_Balloc+0x66>
 80070e2:	bf00      	nop
 80070e4:	08009af6 	.word	0x08009af6
 80070e8:	08009b76 	.word	0x08009b76

080070ec <_Bfree>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	69c6      	ldr	r6, [r0, #28]
 80070f0:	4605      	mov	r5, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	b976      	cbnz	r6, 8007114 <_Bfree+0x28>
 80070f6:	2010      	movs	r0, #16
 80070f8:	f7ff ff04 	bl	8006f04 <malloc>
 80070fc:	4602      	mov	r2, r0
 80070fe:	61e8      	str	r0, [r5, #28]
 8007100:	b920      	cbnz	r0, 800710c <_Bfree+0x20>
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <_Bfree+0x3c>)
 8007104:	4809      	ldr	r0, [pc, #36]	; (800712c <_Bfree+0x40>)
 8007106:	218f      	movs	r1, #143	; 0x8f
 8007108:	f001 ff16 	bl	8008f38 <__assert_func>
 800710c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007110:	6006      	str	r6, [r0, #0]
 8007112:	60c6      	str	r6, [r0, #12]
 8007114:	b13c      	cbz	r4, 8007126 <_Bfree+0x3a>
 8007116:	69eb      	ldr	r3, [r5, #28]
 8007118:	6862      	ldr	r2, [r4, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007120:	6021      	str	r1, [r4, #0]
 8007122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	08009af6 	.word	0x08009af6
 800712c:	08009b76 	.word	0x08009b76

08007130 <__multadd>:
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	690d      	ldr	r5, [r1, #16]
 8007136:	4607      	mov	r7, r0
 8007138:	460c      	mov	r4, r1
 800713a:	461e      	mov	r6, r3
 800713c:	f101 0c14 	add.w	ip, r1, #20
 8007140:	2000      	movs	r0, #0
 8007142:	f8dc 3000 	ldr.w	r3, [ip]
 8007146:	b299      	uxth	r1, r3
 8007148:	fb02 6101 	mla	r1, r2, r1, r6
 800714c:	0c1e      	lsrs	r6, r3, #16
 800714e:	0c0b      	lsrs	r3, r1, #16
 8007150:	fb02 3306 	mla	r3, r2, r6, r3
 8007154:	b289      	uxth	r1, r1
 8007156:	3001      	adds	r0, #1
 8007158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800715c:	4285      	cmp	r5, r0
 800715e:	f84c 1b04 	str.w	r1, [ip], #4
 8007162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007166:	dcec      	bgt.n	8007142 <__multadd+0x12>
 8007168:	b30e      	cbz	r6, 80071ae <__multadd+0x7e>
 800716a:	68a3      	ldr	r3, [r4, #8]
 800716c:	42ab      	cmp	r3, r5
 800716e:	dc19      	bgt.n	80071a4 <__multadd+0x74>
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	4638      	mov	r0, r7
 8007174:	3101      	adds	r1, #1
 8007176:	f7ff ff79 	bl	800706c <_Balloc>
 800717a:	4680      	mov	r8, r0
 800717c:	b928      	cbnz	r0, 800718a <__multadd+0x5a>
 800717e:	4602      	mov	r2, r0
 8007180:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <__multadd+0x84>)
 8007182:	480d      	ldr	r0, [pc, #52]	; (80071b8 <__multadd+0x88>)
 8007184:	21ba      	movs	r1, #186	; 0xba
 8007186:	f001 fed7 	bl	8008f38 <__assert_func>
 800718a:	6922      	ldr	r2, [r4, #16]
 800718c:	3202      	adds	r2, #2
 800718e:	f104 010c 	add.w	r1, r4, #12
 8007192:	0092      	lsls	r2, r2, #2
 8007194:	300c      	adds	r0, #12
 8007196:	f001 feb7 	bl	8008f08 <memcpy>
 800719a:	4621      	mov	r1, r4
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff ffa5 	bl	80070ec <_Bfree>
 80071a2:	4644      	mov	r4, r8
 80071a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071a8:	3501      	adds	r5, #1
 80071aa:	615e      	str	r6, [r3, #20]
 80071ac:	6125      	str	r5, [r4, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	08009b65 	.word	0x08009b65
 80071b8:	08009b76 	.word	0x08009b76

080071bc <__s2b>:
 80071bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	4615      	mov	r5, r2
 80071c4:	461f      	mov	r7, r3
 80071c6:	2209      	movs	r2, #9
 80071c8:	3308      	adds	r3, #8
 80071ca:	4606      	mov	r6, r0
 80071cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80071d0:	2100      	movs	r1, #0
 80071d2:	2201      	movs	r2, #1
 80071d4:	429a      	cmp	r2, r3
 80071d6:	db09      	blt.n	80071ec <__s2b+0x30>
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ff47 	bl	800706c <_Balloc>
 80071de:	b940      	cbnz	r0, 80071f2 <__s2b+0x36>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b19      	ldr	r3, [pc, #100]	; (8007248 <__s2b+0x8c>)
 80071e4:	4819      	ldr	r0, [pc, #100]	; (800724c <__s2b+0x90>)
 80071e6:	21d3      	movs	r1, #211	; 0xd3
 80071e8:	f001 fea6 	bl	8008f38 <__assert_func>
 80071ec:	0052      	lsls	r2, r2, #1
 80071ee:	3101      	adds	r1, #1
 80071f0:	e7f0      	b.n	80071d4 <__s2b+0x18>
 80071f2:	9b08      	ldr	r3, [sp, #32]
 80071f4:	6143      	str	r3, [r0, #20]
 80071f6:	2d09      	cmp	r5, #9
 80071f8:	f04f 0301 	mov.w	r3, #1
 80071fc:	6103      	str	r3, [r0, #16]
 80071fe:	dd16      	ble.n	800722e <__s2b+0x72>
 8007200:	f104 0909 	add.w	r9, r4, #9
 8007204:	46c8      	mov	r8, r9
 8007206:	442c      	add	r4, r5
 8007208:	f818 3b01 	ldrb.w	r3, [r8], #1
 800720c:	4601      	mov	r1, r0
 800720e:	3b30      	subs	r3, #48	; 0x30
 8007210:	220a      	movs	r2, #10
 8007212:	4630      	mov	r0, r6
 8007214:	f7ff ff8c 	bl	8007130 <__multadd>
 8007218:	45a0      	cmp	r8, r4
 800721a:	d1f5      	bne.n	8007208 <__s2b+0x4c>
 800721c:	f1a5 0408 	sub.w	r4, r5, #8
 8007220:	444c      	add	r4, r9
 8007222:	1b2d      	subs	r5, r5, r4
 8007224:	1963      	adds	r3, r4, r5
 8007226:	42bb      	cmp	r3, r7
 8007228:	db04      	blt.n	8007234 <__s2b+0x78>
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	340a      	adds	r4, #10
 8007230:	2509      	movs	r5, #9
 8007232:	e7f6      	b.n	8007222 <__s2b+0x66>
 8007234:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007238:	4601      	mov	r1, r0
 800723a:	3b30      	subs	r3, #48	; 0x30
 800723c:	220a      	movs	r2, #10
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff ff76 	bl	8007130 <__multadd>
 8007244:	e7ee      	b.n	8007224 <__s2b+0x68>
 8007246:	bf00      	nop
 8007248:	08009b65 	.word	0x08009b65
 800724c:	08009b76 	.word	0x08009b76

08007250 <__hi0bits>:
 8007250:	0c03      	lsrs	r3, r0, #16
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	b9d3      	cbnz	r3, 800728c <__hi0bits+0x3c>
 8007256:	0400      	lsls	r0, r0, #16
 8007258:	2310      	movs	r3, #16
 800725a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800725e:	bf04      	itt	eq
 8007260:	0200      	lsleq	r0, r0, #8
 8007262:	3308      	addeq	r3, #8
 8007264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007268:	bf04      	itt	eq
 800726a:	0100      	lsleq	r0, r0, #4
 800726c:	3304      	addeq	r3, #4
 800726e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007272:	bf04      	itt	eq
 8007274:	0080      	lsleq	r0, r0, #2
 8007276:	3302      	addeq	r3, #2
 8007278:	2800      	cmp	r0, #0
 800727a:	db05      	blt.n	8007288 <__hi0bits+0x38>
 800727c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007280:	f103 0301 	add.w	r3, r3, #1
 8007284:	bf08      	it	eq
 8007286:	2320      	moveq	r3, #32
 8007288:	4618      	mov	r0, r3
 800728a:	4770      	bx	lr
 800728c:	2300      	movs	r3, #0
 800728e:	e7e4      	b.n	800725a <__hi0bits+0xa>

08007290 <__lo0bits>:
 8007290:	6803      	ldr	r3, [r0, #0]
 8007292:	f013 0207 	ands.w	r2, r3, #7
 8007296:	d00c      	beq.n	80072b2 <__lo0bits+0x22>
 8007298:	07d9      	lsls	r1, r3, #31
 800729a:	d422      	bmi.n	80072e2 <__lo0bits+0x52>
 800729c:	079a      	lsls	r2, r3, #30
 800729e:	bf49      	itett	mi
 80072a0:	085b      	lsrmi	r3, r3, #1
 80072a2:	089b      	lsrpl	r3, r3, #2
 80072a4:	6003      	strmi	r3, [r0, #0]
 80072a6:	2201      	movmi	r2, #1
 80072a8:	bf5c      	itt	pl
 80072aa:	6003      	strpl	r3, [r0, #0]
 80072ac:	2202      	movpl	r2, #2
 80072ae:	4610      	mov	r0, r2
 80072b0:	4770      	bx	lr
 80072b2:	b299      	uxth	r1, r3
 80072b4:	b909      	cbnz	r1, 80072ba <__lo0bits+0x2a>
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	2210      	movs	r2, #16
 80072ba:	b2d9      	uxtb	r1, r3
 80072bc:	b909      	cbnz	r1, 80072c2 <__lo0bits+0x32>
 80072be:	3208      	adds	r2, #8
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	0719      	lsls	r1, r3, #28
 80072c4:	bf04      	itt	eq
 80072c6:	091b      	lsreq	r3, r3, #4
 80072c8:	3204      	addeq	r2, #4
 80072ca:	0799      	lsls	r1, r3, #30
 80072cc:	bf04      	itt	eq
 80072ce:	089b      	lsreq	r3, r3, #2
 80072d0:	3202      	addeq	r2, #2
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d403      	bmi.n	80072de <__lo0bits+0x4e>
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f102 0201 	add.w	r2, r2, #1
 80072dc:	d003      	beq.n	80072e6 <__lo0bits+0x56>
 80072de:	6003      	str	r3, [r0, #0]
 80072e0:	e7e5      	b.n	80072ae <__lo0bits+0x1e>
 80072e2:	2200      	movs	r2, #0
 80072e4:	e7e3      	b.n	80072ae <__lo0bits+0x1e>
 80072e6:	2220      	movs	r2, #32
 80072e8:	e7e1      	b.n	80072ae <__lo0bits+0x1e>
	...

080072ec <__i2b>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	460c      	mov	r4, r1
 80072f0:	2101      	movs	r1, #1
 80072f2:	f7ff febb 	bl	800706c <_Balloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	b928      	cbnz	r0, 8007306 <__i2b+0x1a>
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <__i2b+0x24>)
 80072fc:	4805      	ldr	r0, [pc, #20]	; (8007314 <__i2b+0x28>)
 80072fe:	f240 1145 	movw	r1, #325	; 0x145
 8007302:	f001 fe19 	bl	8008f38 <__assert_func>
 8007306:	2301      	movs	r3, #1
 8007308:	6144      	str	r4, [r0, #20]
 800730a:	6103      	str	r3, [r0, #16]
 800730c:	bd10      	pop	{r4, pc}
 800730e:	bf00      	nop
 8007310:	08009b65 	.word	0x08009b65
 8007314:	08009b76 	.word	0x08009b76

08007318 <__multiply>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	4691      	mov	r9, r2
 800731e:	690a      	ldr	r2, [r1, #16]
 8007320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	bfb8      	it	lt
 8007328:	460b      	movlt	r3, r1
 800732a:	460c      	mov	r4, r1
 800732c:	bfbc      	itt	lt
 800732e:	464c      	movlt	r4, r9
 8007330:	4699      	movlt	r9, r3
 8007332:	6927      	ldr	r7, [r4, #16]
 8007334:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	6861      	ldr	r1, [r4, #4]
 800733c:	eb07 060a 	add.w	r6, r7, sl
 8007340:	42b3      	cmp	r3, r6
 8007342:	b085      	sub	sp, #20
 8007344:	bfb8      	it	lt
 8007346:	3101      	addlt	r1, #1
 8007348:	f7ff fe90 	bl	800706c <_Balloc>
 800734c:	b930      	cbnz	r0, 800735c <__multiply+0x44>
 800734e:	4602      	mov	r2, r0
 8007350:	4b44      	ldr	r3, [pc, #272]	; (8007464 <__multiply+0x14c>)
 8007352:	4845      	ldr	r0, [pc, #276]	; (8007468 <__multiply+0x150>)
 8007354:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007358:	f001 fdee 	bl	8008f38 <__assert_func>
 800735c:	f100 0514 	add.w	r5, r0, #20
 8007360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007364:	462b      	mov	r3, r5
 8007366:	2200      	movs	r2, #0
 8007368:	4543      	cmp	r3, r8
 800736a:	d321      	bcc.n	80073b0 <__multiply+0x98>
 800736c:	f104 0314 	add.w	r3, r4, #20
 8007370:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007374:	f109 0314 	add.w	r3, r9, #20
 8007378:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800737c:	9202      	str	r2, [sp, #8]
 800737e:	1b3a      	subs	r2, r7, r4
 8007380:	3a15      	subs	r2, #21
 8007382:	f022 0203 	bic.w	r2, r2, #3
 8007386:	3204      	adds	r2, #4
 8007388:	f104 0115 	add.w	r1, r4, #21
 800738c:	428f      	cmp	r7, r1
 800738e:	bf38      	it	cc
 8007390:	2204      	movcc	r2, #4
 8007392:	9201      	str	r2, [sp, #4]
 8007394:	9a02      	ldr	r2, [sp, #8]
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d80c      	bhi.n	80073b6 <__multiply+0x9e>
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd03      	ble.n	80073a8 <__multiply+0x90>
 80073a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05b      	beq.n	8007460 <__multiply+0x148>
 80073a8:	6106      	str	r6, [r0, #16]
 80073aa:	b005      	add	sp, #20
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	f843 2b04 	str.w	r2, [r3], #4
 80073b4:	e7d8      	b.n	8007368 <__multiply+0x50>
 80073b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ba:	f1ba 0f00 	cmp.w	sl, #0
 80073be:	d024      	beq.n	800740a <__multiply+0xf2>
 80073c0:	f104 0e14 	add.w	lr, r4, #20
 80073c4:	46a9      	mov	r9, r5
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073ce:	f8d9 1000 	ldr.w	r1, [r9]
 80073d2:	fa1f fb82 	uxth.w	fp, r2
 80073d6:	b289      	uxth	r1, r1
 80073d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80073dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073e0:	f8d9 2000 	ldr.w	r2, [r9]
 80073e4:	4461      	add	r1, ip
 80073e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80073ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073f2:	b289      	uxth	r1, r1
 80073f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073f8:	4577      	cmp	r7, lr
 80073fa:	f849 1b04 	str.w	r1, [r9], #4
 80073fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007402:	d8e2      	bhi.n	80073ca <__multiply+0xb2>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	f845 c002 	str.w	ip, [r5, r2]
 800740a:	9a03      	ldr	r2, [sp, #12]
 800740c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007410:	3304      	adds	r3, #4
 8007412:	f1b9 0f00 	cmp.w	r9, #0
 8007416:	d021      	beq.n	800745c <__multiply+0x144>
 8007418:	6829      	ldr	r1, [r5, #0]
 800741a:	f104 0c14 	add.w	ip, r4, #20
 800741e:	46ae      	mov	lr, r5
 8007420:	f04f 0a00 	mov.w	sl, #0
 8007424:	f8bc b000 	ldrh.w	fp, [ip]
 8007428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800742c:	fb09 220b 	mla	r2, r9, fp, r2
 8007430:	4452      	add	r2, sl
 8007432:	b289      	uxth	r1, r1
 8007434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007438:	f84e 1b04 	str.w	r1, [lr], #4
 800743c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007444:	f8be 1000 	ldrh.w	r1, [lr]
 8007448:	fb09 110a 	mla	r1, r9, sl, r1
 800744c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007450:	4567      	cmp	r7, ip
 8007452:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007456:	d8e5      	bhi.n	8007424 <__multiply+0x10c>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	50a9      	str	r1, [r5, r2]
 800745c:	3504      	adds	r5, #4
 800745e:	e799      	b.n	8007394 <__multiply+0x7c>
 8007460:	3e01      	subs	r6, #1
 8007462:	e79b      	b.n	800739c <__multiply+0x84>
 8007464:	08009b65 	.word	0x08009b65
 8007468:	08009b76 	.word	0x08009b76

0800746c <__pow5mult>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4615      	mov	r5, r2
 8007472:	f012 0203 	ands.w	r2, r2, #3
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	d007      	beq.n	800748c <__pow5mult+0x20>
 800747c:	4c25      	ldr	r4, [pc, #148]	; (8007514 <__pow5mult+0xa8>)
 800747e:	3a01      	subs	r2, #1
 8007480:	2300      	movs	r3, #0
 8007482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007486:	f7ff fe53 	bl	8007130 <__multadd>
 800748a:	4607      	mov	r7, r0
 800748c:	10ad      	asrs	r5, r5, #2
 800748e:	d03d      	beq.n	800750c <__pow5mult+0xa0>
 8007490:	69f4      	ldr	r4, [r6, #28]
 8007492:	b97c      	cbnz	r4, 80074b4 <__pow5mult+0x48>
 8007494:	2010      	movs	r0, #16
 8007496:	f7ff fd35 	bl	8006f04 <malloc>
 800749a:	4602      	mov	r2, r0
 800749c:	61f0      	str	r0, [r6, #28]
 800749e:	b928      	cbnz	r0, 80074ac <__pow5mult+0x40>
 80074a0:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <__pow5mult+0xac>)
 80074a2:	481e      	ldr	r0, [pc, #120]	; (800751c <__pow5mult+0xb0>)
 80074a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074a8:	f001 fd46 	bl	8008f38 <__assert_func>
 80074ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074b0:	6004      	str	r4, [r0, #0]
 80074b2:	60c4      	str	r4, [r0, #12]
 80074b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074bc:	b94c      	cbnz	r4, 80074d2 <__pow5mult+0x66>
 80074be:	f240 2171 	movw	r1, #625	; 0x271
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ff12 	bl	80072ec <__i2b>
 80074c8:	2300      	movs	r3, #0
 80074ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ce:	4604      	mov	r4, r0
 80074d0:	6003      	str	r3, [r0, #0]
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	07eb      	lsls	r3, r5, #31
 80074d8:	d50a      	bpl.n	80074f0 <__pow5mult+0x84>
 80074da:	4639      	mov	r1, r7
 80074dc:	4622      	mov	r2, r4
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ff1a 	bl	8007318 <__multiply>
 80074e4:	4639      	mov	r1, r7
 80074e6:	4680      	mov	r8, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff fdff 	bl	80070ec <_Bfree>
 80074ee:	4647      	mov	r7, r8
 80074f0:	106d      	asrs	r5, r5, #1
 80074f2:	d00b      	beq.n	800750c <__pow5mult+0xa0>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	b938      	cbnz	r0, 8007508 <__pow5mult+0x9c>
 80074f8:	4622      	mov	r2, r4
 80074fa:	4621      	mov	r1, r4
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff ff0b 	bl	8007318 <__multiply>
 8007502:	6020      	str	r0, [r4, #0]
 8007504:	f8c0 9000 	str.w	r9, [r0]
 8007508:	4604      	mov	r4, r0
 800750a:	e7e4      	b.n	80074d6 <__pow5mult+0x6a>
 800750c:	4638      	mov	r0, r7
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	bf00      	nop
 8007514:	08009cc0 	.word	0x08009cc0
 8007518:	08009af6 	.word	0x08009af6
 800751c:	08009b76 	.word	0x08009b76

08007520 <__lshift>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	4607      	mov	r7, r0
 8007532:	4691      	mov	r9, r2
 8007534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007538:	f108 0601 	add.w	r6, r8, #1
 800753c:	42b3      	cmp	r3, r6
 800753e:	db0b      	blt.n	8007558 <__lshift+0x38>
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff fd93 	bl	800706c <_Balloc>
 8007546:	4605      	mov	r5, r0
 8007548:	b948      	cbnz	r0, 800755e <__lshift+0x3e>
 800754a:	4602      	mov	r2, r0
 800754c:	4b28      	ldr	r3, [pc, #160]	; (80075f0 <__lshift+0xd0>)
 800754e:	4829      	ldr	r0, [pc, #164]	; (80075f4 <__lshift+0xd4>)
 8007550:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007554:	f001 fcf0 	bl	8008f38 <__assert_func>
 8007558:	3101      	adds	r1, #1
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	e7ee      	b.n	800753c <__lshift+0x1c>
 800755e:	2300      	movs	r3, #0
 8007560:	f100 0114 	add.w	r1, r0, #20
 8007564:	f100 0210 	add.w	r2, r0, #16
 8007568:	4618      	mov	r0, r3
 800756a:	4553      	cmp	r3, sl
 800756c:	db33      	blt.n	80075d6 <__lshift+0xb6>
 800756e:	6920      	ldr	r0, [r4, #16]
 8007570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007574:	f104 0314 	add.w	r3, r4, #20
 8007578:	f019 091f 	ands.w	r9, r9, #31
 800757c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007584:	d02b      	beq.n	80075de <__lshift+0xbe>
 8007586:	f1c9 0e20 	rsb	lr, r9, #32
 800758a:	468a      	mov	sl, r1
 800758c:	2200      	movs	r2, #0
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	fa00 f009 	lsl.w	r0, r0, r9
 8007594:	4310      	orrs	r0, r2
 8007596:	f84a 0b04 	str.w	r0, [sl], #4
 800759a:	f853 2b04 	ldr.w	r2, [r3], #4
 800759e:	459c      	cmp	ip, r3
 80075a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80075a4:	d8f3      	bhi.n	800758e <__lshift+0x6e>
 80075a6:	ebac 0304 	sub.w	r3, ip, r4
 80075aa:	3b15      	subs	r3, #21
 80075ac:	f023 0303 	bic.w	r3, r3, #3
 80075b0:	3304      	adds	r3, #4
 80075b2:	f104 0015 	add.w	r0, r4, #21
 80075b6:	4584      	cmp	ip, r0
 80075b8:	bf38      	it	cc
 80075ba:	2304      	movcc	r3, #4
 80075bc:	50ca      	str	r2, [r1, r3]
 80075be:	b10a      	cbz	r2, 80075c4 <__lshift+0xa4>
 80075c0:	f108 0602 	add.w	r6, r8, #2
 80075c4:	3e01      	subs	r6, #1
 80075c6:	4638      	mov	r0, r7
 80075c8:	612e      	str	r6, [r5, #16]
 80075ca:	4621      	mov	r1, r4
 80075cc:	f7ff fd8e 	bl	80070ec <_Bfree>
 80075d0:	4628      	mov	r0, r5
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80075da:	3301      	adds	r3, #1
 80075dc:	e7c5      	b.n	800756a <__lshift+0x4a>
 80075de:	3904      	subs	r1, #4
 80075e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80075e8:	459c      	cmp	ip, r3
 80075ea:	d8f9      	bhi.n	80075e0 <__lshift+0xc0>
 80075ec:	e7ea      	b.n	80075c4 <__lshift+0xa4>
 80075ee:	bf00      	nop
 80075f0:	08009b65 	.word	0x08009b65
 80075f4:	08009b76 	.word	0x08009b76

080075f8 <__mcmp>:
 80075f8:	b530      	push	{r4, r5, lr}
 80075fa:	6902      	ldr	r2, [r0, #16]
 80075fc:	690c      	ldr	r4, [r1, #16]
 80075fe:	1b12      	subs	r2, r2, r4
 8007600:	d10e      	bne.n	8007620 <__mcmp+0x28>
 8007602:	f100 0314 	add.w	r3, r0, #20
 8007606:	3114      	adds	r1, #20
 8007608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800760c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007618:	42a5      	cmp	r5, r4
 800761a:	d003      	beq.n	8007624 <__mcmp+0x2c>
 800761c:	d305      	bcc.n	800762a <__mcmp+0x32>
 800761e:	2201      	movs	r2, #1
 8007620:	4610      	mov	r0, r2
 8007622:	bd30      	pop	{r4, r5, pc}
 8007624:	4283      	cmp	r3, r0
 8007626:	d3f3      	bcc.n	8007610 <__mcmp+0x18>
 8007628:	e7fa      	b.n	8007620 <__mcmp+0x28>
 800762a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762e:	e7f7      	b.n	8007620 <__mcmp+0x28>

08007630 <__mdiff>:
 8007630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	4606      	mov	r6, r0
 8007638:	4611      	mov	r1, r2
 800763a:	4620      	mov	r0, r4
 800763c:	4690      	mov	r8, r2
 800763e:	f7ff ffdb 	bl	80075f8 <__mcmp>
 8007642:	1e05      	subs	r5, r0, #0
 8007644:	d110      	bne.n	8007668 <__mdiff+0x38>
 8007646:	4629      	mov	r1, r5
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff fd0f 	bl	800706c <_Balloc>
 800764e:	b930      	cbnz	r0, 800765e <__mdiff+0x2e>
 8007650:	4b3a      	ldr	r3, [pc, #232]	; (800773c <__mdiff+0x10c>)
 8007652:	4602      	mov	r2, r0
 8007654:	f240 2137 	movw	r1, #567	; 0x237
 8007658:	4839      	ldr	r0, [pc, #228]	; (8007740 <__mdiff+0x110>)
 800765a:	f001 fc6d 	bl	8008f38 <__assert_func>
 800765e:	2301      	movs	r3, #1
 8007660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007668:	bfa4      	itt	ge
 800766a:	4643      	movge	r3, r8
 800766c:	46a0      	movge	r8, r4
 800766e:	4630      	mov	r0, r6
 8007670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007674:	bfa6      	itte	ge
 8007676:	461c      	movge	r4, r3
 8007678:	2500      	movge	r5, #0
 800767a:	2501      	movlt	r5, #1
 800767c:	f7ff fcf6 	bl	800706c <_Balloc>
 8007680:	b920      	cbnz	r0, 800768c <__mdiff+0x5c>
 8007682:	4b2e      	ldr	r3, [pc, #184]	; (800773c <__mdiff+0x10c>)
 8007684:	4602      	mov	r2, r0
 8007686:	f240 2145 	movw	r1, #581	; 0x245
 800768a:	e7e5      	b.n	8007658 <__mdiff+0x28>
 800768c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007690:	6926      	ldr	r6, [r4, #16]
 8007692:	60c5      	str	r5, [r0, #12]
 8007694:	f104 0914 	add.w	r9, r4, #20
 8007698:	f108 0514 	add.w	r5, r8, #20
 800769c:	f100 0e14 	add.w	lr, r0, #20
 80076a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076a8:	f108 0210 	add.w	r2, r8, #16
 80076ac:	46f2      	mov	sl, lr
 80076ae:	2100      	movs	r1, #0
 80076b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80076b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076b8:	fa11 f88b 	uxtah	r8, r1, fp
 80076bc:	b299      	uxth	r1, r3
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	eba8 0801 	sub.w	r8, r8, r1
 80076c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076cc:	fa1f f888 	uxth.w	r8, r8
 80076d0:	1419      	asrs	r1, r3, #16
 80076d2:	454e      	cmp	r6, r9
 80076d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076d8:	f84a 3b04 	str.w	r3, [sl], #4
 80076dc:	d8e8      	bhi.n	80076b0 <__mdiff+0x80>
 80076de:	1b33      	subs	r3, r6, r4
 80076e0:	3b15      	subs	r3, #21
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	3304      	adds	r3, #4
 80076e8:	3415      	adds	r4, #21
 80076ea:	42a6      	cmp	r6, r4
 80076ec:	bf38      	it	cc
 80076ee:	2304      	movcc	r3, #4
 80076f0:	441d      	add	r5, r3
 80076f2:	4473      	add	r3, lr
 80076f4:	469e      	mov	lr, r3
 80076f6:	462e      	mov	r6, r5
 80076f8:	4566      	cmp	r6, ip
 80076fa:	d30e      	bcc.n	800771a <__mdiff+0xea>
 80076fc:	f10c 0203 	add.w	r2, ip, #3
 8007700:	1b52      	subs	r2, r2, r5
 8007702:	f022 0203 	bic.w	r2, r2, #3
 8007706:	3d03      	subs	r5, #3
 8007708:	45ac      	cmp	ip, r5
 800770a:	bf38      	it	cc
 800770c:	2200      	movcc	r2, #0
 800770e:	4413      	add	r3, r2
 8007710:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007714:	b17a      	cbz	r2, 8007736 <__mdiff+0x106>
 8007716:	6107      	str	r7, [r0, #16]
 8007718:	e7a4      	b.n	8007664 <__mdiff+0x34>
 800771a:	f856 8b04 	ldr.w	r8, [r6], #4
 800771e:	fa11 f288 	uxtah	r2, r1, r8
 8007722:	1414      	asrs	r4, r2, #16
 8007724:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007728:	b292      	uxth	r2, r2
 800772a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800772e:	f84e 2b04 	str.w	r2, [lr], #4
 8007732:	1421      	asrs	r1, r4, #16
 8007734:	e7e0      	b.n	80076f8 <__mdiff+0xc8>
 8007736:	3f01      	subs	r7, #1
 8007738:	e7ea      	b.n	8007710 <__mdiff+0xe0>
 800773a:	bf00      	nop
 800773c:	08009b65 	.word	0x08009b65
 8007740:	08009b76 	.word	0x08009b76

08007744 <__ulp>:
 8007744:	b082      	sub	sp, #8
 8007746:	ed8d 0b00 	vstr	d0, [sp]
 800774a:	9a01      	ldr	r2, [sp, #4]
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <__ulp+0x48>)
 800774e:	4013      	ands	r3, r2
 8007750:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007754:	2b00      	cmp	r3, #0
 8007756:	dc08      	bgt.n	800776a <__ulp+0x26>
 8007758:	425b      	negs	r3, r3
 800775a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800775e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007762:	da04      	bge.n	800776e <__ulp+0x2a>
 8007764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007768:	4113      	asrs	r3, r2
 800776a:	2200      	movs	r2, #0
 800776c:	e008      	b.n	8007780 <__ulp+0x3c>
 800776e:	f1a2 0314 	sub.w	r3, r2, #20
 8007772:	2b1e      	cmp	r3, #30
 8007774:	bfda      	itte	le
 8007776:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800777a:	40da      	lsrle	r2, r3
 800777c:	2201      	movgt	r2, #1
 800777e:	2300      	movs	r3, #0
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	ec41 0b10 	vmov	d0, r0, r1
 8007788:	b002      	add	sp, #8
 800778a:	4770      	bx	lr
 800778c:	7ff00000 	.word	0x7ff00000

08007790 <__b2d>:
 8007790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007794:	6906      	ldr	r6, [r0, #16]
 8007796:	f100 0814 	add.w	r8, r0, #20
 800779a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800779e:	1f37      	subs	r7, r6, #4
 80077a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7ff fd53 	bl	8007250 <__hi0bits>
 80077aa:	f1c0 0320 	rsb	r3, r0, #32
 80077ae:	280a      	cmp	r0, #10
 80077b0:	600b      	str	r3, [r1, #0]
 80077b2:	491b      	ldr	r1, [pc, #108]	; (8007820 <__b2d+0x90>)
 80077b4:	dc15      	bgt.n	80077e2 <__b2d+0x52>
 80077b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80077ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80077be:	45b8      	cmp	r8, r7
 80077c0:	ea43 0501 	orr.w	r5, r3, r1
 80077c4:	bf34      	ite	cc
 80077c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80077ca:	2300      	movcs	r3, #0
 80077cc:	3015      	adds	r0, #21
 80077ce:	fa02 f000 	lsl.w	r0, r2, r0
 80077d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80077d6:	4303      	orrs	r3, r0
 80077d8:	461c      	mov	r4, r3
 80077da:	ec45 4b10 	vmov	d0, r4, r5
 80077de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e2:	45b8      	cmp	r8, r7
 80077e4:	bf3a      	itte	cc
 80077e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80077ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80077ee:	2300      	movcs	r3, #0
 80077f0:	380b      	subs	r0, #11
 80077f2:	d012      	beq.n	800781a <__b2d+0x8a>
 80077f4:	f1c0 0120 	rsb	r1, r0, #32
 80077f8:	fa23 f401 	lsr.w	r4, r3, r1
 80077fc:	4082      	lsls	r2, r0
 80077fe:	4322      	orrs	r2, r4
 8007800:	4547      	cmp	r7, r8
 8007802:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007806:	bf8c      	ite	hi
 8007808:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800780c:	2200      	movls	r2, #0
 800780e:	4083      	lsls	r3, r0
 8007810:	40ca      	lsrs	r2, r1
 8007812:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007816:	4313      	orrs	r3, r2
 8007818:	e7de      	b.n	80077d8 <__b2d+0x48>
 800781a:	ea42 0501 	orr.w	r5, r2, r1
 800781e:	e7db      	b.n	80077d8 <__b2d+0x48>
 8007820:	3ff00000 	.word	0x3ff00000

08007824 <__d2b>:
 8007824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007828:	460f      	mov	r7, r1
 800782a:	2101      	movs	r1, #1
 800782c:	ec59 8b10 	vmov	r8, r9, d0
 8007830:	4616      	mov	r6, r2
 8007832:	f7ff fc1b 	bl	800706c <_Balloc>
 8007836:	4604      	mov	r4, r0
 8007838:	b930      	cbnz	r0, 8007848 <__d2b+0x24>
 800783a:	4602      	mov	r2, r0
 800783c:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <__d2b+0xac>)
 800783e:	4825      	ldr	r0, [pc, #148]	; (80078d4 <__d2b+0xb0>)
 8007840:	f240 310f 	movw	r1, #783	; 0x30f
 8007844:	f001 fb78 	bl	8008f38 <__assert_func>
 8007848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800784c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007850:	bb2d      	cbnz	r5, 800789e <__d2b+0x7a>
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	f1b8 0300 	subs.w	r3, r8, #0
 8007858:	d026      	beq.n	80078a8 <__d2b+0x84>
 800785a:	4668      	mov	r0, sp
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	f7ff fd17 	bl	8007290 <__lo0bits>
 8007862:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007866:	b1e8      	cbz	r0, 80078a4 <__d2b+0x80>
 8007868:	f1c0 0320 	rsb	r3, r0, #32
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	430b      	orrs	r3, r1
 8007872:	40c2      	lsrs	r2, r0
 8007874:	6163      	str	r3, [r4, #20]
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	61a3      	str	r3, [r4, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf14      	ite	ne
 8007880:	2202      	movne	r2, #2
 8007882:	2201      	moveq	r2, #1
 8007884:	6122      	str	r2, [r4, #16]
 8007886:	b1bd      	cbz	r5, 80078b8 <__d2b+0x94>
 8007888:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800788c:	4405      	add	r5, r0
 800788e:	603d      	str	r5, [r7, #0]
 8007890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007894:	6030      	str	r0, [r6, #0]
 8007896:	4620      	mov	r0, r4
 8007898:	b003      	add	sp, #12
 800789a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a2:	e7d6      	b.n	8007852 <__d2b+0x2e>
 80078a4:	6161      	str	r1, [r4, #20]
 80078a6:	e7e7      	b.n	8007878 <__d2b+0x54>
 80078a8:	a801      	add	r0, sp, #4
 80078aa:	f7ff fcf1 	bl	8007290 <__lo0bits>
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	6163      	str	r3, [r4, #20]
 80078b2:	3020      	adds	r0, #32
 80078b4:	2201      	movs	r2, #1
 80078b6:	e7e5      	b.n	8007884 <__d2b+0x60>
 80078b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078c0:	6038      	str	r0, [r7, #0]
 80078c2:	6918      	ldr	r0, [r3, #16]
 80078c4:	f7ff fcc4 	bl	8007250 <__hi0bits>
 80078c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078cc:	e7e2      	b.n	8007894 <__d2b+0x70>
 80078ce:	bf00      	nop
 80078d0:	08009b65 	.word	0x08009b65
 80078d4:	08009b76 	.word	0x08009b76

080078d8 <__ratio>:
 80078d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	4688      	mov	r8, r1
 80078de:	4669      	mov	r1, sp
 80078e0:	4681      	mov	r9, r0
 80078e2:	f7ff ff55 	bl	8007790 <__b2d>
 80078e6:	a901      	add	r1, sp, #4
 80078e8:	4640      	mov	r0, r8
 80078ea:	ec55 4b10 	vmov	r4, r5, d0
 80078ee:	f7ff ff4f 	bl	8007790 <__b2d>
 80078f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078fa:	eba3 0c02 	sub.w	ip, r3, r2
 80078fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007908:	ec51 0b10 	vmov	r0, r1, d0
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfd6      	itet	le
 8007910:	460a      	movle	r2, r1
 8007912:	462a      	movgt	r2, r5
 8007914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007918:	468b      	mov	fp, r1
 800791a:	462f      	mov	r7, r5
 800791c:	bfd4      	ite	le
 800791e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007922:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007926:	4620      	mov	r0, r4
 8007928:	ee10 2a10 	vmov	r2, s0
 800792c:	465b      	mov	r3, fp
 800792e:	4639      	mov	r1, r7
 8007930:	f7f8 ff9c 	bl	800086c <__aeabi_ddiv>
 8007934:	ec41 0b10 	vmov	d0, r0, r1
 8007938:	b003      	add	sp, #12
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800793e <__copybits>:
 800793e:	3901      	subs	r1, #1
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	1149      	asrs	r1, r1, #5
 8007944:	6914      	ldr	r4, [r2, #16]
 8007946:	3101      	adds	r1, #1
 8007948:	f102 0314 	add.w	r3, r2, #20
 800794c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007954:	1f05      	subs	r5, r0, #4
 8007956:	42a3      	cmp	r3, r4
 8007958:	d30c      	bcc.n	8007974 <__copybits+0x36>
 800795a:	1aa3      	subs	r3, r4, r2
 800795c:	3b11      	subs	r3, #17
 800795e:	f023 0303 	bic.w	r3, r3, #3
 8007962:	3211      	adds	r2, #17
 8007964:	42a2      	cmp	r2, r4
 8007966:	bf88      	it	hi
 8007968:	2300      	movhi	r3, #0
 800796a:	4418      	add	r0, r3
 800796c:	2300      	movs	r3, #0
 800796e:	4288      	cmp	r0, r1
 8007970:	d305      	bcc.n	800797e <__copybits+0x40>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f853 6b04 	ldr.w	r6, [r3], #4
 8007978:	f845 6f04 	str.w	r6, [r5, #4]!
 800797c:	e7eb      	b.n	8007956 <__copybits+0x18>
 800797e:	f840 3b04 	str.w	r3, [r0], #4
 8007982:	e7f4      	b.n	800796e <__copybits+0x30>

08007984 <__any_on>:
 8007984:	f100 0214 	add.w	r2, r0, #20
 8007988:	6900      	ldr	r0, [r0, #16]
 800798a:	114b      	asrs	r3, r1, #5
 800798c:	4298      	cmp	r0, r3
 800798e:	b510      	push	{r4, lr}
 8007990:	db11      	blt.n	80079b6 <__any_on+0x32>
 8007992:	dd0a      	ble.n	80079aa <__any_on+0x26>
 8007994:	f011 011f 	ands.w	r1, r1, #31
 8007998:	d007      	beq.n	80079aa <__any_on+0x26>
 800799a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800799e:	fa24 f001 	lsr.w	r0, r4, r1
 80079a2:	fa00 f101 	lsl.w	r1, r0, r1
 80079a6:	428c      	cmp	r4, r1
 80079a8:	d10b      	bne.n	80079c2 <__any_on+0x3e>
 80079aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d803      	bhi.n	80079ba <__any_on+0x36>
 80079b2:	2000      	movs	r0, #0
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	4603      	mov	r3, r0
 80079b8:	e7f7      	b.n	80079aa <__any_on+0x26>
 80079ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079be:	2900      	cmp	r1, #0
 80079c0:	d0f5      	beq.n	80079ae <__any_on+0x2a>
 80079c2:	2001      	movs	r0, #1
 80079c4:	e7f6      	b.n	80079b4 <__any_on+0x30>

080079c6 <sulp>:
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	ec45 4b10 	vmov	d0, r4, r5
 80079d0:	4616      	mov	r6, r2
 80079d2:	f7ff feb7 	bl	8007744 <__ulp>
 80079d6:	ec51 0b10 	vmov	r0, r1, d0
 80079da:	b17e      	cbz	r6, 80079fc <sulp+0x36>
 80079dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd09      	ble.n	80079fc <sulp+0x36>
 80079e8:	051b      	lsls	r3, r3, #20
 80079ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079ee:	2400      	movs	r4, #0
 80079f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079f4:	4622      	mov	r2, r4
 80079f6:	462b      	mov	r3, r5
 80079f8:	f7f8 fe0e 	bl	8000618 <__aeabi_dmul>
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a00 <_strtod_l>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b09b      	sub	sp, #108	; 0x6c
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a0e:	2200      	movs	r2, #0
 8007a10:	9216      	str	r2, [sp, #88]	; 0x58
 8007a12:	460d      	mov	r5, r1
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	9215      	str	r2, [sp, #84]	; 0x54
 8007a20:	7811      	ldrb	r1, [r2, #0]
 8007a22:	292b      	cmp	r1, #43	; 0x2b
 8007a24:	d04c      	beq.n	8007ac0 <_strtod_l+0xc0>
 8007a26:	d83a      	bhi.n	8007a9e <_strtod_l+0x9e>
 8007a28:	290d      	cmp	r1, #13
 8007a2a:	d834      	bhi.n	8007a96 <_strtod_l+0x96>
 8007a2c:	2908      	cmp	r1, #8
 8007a2e:	d834      	bhi.n	8007a9a <_strtod_l+0x9a>
 8007a30:	2900      	cmp	r1, #0
 8007a32:	d03d      	beq.n	8007ab0 <_strtod_l+0xb0>
 8007a34:	2200      	movs	r2, #0
 8007a36:	920a      	str	r2, [sp, #40]	; 0x28
 8007a38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007a3a:	7832      	ldrb	r2, [r6, #0]
 8007a3c:	2a30      	cmp	r2, #48	; 0x30
 8007a3e:	f040 80b4 	bne.w	8007baa <_strtod_l+0x1aa>
 8007a42:	7872      	ldrb	r2, [r6, #1]
 8007a44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a48:	2a58      	cmp	r2, #88	; 0x58
 8007a4a:	d170      	bne.n	8007b2e <_strtod_l+0x12e>
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	ab16      	add	r3, sp, #88	; 0x58
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4a8e      	ldr	r2, [pc, #568]	; (8007c90 <_strtod_l+0x290>)
 8007a58:	ab17      	add	r3, sp, #92	; 0x5c
 8007a5a:	a915      	add	r1, sp, #84	; 0x54
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f001 fb07 	bl	8009070 <__gethex>
 8007a62:	f010 070f 	ands.w	r7, r0, #15
 8007a66:	4605      	mov	r5, r0
 8007a68:	d005      	beq.n	8007a76 <_strtod_l+0x76>
 8007a6a:	2f06      	cmp	r7, #6
 8007a6c:	d12a      	bne.n	8007ac4 <_strtod_l+0xc4>
 8007a6e:	3601      	adds	r6, #1
 8007a70:	2300      	movs	r3, #0
 8007a72:	9615      	str	r6, [sp, #84]	; 0x54
 8007a74:	930a      	str	r3, [sp, #40]	; 0x28
 8007a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 857f 	bne.w	800857c <_strtod_l+0xb7c>
 8007a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a80:	b1db      	cbz	r3, 8007aba <_strtod_l+0xba>
 8007a82:	4642      	mov	r2, r8
 8007a84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a88:	ec43 2b10 	vmov	d0, r2, r3
 8007a8c:	b01b      	add	sp, #108	; 0x6c
 8007a8e:	ecbd 8b02 	vpop	{d8}
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	2920      	cmp	r1, #32
 8007a98:	d1cc      	bne.n	8007a34 <_strtod_l+0x34>
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	e7bf      	b.n	8007a1e <_strtod_l+0x1e>
 8007a9e:	292d      	cmp	r1, #45	; 0x2d
 8007aa0:	d1c8      	bne.n	8007a34 <_strtod_l+0x34>
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	910a      	str	r1, [sp, #40]	; 0x28
 8007aa6:	1c51      	adds	r1, r2, #1
 8007aa8:	9115      	str	r1, [sp, #84]	; 0x54
 8007aaa:	7852      	ldrb	r2, [r2, #1]
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	d1c3      	bne.n	8007a38 <_strtod_l+0x38>
 8007ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ab2:	9515      	str	r5, [sp, #84]	; 0x54
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 855f 	bne.w	8008578 <_strtod_l+0xb78>
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	e7e3      	b.n	8007a88 <_strtod_l+0x88>
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	e7ef      	b.n	8007aa4 <_strtod_l+0xa4>
 8007ac4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ac6:	b13a      	cbz	r2, 8007ad8 <_strtod_l+0xd8>
 8007ac8:	2135      	movs	r1, #53	; 0x35
 8007aca:	a818      	add	r0, sp, #96	; 0x60
 8007acc:	f7ff ff37 	bl	800793e <__copybits>
 8007ad0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff fb0a 	bl	80070ec <_Bfree>
 8007ad8:	3f01      	subs	r7, #1
 8007ada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007adc:	2f04      	cmp	r7, #4
 8007ade:	d806      	bhi.n	8007aee <_strtod_l+0xee>
 8007ae0:	e8df f007 	tbb	[pc, r7]
 8007ae4:	201d0314 	.word	0x201d0314
 8007ae8:	14          	.byte	0x14
 8007ae9:	00          	.byte	0x00
 8007aea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007aee:	05e9      	lsls	r1, r5, #23
 8007af0:	bf48      	it	mi
 8007af2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007af6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007afa:	0d1b      	lsrs	r3, r3, #20
 8007afc:	051b      	lsls	r3, r3, #20
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1b9      	bne.n	8007a76 <_strtod_l+0x76>
 8007b02:	f7fe fb03 	bl	800610c <__errno>
 8007b06:	2322      	movs	r3, #34	; 0x22
 8007b08:	6003      	str	r3, [r0, #0]
 8007b0a:	e7b4      	b.n	8007a76 <_strtod_l+0x76>
 8007b0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007b10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b1c:	e7e7      	b.n	8007aee <_strtod_l+0xee>
 8007b1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c98 <_strtod_l+0x298>
 8007b22:	e7e4      	b.n	8007aee <_strtod_l+0xee>
 8007b24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007b2c:	e7df      	b.n	8007aee <_strtod_l+0xee>
 8007b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	9215      	str	r2, [sp, #84]	; 0x54
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b30      	cmp	r3, #48	; 0x30
 8007b38:	d0f9      	beq.n	8007b2e <_strtod_l+0x12e>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d09b      	beq.n	8007a76 <_strtod_l+0x76>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f04f 0a00 	mov.w	sl, #0
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007b4e:	46d3      	mov	fp, sl
 8007b50:	220a      	movs	r2, #10
 8007b52:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007b54:	7806      	ldrb	r6, [r0, #0]
 8007b56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b5a:	b2d9      	uxtb	r1, r3
 8007b5c:	2909      	cmp	r1, #9
 8007b5e:	d926      	bls.n	8007bae <_strtod_l+0x1ae>
 8007b60:	494c      	ldr	r1, [pc, #304]	; (8007c94 <_strtod_l+0x294>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	f001 f98c 	bl	8008e80 <strncmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d030      	beq.n	8007bce <_strtod_l+0x1ce>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	4632      	mov	r2, r6
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	465e      	mov	r6, fp
 8007b74:	4603      	mov	r3, r0
 8007b76:	2a65      	cmp	r2, #101	; 0x65
 8007b78:	d001      	beq.n	8007b7e <_strtod_l+0x17e>
 8007b7a:	2a45      	cmp	r2, #69	; 0x45
 8007b7c:	d113      	bne.n	8007ba6 <_strtod_l+0x1a6>
 8007b7e:	b91e      	cbnz	r6, 8007b88 <_strtod_l+0x188>
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	4302      	orrs	r2, r0
 8007b84:	d094      	beq.n	8007ab0 <_strtod_l+0xb0>
 8007b86:	2600      	movs	r6, #0
 8007b88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007b8a:	1c6a      	adds	r2, r5, #1
 8007b8c:	9215      	str	r2, [sp, #84]	; 0x54
 8007b8e:	786a      	ldrb	r2, [r5, #1]
 8007b90:	2a2b      	cmp	r2, #43	; 0x2b
 8007b92:	d074      	beq.n	8007c7e <_strtod_l+0x27e>
 8007b94:	2a2d      	cmp	r2, #45	; 0x2d
 8007b96:	d078      	beq.n	8007c8a <_strtod_l+0x28a>
 8007b98:	f04f 0c00 	mov.w	ip, #0
 8007b9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ba0:	2909      	cmp	r1, #9
 8007ba2:	d97f      	bls.n	8007ca4 <_strtod_l+0x2a4>
 8007ba4:	9515      	str	r5, [sp, #84]	; 0x54
 8007ba6:	2700      	movs	r7, #0
 8007ba8:	e09e      	b.n	8007ce8 <_strtod_l+0x2e8>
 8007baa:	2300      	movs	r3, #0
 8007bac:	e7c8      	b.n	8007b40 <_strtod_l+0x140>
 8007bae:	f1bb 0f08 	cmp.w	fp, #8
 8007bb2:	bfd8      	it	le
 8007bb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007bb6:	f100 0001 	add.w	r0, r0, #1
 8007bba:	bfda      	itte	le
 8007bbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bc0:	9309      	strle	r3, [sp, #36]	; 0x24
 8007bc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007bc6:	f10b 0b01 	add.w	fp, fp, #1
 8007bca:	9015      	str	r0, [sp, #84]	; 0x54
 8007bcc:	e7c1      	b.n	8007b52 <_strtod_l+0x152>
 8007bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	9215      	str	r2, [sp, #84]	; 0x54
 8007bd4:	785a      	ldrb	r2, [r3, #1]
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	d037      	beq.n	8007c4c <_strtod_l+0x24c>
 8007bdc:	9005      	str	r0, [sp, #20]
 8007bde:	465e      	mov	r6, fp
 8007be0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d912      	bls.n	8007c0e <_strtod_l+0x20e>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7c4      	b.n	8007b76 <_strtod_l+0x176>
 8007bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	9215      	str	r2, [sp, #84]	; 0x54
 8007bf2:	785a      	ldrb	r2, [r3, #1]
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	2a30      	cmp	r2, #48	; 0x30
 8007bf8:	d0f8      	beq.n	8007bec <_strtod_l+0x1ec>
 8007bfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	f200 84c1 	bhi.w	8008586 <_strtod_l+0xb86>
 8007c04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c06:	9005      	str	r0, [sp, #20]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	3a30      	subs	r2, #48	; 0x30
 8007c10:	f100 0301 	add.w	r3, r0, #1
 8007c14:	d014      	beq.n	8007c40 <_strtod_l+0x240>
 8007c16:	9905      	ldr	r1, [sp, #20]
 8007c18:	4419      	add	r1, r3
 8007c1a:	9105      	str	r1, [sp, #20]
 8007c1c:	4633      	mov	r3, r6
 8007c1e:	eb00 0c06 	add.w	ip, r0, r6
 8007c22:	210a      	movs	r1, #10
 8007c24:	4563      	cmp	r3, ip
 8007c26:	d113      	bne.n	8007c50 <_strtod_l+0x250>
 8007c28:	1833      	adds	r3, r6, r0
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	f106 0601 	add.w	r6, r6, #1
 8007c30:	4406      	add	r6, r0
 8007c32:	dc1a      	bgt.n	8007c6a <_strtod_l+0x26a>
 8007c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c36:	230a      	movs	r3, #10
 8007c38:	fb03 2301 	mla	r3, r3, r1, r2
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c42:	1c51      	adds	r1, r2, #1
 8007c44:	9115      	str	r1, [sp, #84]	; 0x54
 8007c46:	7852      	ldrb	r2, [r2, #1]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	e7c9      	b.n	8007be0 <_strtod_l+0x1e0>
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	e7d2      	b.n	8007bf6 <_strtod_l+0x1f6>
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	f103 0301 	add.w	r3, r3, #1
 8007c56:	dc03      	bgt.n	8007c60 <_strtod_l+0x260>
 8007c58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c5a:	434f      	muls	r7, r1
 8007c5c:	9709      	str	r7, [sp, #36]	; 0x24
 8007c5e:	e7e1      	b.n	8007c24 <_strtod_l+0x224>
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	bfd8      	it	le
 8007c64:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c68:	e7dc      	b.n	8007c24 <_strtod_l+0x224>
 8007c6a:	2e10      	cmp	r6, #16
 8007c6c:	bfdc      	itt	le
 8007c6e:	230a      	movle	r3, #10
 8007c70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007c74:	e7e3      	b.n	8007c3e <_strtod_l+0x23e>
 8007c76:	2300      	movs	r3, #0
 8007c78:	9305      	str	r3, [sp, #20]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e780      	b.n	8007b80 <_strtod_l+0x180>
 8007c7e:	f04f 0c00 	mov.w	ip, #0
 8007c82:	1caa      	adds	r2, r5, #2
 8007c84:	9215      	str	r2, [sp, #84]	; 0x54
 8007c86:	78aa      	ldrb	r2, [r5, #2]
 8007c88:	e788      	b.n	8007b9c <_strtod_l+0x19c>
 8007c8a:	f04f 0c01 	mov.w	ip, #1
 8007c8e:	e7f8      	b.n	8007c82 <_strtod_l+0x282>
 8007c90:	08009cd0 	.word	0x08009cd0
 8007c94:	08009ccc 	.word	0x08009ccc
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c9e:	1c51      	adds	r1, r2, #1
 8007ca0:	9115      	str	r1, [sp, #84]	; 0x54
 8007ca2:	7852      	ldrb	r2, [r2, #1]
 8007ca4:	2a30      	cmp	r2, #48	; 0x30
 8007ca6:	d0f9      	beq.n	8007c9c <_strtod_l+0x29c>
 8007ca8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cac:	2908      	cmp	r1, #8
 8007cae:	f63f af7a 	bhi.w	8007ba6 <_strtod_l+0x1a6>
 8007cb2:	3a30      	subs	r2, #48	; 0x30
 8007cb4:	9208      	str	r2, [sp, #32]
 8007cb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cb8:	920c      	str	r2, [sp, #48]	; 0x30
 8007cba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cbc:	1c57      	adds	r7, r2, #1
 8007cbe:	9715      	str	r7, [sp, #84]	; 0x54
 8007cc0:	7852      	ldrb	r2, [r2, #1]
 8007cc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cc6:	f1be 0f09 	cmp.w	lr, #9
 8007cca:	d938      	bls.n	8007d3e <_strtod_l+0x33e>
 8007ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cce:	1a7f      	subs	r7, r7, r1
 8007cd0:	2f08      	cmp	r7, #8
 8007cd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007cd6:	dc03      	bgt.n	8007ce0 <_strtod_l+0x2e0>
 8007cd8:	9908      	ldr	r1, [sp, #32]
 8007cda:	428f      	cmp	r7, r1
 8007cdc:	bfa8      	it	ge
 8007cde:	460f      	movge	r7, r1
 8007ce0:	f1bc 0f00 	cmp.w	ip, #0
 8007ce4:	d000      	beq.n	8007ce8 <_strtod_l+0x2e8>
 8007ce6:	427f      	negs	r7, r7
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	d14f      	bne.n	8007d8c <_strtod_l+0x38c>
 8007cec:	9904      	ldr	r1, [sp, #16]
 8007cee:	4301      	orrs	r1, r0
 8007cf0:	f47f aec1 	bne.w	8007a76 <_strtod_l+0x76>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f aedb 	bne.w	8007ab0 <_strtod_l+0xb0>
 8007cfa:	2a69      	cmp	r2, #105	; 0x69
 8007cfc:	d029      	beq.n	8007d52 <_strtod_l+0x352>
 8007cfe:	dc26      	bgt.n	8007d4e <_strtod_l+0x34e>
 8007d00:	2a49      	cmp	r2, #73	; 0x49
 8007d02:	d026      	beq.n	8007d52 <_strtod_l+0x352>
 8007d04:	2a4e      	cmp	r2, #78	; 0x4e
 8007d06:	f47f aed3 	bne.w	8007ab0 <_strtod_l+0xb0>
 8007d0a:	499b      	ldr	r1, [pc, #620]	; (8007f78 <_strtod_l+0x578>)
 8007d0c:	a815      	add	r0, sp, #84	; 0x54
 8007d0e:	f001 fbef 	bl	80094f0 <__match>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f43f aecc 	beq.w	8007ab0 <_strtod_l+0xb0>
 8007d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b28      	cmp	r3, #40	; 0x28
 8007d1e:	d12f      	bne.n	8007d80 <_strtod_l+0x380>
 8007d20:	4996      	ldr	r1, [pc, #600]	; (8007f7c <_strtod_l+0x57c>)
 8007d22:	aa18      	add	r2, sp, #96	; 0x60
 8007d24:	a815      	add	r0, sp, #84	; 0x54
 8007d26:	f001 fbf7 	bl	8009518 <__hexnan>
 8007d2a:	2805      	cmp	r0, #5
 8007d2c:	d128      	bne.n	8007d80 <_strtod_l+0x380>
 8007d2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d3c:	e69b      	b.n	8007a76 <_strtod_l+0x76>
 8007d3e:	9f08      	ldr	r7, [sp, #32]
 8007d40:	210a      	movs	r1, #10
 8007d42:	fb01 2107 	mla	r1, r1, r7, r2
 8007d46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d4a:	9208      	str	r2, [sp, #32]
 8007d4c:	e7b5      	b.n	8007cba <_strtod_l+0x2ba>
 8007d4e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d50:	e7d9      	b.n	8007d06 <_strtod_l+0x306>
 8007d52:	498b      	ldr	r1, [pc, #556]	; (8007f80 <_strtod_l+0x580>)
 8007d54:	a815      	add	r0, sp, #84	; 0x54
 8007d56:	f001 fbcb 	bl	80094f0 <__match>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f43f aea8 	beq.w	8007ab0 <_strtod_l+0xb0>
 8007d60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d62:	4988      	ldr	r1, [pc, #544]	; (8007f84 <_strtod_l+0x584>)
 8007d64:	3b01      	subs	r3, #1
 8007d66:	a815      	add	r0, sp, #84	; 0x54
 8007d68:	9315      	str	r3, [sp, #84]	; 0x54
 8007d6a:	f001 fbc1 	bl	80094f0 <__match>
 8007d6e:	b910      	cbnz	r0, 8007d76 <_strtod_l+0x376>
 8007d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d72:	3301      	adds	r3, #1
 8007d74:	9315      	str	r3, [sp, #84]	; 0x54
 8007d76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007f94 <_strtod_l+0x594>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	e67a      	b.n	8007a76 <_strtod_l+0x76>
 8007d80:	4881      	ldr	r0, [pc, #516]	; (8007f88 <_strtod_l+0x588>)
 8007d82:	f001 f8d1 	bl	8008f28 <nan>
 8007d86:	ec59 8b10 	vmov	r8, r9, d0
 8007d8a:	e674      	b.n	8007a76 <_strtod_l+0x76>
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d90:	1afb      	subs	r3, r7, r3
 8007d92:	f1bb 0f00 	cmp.w	fp, #0
 8007d96:	bf08      	it	eq
 8007d98:	46b3      	moveq	fp, r6
 8007d9a:	2e10      	cmp	r6, #16
 8007d9c:	9308      	str	r3, [sp, #32]
 8007d9e:	4635      	mov	r5, r6
 8007da0:	bfa8      	it	ge
 8007da2:	2510      	movge	r5, #16
 8007da4:	f7f8 fbbe 	bl	8000524 <__aeabi_ui2d>
 8007da8:	2e09      	cmp	r6, #9
 8007daa:	4680      	mov	r8, r0
 8007dac:	4689      	mov	r9, r1
 8007dae:	dd13      	ble.n	8007dd8 <_strtod_l+0x3d8>
 8007db0:	4b76      	ldr	r3, [pc, #472]	; (8007f8c <_strtod_l+0x58c>)
 8007db2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007db6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dba:	f7f8 fc2d 	bl	8000618 <__aeabi_dmul>
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	4689      	mov	r9, r1
 8007dc4:	f7f8 fbae 	bl	8000524 <__aeabi_ui2d>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 fa6c 	bl	80002ac <__adddf3>
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	4689      	mov	r9, r1
 8007dd8:	2e0f      	cmp	r6, #15
 8007dda:	dc38      	bgt.n	8007e4e <_strtod_l+0x44e>
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f43f ae49 	beq.w	8007a76 <_strtod_l+0x76>
 8007de4:	dd24      	ble.n	8007e30 <_strtod_l+0x430>
 8007de6:	2b16      	cmp	r3, #22
 8007de8:	dc0b      	bgt.n	8007e02 <_strtod_l+0x402>
 8007dea:	4968      	ldr	r1, [pc, #416]	; (8007f8c <_strtod_l+0x58c>)
 8007dec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	f7f8 fc0e 	bl	8000618 <__aeabi_dmul>
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4689      	mov	r9, r1
 8007e00:	e639      	b.n	8007a76 <_strtod_l+0x76>
 8007e02:	9a08      	ldr	r2, [sp, #32]
 8007e04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	db20      	blt.n	8007e4e <_strtod_l+0x44e>
 8007e0c:	4c5f      	ldr	r4, [pc, #380]	; (8007f8c <_strtod_l+0x58c>)
 8007e0e:	f1c6 060f 	rsb	r6, r6, #15
 8007e12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007e16:	4642      	mov	r2, r8
 8007e18:	464b      	mov	r3, r9
 8007e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1e:	f7f8 fbfb 	bl	8000618 <__aeabi_dmul>
 8007e22:	9b08      	ldr	r3, [sp, #32]
 8007e24:	1b9e      	subs	r6, r3, r6
 8007e26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e2e:	e7e3      	b.n	8007df8 <_strtod_l+0x3f8>
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	3316      	adds	r3, #22
 8007e34:	db0b      	blt.n	8007e4e <_strtod_l+0x44e>
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	1bdf      	subs	r7, r3, r7
 8007e3a:	4b54      	ldr	r3, [pc, #336]	; (8007f8c <_strtod_l+0x58c>)
 8007e3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	4640      	mov	r0, r8
 8007e46:	4649      	mov	r1, r9
 8007e48:	f7f8 fd10 	bl	800086c <__aeabi_ddiv>
 8007e4c:	e7d6      	b.n	8007dfc <_strtod_l+0x3fc>
 8007e4e:	9b08      	ldr	r3, [sp, #32]
 8007e50:	1b75      	subs	r5, r6, r5
 8007e52:	441d      	add	r5, r3
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	dd70      	ble.n	8007f3a <_strtod_l+0x53a>
 8007e58:	f015 030f 	ands.w	r3, r5, #15
 8007e5c:	d00a      	beq.n	8007e74 <_strtod_l+0x474>
 8007e5e:	494b      	ldr	r1, [pc, #300]	; (8007f8c <_strtod_l+0x58c>)
 8007e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	f7f8 fbd4 	bl	8000618 <__aeabi_dmul>
 8007e70:	4680      	mov	r8, r0
 8007e72:	4689      	mov	r9, r1
 8007e74:	f035 050f 	bics.w	r5, r5, #15
 8007e78:	d04d      	beq.n	8007f16 <_strtod_l+0x516>
 8007e7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007e7e:	dd22      	ble.n	8007ec6 <_strtod_l+0x4c6>
 8007e80:	2500      	movs	r5, #0
 8007e82:	46ab      	mov	fp, r5
 8007e84:	9509      	str	r5, [sp, #36]	; 0x24
 8007e86:	9505      	str	r5, [sp, #20]
 8007e88:	2322      	movs	r3, #34	; 0x22
 8007e8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007f94 <_strtod_l+0x594>
 8007e8e:	6023      	str	r3, [r4, #0]
 8007e90:	f04f 0800 	mov.w	r8, #0
 8007e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f43f aded 	beq.w	8007a76 <_strtod_l+0x76>
 8007e9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7ff f924 	bl	80070ec <_Bfree>
 8007ea4:	9905      	ldr	r1, [sp, #20]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7ff f920 	bl	80070ec <_Bfree>
 8007eac:	4659      	mov	r1, fp
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7ff f91c 	bl	80070ec <_Bfree>
 8007eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7ff f918 	bl	80070ec <_Bfree>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f7ff f914 	bl	80070ec <_Bfree>
 8007ec4:	e5d7      	b.n	8007a76 <_strtod_l+0x76>
 8007ec6:	4b32      	ldr	r3, [pc, #200]	; (8007f90 <_strtod_l+0x590>)
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	112d      	asrs	r5, r5, #4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	469a      	mov	sl, r3
 8007ed4:	2d01      	cmp	r5, #1
 8007ed6:	dc21      	bgt.n	8007f1c <_strtod_l+0x51c>
 8007ed8:	b10b      	cbz	r3, 8007ede <_strtod_l+0x4de>
 8007eda:	4680      	mov	r8, r0
 8007edc:	4689      	mov	r9, r1
 8007ede:	492c      	ldr	r1, [pc, #176]	; (8007f90 <_strtod_l+0x590>)
 8007ee0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ee4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef0:	f7f8 fb92 	bl	8000618 <__aeabi_dmul>
 8007ef4:	4b27      	ldr	r3, [pc, #156]	; (8007f94 <_strtod_l+0x594>)
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	400b      	ands	r3, r1
 8007efa:	4927      	ldr	r1, [pc, #156]	; (8007f98 <_strtod_l+0x598>)
 8007efc:	428b      	cmp	r3, r1
 8007efe:	4680      	mov	r8, r0
 8007f00:	d8be      	bhi.n	8007e80 <_strtod_l+0x480>
 8007f02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f06:	428b      	cmp	r3, r1
 8007f08:	bf86      	itte	hi
 8007f0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007f9c <_strtod_l+0x59c>
 8007f0e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007f12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f16:	2300      	movs	r3, #0
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	e07b      	b.n	8008014 <_strtod_l+0x614>
 8007f1c:	07ea      	lsls	r2, r5, #31
 8007f1e:	d505      	bpl.n	8007f2c <_strtod_l+0x52c>
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fb77 	bl	8000618 <__aeabi_dmul>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	106d      	asrs	r5, r5, #1
 8007f36:	9204      	str	r2, [sp, #16]
 8007f38:	e7cc      	b.n	8007ed4 <_strtod_l+0x4d4>
 8007f3a:	d0ec      	beq.n	8007f16 <_strtod_l+0x516>
 8007f3c:	426d      	negs	r5, r5
 8007f3e:	f015 020f 	ands.w	r2, r5, #15
 8007f42:	d00a      	beq.n	8007f5a <_strtod_l+0x55a>
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <_strtod_l+0x58c>)
 8007f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 fc8b 	bl	800086c <__aeabi_ddiv>
 8007f56:	4680      	mov	r8, r0
 8007f58:	4689      	mov	r9, r1
 8007f5a:	112d      	asrs	r5, r5, #4
 8007f5c:	d0db      	beq.n	8007f16 <_strtod_l+0x516>
 8007f5e:	2d1f      	cmp	r5, #31
 8007f60:	dd1e      	ble.n	8007fa0 <_strtod_l+0x5a0>
 8007f62:	2500      	movs	r5, #0
 8007f64:	46ab      	mov	fp, r5
 8007f66:	9509      	str	r5, [sp, #36]	; 0x24
 8007f68:	9505      	str	r5, [sp, #20]
 8007f6a:	2322      	movs	r3, #34	; 0x22
 8007f6c:	f04f 0800 	mov.w	r8, #0
 8007f70:	f04f 0900 	mov.w	r9, #0
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	e78d      	b.n	8007e94 <_strtod_l+0x494>
 8007f78:	08009abd 	.word	0x08009abd
 8007f7c:	08009ce4 	.word	0x08009ce4
 8007f80:	08009ab5 	.word	0x08009ab5
 8007f84:	08009aec 	.word	0x08009aec
 8007f88:	08009e75 	.word	0x08009e75
 8007f8c:	08009bf8 	.word	0x08009bf8
 8007f90:	08009bd0 	.word	0x08009bd0
 8007f94:	7ff00000 	.word	0x7ff00000
 8007f98:	7ca00000 	.word	0x7ca00000
 8007f9c:	7fefffff 	.word	0x7fefffff
 8007fa0:	f015 0310 	ands.w	r3, r5, #16
 8007fa4:	bf18      	it	ne
 8007fa6:	236a      	movne	r3, #106	; 0x6a
 8007fa8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800834c <_strtod_l+0x94c>
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	07ea      	lsls	r2, r5, #31
 8007fb6:	d504      	bpl.n	8007fc2 <_strtod_l+0x5c2>
 8007fb8:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fbc:	f7f8 fb2c 	bl	8000618 <__aeabi_dmul>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	106d      	asrs	r5, r5, #1
 8007fc4:	f10a 0a08 	add.w	sl, sl, #8
 8007fc8:	d1f4      	bne.n	8007fb4 <_strtod_l+0x5b4>
 8007fca:	b10b      	cbz	r3, 8007fd0 <_strtod_l+0x5d0>
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	9b04      	ldr	r3, [sp, #16]
 8007fd2:	b1bb      	cbz	r3, 8008004 <_strtod_l+0x604>
 8007fd4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007fd8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	4649      	mov	r1, r9
 8007fe0:	dd10      	ble.n	8008004 <_strtod_l+0x604>
 8007fe2:	2b1f      	cmp	r3, #31
 8007fe4:	f340 811e 	ble.w	8008224 <_strtod_l+0x824>
 8007fe8:	2b34      	cmp	r3, #52	; 0x34
 8007fea:	bfde      	ittt	le
 8007fec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007ff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ff4:	4093      	lslle	r3, r2
 8007ff6:	f04f 0800 	mov.w	r8, #0
 8007ffa:	bfcc      	ite	gt
 8007ffc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008000:	ea03 0901 	andle.w	r9, r3, r1
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008010:	2800      	cmp	r0, #0
 8008012:	d1a6      	bne.n	8007f62 <_strtod_l+0x562>
 8008014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800801a:	4633      	mov	r3, r6
 800801c:	465a      	mov	r2, fp
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff f8cc 	bl	80071bc <__s2b>
 8008024:	9009      	str	r0, [sp, #36]	; 0x24
 8008026:	2800      	cmp	r0, #0
 8008028:	f43f af2a 	beq.w	8007e80 <_strtod_l+0x480>
 800802c:	9a08      	ldr	r2, [sp, #32]
 800802e:	9b05      	ldr	r3, [sp, #20]
 8008030:	2a00      	cmp	r2, #0
 8008032:	eba3 0307 	sub.w	r3, r3, r7
 8008036:	bfa8      	it	ge
 8008038:	2300      	movge	r3, #0
 800803a:	930c      	str	r3, [sp, #48]	; 0x30
 800803c:	2500      	movs	r5, #0
 800803e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008042:	9312      	str	r3, [sp, #72]	; 0x48
 8008044:	46ab      	mov	fp, r5
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	4620      	mov	r0, r4
 800804a:	6859      	ldr	r1, [r3, #4]
 800804c:	f7ff f80e 	bl	800706c <_Balloc>
 8008050:	9005      	str	r0, [sp, #20]
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f af18 	beq.w	8007e88 <_strtod_l+0x488>
 8008058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805a:	691a      	ldr	r2, [r3, #16]
 800805c:	3202      	adds	r2, #2
 800805e:	f103 010c 	add.w	r1, r3, #12
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	300c      	adds	r0, #12
 8008066:	f000 ff4f 	bl	8008f08 <memcpy>
 800806a:	ec49 8b10 	vmov	d0, r8, r9
 800806e:	aa18      	add	r2, sp, #96	; 0x60
 8008070:	a917      	add	r1, sp, #92	; 0x5c
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fbd6 	bl	8007824 <__d2b>
 8008078:	ec49 8b18 	vmov	d8, r8, r9
 800807c:	9016      	str	r0, [sp, #88]	; 0x58
 800807e:	2800      	cmp	r0, #0
 8008080:	f43f af02 	beq.w	8007e88 <_strtod_l+0x488>
 8008084:	2101      	movs	r1, #1
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff f930 	bl	80072ec <__i2b>
 800808c:	4683      	mov	fp, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f aefa 	beq.w	8007e88 <_strtod_l+0x488>
 8008094:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008096:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008098:	2e00      	cmp	r6, #0
 800809a:	bfab      	itete	ge
 800809c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800809e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80080a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80080a6:	bfac      	ite	ge
 80080a8:	eb06 0a03 	addge.w	sl, r6, r3
 80080ac:	1b9f      	sublt	r7, r3, r6
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	1af6      	subs	r6, r6, r3
 80080b2:	4416      	add	r6, r2
 80080b4:	4ba0      	ldr	r3, [pc, #640]	; (8008338 <_strtod_l+0x938>)
 80080b6:	3e01      	subs	r6, #1
 80080b8:	429e      	cmp	r6, r3
 80080ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080be:	f280 80c4 	bge.w	800824a <_strtod_l+0x84a>
 80080c2:	1b9b      	subs	r3, r3, r6
 80080c4:	2b1f      	cmp	r3, #31
 80080c6:	eba2 0203 	sub.w	r2, r2, r3
 80080ca:	f04f 0101 	mov.w	r1, #1
 80080ce:	f300 80b0 	bgt.w	8008232 <_strtod_l+0x832>
 80080d2:	fa01 f303 	lsl.w	r3, r1, r3
 80080d6:	930e      	str	r3, [sp, #56]	; 0x38
 80080d8:	2300      	movs	r3, #0
 80080da:	930d      	str	r3, [sp, #52]	; 0x34
 80080dc:	eb0a 0602 	add.w	r6, sl, r2
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	45b2      	cmp	sl, r6
 80080e4:	4417      	add	r7, r2
 80080e6:	441f      	add	r7, r3
 80080e8:	4653      	mov	r3, sl
 80080ea:	bfa8      	it	ge
 80080ec:	4633      	movge	r3, r6
 80080ee:	42bb      	cmp	r3, r7
 80080f0:	bfa8      	it	ge
 80080f2:	463b      	movge	r3, r7
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bfc2      	ittt	gt
 80080f8:	1af6      	subgt	r6, r6, r3
 80080fa:	1aff      	subgt	r7, r7, r3
 80080fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008102:	2b00      	cmp	r3, #0
 8008104:	dd17      	ble.n	8008136 <_strtod_l+0x736>
 8008106:	4659      	mov	r1, fp
 8008108:	461a      	mov	r2, r3
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff f9ae 	bl	800746c <__pow5mult>
 8008110:	4683      	mov	fp, r0
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f aeb8 	beq.w	8007e88 <_strtod_l+0x488>
 8008118:	4601      	mov	r1, r0
 800811a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800811c:	4620      	mov	r0, r4
 800811e:	f7ff f8fb 	bl	8007318 <__multiply>
 8008122:	900b      	str	r0, [sp, #44]	; 0x2c
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f aeaf 	beq.w	8007e88 <_strtod_l+0x488>
 800812a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800812c:	4620      	mov	r0, r4
 800812e:	f7fe ffdd 	bl	80070ec <_Bfree>
 8008132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008134:	9316      	str	r3, [sp, #88]	; 0x58
 8008136:	2e00      	cmp	r6, #0
 8008138:	f300 808c 	bgt.w	8008254 <_strtod_l+0x854>
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd08      	ble.n	8008154 <_strtod_l+0x754>
 8008142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008144:	9905      	ldr	r1, [sp, #20]
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff f990 	bl	800746c <__pow5mult>
 800814c:	9005      	str	r0, [sp, #20]
 800814e:	2800      	cmp	r0, #0
 8008150:	f43f ae9a 	beq.w	8007e88 <_strtod_l+0x488>
 8008154:	2f00      	cmp	r7, #0
 8008156:	dd08      	ble.n	800816a <_strtod_l+0x76a>
 8008158:	9905      	ldr	r1, [sp, #20]
 800815a:	463a      	mov	r2, r7
 800815c:	4620      	mov	r0, r4
 800815e:	f7ff f9df 	bl	8007520 <__lshift>
 8008162:	9005      	str	r0, [sp, #20]
 8008164:	2800      	cmp	r0, #0
 8008166:	f43f ae8f 	beq.w	8007e88 <_strtod_l+0x488>
 800816a:	f1ba 0f00 	cmp.w	sl, #0
 800816e:	dd08      	ble.n	8008182 <_strtod_l+0x782>
 8008170:	4659      	mov	r1, fp
 8008172:	4652      	mov	r2, sl
 8008174:	4620      	mov	r0, r4
 8008176:	f7ff f9d3 	bl	8007520 <__lshift>
 800817a:	4683      	mov	fp, r0
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f ae83 	beq.w	8007e88 <_strtod_l+0x488>
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff fa52 	bl	8007630 <__mdiff>
 800818c:	4605      	mov	r5, r0
 800818e:	2800      	cmp	r0, #0
 8008190:	f43f ae7a 	beq.w	8007e88 <_strtod_l+0x488>
 8008194:	68c3      	ldr	r3, [r0, #12]
 8008196:	930b      	str	r3, [sp, #44]	; 0x2c
 8008198:	2300      	movs	r3, #0
 800819a:	60c3      	str	r3, [r0, #12]
 800819c:	4659      	mov	r1, fp
 800819e:	f7ff fa2b 	bl	80075f8 <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	da60      	bge.n	8008268 <_strtod_l+0x868>
 80081a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a8:	ea53 0308 	orrs.w	r3, r3, r8
 80081ac:	f040 8084 	bne.w	80082b8 <_strtod_l+0x8b8>
 80081b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d17f      	bne.n	80082b8 <_strtod_l+0x8b8>
 80081b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081bc:	0d1b      	lsrs	r3, r3, #20
 80081be:	051b      	lsls	r3, r3, #20
 80081c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081c4:	d978      	bls.n	80082b8 <_strtod_l+0x8b8>
 80081c6:	696b      	ldr	r3, [r5, #20]
 80081c8:	b913      	cbnz	r3, 80081d0 <_strtod_l+0x7d0>
 80081ca:	692b      	ldr	r3, [r5, #16]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	dd73      	ble.n	80082b8 <_strtod_l+0x8b8>
 80081d0:	4629      	mov	r1, r5
 80081d2:	2201      	movs	r2, #1
 80081d4:	4620      	mov	r0, r4
 80081d6:	f7ff f9a3 	bl	8007520 <__lshift>
 80081da:	4659      	mov	r1, fp
 80081dc:	4605      	mov	r5, r0
 80081de:	f7ff fa0b 	bl	80075f8 <__mcmp>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	dd68      	ble.n	80082b8 <_strtod_l+0x8b8>
 80081e6:	9904      	ldr	r1, [sp, #16]
 80081e8:	4a54      	ldr	r2, [pc, #336]	; (800833c <_strtod_l+0x93c>)
 80081ea:	464b      	mov	r3, r9
 80081ec:	2900      	cmp	r1, #0
 80081ee:	f000 8084 	beq.w	80082fa <_strtod_l+0x8fa>
 80081f2:	ea02 0109 	and.w	r1, r2, r9
 80081f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081fa:	dc7e      	bgt.n	80082fa <_strtod_l+0x8fa>
 80081fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008200:	f77f aeb3 	ble.w	8007f6a <_strtod_l+0x56a>
 8008204:	4b4e      	ldr	r3, [pc, #312]	; (8008340 <_strtod_l+0x940>)
 8008206:	4640      	mov	r0, r8
 8008208:	4649      	mov	r1, r9
 800820a:	2200      	movs	r2, #0
 800820c:	f7f8 fa04 	bl	8000618 <__aeabi_dmul>
 8008210:	4b4a      	ldr	r3, [pc, #296]	; (800833c <_strtod_l+0x93c>)
 8008212:	400b      	ands	r3, r1
 8008214:	4680      	mov	r8, r0
 8008216:	4689      	mov	r9, r1
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f ae3f 	bne.w	8007e9c <_strtod_l+0x49c>
 800821e:	2322      	movs	r3, #34	; 0x22
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	e63b      	b.n	8007e9c <_strtod_l+0x49c>
 8008224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	ea03 0808 	and.w	r8, r3, r8
 8008230:	e6e8      	b.n	8008004 <_strtod_l+0x604>
 8008232:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008236:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800823a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800823e:	36e2      	adds	r6, #226	; 0xe2
 8008240:	fa01 f306 	lsl.w	r3, r1, r6
 8008244:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008248:	e748      	b.n	80080dc <_strtod_l+0x6dc>
 800824a:	2100      	movs	r1, #0
 800824c:	2301      	movs	r3, #1
 800824e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008252:	e743      	b.n	80080dc <_strtod_l+0x6dc>
 8008254:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008256:	4632      	mov	r2, r6
 8008258:	4620      	mov	r0, r4
 800825a:	f7ff f961 	bl	8007520 <__lshift>
 800825e:	9016      	str	r0, [sp, #88]	; 0x58
 8008260:	2800      	cmp	r0, #0
 8008262:	f47f af6b 	bne.w	800813c <_strtod_l+0x73c>
 8008266:	e60f      	b.n	8007e88 <_strtod_l+0x488>
 8008268:	46ca      	mov	sl, r9
 800826a:	d171      	bne.n	8008350 <_strtod_l+0x950>
 800826c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800826e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008272:	b352      	cbz	r2, 80082ca <_strtod_l+0x8ca>
 8008274:	4a33      	ldr	r2, [pc, #204]	; (8008344 <_strtod_l+0x944>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d12a      	bne.n	80082d0 <_strtod_l+0x8d0>
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	4641      	mov	r1, r8
 800827e:	b1fb      	cbz	r3, 80082c0 <_strtod_l+0x8c0>
 8008280:	4b2e      	ldr	r3, [pc, #184]	; (800833c <_strtod_l+0x93c>)
 8008282:	ea09 0303 	and.w	r3, r9, r3
 8008286:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800828a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800828e:	d81a      	bhi.n	80082c6 <_strtod_l+0x8c6>
 8008290:	0d1b      	lsrs	r3, r3, #20
 8008292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	4299      	cmp	r1, r3
 800829c:	d118      	bne.n	80082d0 <_strtod_l+0x8d0>
 800829e:	4b2a      	ldr	r3, [pc, #168]	; (8008348 <_strtod_l+0x948>)
 80082a0:	459a      	cmp	sl, r3
 80082a2:	d102      	bne.n	80082aa <_strtod_l+0x8aa>
 80082a4:	3101      	adds	r1, #1
 80082a6:	f43f adef 	beq.w	8007e88 <_strtod_l+0x488>
 80082aa:	4b24      	ldr	r3, [pc, #144]	; (800833c <_strtod_l+0x93c>)
 80082ac:	ea0a 0303 	and.w	r3, sl, r3
 80082b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80082b4:	f04f 0800 	mov.w	r8, #0
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1a2      	bne.n	8008204 <_strtod_l+0x804>
 80082be:	e5ed      	b.n	8007e9c <_strtod_l+0x49c>
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082c4:	e7e9      	b.n	800829a <_strtod_l+0x89a>
 80082c6:	4613      	mov	r3, r2
 80082c8:	e7e7      	b.n	800829a <_strtod_l+0x89a>
 80082ca:	ea53 0308 	orrs.w	r3, r3, r8
 80082ce:	d08a      	beq.n	80081e6 <_strtod_l+0x7e6>
 80082d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d2:	b1e3      	cbz	r3, 800830e <_strtod_l+0x90e>
 80082d4:	ea13 0f0a 	tst.w	r3, sl
 80082d8:	d0ee      	beq.n	80082b8 <_strtod_l+0x8b8>
 80082da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082dc:	9a04      	ldr	r2, [sp, #16]
 80082de:	4640      	mov	r0, r8
 80082e0:	4649      	mov	r1, r9
 80082e2:	b1c3      	cbz	r3, 8008316 <_strtod_l+0x916>
 80082e4:	f7ff fb6f 	bl	80079c6 <sulp>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	ec51 0b18 	vmov	r0, r1, d8
 80082f0:	f7f7 ffdc 	bl	80002ac <__adddf3>
 80082f4:	4680      	mov	r8, r0
 80082f6:	4689      	mov	r9, r1
 80082f8:	e7de      	b.n	80082b8 <_strtod_l+0x8b8>
 80082fa:	4013      	ands	r3, r2
 80082fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008300:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008304:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008308:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800830c:	e7d4      	b.n	80082b8 <_strtod_l+0x8b8>
 800830e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008310:	ea13 0f08 	tst.w	r3, r8
 8008314:	e7e0      	b.n	80082d8 <_strtod_l+0x8d8>
 8008316:	f7ff fb56 	bl	80079c6 <sulp>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	ec51 0b18 	vmov	r0, r1, d8
 8008322:	f7f7 ffc1 	bl	80002a8 <__aeabi_dsub>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4680      	mov	r8, r0
 800832c:	4689      	mov	r9, r1
 800832e:	f7f8 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008332:	2800      	cmp	r0, #0
 8008334:	d0c0      	beq.n	80082b8 <_strtod_l+0x8b8>
 8008336:	e618      	b.n	8007f6a <_strtod_l+0x56a>
 8008338:	fffffc02 	.word	0xfffffc02
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	39500000 	.word	0x39500000
 8008344:	000fffff 	.word	0x000fffff
 8008348:	7fefffff 	.word	0x7fefffff
 800834c:	08009cf8 	.word	0x08009cf8
 8008350:	4659      	mov	r1, fp
 8008352:	4628      	mov	r0, r5
 8008354:	f7ff fac0 	bl	80078d8 <__ratio>
 8008358:	ec57 6b10 	vmov	r6, r7, d0
 800835c:	ee10 0a10 	vmov	r0, s0
 8008360:	2200      	movs	r2, #0
 8008362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008366:	4639      	mov	r1, r7
 8008368:	f7f8 fbd2 	bl	8000b10 <__aeabi_dcmple>
 800836c:	2800      	cmp	r0, #0
 800836e:	d071      	beq.n	8008454 <_strtod_l+0xa54>
 8008370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d17c      	bne.n	8008470 <_strtod_l+0xa70>
 8008376:	f1b8 0f00 	cmp.w	r8, #0
 800837a:	d15a      	bne.n	8008432 <_strtod_l+0xa32>
 800837c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008380:	2b00      	cmp	r3, #0
 8008382:	d15d      	bne.n	8008440 <_strtod_l+0xa40>
 8008384:	4b90      	ldr	r3, [pc, #576]	; (80085c8 <_strtod_l+0xbc8>)
 8008386:	2200      	movs	r2, #0
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 fbb6 	bl	8000afc <__aeabi_dcmplt>
 8008390:	2800      	cmp	r0, #0
 8008392:	d15c      	bne.n	800844e <_strtod_l+0xa4e>
 8008394:	4630      	mov	r0, r6
 8008396:	4639      	mov	r1, r7
 8008398:	4b8c      	ldr	r3, [pc, #560]	; (80085cc <_strtod_l+0xbcc>)
 800839a:	2200      	movs	r2, #0
 800839c:	f7f8 f93c 	bl	8000618 <__aeabi_dmul>
 80083a0:	4606      	mov	r6, r0
 80083a2:	460f      	mov	r7, r1
 80083a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80083a8:	9606      	str	r6, [sp, #24]
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80083b4:	4b86      	ldr	r3, [pc, #536]	; (80085d0 <_strtod_l+0xbd0>)
 80083b6:	ea0a 0303 	and.w	r3, sl, r3
 80083ba:	930d      	str	r3, [sp, #52]	; 0x34
 80083bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083be:	4b85      	ldr	r3, [pc, #532]	; (80085d4 <_strtod_l+0xbd4>)
 80083c0:	429a      	cmp	r2, r3
 80083c2:	f040 8090 	bne.w	80084e6 <_strtod_l+0xae6>
 80083c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80083ca:	ec49 8b10 	vmov	d0, r8, r9
 80083ce:	f7ff f9b9 	bl	8007744 <__ulp>
 80083d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083d6:	ec51 0b10 	vmov	r0, r1, d0
 80083da:	f7f8 f91d 	bl	8000618 <__aeabi_dmul>
 80083de:	4642      	mov	r2, r8
 80083e0:	464b      	mov	r3, r9
 80083e2:	f7f7 ff63 	bl	80002ac <__adddf3>
 80083e6:	460b      	mov	r3, r1
 80083e8:	4979      	ldr	r1, [pc, #484]	; (80085d0 <_strtod_l+0xbd0>)
 80083ea:	4a7b      	ldr	r2, [pc, #492]	; (80085d8 <_strtod_l+0xbd8>)
 80083ec:	4019      	ands	r1, r3
 80083ee:	4291      	cmp	r1, r2
 80083f0:	4680      	mov	r8, r0
 80083f2:	d944      	bls.n	800847e <_strtod_l+0xa7e>
 80083f4:	ee18 2a90 	vmov	r2, s17
 80083f8:	4b78      	ldr	r3, [pc, #480]	; (80085dc <_strtod_l+0xbdc>)
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d104      	bne.n	8008408 <_strtod_l+0xa08>
 80083fe:	ee18 3a10 	vmov	r3, s16
 8008402:	3301      	adds	r3, #1
 8008404:	f43f ad40 	beq.w	8007e88 <_strtod_l+0x488>
 8008408:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80085dc <_strtod_l+0xbdc>
 800840c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008410:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008412:	4620      	mov	r0, r4
 8008414:	f7fe fe6a 	bl	80070ec <_Bfree>
 8008418:	9905      	ldr	r1, [sp, #20]
 800841a:	4620      	mov	r0, r4
 800841c:	f7fe fe66 	bl	80070ec <_Bfree>
 8008420:	4659      	mov	r1, fp
 8008422:	4620      	mov	r0, r4
 8008424:	f7fe fe62 	bl	80070ec <_Bfree>
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f7fe fe5e 	bl	80070ec <_Bfree>
 8008430:	e609      	b.n	8008046 <_strtod_l+0x646>
 8008432:	f1b8 0f01 	cmp.w	r8, #1
 8008436:	d103      	bne.n	8008440 <_strtod_l+0xa40>
 8008438:	f1b9 0f00 	cmp.w	r9, #0
 800843c:	f43f ad95 	beq.w	8007f6a <_strtod_l+0x56a>
 8008440:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008598 <_strtod_l+0xb98>
 8008444:	4f60      	ldr	r7, [pc, #384]	; (80085c8 <_strtod_l+0xbc8>)
 8008446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800844a:	2600      	movs	r6, #0
 800844c:	e7ae      	b.n	80083ac <_strtod_l+0x9ac>
 800844e:	4f5f      	ldr	r7, [pc, #380]	; (80085cc <_strtod_l+0xbcc>)
 8008450:	2600      	movs	r6, #0
 8008452:	e7a7      	b.n	80083a4 <_strtod_l+0x9a4>
 8008454:	4b5d      	ldr	r3, [pc, #372]	; (80085cc <_strtod_l+0xbcc>)
 8008456:	4630      	mov	r0, r6
 8008458:	4639      	mov	r1, r7
 800845a:	2200      	movs	r2, #0
 800845c:	f7f8 f8dc 	bl	8000618 <__aeabi_dmul>
 8008460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d09c      	beq.n	80083a4 <_strtod_l+0x9a4>
 800846a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800846e:	e79d      	b.n	80083ac <_strtod_l+0x9ac>
 8008470:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80085a0 <_strtod_l+0xba0>
 8008474:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008478:	ec57 6b17 	vmov	r6, r7, d7
 800847c:	e796      	b.n	80083ac <_strtod_l+0x9ac>
 800847e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	46ca      	mov	sl, r9
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1c2      	bne.n	8008410 <_strtod_l+0xa10>
 800848a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800848e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008490:	0d1b      	lsrs	r3, r3, #20
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	429a      	cmp	r2, r3
 8008496:	d1bb      	bne.n	8008410 <_strtod_l+0xa10>
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fc1c 	bl	8000cd8 <__aeabi_d2lz>
 80084a0:	f7f8 f88c 	bl	80005bc <__aeabi_l2d>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 fefc 	bl	80002a8 <__aeabi_dsub>
 80084b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084b6:	ea43 0308 	orr.w	r3, r3, r8
 80084ba:	4313      	orrs	r3, r2
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	d054      	beq.n	800856c <_strtod_l+0xb6c>
 80084c2:	a339      	add	r3, pc, #228	; (adr r3, 80085a8 <_strtod_l+0xba8>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f8 fb18 	bl	8000afc <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f47f ace5 	bne.w	8007e9c <_strtod_l+0x49c>
 80084d2:	a337      	add	r3, pc, #220	; (adr r3, 80085b0 <_strtod_l+0xbb0>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fb2c 	bl	8000b38 <__aeabi_dcmpgt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d095      	beq.n	8008410 <_strtod_l+0xa10>
 80084e4:	e4da      	b.n	8007e9c <_strtod_l+0x49c>
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	b333      	cbz	r3, 8008538 <_strtod_l+0xb38>
 80084ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084f0:	d822      	bhi.n	8008538 <_strtod_l+0xb38>
 80084f2:	a331      	add	r3, pc, #196	; (adr r3, 80085b8 <_strtod_l+0xbb8>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 fb08 	bl	8000b10 <__aeabi_dcmple>
 8008500:	b1a0      	cbz	r0, 800852c <_strtod_l+0xb2c>
 8008502:	4639      	mov	r1, r7
 8008504:	4630      	mov	r0, r6
 8008506:	f7f8 fb5f 	bl	8000bc8 <__aeabi_d2uiz>
 800850a:	2801      	cmp	r0, #1
 800850c:	bf38      	it	cc
 800850e:	2001      	movcc	r0, #1
 8008510:	f7f8 f808 	bl	8000524 <__aeabi_ui2d>
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	bb23      	cbnz	r3, 8008566 <_strtod_l+0xb66>
 800851c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008520:	9010      	str	r0, [sp, #64]	; 0x40
 8008522:	9311      	str	r3, [sp, #68]	; 0x44
 8008524:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008528:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800852c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800852e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008530:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800853c:	eeb0 0a48 	vmov.f32	s0, s16
 8008540:	eef0 0a68 	vmov.f32	s1, s17
 8008544:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008548:	f7ff f8fc 	bl	8007744 <__ulp>
 800854c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008550:	ec53 2b10 	vmov	r2, r3, d0
 8008554:	f7f8 f860 	bl	8000618 <__aeabi_dmul>
 8008558:	ec53 2b18 	vmov	r2, r3, d8
 800855c:	f7f7 fea6 	bl	80002ac <__adddf3>
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	e78d      	b.n	8008482 <_strtod_l+0xa82>
 8008566:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800856a:	e7db      	b.n	8008524 <_strtod_l+0xb24>
 800856c:	a314      	add	r3, pc, #80	; (adr r3, 80085c0 <_strtod_l+0xbc0>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 fac3 	bl	8000afc <__aeabi_dcmplt>
 8008576:	e7b3      	b.n	80084e0 <_strtod_l+0xae0>
 8008578:	2300      	movs	r3, #0
 800857a:	930a      	str	r3, [sp, #40]	; 0x28
 800857c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800857e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	f7ff ba7c 	b.w	8007a7e <_strtod_l+0x7e>
 8008586:	2a65      	cmp	r2, #101	; 0x65
 8008588:	f43f ab75 	beq.w	8007c76 <_strtod_l+0x276>
 800858c:	2a45      	cmp	r2, #69	; 0x45
 800858e:	f43f ab72 	beq.w	8007c76 <_strtod_l+0x276>
 8008592:	2301      	movs	r3, #1
 8008594:	f7ff bbaa 	b.w	8007cec <_strtod_l+0x2ec>
 8008598:	00000000 	.word	0x00000000
 800859c:	bff00000 	.word	0xbff00000
 80085a0:	00000000 	.word	0x00000000
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	94a03595 	.word	0x94a03595
 80085ac:	3fdfffff 	.word	0x3fdfffff
 80085b0:	35afe535 	.word	0x35afe535
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	ffc00000 	.word	0xffc00000
 80085bc:	41dfffff 	.word	0x41dfffff
 80085c0:	94a03595 	.word	0x94a03595
 80085c4:	3fcfffff 	.word	0x3fcfffff
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	3fe00000 	.word	0x3fe00000
 80085d0:	7ff00000 	.word	0x7ff00000
 80085d4:	7fe00000 	.word	0x7fe00000
 80085d8:	7c9fffff 	.word	0x7c9fffff
 80085dc:	7fefffff 	.word	0x7fefffff

080085e0 <_strtod_r>:
 80085e0:	4b01      	ldr	r3, [pc, #4]	; (80085e8 <_strtod_r+0x8>)
 80085e2:	f7ff ba0d 	b.w	8007a00 <_strtod_l>
 80085e6:	bf00      	nop
 80085e8:	2000007c 	.word	0x2000007c

080085ec <_strtol_l.constprop.0>:
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f2:	d001      	beq.n	80085f8 <_strtol_l.constprop.0+0xc>
 80085f4:	2b24      	cmp	r3, #36	; 0x24
 80085f6:	d906      	bls.n	8008606 <_strtol_l.constprop.0+0x1a>
 80085f8:	f7fd fd88 	bl	800610c <__errno>
 80085fc:	2316      	movs	r3, #22
 80085fe:	6003      	str	r3, [r0, #0]
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80086ec <_strtol_l.constprop.0+0x100>
 800860a:	460d      	mov	r5, r1
 800860c:	462e      	mov	r6, r5
 800860e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008612:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008616:	f017 0708 	ands.w	r7, r7, #8
 800861a:	d1f7      	bne.n	800860c <_strtol_l.constprop.0+0x20>
 800861c:	2c2d      	cmp	r4, #45	; 0x2d
 800861e:	d132      	bne.n	8008686 <_strtol_l.constprop.0+0x9a>
 8008620:	782c      	ldrb	r4, [r5, #0]
 8008622:	2701      	movs	r7, #1
 8008624:	1cb5      	adds	r5, r6, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d05b      	beq.n	80086e2 <_strtol_l.constprop.0+0xf6>
 800862a:	2b10      	cmp	r3, #16
 800862c:	d109      	bne.n	8008642 <_strtol_l.constprop.0+0x56>
 800862e:	2c30      	cmp	r4, #48	; 0x30
 8008630:	d107      	bne.n	8008642 <_strtol_l.constprop.0+0x56>
 8008632:	782c      	ldrb	r4, [r5, #0]
 8008634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008638:	2c58      	cmp	r4, #88	; 0x58
 800863a:	d14d      	bne.n	80086d8 <_strtol_l.constprop.0+0xec>
 800863c:	786c      	ldrb	r4, [r5, #1]
 800863e:	2310      	movs	r3, #16
 8008640:	3502      	adds	r5, #2
 8008642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800864a:	f04f 0e00 	mov.w	lr, #0
 800864e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008652:	4676      	mov	r6, lr
 8008654:	fb03 8a19 	mls	sl, r3, r9, r8
 8008658:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800865c:	f1bc 0f09 	cmp.w	ip, #9
 8008660:	d816      	bhi.n	8008690 <_strtol_l.constprop.0+0xa4>
 8008662:	4664      	mov	r4, ip
 8008664:	42a3      	cmp	r3, r4
 8008666:	dd24      	ble.n	80086b2 <_strtol_l.constprop.0+0xc6>
 8008668:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800866c:	d008      	beq.n	8008680 <_strtol_l.constprop.0+0x94>
 800866e:	45b1      	cmp	r9, r6
 8008670:	d31c      	bcc.n	80086ac <_strtol_l.constprop.0+0xc0>
 8008672:	d101      	bne.n	8008678 <_strtol_l.constprop.0+0x8c>
 8008674:	45a2      	cmp	sl, r4
 8008676:	db19      	blt.n	80086ac <_strtol_l.constprop.0+0xc0>
 8008678:	fb06 4603 	mla	r6, r6, r3, r4
 800867c:	f04f 0e01 	mov.w	lr, #1
 8008680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008684:	e7e8      	b.n	8008658 <_strtol_l.constprop.0+0x6c>
 8008686:	2c2b      	cmp	r4, #43	; 0x2b
 8008688:	bf04      	itt	eq
 800868a:	782c      	ldrbeq	r4, [r5, #0]
 800868c:	1cb5      	addeq	r5, r6, #2
 800868e:	e7ca      	b.n	8008626 <_strtol_l.constprop.0+0x3a>
 8008690:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008694:	f1bc 0f19 	cmp.w	ip, #25
 8008698:	d801      	bhi.n	800869e <_strtol_l.constprop.0+0xb2>
 800869a:	3c37      	subs	r4, #55	; 0x37
 800869c:	e7e2      	b.n	8008664 <_strtol_l.constprop.0+0x78>
 800869e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80086a2:	f1bc 0f19 	cmp.w	ip, #25
 80086a6:	d804      	bhi.n	80086b2 <_strtol_l.constprop.0+0xc6>
 80086a8:	3c57      	subs	r4, #87	; 0x57
 80086aa:	e7db      	b.n	8008664 <_strtol_l.constprop.0+0x78>
 80086ac:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80086b0:	e7e6      	b.n	8008680 <_strtol_l.constprop.0+0x94>
 80086b2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80086b6:	d105      	bne.n	80086c4 <_strtol_l.constprop.0+0xd8>
 80086b8:	2322      	movs	r3, #34	; 0x22
 80086ba:	6003      	str	r3, [r0, #0]
 80086bc:	4646      	mov	r6, r8
 80086be:	b942      	cbnz	r2, 80086d2 <_strtol_l.constprop.0+0xe6>
 80086c0:	4630      	mov	r0, r6
 80086c2:	e79e      	b.n	8008602 <_strtol_l.constprop.0+0x16>
 80086c4:	b107      	cbz	r7, 80086c8 <_strtol_l.constprop.0+0xdc>
 80086c6:	4276      	negs	r6, r6
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	d0f9      	beq.n	80086c0 <_strtol_l.constprop.0+0xd4>
 80086cc:	f1be 0f00 	cmp.w	lr, #0
 80086d0:	d000      	beq.n	80086d4 <_strtol_l.constprop.0+0xe8>
 80086d2:	1e69      	subs	r1, r5, #1
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	e7f3      	b.n	80086c0 <_strtol_l.constprop.0+0xd4>
 80086d8:	2430      	movs	r4, #48	; 0x30
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1b1      	bne.n	8008642 <_strtol_l.constprop.0+0x56>
 80086de:	2308      	movs	r3, #8
 80086e0:	e7af      	b.n	8008642 <_strtol_l.constprop.0+0x56>
 80086e2:	2c30      	cmp	r4, #48	; 0x30
 80086e4:	d0a5      	beq.n	8008632 <_strtol_l.constprop.0+0x46>
 80086e6:	230a      	movs	r3, #10
 80086e8:	e7ab      	b.n	8008642 <_strtol_l.constprop.0+0x56>
 80086ea:	bf00      	nop
 80086ec:	08009d21 	.word	0x08009d21

080086f0 <_strtol_r>:
 80086f0:	f7ff bf7c 	b.w	80085ec <_strtol_l.constprop.0>

080086f4 <__ssputs_r>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	688e      	ldr	r6, [r1, #8]
 80086fa:	461f      	mov	r7, r3
 80086fc:	42be      	cmp	r6, r7
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	4682      	mov	sl, r0
 8008702:	460c      	mov	r4, r1
 8008704:	4690      	mov	r8, r2
 8008706:	d82c      	bhi.n	8008762 <__ssputs_r+0x6e>
 8008708:	898a      	ldrh	r2, [r1, #12]
 800870a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800870e:	d026      	beq.n	800875e <__ssputs_r+0x6a>
 8008710:	6965      	ldr	r5, [r4, #20]
 8008712:	6909      	ldr	r1, [r1, #16]
 8008714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008718:	eba3 0901 	sub.w	r9, r3, r1
 800871c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008720:	1c7b      	adds	r3, r7, #1
 8008722:	444b      	add	r3, r9
 8008724:	106d      	asrs	r5, r5, #1
 8008726:	429d      	cmp	r5, r3
 8008728:	bf38      	it	cc
 800872a:	461d      	movcc	r5, r3
 800872c:	0553      	lsls	r3, r2, #21
 800872e:	d527      	bpl.n	8008780 <__ssputs_r+0x8c>
 8008730:	4629      	mov	r1, r5
 8008732:	f7fe fc0f 	bl	8006f54 <_malloc_r>
 8008736:	4606      	mov	r6, r0
 8008738:	b360      	cbz	r0, 8008794 <__ssputs_r+0xa0>
 800873a:	6921      	ldr	r1, [r4, #16]
 800873c:	464a      	mov	r2, r9
 800873e:	f000 fbe3 	bl	8008f08 <memcpy>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	6126      	str	r6, [r4, #16]
 8008750:	6165      	str	r5, [r4, #20]
 8008752:	444e      	add	r6, r9
 8008754:	eba5 0509 	sub.w	r5, r5, r9
 8008758:	6026      	str	r6, [r4, #0]
 800875a:	60a5      	str	r5, [r4, #8]
 800875c:	463e      	mov	r6, r7
 800875e:	42be      	cmp	r6, r7
 8008760:	d900      	bls.n	8008764 <__ssputs_r+0x70>
 8008762:	463e      	mov	r6, r7
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	4632      	mov	r2, r6
 8008768:	4641      	mov	r1, r8
 800876a:	f000 fb6f 	bl	8008e4c <memmove>
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	1b9b      	subs	r3, r3, r6
 8008772:	60a3      	str	r3, [r4, #8]
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	4433      	add	r3, r6
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	2000      	movs	r0, #0
 800877c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008780:	462a      	mov	r2, r5
 8008782:	f000 ff76 	bl	8009672 <_realloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	2800      	cmp	r0, #0
 800878a:	d1e0      	bne.n	800874e <__ssputs_r+0x5a>
 800878c:	6921      	ldr	r1, [r4, #16]
 800878e:	4650      	mov	r0, sl
 8008790:	f7fe fb6c 	bl	8006e6c <_free_r>
 8008794:	230c      	movs	r3, #12
 8008796:	f8ca 3000 	str.w	r3, [sl]
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a6:	e7e9      	b.n	800877c <__ssputs_r+0x88>

080087a8 <_svfiprintf_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4698      	mov	r8, r3
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	b09d      	sub	sp, #116	; 0x74
 80087b4:	4607      	mov	r7, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	d50e      	bpl.n	80087da <_svfiprintf_r+0x32>
 80087bc:	690b      	ldr	r3, [r1, #16]
 80087be:	b963      	cbnz	r3, 80087da <_svfiprintf_r+0x32>
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	f7fe fbc7 	bl	8006f54 <_malloc_r>
 80087c6:	6028      	str	r0, [r5, #0]
 80087c8:	6128      	str	r0, [r5, #16]
 80087ca:	b920      	cbnz	r0, 80087d6 <_svfiprintf_r+0x2e>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d4:	e0d0      	b.n	8008978 <_svfiprintf_r+0x1d0>
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	616b      	str	r3, [r5, #20]
 80087da:	2300      	movs	r3, #0
 80087dc:	9309      	str	r3, [sp, #36]	; 0x24
 80087de:	2320      	movs	r3, #32
 80087e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e8:	2330      	movs	r3, #48	; 0x30
 80087ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008990 <_svfiprintf_r+0x1e8>
 80087ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f2:	f04f 0901 	mov.w	r9, #1
 80087f6:	4623      	mov	r3, r4
 80087f8:	469a      	mov	sl, r3
 80087fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fe:	b10a      	cbz	r2, 8008804 <_svfiprintf_r+0x5c>
 8008800:	2a25      	cmp	r2, #37	; 0x25
 8008802:	d1f9      	bne.n	80087f8 <_svfiprintf_r+0x50>
 8008804:	ebba 0b04 	subs.w	fp, sl, r4
 8008808:	d00b      	beq.n	8008822 <_svfiprintf_r+0x7a>
 800880a:	465b      	mov	r3, fp
 800880c:	4622      	mov	r2, r4
 800880e:	4629      	mov	r1, r5
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff ff6f 	bl	80086f4 <__ssputs_r>
 8008816:	3001      	adds	r0, #1
 8008818:	f000 80a9 	beq.w	800896e <_svfiprintf_r+0x1c6>
 800881c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881e:	445a      	add	r2, fp
 8008820:	9209      	str	r2, [sp, #36]	; 0x24
 8008822:	f89a 3000 	ldrb.w	r3, [sl]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80a1 	beq.w	800896e <_svfiprintf_r+0x1c6>
 800882c:	2300      	movs	r3, #0
 800882e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008836:	f10a 0a01 	add.w	sl, sl, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	9307      	str	r3, [sp, #28]
 800883e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008842:	931a      	str	r3, [sp, #104]	; 0x68
 8008844:	4654      	mov	r4, sl
 8008846:	2205      	movs	r2, #5
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	4850      	ldr	r0, [pc, #320]	; (8008990 <_svfiprintf_r+0x1e8>)
 800884e:	f7f7 fccf 	bl	80001f0 <memchr>
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	b9d8      	cbnz	r0, 800888e <_svfiprintf_r+0xe6>
 8008856:	06d0      	lsls	r0, r2, #27
 8008858:	bf44      	itt	mi
 800885a:	2320      	movmi	r3, #32
 800885c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008860:	0711      	lsls	r1, r2, #28
 8008862:	bf44      	itt	mi
 8008864:	232b      	movmi	r3, #43	; 0x2b
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800886a:	f89a 3000 	ldrb.w	r3, [sl]
 800886e:	2b2a      	cmp	r3, #42	; 0x2a
 8008870:	d015      	beq.n	800889e <_svfiprintf_r+0xf6>
 8008872:	9a07      	ldr	r2, [sp, #28]
 8008874:	4654      	mov	r4, sl
 8008876:	2000      	movs	r0, #0
 8008878:	f04f 0c0a 	mov.w	ip, #10
 800887c:	4621      	mov	r1, r4
 800887e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008882:	3b30      	subs	r3, #48	; 0x30
 8008884:	2b09      	cmp	r3, #9
 8008886:	d94d      	bls.n	8008924 <_svfiprintf_r+0x17c>
 8008888:	b1b0      	cbz	r0, 80088b8 <_svfiprintf_r+0x110>
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	e014      	b.n	80088b8 <_svfiprintf_r+0x110>
 800888e:	eba0 0308 	sub.w	r3, r0, r8
 8008892:	fa09 f303 	lsl.w	r3, r9, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	46a2      	mov	sl, r4
 800889c:	e7d2      	b.n	8008844 <_svfiprintf_r+0x9c>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d19      	adds	r1, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9103      	str	r1, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfbb      	ittet	lt
 80088aa:	425b      	neglt	r3, r3
 80088ac:	f042 0202 	orrlt.w	r2, r2, #2
 80088b0:	9307      	strge	r3, [sp, #28]
 80088b2:	9307      	strlt	r3, [sp, #28]
 80088b4:	bfb8      	it	lt
 80088b6:	9204      	strlt	r2, [sp, #16]
 80088b8:	7823      	ldrb	r3, [r4, #0]
 80088ba:	2b2e      	cmp	r3, #46	; 0x2e
 80088bc:	d10c      	bne.n	80088d8 <_svfiprintf_r+0x130>
 80088be:	7863      	ldrb	r3, [r4, #1]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d134      	bne.n	800892e <_svfiprintf_r+0x186>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9203      	str	r2, [sp, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bfb8      	it	lt
 80088d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088d4:	3402      	adds	r4, #2
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089a0 <_svfiprintf_r+0x1f8>
 80088dc:	7821      	ldrb	r1, [r4, #0]
 80088de:	2203      	movs	r2, #3
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7f7 fc85 	bl	80001f0 <memchr>
 80088e6:	b138      	cbz	r0, 80088f8 <_svfiprintf_r+0x150>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	eba0 000a 	sub.w	r0, r0, sl
 80088ee:	2240      	movs	r2, #64	; 0x40
 80088f0:	4082      	lsls	r2, r0
 80088f2:	4313      	orrs	r3, r2
 80088f4:	3401      	adds	r4, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fc:	4825      	ldr	r0, [pc, #148]	; (8008994 <_svfiprintf_r+0x1ec>)
 80088fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008902:	2206      	movs	r2, #6
 8008904:	f7f7 fc74 	bl	80001f0 <memchr>
 8008908:	2800      	cmp	r0, #0
 800890a:	d038      	beq.n	800897e <_svfiprintf_r+0x1d6>
 800890c:	4b22      	ldr	r3, [pc, #136]	; (8008998 <_svfiprintf_r+0x1f0>)
 800890e:	bb1b      	cbnz	r3, 8008958 <_svfiprintf_r+0x1b0>
 8008910:	9b03      	ldr	r3, [sp, #12]
 8008912:	3307      	adds	r3, #7
 8008914:	f023 0307 	bic.w	r3, r3, #7
 8008918:	3308      	adds	r3, #8
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891e:	4433      	add	r3, r6
 8008920:	9309      	str	r3, [sp, #36]	; 0x24
 8008922:	e768      	b.n	80087f6 <_svfiprintf_r+0x4e>
 8008924:	fb0c 3202 	mla	r2, ip, r2, r3
 8008928:	460c      	mov	r4, r1
 800892a:	2001      	movs	r0, #1
 800892c:	e7a6      	b.n	800887c <_svfiprintf_r+0xd4>
 800892e:	2300      	movs	r3, #0
 8008930:	3401      	adds	r4, #1
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	4619      	mov	r1, r3
 8008936:	f04f 0c0a 	mov.w	ip, #10
 800893a:	4620      	mov	r0, r4
 800893c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008940:	3a30      	subs	r2, #48	; 0x30
 8008942:	2a09      	cmp	r2, #9
 8008944:	d903      	bls.n	800894e <_svfiprintf_r+0x1a6>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0c6      	beq.n	80088d8 <_svfiprintf_r+0x130>
 800894a:	9105      	str	r1, [sp, #20]
 800894c:	e7c4      	b.n	80088d8 <_svfiprintf_r+0x130>
 800894e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008952:	4604      	mov	r4, r0
 8008954:	2301      	movs	r3, #1
 8008956:	e7f0      	b.n	800893a <_svfiprintf_r+0x192>
 8008958:	ab03      	add	r3, sp, #12
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	462a      	mov	r2, r5
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <_svfiprintf_r+0x1f4>)
 8008960:	a904      	add	r1, sp, #16
 8008962:	4638      	mov	r0, r7
 8008964:	f7fc fb82 	bl	800506c <_printf_float>
 8008968:	1c42      	adds	r2, r0, #1
 800896a:	4606      	mov	r6, r0
 800896c:	d1d6      	bne.n	800891c <_svfiprintf_r+0x174>
 800896e:	89ab      	ldrh	r3, [r5, #12]
 8008970:	065b      	lsls	r3, r3, #25
 8008972:	f53f af2d 	bmi.w	80087d0 <_svfiprintf_r+0x28>
 8008976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008978:	b01d      	add	sp, #116	; 0x74
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	ab03      	add	r3, sp, #12
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	462a      	mov	r2, r5
 8008984:	4b05      	ldr	r3, [pc, #20]	; (800899c <_svfiprintf_r+0x1f4>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	4638      	mov	r0, r7
 800898a:	f7fc fe13 	bl	80055b4 <_printf_i>
 800898e:	e7eb      	b.n	8008968 <_svfiprintf_r+0x1c0>
 8008990:	08009e21 	.word	0x08009e21
 8008994:	08009e2b 	.word	0x08009e2b
 8008998:	0800506d 	.word	0x0800506d
 800899c:	080086f5 	.word	0x080086f5
 80089a0:	08009e27 	.word	0x08009e27

080089a4 <__sfputc_r>:
 80089a4:	6893      	ldr	r3, [r2, #8]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	b410      	push	{r4}
 80089ac:	6093      	str	r3, [r2, #8]
 80089ae:	da08      	bge.n	80089c2 <__sfputc_r+0x1e>
 80089b0:	6994      	ldr	r4, [r2, #24]
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	db01      	blt.n	80089ba <__sfputc_r+0x16>
 80089b6:	290a      	cmp	r1, #10
 80089b8:	d103      	bne.n	80089c2 <__sfputc_r+0x1e>
 80089ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089be:	f7fd babe 	b.w	8005f3e <__swbuf_r>
 80089c2:	6813      	ldr	r3, [r2, #0]
 80089c4:	1c58      	adds	r0, r3, #1
 80089c6:	6010      	str	r0, [r2, #0]
 80089c8:	7019      	strb	r1, [r3, #0]
 80089ca:	4608      	mov	r0, r1
 80089cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <__sfputs_r>:
 80089d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	18d5      	adds	r5, r2, r3
 80089dc:	42ac      	cmp	r4, r5
 80089de:	d101      	bne.n	80089e4 <__sfputs_r+0x12>
 80089e0:	2000      	movs	r0, #0
 80089e2:	e007      	b.n	80089f4 <__sfputs_r+0x22>
 80089e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e8:	463a      	mov	r2, r7
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff ffda 	bl	80089a4 <__sfputc_r>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d1f3      	bne.n	80089dc <__sfputs_r+0xa>
 80089f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089f8 <_vfiprintf_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	460d      	mov	r5, r1
 80089fe:	b09d      	sub	sp, #116	; 0x74
 8008a00:	4614      	mov	r4, r2
 8008a02:	4698      	mov	r8, r3
 8008a04:	4606      	mov	r6, r0
 8008a06:	b118      	cbz	r0, 8008a10 <_vfiprintf_r+0x18>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <_vfiprintf_r+0x18>
 8008a0c:	f7fd f990 	bl	8005d30 <__sinit>
 8008a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a12:	07d9      	lsls	r1, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1e:	f7fd fba0 	bl	8006162 <__retarget_lock_acquire_recursive>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	d501      	bpl.n	8008a2c <_vfiprintf_r+0x34>
 8008a28:	692b      	ldr	r3, [r5, #16]
 8008a2a:	b99b      	cbnz	r3, 8008a54 <_vfiprintf_r+0x5c>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7fd fac2 	bl	8005fb8 <__swsetup_r>
 8008a34:	b170      	cbz	r0, 8008a54 <_vfiprintf_r+0x5c>
 8008a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a38:	07dc      	lsls	r4, r3, #31
 8008a3a:	d504      	bpl.n	8008a46 <_vfiprintf_r+0x4e>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a40:	b01d      	add	sp, #116	; 0x74
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d4f7      	bmi.n	8008a3c <_vfiprintf_r+0x44>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4e:	f7fd fb89 	bl	8006164 <__retarget_lock_release_recursive>
 8008a52:	e7f3      	b.n	8008a3c <_vfiprintf_r+0x44>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a62:	2330      	movs	r3, #48	; 0x30
 8008a64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c18 <_vfiprintf_r+0x220>
 8008a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a6c:	f04f 0901 	mov.w	r9, #1
 8008a70:	4623      	mov	r3, r4
 8008a72:	469a      	mov	sl, r3
 8008a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a78:	b10a      	cbz	r2, 8008a7e <_vfiprintf_r+0x86>
 8008a7a:	2a25      	cmp	r2, #37	; 0x25
 8008a7c:	d1f9      	bne.n	8008a72 <_vfiprintf_r+0x7a>
 8008a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a82:	d00b      	beq.n	8008a9c <_vfiprintf_r+0xa4>
 8008a84:	465b      	mov	r3, fp
 8008a86:	4622      	mov	r2, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffa1 	bl	80089d2 <__sfputs_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	f000 80a9 	beq.w	8008be8 <_vfiprintf_r+0x1f0>
 8008a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a98:	445a      	add	r2, fp
 8008a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80a1 	beq.w	8008be8 <_vfiprintf_r+0x1f0>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	f10a 0a01 	add.w	sl, sl, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008abc:	931a      	str	r3, [sp, #104]	; 0x68
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4854      	ldr	r0, [pc, #336]	; (8008c18 <_vfiprintf_r+0x220>)
 8008ac8:	f7f7 fb92 	bl	80001f0 <memchr>
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	b9d8      	cbnz	r0, 8008b08 <_vfiprintf_r+0x110>
 8008ad0:	06d1      	lsls	r1, r2, #27
 8008ad2:	bf44      	itt	mi
 8008ad4:	2320      	movmi	r3, #32
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ada:	0713      	lsls	r3, r2, #28
 8008adc:	bf44      	itt	mi
 8008ade:	232b      	movmi	r3, #43	; 0x2b
 8008ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aea:	d015      	beq.n	8008b18 <_vfiprintf_r+0x120>
 8008aec:	9a07      	ldr	r2, [sp, #28]
 8008aee:	4654      	mov	r4, sl
 8008af0:	2000      	movs	r0, #0
 8008af2:	f04f 0c0a 	mov.w	ip, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afc:	3b30      	subs	r3, #48	; 0x30
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d94d      	bls.n	8008b9e <_vfiprintf_r+0x1a6>
 8008b02:	b1b0      	cbz	r0, 8008b32 <_vfiprintf_r+0x13a>
 8008b04:	9207      	str	r2, [sp, #28]
 8008b06:	e014      	b.n	8008b32 <_vfiprintf_r+0x13a>
 8008b08:	eba0 0308 	sub.w	r3, r0, r8
 8008b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	46a2      	mov	sl, r4
 8008b16:	e7d2      	b.n	8008abe <_vfiprintf_r+0xc6>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d19      	adds	r1, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfbb      	ittet	lt
 8008b24:	425b      	neglt	r3, r3
 8008b26:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2a:	9307      	strge	r3, [sp, #28]
 8008b2c:	9307      	strlt	r3, [sp, #28]
 8008b2e:	bfb8      	it	lt
 8008b30:	9204      	strlt	r2, [sp, #16]
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	2b2e      	cmp	r3, #46	; 0x2e
 8008b36:	d10c      	bne.n	8008b52 <_vfiprintf_r+0x15a>
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3c:	d134      	bne.n	8008ba8 <_vfiprintf_r+0x1b0>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9203      	str	r2, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfb8      	it	lt
 8008b4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b4e:	3402      	adds	r4, #2
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c28 <_vfiprintf_r+0x230>
 8008b56:	7821      	ldrb	r1, [r4, #0]
 8008b58:	2203      	movs	r2, #3
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7f7 fb48 	bl	80001f0 <memchr>
 8008b60:	b138      	cbz	r0, 8008b72 <_vfiprintf_r+0x17a>
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	eba0 000a 	sub.w	r0, r0, sl
 8008b68:	2240      	movs	r2, #64	; 0x40
 8008b6a:	4082      	lsls	r2, r0
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	3401      	adds	r4, #1
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b76:	4829      	ldr	r0, [pc, #164]	; (8008c1c <_vfiprintf_r+0x224>)
 8008b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b7c:	2206      	movs	r2, #6
 8008b7e:	f7f7 fb37 	bl	80001f0 <memchr>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d03f      	beq.n	8008c06 <_vfiprintf_r+0x20e>
 8008b86:	4b26      	ldr	r3, [pc, #152]	; (8008c20 <_vfiprintf_r+0x228>)
 8008b88:	bb1b      	cbnz	r3, 8008bd2 <_vfiprintf_r+0x1da>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	3307      	adds	r3, #7
 8008b8e:	f023 0307 	bic.w	r3, r3, #7
 8008b92:	3308      	adds	r3, #8
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b98:	443b      	add	r3, r7
 8008b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9c:	e768      	b.n	8008a70 <_vfiprintf_r+0x78>
 8008b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	e7a6      	b.n	8008af6 <_vfiprintf_r+0xfe>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	3401      	adds	r4, #1
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f04f 0c0a 	mov.w	ip, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bba:	3a30      	subs	r2, #48	; 0x30
 8008bbc:	2a09      	cmp	r2, #9
 8008bbe:	d903      	bls.n	8008bc8 <_vfiprintf_r+0x1d0>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0c6      	beq.n	8008b52 <_vfiprintf_r+0x15a>
 8008bc4:	9105      	str	r1, [sp, #20]
 8008bc6:	e7c4      	b.n	8008b52 <_vfiprintf_r+0x15a>
 8008bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bcc:	4604      	mov	r4, r0
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e7f0      	b.n	8008bb4 <_vfiprintf_r+0x1bc>
 8008bd2:	ab03      	add	r3, sp, #12
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <_vfiprintf_r+0x22c>)
 8008bda:	a904      	add	r1, sp, #16
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7fc fa45 	bl	800506c <_printf_float>
 8008be2:	4607      	mov	r7, r0
 8008be4:	1c78      	adds	r0, r7, #1
 8008be6:	d1d6      	bne.n	8008b96 <_vfiprintf_r+0x19e>
 8008be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	d405      	bmi.n	8008bfa <_vfiprintf_r+0x202>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	059a      	lsls	r2, r3, #22
 8008bf2:	d402      	bmi.n	8008bfa <_vfiprintf_r+0x202>
 8008bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf6:	f7fd fab5 	bl	8006164 <__retarget_lock_release_recursive>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	065b      	lsls	r3, r3, #25
 8008bfe:	f53f af1d 	bmi.w	8008a3c <_vfiprintf_r+0x44>
 8008c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c04:	e71c      	b.n	8008a40 <_vfiprintf_r+0x48>
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <_vfiprintf_r+0x22c>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7fc fccf 	bl	80055b4 <_printf_i>
 8008c16:	e7e4      	b.n	8008be2 <_vfiprintf_r+0x1ea>
 8008c18:	08009e21 	.word	0x08009e21
 8008c1c:	08009e2b 	.word	0x08009e2b
 8008c20:	0800506d 	.word	0x0800506d
 8008c24:	080089d3 	.word	0x080089d3
 8008c28:	08009e27 	.word	0x08009e27

08008c2c <__sflush_r>:
 8008c2c:	898a      	ldrh	r2, [r1, #12]
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	0710      	lsls	r0, r2, #28
 8008c36:	460c      	mov	r4, r1
 8008c38:	d458      	bmi.n	8008cec <__sflush_r+0xc0>
 8008c3a:	684b      	ldr	r3, [r1, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc05      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d0f9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	6a21      	ldr	r1, [r4, #32]
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	d032      	beq.n	8008cc6 <__sflush_r+0x9a>
 8008c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	075a      	lsls	r2, r3, #29
 8008c66:	d505      	bpl.n	8008c74 <__sflush_r+0x48>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	1ac0      	subs	r0, r0, r3
 8008c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6e:	b10b      	cbz	r3, 8008c74 <__sflush_r+0x48>
 8008c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c72:	1ac0      	subs	r0, r0, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	4602      	mov	r2, r0
 8008c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c7a:	6a21      	ldr	r1, [r4, #32]
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b0      	blx	r6
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	d106      	bne.n	8008c94 <__sflush_r+0x68>
 8008c86:	6829      	ldr	r1, [r5, #0]
 8008c88:	291d      	cmp	r1, #29
 8008c8a:	d82b      	bhi.n	8008ce4 <__sflush_r+0xb8>
 8008c8c:	4a29      	ldr	r2, [pc, #164]	; (8008d34 <__sflush_r+0x108>)
 8008c8e:	410a      	asrs	r2, r1
 8008c90:	07d6      	lsls	r6, r2, #31
 8008c92:	d427      	bmi.n	8008ce4 <__sflush_r+0xb8>
 8008c94:	2200      	movs	r2, #0
 8008c96:	6062      	str	r2, [r4, #4]
 8008c98:	04d9      	lsls	r1, r3, #19
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	6022      	str	r2, [r4, #0]
 8008c9e:	d504      	bpl.n	8008caa <__sflush_r+0x7e>
 8008ca0:	1c42      	adds	r2, r0, #1
 8008ca2:	d101      	bne.n	8008ca8 <__sflush_r+0x7c>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b903      	cbnz	r3, 8008caa <__sflush_r+0x7e>
 8008ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8008caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cac:	602f      	str	r7, [r5, #0]
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d0c9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb6:	4299      	cmp	r1, r3
 8008cb8:	d002      	beq.n	8008cc0 <__sflush_r+0x94>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7fe f8d6 	bl	8006e6c <_free_r>
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc4:	e7c0      	b.n	8008c48 <__sflush_r+0x1c>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b0      	blx	r6
 8008ccc:	1c41      	adds	r1, r0, #1
 8008cce:	d1c8      	bne.n	8008c62 <__sflush_r+0x36>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c5      	beq.n	8008c62 <__sflush_r+0x36>
 8008cd6:	2b1d      	cmp	r3, #29
 8008cd8:	d001      	beq.n	8008cde <__sflush_r+0xb2>
 8008cda:	2b16      	cmp	r3, #22
 8008cdc:	d101      	bne.n	8008ce2 <__sflush_r+0xb6>
 8008cde:	602f      	str	r7, [r5, #0]
 8008ce0:	e7b1      	b.n	8008c46 <__sflush_r+0x1a>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7ad      	b.n	8008c48 <__sflush_r+0x1c>
 8008cec:	690f      	ldr	r7, [r1, #16]
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	d0a9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cf2:	0793      	lsls	r3, r2, #30
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	bf08      	it	eq
 8008cf8:	694b      	ldreq	r3, [r1, #20]
 8008cfa:	600f      	str	r7, [r1, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2300      	movne	r3, #0
 8008d00:	eba6 0807 	sub.w	r8, r6, r7
 8008d04:	608b      	str	r3, [r1, #8]
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	dd9c      	ble.n	8008c46 <__sflush_r+0x1a>
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d10:	4643      	mov	r3, r8
 8008d12:	463a      	mov	r2, r7
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b0      	blx	r6
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc06      	bgt.n	8008d2a <__sflush_r+0xfe>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d28:	e78e      	b.n	8008c48 <__sflush_r+0x1c>
 8008d2a:	4407      	add	r7, r0
 8008d2c:	eba8 0800 	sub.w	r8, r8, r0
 8008d30:	e7e9      	b.n	8008d06 <__sflush_r+0xda>
 8008d32:	bf00      	nop
 8008d34:	dfbffffe 	.word	0xdfbffffe

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6a03      	ldr	r3, [r0, #32]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f7fc ffef 	bl	8005d30 <__sinit>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f3      	beq.n	8008d42 <_fflush_r+0xa>
 8008d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d5c:	07d0      	lsls	r0, r2, #31
 8008d5e:	d404      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d60:	0599      	lsls	r1, r3, #22
 8008d62:	d402      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d66:	f7fd f9fc 	bl	8006162 <__retarget_lock_acquire_recursive>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f7ff ff5d 	bl	8008c2c <__sflush_r>
 8008d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d74:	07da      	lsls	r2, r3, #31
 8008d76:	4605      	mov	r5, r0
 8008d78:	d4e4      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	059b      	lsls	r3, r3, #22
 8008d7e:	d4e1      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d82:	f7fd f9ef 	bl	8006164 <__retarget_lock_release_recursive>
 8008d86:	e7dd      	b.n	8008d44 <_fflush_r+0xc>

08008d88 <__swhatbuf_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	b096      	sub	sp, #88	; 0x58
 8008d94:	4615      	mov	r5, r2
 8008d96:	461e      	mov	r6, r3
 8008d98:	da0d      	bge.n	8008db6 <__swhatbuf_r+0x2e>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008da0:	f04f 0100 	mov.w	r1, #0
 8008da4:	bf0c      	ite	eq
 8008da6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008daa:	2340      	movne	r3, #64	; 0x40
 8008dac:	2000      	movs	r0, #0
 8008dae:	6031      	str	r1, [r6, #0]
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	b016      	add	sp, #88	; 0x58
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	466a      	mov	r2, sp
 8008db8:	f000 f874 	bl	8008ea4 <_fstat_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	dbec      	blt.n	8008d9a <__swhatbuf_r+0x12>
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008dc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008dca:	4259      	negs	r1, r3
 8008dcc:	4159      	adcs	r1, r3
 8008dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dd2:	e7eb      	b.n	8008dac <__swhatbuf_r+0x24>

08008dd4 <__smakebuf_r>:
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dd8:	079d      	lsls	r5, r3, #30
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	d507      	bpl.n	8008df0 <__smakebuf_r+0x1c>
 8008de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	2301      	movs	r3, #1
 8008dea:	6163      	str	r3, [r4, #20]
 8008dec:	b002      	add	sp, #8
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	ab01      	add	r3, sp, #4
 8008df2:	466a      	mov	r2, sp
 8008df4:	f7ff ffc8 	bl	8008d88 <__swhatbuf_r>
 8008df8:	9900      	ldr	r1, [sp, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7fe f8a9 	bl	8006f54 <_malloc_r>
 8008e02:	b948      	cbnz	r0, 8008e18 <__smakebuf_r+0x44>
 8008e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e08:	059a      	lsls	r2, r3, #22
 8008e0a:	d4ef      	bmi.n	8008dec <__smakebuf_r+0x18>
 8008e0c:	f023 0303 	bic.w	r3, r3, #3
 8008e10:	f043 0302 	orr.w	r3, r3, #2
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	e7e3      	b.n	8008de0 <__smakebuf_r+0xc>
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	6020      	str	r0, [r4, #0]
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	6163      	str	r3, [r4, #20]
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	6120      	str	r0, [r4, #16]
 8008e2a:	b15b      	cbz	r3, 8008e44 <__smakebuf_r+0x70>
 8008e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f849 	bl	8008ec8 <_isatty_r>
 8008e36:	b128      	cbz	r0, 8008e44 <__smakebuf_r+0x70>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	431d      	orrs	r5, r3
 8008e48:	81a5      	strh	r5, [r4, #12]
 8008e4a:	e7cf      	b.n	8008dec <__smakebuf_r+0x18>

08008e4c <memmove>:
 8008e4c:	4288      	cmp	r0, r1
 8008e4e:	b510      	push	{r4, lr}
 8008e50:	eb01 0402 	add.w	r4, r1, r2
 8008e54:	d902      	bls.n	8008e5c <memmove+0x10>
 8008e56:	4284      	cmp	r4, r0
 8008e58:	4623      	mov	r3, r4
 8008e5a:	d807      	bhi.n	8008e6c <memmove+0x20>
 8008e5c:	1e43      	subs	r3, r0, #1
 8008e5e:	42a1      	cmp	r1, r4
 8008e60:	d008      	beq.n	8008e74 <memmove+0x28>
 8008e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e6a:	e7f8      	b.n	8008e5e <memmove+0x12>
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4601      	mov	r1, r0
 8008e70:	428a      	cmp	r2, r1
 8008e72:	d100      	bne.n	8008e76 <memmove+0x2a>
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e7e:	e7f7      	b.n	8008e70 <memmove+0x24>

08008e80 <strncmp>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	b16a      	cbz	r2, 8008ea0 <strncmp+0x20>
 8008e84:	3901      	subs	r1, #1
 8008e86:	1884      	adds	r4, r0, r2
 8008e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d103      	bne.n	8008e9c <strncmp+0x1c>
 8008e94:	42a0      	cmp	r0, r4
 8008e96:	d001      	beq.n	8008e9c <strncmp+0x1c>
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	d1f5      	bne.n	8008e88 <strncmp+0x8>
 8008e9c:	1ad0      	subs	r0, r2, r3
 8008e9e:	bd10      	pop	{r4, pc}
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	e7fc      	b.n	8008e9e <strncmp+0x1e>

08008ea4 <_fstat_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_fstat_r+0x20>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	602b      	str	r3, [r5, #0]
 8008eb2:	f7f9 fa42 	bl	800233a <_fstat>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d102      	bne.n	8008ec0 <_fstat_r+0x1c>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	b103      	cbz	r3, 8008ec0 <_fstat_r+0x1c>
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000480 	.word	0x20000480

08008ec8 <_isatty_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	; (8008ee4 <_isatty_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f9 fa41 	bl	800235a <_isatty>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_isatty_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_isatty_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20000480 	.word	0x20000480

08008ee8 <_sbrk_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_sbrk_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f9 fa4a 	bl	800238c <_sbrk>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_sbrk_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_sbrk_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20000480 	.word	0x20000480

08008f08 <memcpy>:
 8008f08:	440a      	add	r2, r1
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f10:	d100      	bne.n	8008f14 <memcpy+0xc>
 8008f12:	4770      	bx	lr
 8008f14:	b510      	push	{r4, lr}
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f1e:	4291      	cmp	r1, r2
 8008f20:	d1f9      	bne.n	8008f16 <memcpy+0xe>
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	0000      	movs	r0, r0
	...

08008f28 <nan>:
 8008f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f30 <nan+0x8>
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	00000000 	.word	0x00000000
 8008f34:	7ff80000 	.word	0x7ff80000

08008f38 <__assert_func>:
 8008f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <__assert_func+0x2c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	68d8      	ldr	r0, [r3, #12]
 8008f46:	b14c      	cbz	r4, 8008f5c <__assert_func+0x24>
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <__assert_func+0x30>)
 8008f4a:	9100      	str	r1, [sp, #0]
 8008f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f50:	4906      	ldr	r1, [pc, #24]	; (8008f6c <__assert_func+0x34>)
 8008f52:	462b      	mov	r3, r5
 8008f54:	f000 fbca 	bl	80096ec <fiprintf>
 8008f58:	f000 fbda 	bl	8009710 <abort>
 8008f5c:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <__assert_func+0x38>)
 8008f5e:	461c      	mov	r4, r3
 8008f60:	e7f3      	b.n	8008f4a <__assert_func+0x12>
 8008f62:	bf00      	nop
 8008f64:	20000078 	.word	0x20000078
 8008f68:	08009e3a 	.word	0x08009e3a
 8008f6c:	08009e47 	.word	0x08009e47
 8008f70:	08009e75 	.word	0x08009e75

08008f74 <_calloc_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	fba1 2402 	umull	r2, r4, r1, r2
 8008f7a:	b94c      	cbnz	r4, 8008f90 <_calloc_r+0x1c>
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	9201      	str	r2, [sp, #4]
 8008f80:	f7fd ffe8 	bl	8006f54 <_malloc_r>
 8008f84:	9a01      	ldr	r2, [sp, #4]
 8008f86:	4605      	mov	r5, r0
 8008f88:	b930      	cbnz	r0, 8008f98 <_calloc_r+0x24>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	b003      	add	sp, #12
 8008f8e:	bd30      	pop	{r4, r5, pc}
 8008f90:	220c      	movs	r2, #12
 8008f92:	6002      	str	r2, [r0, #0]
 8008f94:	2500      	movs	r5, #0
 8008f96:	e7f8      	b.n	8008f8a <_calloc_r+0x16>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7fd f865 	bl	8006068 <memset>
 8008f9e:	e7f4      	b.n	8008f8a <_calloc_r+0x16>

08008fa0 <rshift>:
 8008fa0:	6903      	ldr	r3, [r0, #16]
 8008fa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008faa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fae:	f100 0414 	add.w	r4, r0, #20
 8008fb2:	dd45      	ble.n	8009040 <rshift+0xa0>
 8008fb4:	f011 011f 	ands.w	r1, r1, #31
 8008fb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fc0:	d10c      	bne.n	8008fdc <rshift+0x3c>
 8008fc2:	f100 0710 	add.w	r7, r0, #16
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	42b1      	cmp	r1, r6
 8008fca:	d334      	bcc.n	8009036 <rshift+0x96>
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	1eea      	subs	r2, r5, #3
 8008fd2:	4296      	cmp	r6, r2
 8008fd4:	bf38      	it	cc
 8008fd6:	2300      	movcc	r3, #0
 8008fd8:	4423      	add	r3, r4
 8008fda:	e015      	b.n	8009008 <rshift+0x68>
 8008fdc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008fe0:	f1c1 0820 	rsb	r8, r1, #32
 8008fe4:	40cf      	lsrs	r7, r1
 8008fe6:	f105 0e04 	add.w	lr, r5, #4
 8008fea:	46a1      	mov	r9, r4
 8008fec:	4576      	cmp	r6, lr
 8008fee:	46f4      	mov	ip, lr
 8008ff0:	d815      	bhi.n	800901e <rshift+0x7e>
 8008ff2:	1a9a      	subs	r2, r3, r2
 8008ff4:	0092      	lsls	r2, r2, #2
 8008ff6:	3a04      	subs	r2, #4
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	42ae      	cmp	r6, r5
 8008ffc:	bf38      	it	cc
 8008ffe:	2200      	movcc	r2, #0
 8009000:	18a3      	adds	r3, r4, r2
 8009002:	50a7      	str	r7, [r4, r2]
 8009004:	b107      	cbz	r7, 8009008 <rshift+0x68>
 8009006:	3304      	adds	r3, #4
 8009008:	1b1a      	subs	r2, r3, r4
 800900a:	42a3      	cmp	r3, r4
 800900c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009010:	bf08      	it	eq
 8009012:	2300      	moveq	r3, #0
 8009014:	6102      	str	r2, [r0, #16]
 8009016:	bf08      	it	eq
 8009018:	6143      	streq	r3, [r0, #20]
 800901a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800901e:	f8dc c000 	ldr.w	ip, [ip]
 8009022:	fa0c fc08 	lsl.w	ip, ip, r8
 8009026:	ea4c 0707 	orr.w	r7, ip, r7
 800902a:	f849 7b04 	str.w	r7, [r9], #4
 800902e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009032:	40cf      	lsrs	r7, r1
 8009034:	e7da      	b.n	8008fec <rshift+0x4c>
 8009036:	f851 cb04 	ldr.w	ip, [r1], #4
 800903a:	f847 cf04 	str.w	ip, [r7, #4]!
 800903e:	e7c3      	b.n	8008fc8 <rshift+0x28>
 8009040:	4623      	mov	r3, r4
 8009042:	e7e1      	b.n	8009008 <rshift+0x68>

08009044 <__hexdig_fun>:
 8009044:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009048:	2b09      	cmp	r3, #9
 800904a:	d802      	bhi.n	8009052 <__hexdig_fun+0xe>
 800904c:	3820      	subs	r0, #32
 800904e:	b2c0      	uxtb	r0, r0
 8009050:	4770      	bx	lr
 8009052:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009056:	2b05      	cmp	r3, #5
 8009058:	d801      	bhi.n	800905e <__hexdig_fun+0x1a>
 800905a:	3847      	subs	r0, #71	; 0x47
 800905c:	e7f7      	b.n	800904e <__hexdig_fun+0xa>
 800905e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009062:	2b05      	cmp	r3, #5
 8009064:	d801      	bhi.n	800906a <__hexdig_fun+0x26>
 8009066:	3827      	subs	r0, #39	; 0x27
 8009068:	e7f1      	b.n	800904e <__hexdig_fun+0xa>
 800906a:	2000      	movs	r0, #0
 800906c:	4770      	bx	lr
	...

08009070 <__gethex>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	4617      	mov	r7, r2
 8009076:	680a      	ldr	r2, [r1, #0]
 8009078:	b085      	sub	sp, #20
 800907a:	f102 0b02 	add.w	fp, r2, #2
 800907e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009082:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009086:	4681      	mov	r9, r0
 8009088:	468a      	mov	sl, r1
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	32fe      	adds	r2, #254	; 0xfe
 800908e:	eb02 030b 	add.w	r3, r2, fp
 8009092:	46d8      	mov	r8, fp
 8009094:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	2830      	cmp	r0, #48	; 0x30
 800909c:	d0f7      	beq.n	800908e <__gethex+0x1e>
 800909e:	f7ff ffd1 	bl	8009044 <__hexdig_fun>
 80090a2:	4604      	mov	r4, r0
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d138      	bne.n	800911a <__gethex+0xaa>
 80090a8:	49a7      	ldr	r1, [pc, #668]	; (8009348 <__gethex+0x2d8>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	4640      	mov	r0, r8
 80090ae:	f7ff fee7 	bl	8008e80 <strncmp>
 80090b2:	4606      	mov	r6, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d169      	bne.n	800918c <__gethex+0x11c>
 80090b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80090bc:	465d      	mov	r5, fp
 80090be:	f7ff ffc1 	bl	8009044 <__hexdig_fun>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d064      	beq.n	8009190 <__gethex+0x120>
 80090c6:	465a      	mov	r2, fp
 80090c8:	7810      	ldrb	r0, [r2, #0]
 80090ca:	2830      	cmp	r0, #48	; 0x30
 80090cc:	4690      	mov	r8, r2
 80090ce:	f102 0201 	add.w	r2, r2, #1
 80090d2:	d0f9      	beq.n	80090c8 <__gethex+0x58>
 80090d4:	f7ff ffb6 	bl	8009044 <__hexdig_fun>
 80090d8:	2301      	movs	r3, #1
 80090da:	fab0 f480 	clz	r4, r0
 80090de:	0964      	lsrs	r4, r4, #5
 80090e0:	465e      	mov	r6, fp
 80090e2:	9301      	str	r3, [sp, #4]
 80090e4:	4642      	mov	r2, r8
 80090e6:	4615      	mov	r5, r2
 80090e8:	3201      	adds	r2, #1
 80090ea:	7828      	ldrb	r0, [r5, #0]
 80090ec:	f7ff ffaa 	bl	8009044 <__hexdig_fun>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d1f8      	bne.n	80090e6 <__gethex+0x76>
 80090f4:	4994      	ldr	r1, [pc, #592]	; (8009348 <__gethex+0x2d8>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7ff fec1 	bl	8008e80 <strncmp>
 80090fe:	b978      	cbnz	r0, 8009120 <__gethex+0xb0>
 8009100:	b946      	cbnz	r6, 8009114 <__gethex+0xa4>
 8009102:	1c6e      	adds	r6, r5, #1
 8009104:	4632      	mov	r2, r6
 8009106:	4615      	mov	r5, r2
 8009108:	3201      	adds	r2, #1
 800910a:	7828      	ldrb	r0, [r5, #0]
 800910c:	f7ff ff9a 	bl	8009044 <__hexdig_fun>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1f8      	bne.n	8009106 <__gethex+0x96>
 8009114:	1b73      	subs	r3, r6, r5
 8009116:	009e      	lsls	r6, r3, #2
 8009118:	e004      	b.n	8009124 <__gethex+0xb4>
 800911a:	2400      	movs	r4, #0
 800911c:	4626      	mov	r6, r4
 800911e:	e7e1      	b.n	80090e4 <__gethex+0x74>
 8009120:	2e00      	cmp	r6, #0
 8009122:	d1f7      	bne.n	8009114 <__gethex+0xa4>
 8009124:	782b      	ldrb	r3, [r5, #0]
 8009126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800912a:	2b50      	cmp	r3, #80	; 0x50
 800912c:	d13d      	bne.n	80091aa <__gethex+0x13a>
 800912e:	786b      	ldrb	r3, [r5, #1]
 8009130:	2b2b      	cmp	r3, #43	; 0x2b
 8009132:	d02f      	beq.n	8009194 <__gethex+0x124>
 8009134:	2b2d      	cmp	r3, #45	; 0x2d
 8009136:	d031      	beq.n	800919c <__gethex+0x12c>
 8009138:	1c69      	adds	r1, r5, #1
 800913a:	f04f 0b00 	mov.w	fp, #0
 800913e:	7808      	ldrb	r0, [r1, #0]
 8009140:	f7ff ff80 	bl	8009044 <__hexdig_fun>
 8009144:	1e42      	subs	r2, r0, #1
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	2a18      	cmp	r2, #24
 800914a:	d82e      	bhi.n	80091aa <__gethex+0x13a>
 800914c:	f1a0 0210 	sub.w	r2, r0, #16
 8009150:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009154:	f7ff ff76 	bl	8009044 <__hexdig_fun>
 8009158:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800915c:	fa5f fc8c 	uxtb.w	ip, ip
 8009160:	f1bc 0f18 	cmp.w	ip, #24
 8009164:	d91d      	bls.n	80091a2 <__gethex+0x132>
 8009166:	f1bb 0f00 	cmp.w	fp, #0
 800916a:	d000      	beq.n	800916e <__gethex+0xfe>
 800916c:	4252      	negs	r2, r2
 800916e:	4416      	add	r6, r2
 8009170:	f8ca 1000 	str.w	r1, [sl]
 8009174:	b1dc      	cbz	r4, 80091ae <__gethex+0x13e>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bf14      	ite	ne
 800917c:	f04f 0800 	movne.w	r8, #0
 8009180:	f04f 0806 	moveq.w	r8, #6
 8009184:	4640      	mov	r0, r8
 8009186:	b005      	add	sp, #20
 8009188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918c:	4645      	mov	r5, r8
 800918e:	4626      	mov	r6, r4
 8009190:	2401      	movs	r4, #1
 8009192:	e7c7      	b.n	8009124 <__gethex+0xb4>
 8009194:	f04f 0b00 	mov.w	fp, #0
 8009198:	1ca9      	adds	r1, r5, #2
 800919a:	e7d0      	b.n	800913e <__gethex+0xce>
 800919c:	f04f 0b01 	mov.w	fp, #1
 80091a0:	e7fa      	b.n	8009198 <__gethex+0x128>
 80091a2:	230a      	movs	r3, #10
 80091a4:	fb03 0002 	mla	r0, r3, r2, r0
 80091a8:	e7d0      	b.n	800914c <__gethex+0xdc>
 80091aa:	4629      	mov	r1, r5
 80091ac:	e7e0      	b.n	8009170 <__gethex+0x100>
 80091ae:	eba5 0308 	sub.w	r3, r5, r8
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4621      	mov	r1, r4
 80091b6:	2b07      	cmp	r3, #7
 80091b8:	dc0a      	bgt.n	80091d0 <__gethex+0x160>
 80091ba:	4648      	mov	r0, r9
 80091bc:	f7fd ff56 	bl	800706c <_Balloc>
 80091c0:	4604      	mov	r4, r0
 80091c2:	b940      	cbnz	r0, 80091d6 <__gethex+0x166>
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <__gethex+0x2dc>)
 80091c6:	4602      	mov	r2, r0
 80091c8:	21e4      	movs	r1, #228	; 0xe4
 80091ca:	4861      	ldr	r0, [pc, #388]	; (8009350 <__gethex+0x2e0>)
 80091cc:	f7ff feb4 	bl	8008f38 <__assert_func>
 80091d0:	3101      	adds	r1, #1
 80091d2:	105b      	asrs	r3, r3, #1
 80091d4:	e7ef      	b.n	80091b6 <__gethex+0x146>
 80091d6:	f100 0a14 	add.w	sl, r0, #20
 80091da:	2300      	movs	r3, #0
 80091dc:	495a      	ldr	r1, [pc, #360]	; (8009348 <__gethex+0x2d8>)
 80091de:	f8cd a004 	str.w	sl, [sp, #4]
 80091e2:	469b      	mov	fp, r3
 80091e4:	45a8      	cmp	r8, r5
 80091e6:	d342      	bcc.n	800926e <__gethex+0x1fe>
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	f840 bb04 	str.w	fp, [r0], #4
 80091ee:	eba0 000a 	sub.w	r0, r0, sl
 80091f2:	1080      	asrs	r0, r0, #2
 80091f4:	6120      	str	r0, [r4, #16]
 80091f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80091fa:	4658      	mov	r0, fp
 80091fc:	f7fe f828 	bl	8007250 <__hi0bits>
 8009200:	683d      	ldr	r5, [r7, #0]
 8009202:	eba8 0000 	sub.w	r0, r8, r0
 8009206:	42a8      	cmp	r0, r5
 8009208:	dd59      	ble.n	80092be <__gethex+0x24e>
 800920a:	eba0 0805 	sub.w	r8, r0, r5
 800920e:	4641      	mov	r1, r8
 8009210:	4620      	mov	r0, r4
 8009212:	f7fe fbb7 	bl	8007984 <__any_on>
 8009216:	4683      	mov	fp, r0
 8009218:	b1b8      	cbz	r0, 800924a <__gethex+0x1da>
 800921a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800921e:	1159      	asrs	r1, r3, #5
 8009220:	f003 021f 	and.w	r2, r3, #31
 8009224:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009228:	f04f 0b01 	mov.w	fp, #1
 800922c:	fa0b f202 	lsl.w	r2, fp, r2
 8009230:	420a      	tst	r2, r1
 8009232:	d00a      	beq.n	800924a <__gethex+0x1da>
 8009234:	455b      	cmp	r3, fp
 8009236:	dd06      	ble.n	8009246 <__gethex+0x1d6>
 8009238:	f1a8 0102 	sub.w	r1, r8, #2
 800923c:	4620      	mov	r0, r4
 800923e:	f7fe fba1 	bl	8007984 <__any_on>
 8009242:	2800      	cmp	r0, #0
 8009244:	d138      	bne.n	80092b8 <__gethex+0x248>
 8009246:	f04f 0b02 	mov.w	fp, #2
 800924a:	4641      	mov	r1, r8
 800924c:	4620      	mov	r0, r4
 800924e:	f7ff fea7 	bl	8008fa0 <rshift>
 8009252:	4446      	add	r6, r8
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	42b3      	cmp	r3, r6
 8009258:	da41      	bge.n	80092de <__gethex+0x26e>
 800925a:	4621      	mov	r1, r4
 800925c:	4648      	mov	r0, r9
 800925e:	f7fd ff45 	bl	80070ec <_Bfree>
 8009262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009264:	2300      	movs	r3, #0
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800926c:	e78a      	b.n	8009184 <__gethex+0x114>
 800926e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009272:	2a2e      	cmp	r2, #46	; 0x2e
 8009274:	d014      	beq.n	80092a0 <__gethex+0x230>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d106      	bne.n	8009288 <__gethex+0x218>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	f843 bb04 	str.w	fp, [r3], #4
 8009280:	f04f 0b00 	mov.w	fp, #0
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	465b      	mov	r3, fp
 8009288:	7828      	ldrb	r0, [r5, #0]
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	f7ff feda 	bl	8009044 <__hexdig_fun>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	f000 000f 	and.w	r0, r0, #15
 8009296:	4098      	lsls	r0, r3
 8009298:	ea4b 0b00 	orr.w	fp, fp, r0
 800929c:	3304      	adds	r3, #4
 800929e:	e7a1      	b.n	80091e4 <__gethex+0x174>
 80092a0:	45a8      	cmp	r8, r5
 80092a2:	d8e8      	bhi.n	8009276 <__gethex+0x206>
 80092a4:	2201      	movs	r2, #1
 80092a6:	4628      	mov	r0, r5
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	f7ff fde9 	bl	8008e80 <strncmp>
 80092ae:	4926      	ldr	r1, [pc, #152]	; (8009348 <__gethex+0x2d8>)
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1df      	bne.n	8009276 <__gethex+0x206>
 80092b6:	e795      	b.n	80091e4 <__gethex+0x174>
 80092b8:	f04f 0b03 	mov.w	fp, #3
 80092bc:	e7c5      	b.n	800924a <__gethex+0x1da>
 80092be:	da0b      	bge.n	80092d8 <__gethex+0x268>
 80092c0:	eba5 0800 	sub.w	r8, r5, r0
 80092c4:	4621      	mov	r1, r4
 80092c6:	4642      	mov	r2, r8
 80092c8:	4648      	mov	r0, r9
 80092ca:	f7fe f929 	bl	8007520 <__lshift>
 80092ce:	eba6 0608 	sub.w	r6, r6, r8
 80092d2:	4604      	mov	r4, r0
 80092d4:	f100 0a14 	add.w	sl, r0, #20
 80092d8:	f04f 0b00 	mov.w	fp, #0
 80092dc:	e7ba      	b.n	8009254 <__gethex+0x1e4>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	42b3      	cmp	r3, r6
 80092e2:	dd73      	ble.n	80093cc <__gethex+0x35c>
 80092e4:	1b9e      	subs	r6, r3, r6
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	dc34      	bgt.n	8009354 <__gethex+0x2e4>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d023      	beq.n	8009338 <__gethex+0x2c8>
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d025      	beq.n	8009340 <__gethex+0x2d0>
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d115      	bne.n	8009324 <__gethex+0x2b4>
 80092f8:	42b5      	cmp	r5, r6
 80092fa:	d113      	bne.n	8009324 <__gethex+0x2b4>
 80092fc:	2d01      	cmp	r5, #1
 80092fe:	d10b      	bne.n	8009318 <__gethex+0x2a8>
 8009300:	9a02      	ldr	r2, [sp, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	2301      	movs	r3, #1
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	f8ca 3000 	str.w	r3, [sl]
 800930e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009310:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009314:	601c      	str	r4, [r3, #0]
 8009316:	e735      	b.n	8009184 <__gethex+0x114>
 8009318:	1e69      	subs	r1, r5, #1
 800931a:	4620      	mov	r0, r4
 800931c:	f7fe fb32 	bl	8007984 <__any_on>
 8009320:	2800      	cmp	r0, #0
 8009322:	d1ed      	bne.n	8009300 <__gethex+0x290>
 8009324:	4621      	mov	r1, r4
 8009326:	4648      	mov	r0, r9
 8009328:	f7fd fee0 	bl	80070ec <_Bfree>
 800932c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800932e:	2300      	movs	r3, #0
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009336:	e725      	b.n	8009184 <__gethex+0x114>
 8009338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f2      	bne.n	8009324 <__gethex+0x2b4>
 800933e:	e7df      	b.n	8009300 <__gethex+0x290>
 8009340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1dc      	bne.n	8009300 <__gethex+0x290>
 8009346:	e7ed      	b.n	8009324 <__gethex+0x2b4>
 8009348:	08009ccc 	.word	0x08009ccc
 800934c:	08009b65 	.word	0x08009b65
 8009350:	08009e76 	.word	0x08009e76
 8009354:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009358:	f1bb 0f00 	cmp.w	fp, #0
 800935c:	d133      	bne.n	80093c6 <__gethex+0x356>
 800935e:	f1b8 0f00 	cmp.w	r8, #0
 8009362:	d004      	beq.n	800936e <__gethex+0x2fe>
 8009364:	4641      	mov	r1, r8
 8009366:	4620      	mov	r0, r4
 8009368:	f7fe fb0c 	bl	8007984 <__any_on>
 800936c:	4683      	mov	fp, r0
 800936e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009372:	2301      	movs	r3, #1
 8009374:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009378:	f008 081f 	and.w	r8, r8, #31
 800937c:	fa03 f308 	lsl.w	r3, r3, r8
 8009380:	4213      	tst	r3, r2
 8009382:	4631      	mov	r1, r6
 8009384:	4620      	mov	r0, r4
 8009386:	bf18      	it	ne
 8009388:	f04b 0b02 	orrne.w	fp, fp, #2
 800938c:	1bad      	subs	r5, r5, r6
 800938e:	f7ff fe07 	bl	8008fa0 <rshift>
 8009392:	687e      	ldr	r6, [r7, #4]
 8009394:	f04f 0802 	mov.w	r8, #2
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	d04a      	beq.n	8009434 <__gethex+0x3c4>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d016      	beq.n	80093d2 <__gethex+0x362>
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d018      	beq.n	80093da <__gethex+0x36a>
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d109      	bne.n	80093c0 <__gethex+0x350>
 80093ac:	f01b 0f02 	tst.w	fp, #2
 80093b0:	d006      	beq.n	80093c0 <__gethex+0x350>
 80093b2:	f8da 3000 	ldr.w	r3, [sl]
 80093b6:	ea4b 0b03 	orr.w	fp, fp, r3
 80093ba:	f01b 0f01 	tst.w	fp, #1
 80093be:	d10f      	bne.n	80093e0 <__gethex+0x370>
 80093c0:	f048 0810 	orr.w	r8, r8, #16
 80093c4:	e036      	b.n	8009434 <__gethex+0x3c4>
 80093c6:	f04f 0b01 	mov.w	fp, #1
 80093ca:	e7d0      	b.n	800936e <__gethex+0x2fe>
 80093cc:	f04f 0801 	mov.w	r8, #1
 80093d0:	e7e2      	b.n	8009398 <__gethex+0x328>
 80093d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d4:	f1c3 0301 	rsb	r3, r3, #1
 80093d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ef      	beq.n	80093c0 <__gethex+0x350>
 80093e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093e4:	f104 0214 	add.w	r2, r4, #20
 80093e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80093f2:	2300      	movs	r3, #0
 80093f4:	4694      	mov	ip, r2
 80093f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80093fa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80093fe:	d01e      	beq.n	800943e <__gethex+0x3ce>
 8009400:	3101      	adds	r1, #1
 8009402:	f8cc 1000 	str.w	r1, [ip]
 8009406:	f1b8 0f02 	cmp.w	r8, #2
 800940a:	f104 0214 	add.w	r2, r4, #20
 800940e:	d13d      	bne.n	800948c <__gethex+0x41c>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	42ab      	cmp	r3, r5
 8009416:	d10b      	bne.n	8009430 <__gethex+0x3c0>
 8009418:	1169      	asrs	r1, r5, #5
 800941a:	2301      	movs	r3, #1
 800941c:	f005 051f 	and.w	r5, r5, #31
 8009420:	fa03 f505 	lsl.w	r5, r3, r5
 8009424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009428:	421d      	tst	r5, r3
 800942a:	bf18      	it	ne
 800942c:	f04f 0801 	movne.w	r8, #1
 8009430:	f048 0820 	orr.w	r8, r8, #32
 8009434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009436:	601c      	str	r4, [r3, #0]
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	601e      	str	r6, [r3, #0]
 800943c:	e6a2      	b.n	8009184 <__gethex+0x114>
 800943e:	4290      	cmp	r0, r2
 8009440:	f842 3c04 	str.w	r3, [r2, #-4]
 8009444:	d8d6      	bhi.n	80093f4 <__gethex+0x384>
 8009446:	68a2      	ldr	r2, [r4, #8]
 8009448:	4593      	cmp	fp, r2
 800944a:	db17      	blt.n	800947c <__gethex+0x40c>
 800944c:	6861      	ldr	r1, [r4, #4]
 800944e:	4648      	mov	r0, r9
 8009450:	3101      	adds	r1, #1
 8009452:	f7fd fe0b 	bl	800706c <_Balloc>
 8009456:	4682      	mov	sl, r0
 8009458:	b918      	cbnz	r0, 8009462 <__gethex+0x3f2>
 800945a:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <__gethex+0x458>)
 800945c:	4602      	mov	r2, r0
 800945e:	2184      	movs	r1, #132	; 0x84
 8009460:	e6b3      	b.n	80091ca <__gethex+0x15a>
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	3202      	adds	r2, #2
 8009466:	f104 010c 	add.w	r1, r4, #12
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	300c      	adds	r0, #12
 800946e:	f7ff fd4b 	bl	8008f08 <memcpy>
 8009472:	4621      	mov	r1, r4
 8009474:	4648      	mov	r0, r9
 8009476:	f7fd fe39 	bl	80070ec <_Bfree>
 800947a:	4654      	mov	r4, sl
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	1c51      	adds	r1, r2, #1
 8009480:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009484:	6121      	str	r1, [r4, #16]
 8009486:	2101      	movs	r1, #1
 8009488:	6151      	str	r1, [r2, #20]
 800948a:	e7bc      	b.n	8009406 <__gethex+0x396>
 800948c:	6921      	ldr	r1, [r4, #16]
 800948e:	4559      	cmp	r1, fp
 8009490:	dd0b      	ble.n	80094aa <__gethex+0x43a>
 8009492:	2101      	movs	r1, #1
 8009494:	4620      	mov	r0, r4
 8009496:	f7ff fd83 	bl	8008fa0 <rshift>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3601      	adds	r6, #1
 800949e:	42b3      	cmp	r3, r6
 80094a0:	f6ff aedb 	blt.w	800925a <__gethex+0x1ea>
 80094a4:	f04f 0801 	mov.w	r8, #1
 80094a8:	e7c2      	b.n	8009430 <__gethex+0x3c0>
 80094aa:	f015 051f 	ands.w	r5, r5, #31
 80094ae:	d0f9      	beq.n	80094a4 <__gethex+0x434>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	441a      	add	r2, r3
 80094b4:	f1c5 0520 	rsb	r5, r5, #32
 80094b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80094bc:	f7fd fec8 	bl	8007250 <__hi0bits>
 80094c0:	42a8      	cmp	r0, r5
 80094c2:	dbe6      	blt.n	8009492 <__gethex+0x422>
 80094c4:	e7ee      	b.n	80094a4 <__gethex+0x434>
 80094c6:	bf00      	nop
 80094c8:	08009b65 	.word	0x08009b65

080094cc <L_shift>:
 80094cc:	f1c2 0208 	rsb	r2, r2, #8
 80094d0:	0092      	lsls	r2, r2, #2
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	f1c2 0620 	rsb	r6, r2, #32
 80094d8:	6843      	ldr	r3, [r0, #4]
 80094da:	6804      	ldr	r4, [r0, #0]
 80094dc:	fa03 f506 	lsl.w	r5, r3, r6
 80094e0:	432c      	orrs	r4, r5
 80094e2:	40d3      	lsrs	r3, r2
 80094e4:	6004      	str	r4, [r0, #0]
 80094e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ea:	4288      	cmp	r0, r1
 80094ec:	d3f4      	bcc.n	80094d8 <L_shift+0xc>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}

080094f0 <__match>:
 80094f0:	b530      	push	{r4, r5, lr}
 80094f2:	6803      	ldr	r3, [r0, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fa:	b914      	cbnz	r4, 8009502 <__match+0x12>
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	2001      	movs	r0, #1
 8009500:	bd30      	pop	{r4, r5, pc}
 8009502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800950a:	2d19      	cmp	r5, #25
 800950c:	bf98      	it	ls
 800950e:	3220      	addls	r2, #32
 8009510:	42a2      	cmp	r2, r4
 8009512:	d0f0      	beq.n	80094f6 <__match+0x6>
 8009514:	2000      	movs	r0, #0
 8009516:	e7f3      	b.n	8009500 <__match+0x10>

08009518 <__hexnan>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	680b      	ldr	r3, [r1, #0]
 800951e:	6801      	ldr	r1, [r0, #0]
 8009520:	115e      	asrs	r6, r3, #5
 8009522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009526:	f013 031f 	ands.w	r3, r3, #31
 800952a:	b087      	sub	sp, #28
 800952c:	bf18      	it	ne
 800952e:	3604      	addne	r6, #4
 8009530:	2500      	movs	r5, #0
 8009532:	1f37      	subs	r7, r6, #4
 8009534:	4682      	mov	sl, r0
 8009536:	4690      	mov	r8, r2
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	f846 5c04 	str.w	r5, [r6, #-4]
 800953e:	46b9      	mov	r9, r7
 8009540:	463c      	mov	r4, r7
 8009542:	9502      	str	r5, [sp, #8]
 8009544:	46ab      	mov	fp, r5
 8009546:	784a      	ldrb	r2, [r1, #1]
 8009548:	1c4b      	adds	r3, r1, #1
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	b342      	cbz	r2, 80095a0 <__hexnan+0x88>
 800954e:	4610      	mov	r0, r2
 8009550:	9105      	str	r1, [sp, #20]
 8009552:	9204      	str	r2, [sp, #16]
 8009554:	f7ff fd76 	bl	8009044 <__hexdig_fun>
 8009558:	2800      	cmp	r0, #0
 800955a:	d14f      	bne.n	80095fc <__hexnan+0xe4>
 800955c:	9a04      	ldr	r2, [sp, #16]
 800955e:	9905      	ldr	r1, [sp, #20]
 8009560:	2a20      	cmp	r2, #32
 8009562:	d818      	bhi.n	8009596 <__hexnan+0x7e>
 8009564:	9b02      	ldr	r3, [sp, #8]
 8009566:	459b      	cmp	fp, r3
 8009568:	dd13      	ble.n	8009592 <__hexnan+0x7a>
 800956a:	454c      	cmp	r4, r9
 800956c:	d206      	bcs.n	800957c <__hexnan+0x64>
 800956e:	2d07      	cmp	r5, #7
 8009570:	dc04      	bgt.n	800957c <__hexnan+0x64>
 8009572:	462a      	mov	r2, r5
 8009574:	4649      	mov	r1, r9
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff ffa8 	bl	80094cc <L_shift>
 800957c:	4544      	cmp	r4, r8
 800957e:	d950      	bls.n	8009622 <__hexnan+0x10a>
 8009580:	2300      	movs	r3, #0
 8009582:	f1a4 0904 	sub.w	r9, r4, #4
 8009586:	f844 3c04 	str.w	r3, [r4, #-4]
 800958a:	f8cd b008 	str.w	fp, [sp, #8]
 800958e:	464c      	mov	r4, r9
 8009590:	461d      	mov	r5, r3
 8009592:	9903      	ldr	r1, [sp, #12]
 8009594:	e7d7      	b.n	8009546 <__hexnan+0x2e>
 8009596:	2a29      	cmp	r2, #41	; 0x29
 8009598:	d155      	bne.n	8009646 <__hexnan+0x12e>
 800959a:	3102      	adds	r1, #2
 800959c:	f8ca 1000 	str.w	r1, [sl]
 80095a0:	f1bb 0f00 	cmp.w	fp, #0
 80095a4:	d04f      	beq.n	8009646 <__hexnan+0x12e>
 80095a6:	454c      	cmp	r4, r9
 80095a8:	d206      	bcs.n	80095b8 <__hexnan+0xa0>
 80095aa:	2d07      	cmp	r5, #7
 80095ac:	dc04      	bgt.n	80095b8 <__hexnan+0xa0>
 80095ae:	462a      	mov	r2, r5
 80095b0:	4649      	mov	r1, r9
 80095b2:	4620      	mov	r0, r4
 80095b4:	f7ff ff8a 	bl	80094cc <L_shift>
 80095b8:	4544      	cmp	r4, r8
 80095ba:	d934      	bls.n	8009626 <__hexnan+0x10e>
 80095bc:	f1a8 0204 	sub.w	r2, r8, #4
 80095c0:	4623      	mov	r3, r4
 80095c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80095c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80095ca:	429f      	cmp	r7, r3
 80095cc:	d2f9      	bcs.n	80095c2 <__hexnan+0xaa>
 80095ce:	1b3b      	subs	r3, r7, r4
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	3304      	adds	r3, #4
 80095d6:	3e03      	subs	r6, #3
 80095d8:	3401      	adds	r4, #1
 80095da:	42a6      	cmp	r6, r4
 80095dc:	bf38      	it	cc
 80095de:	2304      	movcc	r3, #4
 80095e0:	4443      	add	r3, r8
 80095e2:	2200      	movs	r2, #0
 80095e4:	f843 2b04 	str.w	r2, [r3], #4
 80095e8:	429f      	cmp	r7, r3
 80095ea:	d2fb      	bcs.n	80095e4 <__hexnan+0xcc>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	b91b      	cbnz	r3, 80095f8 <__hexnan+0xe0>
 80095f0:	4547      	cmp	r7, r8
 80095f2:	d126      	bne.n	8009642 <__hexnan+0x12a>
 80095f4:	2301      	movs	r3, #1
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	2005      	movs	r0, #5
 80095fa:	e025      	b.n	8009648 <__hexnan+0x130>
 80095fc:	3501      	adds	r5, #1
 80095fe:	2d08      	cmp	r5, #8
 8009600:	f10b 0b01 	add.w	fp, fp, #1
 8009604:	dd06      	ble.n	8009614 <__hexnan+0xfc>
 8009606:	4544      	cmp	r4, r8
 8009608:	d9c3      	bls.n	8009592 <__hexnan+0x7a>
 800960a:	2300      	movs	r3, #0
 800960c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009610:	2501      	movs	r5, #1
 8009612:	3c04      	subs	r4, #4
 8009614:	6822      	ldr	r2, [r4, #0]
 8009616:	f000 000f 	and.w	r0, r0, #15
 800961a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	e7b7      	b.n	8009592 <__hexnan+0x7a>
 8009622:	2508      	movs	r5, #8
 8009624:	e7b5      	b.n	8009592 <__hexnan+0x7a>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0df      	beq.n	80095ec <__hexnan+0xd4>
 800962c:	f1c3 0320 	rsb	r3, r3, #32
 8009630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009634:	40da      	lsrs	r2, r3
 8009636:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800963a:	4013      	ands	r3, r2
 800963c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009640:	e7d4      	b.n	80095ec <__hexnan+0xd4>
 8009642:	3f04      	subs	r7, #4
 8009644:	e7d2      	b.n	80095ec <__hexnan+0xd4>
 8009646:	2004      	movs	r0, #4
 8009648:	b007      	add	sp, #28
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800964e <__ascii_mbtowc>:
 800964e:	b082      	sub	sp, #8
 8009650:	b901      	cbnz	r1, 8009654 <__ascii_mbtowc+0x6>
 8009652:	a901      	add	r1, sp, #4
 8009654:	b142      	cbz	r2, 8009668 <__ascii_mbtowc+0x1a>
 8009656:	b14b      	cbz	r3, 800966c <__ascii_mbtowc+0x1e>
 8009658:	7813      	ldrb	r3, [r2, #0]
 800965a:	600b      	str	r3, [r1, #0]
 800965c:	7812      	ldrb	r2, [r2, #0]
 800965e:	1e10      	subs	r0, r2, #0
 8009660:	bf18      	it	ne
 8009662:	2001      	movne	r0, #1
 8009664:	b002      	add	sp, #8
 8009666:	4770      	bx	lr
 8009668:	4610      	mov	r0, r2
 800966a:	e7fb      	b.n	8009664 <__ascii_mbtowc+0x16>
 800966c:	f06f 0001 	mvn.w	r0, #1
 8009670:	e7f8      	b.n	8009664 <__ascii_mbtowc+0x16>

08009672 <_realloc_r>:
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	4680      	mov	r8, r0
 8009678:	4614      	mov	r4, r2
 800967a:	460e      	mov	r6, r1
 800967c:	b921      	cbnz	r1, 8009688 <_realloc_r+0x16>
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	4611      	mov	r1, r2
 8009684:	f7fd bc66 	b.w	8006f54 <_malloc_r>
 8009688:	b92a      	cbnz	r2, 8009696 <_realloc_r+0x24>
 800968a:	f7fd fbef 	bl	8006e6c <_free_r>
 800968e:	4625      	mov	r5, r4
 8009690:	4628      	mov	r0, r5
 8009692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009696:	f000 f842 	bl	800971e <_malloc_usable_size_r>
 800969a:	4284      	cmp	r4, r0
 800969c:	4607      	mov	r7, r0
 800969e:	d802      	bhi.n	80096a6 <_realloc_r+0x34>
 80096a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096a4:	d812      	bhi.n	80096cc <_realloc_r+0x5a>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4640      	mov	r0, r8
 80096aa:	f7fd fc53 	bl	8006f54 <_malloc_r>
 80096ae:	4605      	mov	r5, r0
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0ed      	beq.n	8009690 <_realloc_r+0x1e>
 80096b4:	42bc      	cmp	r4, r7
 80096b6:	4622      	mov	r2, r4
 80096b8:	4631      	mov	r1, r6
 80096ba:	bf28      	it	cs
 80096bc:	463a      	movcs	r2, r7
 80096be:	f7ff fc23 	bl	8008f08 <memcpy>
 80096c2:	4631      	mov	r1, r6
 80096c4:	4640      	mov	r0, r8
 80096c6:	f7fd fbd1 	bl	8006e6c <_free_r>
 80096ca:	e7e1      	b.n	8009690 <_realloc_r+0x1e>
 80096cc:	4635      	mov	r5, r6
 80096ce:	e7df      	b.n	8009690 <_realloc_r+0x1e>

080096d0 <__ascii_wctomb>:
 80096d0:	b149      	cbz	r1, 80096e6 <__ascii_wctomb+0x16>
 80096d2:	2aff      	cmp	r2, #255	; 0xff
 80096d4:	bf85      	ittet	hi
 80096d6:	238a      	movhi	r3, #138	; 0x8a
 80096d8:	6003      	strhi	r3, [r0, #0]
 80096da:	700a      	strbls	r2, [r1, #0]
 80096dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096e0:	bf98      	it	ls
 80096e2:	2001      	movls	r0, #1
 80096e4:	4770      	bx	lr
 80096e6:	4608      	mov	r0, r1
 80096e8:	4770      	bx	lr
	...

080096ec <fiprintf>:
 80096ec:	b40e      	push	{r1, r2, r3}
 80096ee:	b503      	push	{r0, r1, lr}
 80096f0:	4601      	mov	r1, r0
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	4805      	ldr	r0, [pc, #20]	; (800970c <fiprintf+0x20>)
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	f7ff f97b 	bl	80089f8 <_vfiprintf_r>
 8009702:	b002      	add	sp, #8
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b003      	add	sp, #12
 800970a:	4770      	bx	lr
 800970c:	20000078 	.word	0x20000078

08009710 <abort>:
 8009710:	b508      	push	{r3, lr}
 8009712:	2006      	movs	r0, #6
 8009714:	f000 f834 	bl	8009780 <raise>
 8009718:	2001      	movs	r0, #1
 800971a:	f7f8 fdbf 	bl	800229c <_exit>

0800971e <_malloc_usable_size_r>:
 800971e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009722:	1f18      	subs	r0, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbc      	itt	lt
 8009728:	580b      	ldrlt	r3, [r1, r0]
 800972a:	18c0      	addlt	r0, r0, r3
 800972c:	4770      	bx	lr

0800972e <_raise_r>:
 800972e:	291f      	cmp	r1, #31
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	d904      	bls.n	8009742 <_raise_r+0x14>
 8009738:	2316      	movs	r3, #22
 800973a:	6003      	str	r3, [r0, #0]
 800973c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009744:	b112      	cbz	r2, 800974c <_raise_r+0x1e>
 8009746:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800974a:	b94b      	cbnz	r3, 8009760 <_raise_r+0x32>
 800974c:	4620      	mov	r0, r4
 800974e:	f000 f831 	bl	80097b4 <_getpid_r>
 8009752:	462a      	mov	r2, r5
 8009754:	4601      	mov	r1, r0
 8009756:	4620      	mov	r0, r4
 8009758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800975c:	f000 b818 	b.w	8009790 <_kill_r>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d00a      	beq.n	800977a <_raise_r+0x4c>
 8009764:	1c59      	adds	r1, r3, #1
 8009766:	d103      	bne.n	8009770 <_raise_r+0x42>
 8009768:	2316      	movs	r3, #22
 800976a:	6003      	str	r3, [r0, #0]
 800976c:	2001      	movs	r0, #1
 800976e:	e7e7      	b.n	8009740 <_raise_r+0x12>
 8009770:	2400      	movs	r4, #0
 8009772:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009776:	4628      	mov	r0, r5
 8009778:	4798      	blx	r3
 800977a:	2000      	movs	r0, #0
 800977c:	e7e0      	b.n	8009740 <_raise_r+0x12>
	...

08009780 <raise>:
 8009780:	4b02      	ldr	r3, [pc, #8]	; (800978c <raise+0xc>)
 8009782:	4601      	mov	r1, r0
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	f7ff bfd2 	b.w	800972e <_raise_r>
 800978a:	bf00      	nop
 800978c:	20000078 	.word	0x20000078

08009790 <_kill_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	; (80097b0 <_kill_r+0x20>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	4611      	mov	r1, r2
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	f7f8 fd6d 	bl	800227c <_kill>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d102      	bne.n	80097ac <_kill_r+0x1c>
 80097a6:	682b      	ldr	r3, [r5, #0]
 80097a8:	b103      	cbz	r3, 80097ac <_kill_r+0x1c>
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	bd38      	pop	{r3, r4, r5, pc}
 80097ae:	bf00      	nop
 80097b0:	20000480 	.word	0x20000480

080097b4 <_getpid_r>:
 80097b4:	f7f8 bd5a 	b.w	800226c <_getpid>

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
